[build]
  command = "npm run build:netlify"
  functions = "netlify/functions"
  publish = "dist"
  ignore = "git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF . -- ':(exclude)*.md' ':(exclude)docs/**'"

[dev]
  command = "npm run dev:vite"
  targetPort = 3002
  port = 8888
  autoLaunch = false

[build.environment]
  NODE_VERSION = "20.18.1"
  NPM_VERSION = "10.9.2"
  NODE_OPTIONS = "--max-old-space-size=4096"
  NETLIFY_USE_YARN = "false"
  NPM_FLAGS = "--no-audit --no-fund --legacy-peer-deps"
  CI = "true"
  DISABLE_ESLINT_PLUGIN = "true"
  GENERATE_SOURCEMAP = "false"
  VITE_BUILD_MODE = "production"

# Service Worker specific headers
[[headers]]
  for = "/sw.js"
  [headers.values]
    Cache-Control = "public, max-age=0, must-revalidate"
    Service-Worker-Allowed = "/"

# Crisis resources - cache for offline access but allow updates
[[headers]]
  for = "/crisis-resources.json"
  [headers.values]
    Cache-Control = "public, max-age=300, stale-while-revalidate=86400"
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, OPTIONS"

[[headers]]
  for = "/offline-coping-strategies.json"
  [headers.values]
    Cache-Control = "public, max-age=300, stale-while-revalidate=86400"
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, OPTIONS"

[[headers]]
  for = "/emergency-contacts.json"
  [headers.values]
    Cache-Control = "public, max-age=300, stale-while-revalidate=86400"
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, OPTIONS"

# Offline fallback pages
[[headers]]
  for = "/offline.html"
  [headers.values]
    Cache-Control = "public, max-age=3600, stale-while-revalidate=86400"

[[headers]]
  for = "/offline-crisis.html"
  [headers.values]
    Cache-Control = "public, max-age=3600, stale-while-revalidate=86400"

# PWA manifest
[[headers]]
  for = "/manifest.json"
  [headers.values]
    Cache-Control = "public, max-age=3600"
    Content-Type = "application/manifest+json"

# JavaScript files - BULLETPROOF MIME type handling (most specific first)
[[headers]]
  for = "/assets/js/index-*.js"
  [headers.values]
    Content-Type = "application/javascript; charset=UTF-8"
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "/assets/js/*.js"
  [headers.values]
    Content-Type = "application/javascript; charset=UTF-8"
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

# CSS files - ensure proper MIME type
[[headers]]
  for = "/assets/css/*.css"
  [headers.values]
    Content-Type = "text/css; charset=UTF-8"
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

# Static assets - long cache with immutable content
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

# Icons and images
[[headers]]
  for = "/*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "/*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "/*.ico"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

# HTML pages - short cache to allow updates
[[headers]]
  for = "/*.html"
  [headers.values]
    Cache-Control = "public, max-age=0, must-revalidate"
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

# Security headers for all pages
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "geolocation=(), microphone=(), camera=(), payment=(), usb=()"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob: https:; connect-src 'self' https: wss:; media-src 'self' blob:; object-src 'none'; base-uri 'self'"

# Redirect HTTP to HTTPS
[[redirects]]
  from = "http://astralcorev2.netlify.app/*"
  to = "https://astralcorev2.netlify.app/:splat"
  status = 301
  force = true

# API routes to Netlify Functions (HIGHEST PRIORITY)
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/api-:splat"
  status = 200

# Block potential security threats
[[redirects]]
  from = "/admin*"
  to = "/404.html"
  status = 404

[[redirects]]
  from = "/.env*"
  to = "/404.html"
  status = 404

[[redirects]]
  from = "/config*"
  to = "/404.html"
  status = 404

# Static assets - prevent SPA fallback
[[redirects]]
  from = "/assets/*"
  to = "/assets/:splat"
  status = 200
  force = true

# Videos - prevent SPA fallback
[[redirects]]
  from = "/Videos/*"
  to = "/Videos/:splat"
  status = 200
  force = true

# PWA and static files - prevent SPA fallback
[[redirects]]
  from = "/manifest.json"
  to = "/manifest.json"
  status = 200
  force = true

[[redirects]]
  from = "/sw.js"
  to = "/sw.js"
  status = 200
  force = true

[[redirects]]
  from = "/service-worker.js"
  to = "/service-worker.js"
  status = 200
  force = true

[[redirects]]
  from = "/*.png"
  to = "/:splat.png"
  status = 200
  force = true

[[redirects]]
  from = "/*.svg"
  to = "/:splat.svg"
  status = 200
  force = true

[[redirects]]
  from = "/*.ico"
  to = "/:splat.ico"
  status = 200
  force = true

[[redirects]]
  from = "/*.json"
  to = "/:splat.json"
  status = 200
  force = true

[[redirects]]
  from = "/*.txt"
  to = "/:splat.txt"
  status = 200
  force = true

[[redirects]]
  from = "/*.xml"
  to = "/:splat.xml"
  status = 200
  force = true

# Crisis page fallback when offline
[[redirects]]
  from = "/crisis"
  to = "/offline-crisis.html"
  status = 200
  conditions = {Role = ["offline"]}

# SPA fallback - serve index.html for client-side routing (LOWEST PRIORITY)
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Environment-specific settings
[context.production]
  command = "npm run build:netlify"
  [context.production.environment]
    NODE_ENV = "production"
    VITE_BUILD_MODE = "production"
    NEXT_PUBLIC_APP_URL = "https://astralcorev2.netlify.app"
    CI = "true"

[context.development]
  command = "npm run dev:vite"
  targetPort = 3002
  [context.development.environment]
    NODE_ENV = "development"
    VITE_BUILD_MODE = "development"

[context.branch-deploy]
  [context.branch-deploy.environment]
    NODE_ENV = "development"
    VITE_BUILD_MODE = "development"

[context.deploy-preview]
  [context.deploy-preview.environment]
    NODE_ENV = "staging"
    VITE_BUILD_MODE = "staging"

# Edge functions for crisis detection (future enhancement)
# [[edge_functions]]
#   function = "crisis-detector"
#   path = "/api/crisis-detection"

# Plugin configurations
[[plugins]]
  package = "netlify-plugin-submit-sitemap"
  [plugins.inputs]
    baseUrl = "https://astralcorev2.netlify.app"
    sitemapPath = "/sitemap.xml"
    ignorePeriod = 0


# Performance optimizations - DISABLED to prevent conflicts with Vite
[build.processing]
  skip_processing = true
