var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __glob = (map2) => (path2) => {
  var fn = map2[path2];
  if (fn) return fn();
  throw new Error("Module not found in bundle: " + path2);
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all2) => {
  for (var name2 in all2)
    __defProp(target, name2, { get: all2[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l3 = Symbol.for("react.element");
    var n3 = Symbol.for("react.portal");
    var p3 = Symbol.for("react.fragment");
    var q3 = Symbol.for("react.strict_mode");
    var r3 = Symbol.for("react.profiler");
    var t4 = Symbol.for("react.provider");
    var u3 = Symbol.for("react.context");
    var v3 = Symbol.for("react.forward_ref");
    var w3 = Symbol.for("react.suspense");
    var x3 = Symbol.for("react.memo");
    var y3 = Symbol.for("react.lazy");
    var z2 = Symbol.iterator;
    function A3(a3) {
      if (null === a3 || "object" !== typeof a3) return null;
      a3 = z2 && a3[z2] || a3["@@iterator"];
      return "function" === typeof a3 ? a3 : null;
    }
    var B3 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var C3 = Object.assign;
    var D2 = {};
    function E3(a3, b3, e4) {
      this.props = a3;
      this.context = b3;
      this.refs = D2;
      this.updater = e4 || B3;
    }
    E3.prototype.isReactComponent = {};
    E3.prototype.setState = function(a3, b3) {
      if ("object" !== typeof a3 && "function" !== typeof a3 && null != a3) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a3, b3, "setState");
    };
    E3.prototype.forceUpdate = function(a3) {
      this.updater.enqueueForceUpdate(this, a3, "forceUpdate");
    };
    function F3() {
    }
    F3.prototype = E3.prototype;
    function G2(a3, b3, e4) {
      this.props = a3;
      this.context = b3;
      this.refs = D2;
      this.updater = e4 || B3;
    }
    var H3 = G2.prototype = new F3();
    H3.constructor = G2;
    C3(H3, E3.prototype);
    H3.isPureReactComponent = true;
    var I3 = Array.isArray;
    var J2 = Object.prototype.hasOwnProperty;
    var K2 = { current: null };
    var L3 = { key: true, ref: true, __self: true, __source: true };
    function M3(a3, b3, e4) {
      var d3, c3 = {}, k3 = null, h3 = null;
      if (null != b3) for (d3 in void 0 !== b3.ref && (h3 = b3.ref), void 0 !== b3.key && (k3 = "" + b3.key), b3) J2.call(b3, d3) && !L3.hasOwnProperty(d3) && (c3[d3] = b3[d3]);
      var g3 = arguments.length - 2;
      if (1 === g3) c3.children = e4;
      else if (1 < g3) {
        for (var f3 = Array(g3), m3 = 0; m3 < g3; m3++) f3[m3] = arguments[m3 + 2];
        c3.children = f3;
      }
      if (a3 && a3.defaultProps) for (d3 in g3 = a3.defaultProps, g3) void 0 === c3[d3] && (c3[d3] = g3[d3]);
      return { $$typeof: l3, type: a3, key: k3, ref: h3, props: c3, _owner: K2.current };
    }
    function N3(a3, b3) {
      return { $$typeof: l3, type: a3.type, key: b3, ref: a3.ref, props: a3.props, _owner: a3._owner };
    }
    function O3(a3) {
      return "object" === typeof a3 && null !== a3 && a3.$$typeof === l3;
    }
    function escape2(a3) {
      var b3 = { "=": "=0", ":": "=2" };
      return "$" + a3.replace(/[=:]/g, function(a4) {
        return b3[a4];
      });
    }
    var P3 = /\/+/g;
    function Q2(a3, b3) {
      return "object" === typeof a3 && null !== a3 && null != a3.key ? escape2("" + a3.key) : b3.toString(36);
    }
    function R2(a3, b3, e4, d3, c3) {
      var k3 = typeof a3;
      if ("undefined" === k3 || "boolean" === k3) a3 = null;
      var h3 = false;
      if (null === a3) h3 = true;
      else switch (k3) {
        case "string":
        case "number":
          h3 = true;
          break;
        case "object":
          switch (a3.$$typeof) {
            case l3:
            case n3:
              h3 = true;
          }
      }
      if (h3) return h3 = a3, c3 = c3(h3), a3 = "" === d3 ? "." + Q2(h3, 0) : d3, I3(c3) ? (e4 = "", null != a3 && (e4 = a3.replace(P3, "$&/") + "/"), R2(c3, b3, e4, "", function(a4) {
        return a4;
      })) : null != c3 && (O3(c3) && (c3 = N3(c3, e4 + (!c3.key || h3 && h3.key === c3.key ? "" : ("" + c3.key).replace(P3, "$&/") + "/") + a3)), b3.push(c3)), 1;
      h3 = 0;
      d3 = "" === d3 ? "." : d3 + ":";
      if (I3(a3)) for (var g3 = 0; g3 < a3.length; g3++) {
        k3 = a3[g3];
        var f3 = d3 + Q2(k3, g3);
        h3 += R2(k3, b3, e4, f3, c3);
      }
      else if (f3 = A3(a3), "function" === typeof f3) for (a3 = f3.call(a3), g3 = 0; !(k3 = a3.next()).done; ) k3 = k3.value, f3 = d3 + Q2(k3, g3++), h3 += R2(k3, b3, e4, f3, c3);
      else if ("object" === k3) throw b3 = String(a3), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b3 ? "object with keys {" + Object.keys(a3).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
      return h3;
    }
    function S3(a3, b3, e4) {
      if (null == a3) return a3;
      var d3 = [], c3 = 0;
      R2(a3, d3, "", "", function(a4) {
        return b3.call(e4, a4, c3++);
      });
      return d3;
    }
    function T3(a3) {
      if (-1 === a3._status) {
        var b3 = a3._result;
        b3 = b3();
        b3.then(function(b4) {
          if (0 === a3._status || -1 === a3._status) a3._status = 1, a3._result = b4;
        }, function(b4) {
          if (0 === a3._status || -1 === a3._status) a3._status = 2, a3._result = b4;
        });
        -1 === a3._status && (a3._status = 0, a3._result = b3);
      }
      if (1 === a3._status) return a3._result.default;
      throw a3._result;
    }
    var U2 = { current: null };
    var V2 = { transition: null };
    var W2 = { ReactCurrentDispatcher: U2, ReactCurrentBatchConfig: V2, ReactCurrentOwner: K2 };
    function X3() {
      throw Error("act(...) is not supported in production builds of React.");
    }
    exports.Children = { map: S3, forEach: function(a3, b3, e4) {
      S3(a3, function() {
        b3.apply(this, arguments);
      }, e4);
    }, count: function(a3) {
      var b3 = 0;
      S3(a3, function() {
        b3++;
      });
      return b3;
    }, toArray: function(a3) {
      return S3(a3, function(a4) {
        return a4;
      }) || [];
    }, only: function(a3) {
      if (!O3(a3)) throw Error("React.Children.only expected to receive a single React element child.");
      return a3;
    } };
    exports.Component = E3;
    exports.Fragment = p3;
    exports.Profiler = r3;
    exports.PureComponent = G2;
    exports.StrictMode = q3;
    exports.Suspense = w3;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W2;
    exports.act = X3;
    exports.cloneElement = function(a3, b3, e4) {
      if (null === a3 || void 0 === a3) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a3 + ".");
      var d3 = C3({}, a3.props), c3 = a3.key, k3 = a3.ref, h3 = a3._owner;
      if (null != b3) {
        void 0 !== b3.ref && (k3 = b3.ref, h3 = K2.current);
        void 0 !== b3.key && (c3 = "" + b3.key);
        if (a3.type && a3.type.defaultProps) var g3 = a3.type.defaultProps;
        for (f3 in b3) J2.call(b3, f3) && !L3.hasOwnProperty(f3) && (d3[f3] = void 0 === b3[f3] && void 0 !== g3 ? g3[f3] : b3[f3]);
      }
      var f3 = arguments.length - 2;
      if (1 === f3) d3.children = e4;
      else if (1 < f3) {
        g3 = Array(f3);
        for (var m3 = 0; m3 < f3; m3++) g3[m3] = arguments[m3 + 2];
        d3.children = g3;
      }
      return { $$typeof: l3, type: a3.type, key: c3, ref: k3, props: d3, _owner: h3 };
    };
    exports.createContext = function(a3) {
      a3 = { $$typeof: u3, _currentValue: a3, _currentValue2: a3, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a3.Provider = { $$typeof: t4, _context: a3 };
      return a3.Consumer = a3;
    };
    exports.createElement = M3;
    exports.createFactory = function(a3) {
      var b3 = M3.bind(null, a3);
      b3.type = a3;
      return b3;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a3) {
      return { $$typeof: v3, render: a3 };
    };
    exports.isValidElement = O3;
    exports.lazy = function(a3) {
      return { $$typeof: y3, _payload: { _status: -1, _result: a3 }, _init: T3 };
    };
    exports.memo = function(a3, b3) {
      return { $$typeof: x3, type: a3, compare: void 0 === b3 ? null : b3 };
    };
    exports.startTransition = function(a3) {
      var b3 = V2.transition;
      V2.transition = {};
      try {
        a3();
      } finally {
        V2.transition = b3;
      }
    };
    exports.unstable_act = X3;
    exports.useCallback = function(a3, b3) {
      return U2.current.useCallback(a3, b3);
    };
    exports.useContext = function(a3) {
      return U2.current.useContext(a3);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a3) {
      return U2.current.useDeferredValue(a3);
    };
    exports.useEffect = function(a3, b3) {
      return U2.current.useEffect(a3, b3);
    };
    exports.useId = function() {
      return U2.current.useId();
    };
    exports.useImperativeHandle = function(a3, b3, e4) {
      return U2.current.useImperativeHandle(a3, b3, e4);
    };
    exports.useInsertionEffect = function(a3, b3) {
      return U2.current.useInsertionEffect(a3, b3);
    };
    exports.useLayoutEffect = function(a3, b3) {
      return U2.current.useLayoutEffect(a3, b3);
    };
    exports.useMemo = function(a3, b3) {
      return U2.current.useMemo(a3, b3);
    };
    exports.useReducer = function(a3, b3, e4) {
      return U2.current.useReducer(a3, b3, e4);
    };
    exports.useRef = function(a3) {
      return U2.current.useRef(a3);
    };
    exports.useState = function(a3) {
      return U2.current.useState(a3);
    };
    exports.useSyncExternalStore = function(a3, b3, e4) {
      return U2.current.useSyncExternalStore(a3, b3, e4);
    };
    exports.useTransition = function() {
      return U2.current.useTransition();
    };
    exports.version = "18.3.1";
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_react_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    function f3(a3, b3) {
      var c3 = a3.length;
      a3.push(b3);
      a: for (; 0 < c3; ) {
        var d3 = c3 - 1 >>> 1, e4 = a3[d3];
        if (0 < g3(e4, b3)) a3[d3] = b3, a3[c3] = e4, c3 = d3;
        else break a;
      }
    }
    function h3(a3) {
      return 0 === a3.length ? null : a3[0];
    }
    function k3(a3) {
      if (0 === a3.length) return null;
      var b3 = a3[0], c3 = a3.pop();
      if (c3 !== b3) {
        a3[0] = c3;
        a: for (var d3 = 0, e4 = a3.length, w3 = e4 >>> 1; d3 < w3; ) {
          var m3 = 2 * (d3 + 1) - 1, C3 = a3[m3], n3 = m3 + 1, x3 = a3[n3];
          if (0 > g3(C3, c3)) n3 < e4 && 0 > g3(x3, C3) ? (a3[d3] = x3, a3[n3] = c3, d3 = n3) : (a3[d3] = C3, a3[m3] = c3, d3 = m3);
          else if (n3 < e4 && 0 > g3(x3, c3)) a3[d3] = x3, a3[n3] = c3, d3 = n3;
          else break a;
        }
      }
      return b3;
    }
    function g3(a3, b3) {
      var c3 = a3.sortIndex - b3.sortIndex;
      return 0 !== c3 ? c3 : a3.id - b3.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      l3 = performance;
      exports.unstable_now = function() {
        return l3.now();
      };
    } else {
      p3 = Date, q3 = p3.now();
      exports.unstable_now = function() {
        return p3.now() - q3;
      };
    }
    var l3;
    var p3;
    var q3;
    var r3 = [];
    var t4 = [];
    var u3 = 1;
    var v3 = null;
    var y3 = 3;
    var z2 = false;
    var A3 = false;
    var B3 = false;
    var D2 = "function" === typeof setTimeout ? setTimeout : null;
    var E3 = "function" === typeof clearTimeout ? clearTimeout : null;
    var F3 = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G2(a3) {
      for (var b3 = h3(t4); null !== b3; ) {
        if (null === b3.callback) k3(t4);
        else if (b3.startTime <= a3) k3(t4), b3.sortIndex = b3.expirationTime, f3(r3, b3);
        else break;
        b3 = h3(t4);
      }
    }
    function H3(a3) {
      B3 = false;
      G2(a3);
      if (!A3) if (null !== h3(r3)) A3 = true, I3(J2);
      else {
        var b3 = h3(t4);
        null !== b3 && K2(H3, b3.startTime - a3);
      }
    }
    function J2(a3, b3) {
      A3 = false;
      B3 && (B3 = false, E3(L3), L3 = -1);
      z2 = true;
      var c3 = y3;
      try {
        G2(b3);
        for (v3 = h3(r3); null !== v3 && (!(v3.expirationTime > b3) || a3 && !M3()); ) {
          var d3 = v3.callback;
          if ("function" === typeof d3) {
            v3.callback = null;
            y3 = v3.priorityLevel;
            var e4 = d3(v3.expirationTime <= b3);
            b3 = exports.unstable_now();
            "function" === typeof e4 ? v3.callback = e4 : v3 === h3(r3) && k3(r3);
            G2(b3);
          } else k3(r3);
          v3 = h3(r3);
        }
        if (null !== v3) var w3 = true;
        else {
          var m3 = h3(t4);
          null !== m3 && K2(H3, m3.startTime - b3);
          w3 = false;
        }
        return w3;
      } finally {
        v3 = null, y3 = c3, z2 = false;
      }
    }
    var N3 = false;
    var O3 = null;
    var L3 = -1;
    var P3 = 5;
    var Q2 = -1;
    function M3() {
      return exports.unstable_now() - Q2 < P3 ? false : true;
    }
    function R2() {
      if (null !== O3) {
        var a3 = exports.unstable_now();
        Q2 = a3;
        var b3 = true;
        try {
          b3 = O3(true, a3);
        } finally {
          b3 ? S3() : (N3 = false, O3 = null);
        }
      } else N3 = false;
    }
    var S3;
    if ("function" === typeof F3) S3 = function() {
      F3(R2);
    };
    else if ("undefined" !== typeof MessageChannel) {
      T3 = new MessageChannel(), U2 = T3.port2;
      T3.port1.onmessage = R2;
      S3 = function() {
        U2.postMessage(null);
      };
    } else S3 = function() {
      D2(R2, 0);
    };
    var T3;
    var U2;
    function I3(a3) {
      O3 = a3;
      N3 || (N3 = true, S3());
    }
    function K2(a3, b3) {
      L3 = D2(function() {
        a3(exports.unstable_now());
      }, b3);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a3) {
      a3.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A3 || z2 || (A3 = true, I3(J2));
    };
    exports.unstable_forceFrameRate = function(a3) {
      0 > a3 || 125 < a3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P3 = 0 < a3 ? Math.floor(1e3 / a3) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y3;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h3(r3);
    };
    exports.unstable_next = function(a3) {
      switch (y3) {
        case 1:
        case 2:
        case 3:
          var b3 = 3;
          break;
        default:
          b3 = y3;
      }
      var c3 = y3;
      y3 = b3;
      try {
        return a3();
      } finally {
        y3 = c3;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a3, b3) {
      switch (a3) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a3 = 3;
      }
      var c3 = y3;
      y3 = a3;
      try {
        return b3();
      } finally {
        y3 = c3;
      }
    };
    exports.unstable_scheduleCallback = function(a3, b3, c3) {
      var d3 = exports.unstable_now();
      "object" === typeof c3 && null !== c3 ? (c3 = c3.delay, c3 = "number" === typeof c3 && 0 < c3 ? d3 + c3 : d3) : c3 = d3;
      switch (a3) {
        case 1:
          var e4 = -1;
          break;
        case 2:
          e4 = 250;
          break;
        case 5:
          e4 = 1073741823;
          break;
        case 4:
          e4 = 1e4;
          break;
        default:
          e4 = 5e3;
      }
      e4 = c3 + e4;
      a3 = { id: u3++, callback: b3, priorityLevel: a3, startTime: c3, expirationTime: e4, sortIndex: -1 };
      c3 > d3 ? (a3.sortIndex = c3, f3(t4, a3), null === h3(r3) && a3 === h3(t4) && (B3 ? (E3(L3), L3 = -1) : B3 = true, K2(H3, c3 - d3))) : (a3.sortIndex = e4, f3(r3, a3), A3 || z2 || (A3 = true, I3(J2)));
      return a3;
    };
    exports.unstable_shouldYield = M3;
    exports.unstable_wrapCallback = function(a3) {
      var b3 = y3;
      return function() {
        var c3 = y3;
        y3 = b3;
        try {
          return a3.apply(this, arguments);
        } finally {
          y3 = c3;
        }
      };
    };
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_scheduler_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ca = require_scheduler();
    function p3(a3) {
      for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c3 = 1; c3 < arguments.length; c3++) b3 += "&args[]=" + encodeURIComponent(arguments[c3]);
      return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set();
    var ea = {};
    function fa(a3, b3) {
      ha(a3, b3);
      ha(a3 + "Capture", b3);
    }
    function ha(a3, b3) {
      ea[a3] = b3;
      for (a3 = 0; a3 < b3.length; a3++) da.add(b3[a3]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
    var ja = Object.prototype.hasOwnProperty;
    var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var la = {};
    var ma = {};
    function oa(a3) {
      if (ja.call(ma, a3)) return true;
      if (ja.call(la, a3)) return false;
      if (ka.test(a3)) return ma[a3] = true;
      la[a3] = true;
      return false;
    }
    function pa(a3, b3, c3, d3) {
      if (null !== c3 && 0 === c3.type) return false;
      switch (typeof b3) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d3) return false;
          if (null !== c3) return !c3.acceptsBooleans;
          a3 = a3.toLowerCase().slice(0, 5);
          return "data-" !== a3 && "aria-" !== a3;
        default:
          return false;
      }
    }
    function qa(a3, b3, c3, d3) {
      if (null === b3 || "undefined" === typeof b3 || pa(a3, b3, c3, d3)) return true;
      if (d3) return false;
      if (null !== c3) switch (c3.type) {
        case 3:
          return !b3;
        case 4:
          return false === b3;
        case 5:
          return isNaN(b3);
        case 6:
          return isNaN(b3) || 1 > b3;
      }
      return false;
    }
    function v3(a3, b3, c3, d3, e4, f3, g3) {
      this.acceptsBooleans = 2 === b3 || 3 === b3 || 4 === b3;
      this.attributeName = d3;
      this.attributeNamespace = e4;
      this.mustUseProperty = c3;
      this.propertyName = a3;
      this.type = b3;
      this.sanitizeURL = f3;
      this.removeEmptyString = g3;
    }
    var z2 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
      z2[a3] = new v3(a3, 0, false, a3, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
      var b3 = a3[0];
      z2[b3] = new v3(b3, 1, false, a3[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
      z2[a3] = new v3(a3, 2, false, a3.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
      z2[a3] = new v3(a3, 2, false, a3, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
      z2[a3] = new v3(a3, 3, false, a3.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
      z2[a3] = new v3(a3, 3, true, a3, null, false, false);
    });
    ["capture", "download"].forEach(function(a3) {
      z2[a3] = new v3(a3, 4, false, a3, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a3) {
      z2[a3] = new v3(a3, 6, false, a3, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a3) {
      z2[a3] = new v3(a3, 5, false, a3.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a3) {
      return a3[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
      var b3 = a3.replace(
        ra,
        sa
      );
      z2[b3] = new v3(b3, 1, false, a3, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
      var b3 = a3.replace(ra, sa);
      z2[b3] = new v3(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
      var b3 = a3.replace(ra, sa);
      z2[b3] = new v3(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a3) {
      z2[a3] = new v3(a3, 1, false, a3.toLowerCase(), null, false, false);
    });
    z2.xlinkHref = new v3("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a3) {
      z2[a3] = new v3(a3, 1, false, a3.toLowerCase(), null, true, true);
    });
    function ta(a3, b3, c3, d3) {
      var e4 = z2.hasOwnProperty(b3) ? z2[b3] : null;
      if (null !== e4 ? 0 !== e4.type : d3 || !(2 < b3.length) || "o" !== b3[0] && "O" !== b3[0] || "n" !== b3[1] && "N" !== b3[1]) qa(b3, c3, e4, d3) && (c3 = null), d3 || null === e4 ? oa(b3) && (null === c3 ? a3.removeAttribute(b3) : a3.setAttribute(b3, "" + c3)) : e4.mustUseProperty ? a3[e4.propertyName] = null === c3 ? 3 === e4.type ? false : "" : c3 : (b3 = e4.attributeName, d3 = e4.attributeNamespace, null === c3 ? a3.removeAttribute(b3) : (e4 = e4.type, c3 = 3 === e4 || 4 === e4 && true === c3 ? "" : "" + c3, d3 ? a3.setAttributeNS(d3, b3, c3) : a3.setAttribute(b3, c3)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var va = Symbol.for("react.element");
    var wa = Symbol.for("react.portal");
    var ya = Symbol.for("react.fragment");
    var za = Symbol.for("react.strict_mode");
    var Aa = Symbol.for("react.profiler");
    var Ba = Symbol.for("react.provider");
    var Ca = Symbol.for("react.context");
    var Da = Symbol.for("react.forward_ref");
    var Ea = Symbol.for("react.suspense");
    var Fa = Symbol.for("react.suspense_list");
    var Ga = Symbol.for("react.memo");
    var Ha = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var Ia = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ja = Symbol.iterator;
    function Ka(a3) {
      if (null === a3 || "object" !== typeof a3) return null;
      a3 = Ja && a3[Ja] || a3["@@iterator"];
      return "function" === typeof a3 ? a3 : null;
    }
    var A3 = Object.assign;
    var La;
    function Ma(a3) {
      if (void 0 === La) try {
        throw Error();
      } catch (c3) {
        var b3 = c3.stack.trim().match(/\n( *(at )?)/);
        La = b3 && b3[1] || "";
      }
      return "\n" + La + a3;
    }
    var Na = false;
    function Oa(a3, b3) {
      if (!a3 || Na) return "";
      Na = true;
      var c3 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b3) if (b3 = function() {
          throw Error();
        }, Object.defineProperty(b3.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b3, []);
          } catch (l3) {
            var d3 = l3;
          }
          Reflect.construct(a3, [], b3);
        } else {
          try {
            b3.call();
          } catch (l3) {
            d3 = l3;
          }
          a3.call(b3.prototype);
        }
        else {
          try {
            throw Error();
          } catch (l3) {
            d3 = l3;
          }
          a3();
        }
      } catch (l3) {
        if (l3 && d3 && "string" === typeof l3.stack) {
          for (var e4 = l3.stack.split("\n"), f3 = d3.stack.split("\n"), g3 = e4.length - 1, h3 = f3.length - 1; 1 <= g3 && 0 <= h3 && e4[g3] !== f3[h3]; ) h3--;
          for (; 1 <= g3 && 0 <= h3; g3--, h3--) if (e4[g3] !== f3[h3]) {
            if (1 !== g3 || 1 !== h3) {
              do
                if (g3--, h3--, 0 > h3 || e4[g3] !== f3[h3]) {
                  var k3 = "\n" + e4[g3].replace(" at new ", " at ");
                  a3.displayName && k3.includes("<anonymous>") && (k3 = k3.replace("<anonymous>", a3.displayName));
                  return k3;
                }
              while (1 <= g3 && 0 <= h3);
            }
            break;
          }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c3;
      }
      return (a3 = a3 ? a3.displayName || a3.name : "") ? Ma(a3) : "";
    }
    function Pa(a3) {
      switch (a3.tag) {
        case 5:
          return Ma(a3.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a3 = Oa(a3.type, false), a3;
        case 11:
          return a3 = Oa(a3.type.render, false), a3;
        case 1:
          return a3 = Oa(a3.type, true), a3;
        default:
          return "";
      }
    }
    function Qa(a3) {
      if (null == a3) return null;
      if ("function" === typeof a3) return a3.displayName || a3.name || null;
      if ("string" === typeof a3) return a3;
      switch (a3) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a3) switch (a3.$$typeof) {
        case Ca:
          return (a3.displayName || "Context") + ".Consumer";
        case Ba:
          return (a3._context.displayName || "Context") + ".Provider";
        case Da:
          var b3 = a3.render;
          a3 = a3.displayName;
          a3 || (a3 = b3.displayName || b3.name || "", a3 = "" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
          return a3;
        case Ga:
          return b3 = a3.displayName || null, null !== b3 ? b3 : Qa(a3.type) || "Memo";
        case Ha:
          b3 = a3._payload;
          a3 = a3._init;
          try {
            return Qa(a3(b3));
          } catch (c3) {
          }
      }
      return null;
    }
    function Ra(a3) {
      var b3 = a3.type;
      switch (a3.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b3.displayName || "Context") + ".Consumer";
        case 10:
          return (b3._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a3 = b3.render, a3 = a3.displayName || a3.name || "", b3.displayName || ("" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b3;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b3);
        case 8:
          return b3 === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b3) return b3.displayName || b3.name || null;
          if ("string" === typeof b3) return b3;
      }
      return null;
    }
    function Sa(a3) {
      switch (typeof a3) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a3;
        case "object":
          return a3;
        default:
          return "";
      }
    }
    function Ta(a3) {
      var b3 = a3.type;
      return (a3 = a3.nodeName) && "input" === a3.toLowerCase() && ("checkbox" === b3 || "radio" === b3);
    }
    function Ua(a3) {
      var b3 = Ta(a3) ? "checked" : "value", c3 = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b3), d3 = "" + a3[b3];
      if (!a3.hasOwnProperty(b3) && "undefined" !== typeof c3 && "function" === typeof c3.get && "function" === typeof c3.set) {
        var e4 = c3.get, f3 = c3.set;
        Object.defineProperty(a3, b3, { configurable: true, get: function() {
          return e4.call(this);
        }, set: function(a4) {
          d3 = "" + a4;
          f3.call(this, a4);
        } });
        Object.defineProperty(a3, b3, { enumerable: c3.enumerable });
        return { getValue: function() {
          return d3;
        }, setValue: function(a4) {
          d3 = "" + a4;
        }, stopTracking: function() {
          a3._valueTracker = null;
          delete a3[b3];
        } };
      }
    }
    function Va(a3) {
      a3._valueTracker || (a3._valueTracker = Ua(a3));
    }
    function Wa(a3) {
      if (!a3) return false;
      var b3 = a3._valueTracker;
      if (!b3) return true;
      var c3 = b3.getValue();
      var d3 = "";
      a3 && (d3 = Ta(a3) ? a3.checked ? "true" : "false" : a3.value);
      a3 = d3;
      return a3 !== c3 ? (b3.setValue(a3), true) : false;
    }
    function Xa(a3) {
      a3 = a3 || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a3) return null;
      try {
        return a3.activeElement || a3.body;
      } catch (b3) {
        return a3.body;
      }
    }
    function Ya(a3, b3) {
      var c3 = b3.checked;
      return A3({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c3 ? c3 : a3._wrapperState.initialChecked });
    }
    function Za(a3, b3) {
      var c3 = null == b3.defaultValue ? "" : b3.defaultValue, d3 = null != b3.checked ? b3.checked : b3.defaultChecked;
      c3 = Sa(null != b3.value ? b3.value : c3);
      a3._wrapperState = { initialChecked: d3, initialValue: c3, controlled: "checkbox" === b3.type || "radio" === b3.type ? null != b3.checked : null != b3.value };
    }
    function ab(a3, b3) {
      b3 = b3.checked;
      null != b3 && ta(a3, "checked", b3, false);
    }
    function bb(a3, b3) {
      ab(a3, b3);
      var c3 = Sa(b3.value), d3 = b3.type;
      if (null != c3) if ("number" === d3) {
        if (0 === c3 && "" === a3.value || a3.value != c3) a3.value = "" + c3;
      } else a3.value !== "" + c3 && (a3.value = "" + c3);
      else if ("submit" === d3 || "reset" === d3) {
        a3.removeAttribute("value");
        return;
      }
      b3.hasOwnProperty("value") ? cb(a3, b3.type, c3) : b3.hasOwnProperty("defaultValue") && cb(a3, b3.type, Sa(b3.defaultValue));
      null == b3.checked && null != b3.defaultChecked && (a3.defaultChecked = !!b3.defaultChecked);
    }
    function db(a3, b3, c3) {
      if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
        var d3 = b3.type;
        if (!("submit" !== d3 && "reset" !== d3 || void 0 !== b3.value && null !== b3.value)) return;
        b3 = "" + a3._wrapperState.initialValue;
        c3 || b3 === a3.value || (a3.value = b3);
        a3.defaultValue = b3;
      }
      c3 = a3.name;
      "" !== c3 && (a3.name = "");
      a3.defaultChecked = !!a3._wrapperState.initialChecked;
      "" !== c3 && (a3.name = c3);
    }
    function cb(a3, b3, c3) {
      if ("number" !== b3 || Xa(a3.ownerDocument) !== a3) null == c3 ? a3.defaultValue = "" + a3._wrapperState.initialValue : a3.defaultValue !== "" + c3 && (a3.defaultValue = "" + c3);
    }
    var eb = Array.isArray;
    function fb(a3, b3, c3, d3) {
      a3 = a3.options;
      if (b3) {
        b3 = {};
        for (var e4 = 0; e4 < c3.length; e4++) b3["$" + c3[e4]] = true;
        for (c3 = 0; c3 < a3.length; c3++) e4 = b3.hasOwnProperty("$" + a3[c3].value), a3[c3].selected !== e4 && (a3[c3].selected = e4), e4 && d3 && (a3[c3].defaultSelected = true);
      } else {
        c3 = "" + Sa(c3);
        b3 = null;
        for (e4 = 0; e4 < a3.length; e4++) {
          if (a3[e4].value === c3) {
            a3[e4].selected = true;
            d3 && (a3[e4].defaultSelected = true);
            return;
          }
          null !== b3 || a3[e4].disabled || (b3 = a3[e4]);
        }
        null !== b3 && (b3.selected = true);
      }
    }
    function gb(a3, b3) {
      if (null != b3.dangerouslySetInnerHTML) throw Error(p3(91));
      return A3({}, b3, { value: void 0, defaultValue: void 0, children: "" + a3._wrapperState.initialValue });
    }
    function hb(a3, b3) {
      var c3 = b3.value;
      if (null == c3) {
        c3 = b3.children;
        b3 = b3.defaultValue;
        if (null != c3) {
          if (null != b3) throw Error(p3(92));
          if (eb(c3)) {
            if (1 < c3.length) throw Error(p3(93));
            c3 = c3[0];
          }
          b3 = c3;
        }
        null == b3 && (b3 = "");
        c3 = b3;
      }
      a3._wrapperState = { initialValue: Sa(c3) };
    }
    function ib(a3, b3) {
      var c3 = Sa(b3.value), d3 = Sa(b3.defaultValue);
      null != c3 && (c3 = "" + c3, c3 !== a3.value && (a3.value = c3), null == b3.defaultValue && a3.defaultValue !== c3 && (a3.defaultValue = c3));
      null != d3 && (a3.defaultValue = "" + d3);
    }
    function jb(a3) {
      var b3 = a3.textContent;
      b3 === a3._wrapperState.initialValue && "" !== b3 && null !== b3 && (a3.value = b3);
    }
    function kb(a3) {
      switch (a3) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a3, b3) {
      return null == a3 || "http://www.w3.org/1999/xhtml" === a3 ? kb(b3) : "http://www.w3.org/2000/svg" === a3 && "foreignObject" === b3 ? "http://www.w3.org/1999/xhtml" : a3;
    }
    var mb;
    var nb = function(a3) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b3, c3, d3, e4) {
        MSApp.execUnsafeLocalFunction(function() {
          return a3(b3, c3, d3, e4);
        });
      } : a3;
    }(function(a3, b3) {
      if ("http://www.w3.org/2000/svg" !== a3.namespaceURI || "innerHTML" in a3) a3.innerHTML = b3;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
        for (b3 = mb.firstChild; a3.firstChild; ) a3.removeChild(a3.firstChild);
        for (; b3.firstChild; ) a3.appendChild(b3.firstChild);
      }
    });
    function ob(a3, b3) {
      if (b3) {
        var c3 = a3.firstChild;
        if (c3 && c3 === a3.lastChild && 3 === c3.nodeType) {
          c3.nodeValue = b3;
          return;
        }
      }
      a3.textContent = b3;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a3) {
      qb.forEach(function(b3) {
        b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
        pb[b3] = pb[a3];
      });
    });
    function rb(a3, b3, c3) {
      return null == b3 || "boolean" === typeof b3 || "" === b3 ? "" : c3 || "number" !== typeof b3 || 0 === b3 || pb.hasOwnProperty(a3) && pb[a3] ? ("" + b3).trim() : b3 + "px";
    }
    function sb(a3, b3) {
      a3 = a3.style;
      for (var c3 in b3) if (b3.hasOwnProperty(c3)) {
        var d3 = 0 === c3.indexOf("--"), e4 = rb(c3, b3[c3], d3);
        "float" === c3 && (c3 = "cssFloat");
        d3 ? a3.setProperty(c3, e4) : a3[c3] = e4;
      }
    }
    var tb = A3({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a3, b3) {
      if (b3) {
        if (tb[a3] && (null != b3.children || null != b3.dangerouslySetInnerHTML)) throw Error(p3(137, a3));
        if (null != b3.dangerouslySetInnerHTML) {
          if (null != b3.children) throw Error(p3(60));
          if ("object" !== typeof b3.dangerouslySetInnerHTML || !("__html" in b3.dangerouslySetInnerHTML)) throw Error(p3(61));
        }
        if (null != b3.style && "object" !== typeof b3.style) throw Error(p3(62));
      }
    }
    function vb(a3, b3) {
      if (-1 === a3.indexOf("-")) return "string" === typeof b3.is;
      switch (a3) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a3) {
      a3 = a3.target || a3.srcElement || window;
      a3.correspondingUseElement && (a3 = a3.correspondingUseElement);
      return 3 === a3.nodeType ? a3.parentNode : a3;
    }
    var yb = null;
    var zb = null;
    var Ab = null;
    function Bb(a3) {
      if (a3 = Cb(a3)) {
        if ("function" !== typeof yb) throw Error(p3(280));
        var b3 = a3.stateNode;
        b3 && (b3 = Db(b3), yb(a3.stateNode, a3.type, b3));
      }
    }
    function Eb(a3) {
      zb ? Ab ? Ab.push(a3) : Ab = [a3] : zb = a3;
    }
    function Fb() {
      if (zb) {
        var a3 = zb, b3 = Ab;
        Ab = zb = null;
        Bb(a3);
        if (b3) for (a3 = 0; a3 < b3.length; a3++) Bb(b3[a3]);
      }
    }
    function Gb(a3, b3) {
      return a3(b3);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a3, b3, c3) {
      if (Ib) return a3(b3, c3);
      Ib = true;
      try {
        return Gb(a3, b3, c3);
      } finally {
        if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
      }
    }
    function Kb(a3, b3) {
      var c3 = a3.stateNode;
      if (null === c3) return null;
      var d3 = Db(c3);
      if (null === d3) return null;
      c3 = d3[b3];
      a: switch (b3) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d3 = !d3.disabled) || (a3 = a3.type, d3 = !("button" === a3 || "input" === a3 || "select" === a3 || "textarea" === a3));
          a3 = !d3;
          break a;
        default:
          a3 = false;
      }
      if (a3) return null;
      if (c3 && "function" !== typeof c3) throw Error(p3(231, b3, typeof c3));
      return c3;
    }
    var Lb = false;
    if (ia) try {
      Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a3) {
      Lb = false;
    }
    var Mb;
    function Nb(a3, b3, c3, d3, e4, f3, g3, h3, k3) {
      var l3 = Array.prototype.slice.call(arguments, 3);
      try {
        b3.apply(c3, l3);
      } catch (m3) {
        this.onError(m3);
      }
    }
    var Ob = false;
    var Pb = null;
    var Qb = false;
    var Rb = null;
    var Sb = { onError: function(a3) {
      Ob = true;
      Pb = a3;
    } };
    function Tb(a3, b3, c3, d3, e4, f3, g3, h3, k3) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a3, b3, c3, d3, e4, f3, g3, h3, k3) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l3 = Pb;
          Ob = false;
          Pb = null;
        } else throw Error(p3(198));
        Qb || (Qb = true, Rb = l3);
      }
    }
    function Vb(a3) {
      var b3 = a3, c3 = a3;
      if (a3.alternate) for (; b3.return; ) b3 = b3.return;
      else {
        a3 = b3;
        do
          b3 = a3, 0 !== (b3.flags & 4098) && (c3 = b3.return), a3 = b3.return;
        while (a3);
      }
      return 3 === b3.tag ? c3 : null;
    }
    function Wb(a3) {
      if (13 === a3.tag) {
        var b3 = a3.memoizedState;
        null === b3 && (a3 = a3.alternate, null !== a3 && (b3 = a3.memoizedState));
        if (null !== b3) return b3.dehydrated;
      }
      return null;
    }
    function Xb(a3) {
      if (Vb(a3) !== a3) throw Error(p3(188));
    }
    function Yb(a3) {
      var b3 = a3.alternate;
      if (!b3) {
        b3 = Vb(a3);
        if (null === b3) throw Error(p3(188));
        return b3 !== a3 ? null : a3;
      }
      for (var c3 = a3, d3 = b3; ; ) {
        var e4 = c3.return;
        if (null === e4) break;
        var f3 = e4.alternate;
        if (null === f3) {
          d3 = e4.return;
          if (null !== d3) {
            c3 = d3;
            continue;
          }
          break;
        }
        if (e4.child === f3.child) {
          for (f3 = e4.child; f3; ) {
            if (f3 === c3) return Xb(e4), a3;
            if (f3 === d3) return Xb(e4), b3;
            f3 = f3.sibling;
          }
          throw Error(p3(188));
        }
        if (c3.return !== d3.return) c3 = e4, d3 = f3;
        else {
          for (var g3 = false, h3 = e4.child; h3; ) {
            if (h3 === c3) {
              g3 = true;
              c3 = e4;
              d3 = f3;
              break;
            }
            if (h3 === d3) {
              g3 = true;
              d3 = e4;
              c3 = f3;
              break;
            }
            h3 = h3.sibling;
          }
          if (!g3) {
            for (h3 = f3.child; h3; ) {
              if (h3 === c3) {
                g3 = true;
                c3 = f3;
                d3 = e4;
                break;
              }
              if (h3 === d3) {
                g3 = true;
                d3 = f3;
                c3 = e4;
                break;
              }
              h3 = h3.sibling;
            }
            if (!g3) throw Error(p3(189));
          }
        }
        if (c3.alternate !== d3) throw Error(p3(190));
      }
      if (3 !== c3.tag) throw Error(p3(188));
      return c3.stateNode.current === c3 ? a3 : b3;
    }
    function Zb(a3) {
      a3 = Yb(a3);
      return null !== a3 ? $b(a3) : null;
    }
    function $b(a3) {
      if (5 === a3.tag || 6 === a3.tag) return a3;
      for (a3 = a3.child; null !== a3; ) {
        var b3 = $b(a3);
        if (null !== b3) return b3;
        a3 = a3.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback;
    var bc = ca.unstable_cancelCallback;
    var cc = ca.unstable_shouldYield;
    var dc = ca.unstable_requestPaint;
    var B3 = ca.unstable_now;
    var ec = ca.unstable_getCurrentPriorityLevel;
    var fc = ca.unstable_ImmediatePriority;
    var gc = ca.unstable_UserBlockingPriority;
    var hc = ca.unstable_NormalPriority;
    var ic = ca.unstable_LowPriority;
    var jc = ca.unstable_IdlePriority;
    var kc = null;
    var lc = null;
    function mc(a3) {
      if (lc && "function" === typeof lc.onCommitFiberRoot) try {
        lc.onCommitFiberRoot(kc, a3, void 0, 128 === (a3.current.flags & 128));
      } catch (b3) {
      }
    }
    var oc = Math.clz32 ? Math.clz32 : nc;
    var pc = Math.log;
    var qc = Math.LN2;
    function nc(a3) {
      a3 >>>= 0;
      return 0 === a3 ? 32 : 31 - (pc(a3) / qc | 0) | 0;
    }
    var rc = 64;
    var sc = 4194304;
    function tc(a3) {
      switch (a3 & -a3) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a3 & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a3 & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a3;
      }
    }
    function uc(a3, b3) {
      var c3 = a3.pendingLanes;
      if (0 === c3) return 0;
      var d3 = 0, e4 = a3.suspendedLanes, f3 = a3.pingedLanes, g3 = c3 & 268435455;
      if (0 !== g3) {
        var h3 = g3 & ~e4;
        0 !== h3 ? d3 = tc(h3) : (f3 &= g3, 0 !== f3 && (d3 = tc(f3)));
      } else g3 = c3 & ~e4, 0 !== g3 ? d3 = tc(g3) : 0 !== f3 && (d3 = tc(f3));
      if (0 === d3) return 0;
      if (0 !== b3 && b3 !== d3 && 0 === (b3 & e4) && (e4 = d3 & -d3, f3 = b3 & -b3, e4 >= f3 || 16 === e4 && 0 !== (f3 & 4194240))) return b3;
      0 !== (d3 & 4) && (d3 |= c3 & 16);
      b3 = a3.entangledLanes;
      if (0 !== b3) for (a3 = a3.entanglements, b3 &= d3; 0 < b3; ) c3 = 31 - oc(b3), e4 = 1 << c3, d3 |= a3[c3], b3 &= ~e4;
      return d3;
    }
    function vc(a3, b3) {
      switch (a3) {
        case 1:
        case 2:
        case 4:
          return b3 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b3 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a3, b3) {
      for (var c3 = a3.suspendedLanes, d3 = a3.pingedLanes, e4 = a3.expirationTimes, f3 = a3.pendingLanes; 0 < f3; ) {
        var g3 = 31 - oc(f3), h3 = 1 << g3, k3 = e4[g3];
        if (-1 === k3) {
          if (0 === (h3 & c3) || 0 !== (h3 & d3)) e4[g3] = vc(h3, b3);
        } else k3 <= b3 && (a3.expiredLanes |= h3);
        f3 &= ~h3;
      }
    }
    function xc(a3) {
      a3 = a3.pendingLanes & -1073741825;
      return 0 !== a3 ? a3 : a3 & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a3 = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a3;
    }
    function zc(a3) {
      for (var b3 = [], c3 = 0; 31 > c3; c3++) b3.push(a3);
      return b3;
    }
    function Ac(a3, b3, c3) {
      a3.pendingLanes |= b3;
      536870912 !== b3 && (a3.suspendedLanes = 0, a3.pingedLanes = 0);
      a3 = a3.eventTimes;
      b3 = 31 - oc(b3);
      a3[b3] = c3;
    }
    function Bc(a3, b3) {
      var c3 = a3.pendingLanes & ~b3;
      a3.pendingLanes = b3;
      a3.suspendedLanes = 0;
      a3.pingedLanes = 0;
      a3.expiredLanes &= b3;
      a3.mutableReadLanes &= b3;
      a3.entangledLanes &= b3;
      b3 = a3.entanglements;
      var d3 = a3.eventTimes;
      for (a3 = a3.expirationTimes; 0 < c3; ) {
        var e4 = 31 - oc(c3), f3 = 1 << e4;
        b3[e4] = 0;
        d3[e4] = -1;
        a3[e4] = -1;
        c3 &= ~f3;
      }
    }
    function Cc(a3, b3) {
      var c3 = a3.entangledLanes |= b3;
      for (a3 = a3.entanglements; c3; ) {
        var d3 = 31 - oc(c3), e4 = 1 << d3;
        e4 & b3 | a3[d3] & b3 && (a3[d3] |= b3);
        c3 &= ~e4;
      }
    }
    var C3 = 0;
    function Dc(a3) {
      a3 &= -a3;
      return 1 < a3 ? 4 < a3 ? 0 !== (a3 & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec;
    var Fc;
    var Gc;
    var Hc;
    var Ic;
    var Jc = false;
    var Kc = [];
    var Lc = null;
    var Mc = null;
    var Nc = null;
    var Oc = /* @__PURE__ */ new Map();
    var Pc = /* @__PURE__ */ new Map();
    var Qc = [];
    var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a3, b3) {
      switch (a3) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b3.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b3.pointerId);
      }
    }
    function Tc(a3, b3, c3, d3, e4, f3) {
      if (null === a3 || a3.nativeEvent !== f3) return a3 = { blockedOn: b3, domEventName: c3, eventSystemFlags: d3, nativeEvent: f3, targetContainers: [e4] }, null !== b3 && (b3 = Cb(b3), null !== b3 && Fc(b3)), a3;
      a3.eventSystemFlags |= d3;
      b3 = a3.targetContainers;
      null !== e4 && -1 === b3.indexOf(e4) && b3.push(e4);
      return a3;
    }
    function Uc(a3, b3, c3, d3, e4) {
      switch (b3) {
        case "focusin":
          return Lc = Tc(Lc, a3, b3, c3, d3, e4), true;
        case "dragenter":
          return Mc = Tc(Mc, a3, b3, c3, d3, e4), true;
        case "mouseover":
          return Nc = Tc(Nc, a3, b3, c3, d3, e4), true;
        case "pointerover":
          var f3 = e4.pointerId;
          Oc.set(f3, Tc(Oc.get(f3) || null, a3, b3, c3, d3, e4));
          return true;
        case "gotpointercapture":
          return f3 = e4.pointerId, Pc.set(f3, Tc(Pc.get(f3) || null, a3, b3, c3, d3, e4)), true;
      }
      return false;
    }
    function Vc(a3) {
      var b3 = Wc(a3.target);
      if (null !== b3) {
        var c3 = Vb(b3);
        if (null !== c3) {
          if (b3 = c3.tag, 13 === b3) {
            if (b3 = Wb(c3), null !== b3) {
              a3.blockedOn = b3;
              Ic(a3.priority, function() {
                Gc(c3);
              });
              return;
            }
          } else if (3 === b3 && c3.stateNode.current.memoizedState.isDehydrated) {
            a3.blockedOn = 3 === c3.tag ? c3.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a3.blockedOn = null;
    }
    function Xc(a3) {
      if (null !== a3.blockedOn) return false;
      for (var b3 = a3.targetContainers; 0 < b3.length; ) {
        var c3 = Yc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
        if (null === c3) {
          c3 = a3.nativeEvent;
          var d3 = new c3.constructor(c3.type, c3);
          wb = d3;
          c3.target.dispatchEvent(d3);
          wb = null;
        } else return b3 = Cb(c3), null !== b3 && Fc(b3), a3.blockedOn = c3, false;
        b3.shift();
      }
      return true;
    }
    function Zc(a3, b3, c3) {
      Xc(a3) && c3.delete(b3);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a3, b3) {
      a3.blockedOn === b3 && (a3.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a3) {
      function b3(b4) {
        return ad(b4, a3);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a3);
        for (var c3 = 1; c3 < Kc.length; c3++) {
          var d3 = Kc[c3];
          d3.blockedOn === a3 && (d3.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a3);
      null !== Mc && ad(Mc, a3);
      null !== Nc && ad(Nc, a3);
      Oc.forEach(b3);
      Pc.forEach(b3);
      for (c3 = 0; c3 < Qc.length; c3++) d3 = Qc[c3], d3.blockedOn === a3 && (d3.blockedOn = null);
      for (; 0 < Qc.length && (c3 = Qc[0], null === c3.blockedOn); ) Vc(c3), null === c3.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig;
    var dd = true;
    function ed(a3, b3, c3, d3) {
      var e4 = C3, f3 = cd.transition;
      cd.transition = null;
      try {
        C3 = 1, fd(a3, b3, c3, d3);
      } finally {
        C3 = e4, cd.transition = f3;
      }
    }
    function gd(a3, b3, c3, d3) {
      var e4 = C3, f3 = cd.transition;
      cd.transition = null;
      try {
        C3 = 4, fd(a3, b3, c3, d3);
      } finally {
        C3 = e4, cd.transition = f3;
      }
    }
    function fd(a3, b3, c3, d3) {
      if (dd) {
        var e4 = Yc(a3, b3, c3, d3);
        if (null === e4) hd(a3, b3, d3, id, c3), Sc(a3, d3);
        else if (Uc(e4, a3, b3, c3, d3)) d3.stopPropagation();
        else if (Sc(a3, d3), b3 & 4 && -1 < Rc.indexOf(a3)) {
          for (; null !== e4; ) {
            var f3 = Cb(e4);
            null !== f3 && Ec(f3);
            f3 = Yc(a3, b3, c3, d3);
            null === f3 && hd(a3, b3, d3, id, c3);
            if (f3 === e4) break;
            e4 = f3;
          }
          null !== e4 && d3.stopPropagation();
        } else hd(a3, b3, d3, null, c3);
      }
    }
    var id = null;
    function Yc(a3, b3, c3, d3) {
      id = null;
      a3 = xb(d3);
      a3 = Wc(a3);
      if (null !== a3) if (b3 = Vb(a3), null === b3) a3 = null;
      else if (c3 = b3.tag, 13 === c3) {
        a3 = Wb(b3);
        if (null !== a3) return a3;
        a3 = null;
      } else if (3 === c3) {
        if (b3.stateNode.current.memoizedState.isDehydrated) return 3 === b3.tag ? b3.stateNode.containerInfo : null;
        a3 = null;
      } else b3 !== a3 && (a3 = null);
      id = a3;
      return null;
    }
    function jd(a3) {
      switch (a3) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null;
    var ld = null;
    var md = null;
    function nd() {
      if (md) return md;
      var a3, b3 = ld, c3 = b3.length, d3, e4 = "value" in kd ? kd.value : kd.textContent, f3 = e4.length;
      for (a3 = 0; a3 < c3 && b3[a3] === e4[a3]; a3++) ;
      var g3 = c3 - a3;
      for (d3 = 1; d3 <= g3 && b3[c3 - d3] === e4[f3 - d3]; d3++) ;
      return md = e4.slice(a3, 1 < d3 ? 1 - d3 : void 0);
    }
    function od(a3) {
      var b3 = a3.keyCode;
      "charCode" in a3 ? (a3 = a3.charCode, 0 === a3 && 13 === b3 && (a3 = 13)) : a3 = b3;
      10 === a3 && (a3 = 13);
      return 32 <= a3 || 13 === a3 ? a3 : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a3) {
      function b3(b4, d3, e4, f3, g3) {
        this._reactName = b4;
        this._targetInst = e4;
        this.type = d3;
        this.nativeEvent = f3;
        this.target = g3;
        this.currentTarget = null;
        for (var c3 in a3) a3.hasOwnProperty(c3) && (b4 = a3[c3], this[c3] = b4 ? b4(f3) : f3[c3]);
        this.isDefaultPrevented = (null != f3.defaultPrevented ? f3.defaultPrevented : false === f3.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A3(b3.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a4 = this.nativeEvent;
        a4 && (a4.preventDefault ? a4.preventDefault() : "unknown" !== typeof a4.returnValue && (a4.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a4 = this.nativeEvent;
        a4 && (a4.stopPropagation ? a4.stopPropagation() : "unknown" !== typeof a4.cancelBubble && (a4.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b3;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a3) {
      return a3.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var td = rd(sd);
    var ud = A3({}, sd, { view: 0, detail: 0 });
    var vd = rd(ud);
    var wd;
    var xd;
    var yd;
    var Ad = A3({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a3) {
      return void 0 === a3.relatedTarget ? a3.fromElement === a3.srcElement ? a3.toElement : a3.fromElement : a3.relatedTarget;
    }, movementX: function(a3) {
      if ("movementX" in a3) return a3.movementX;
      a3 !== yd && (yd && "mousemove" === a3.type ? (wd = a3.screenX - yd.screenX, xd = a3.screenY - yd.screenY) : xd = wd = 0, yd = a3);
      return wd;
    }, movementY: function(a3) {
      return "movementY" in a3 ? a3.movementY : xd;
    } });
    var Bd = rd(Ad);
    var Cd = A3({}, Ad, { dataTransfer: 0 });
    var Dd = rd(Cd);
    var Ed = A3({}, ud, { relatedTarget: 0 });
    var Fd = rd(Ed);
    var Gd = A3({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Hd = rd(Gd);
    var Id = A3({}, sd, { clipboardData: function(a3) {
      return "clipboardData" in a3 ? a3.clipboardData : window.clipboardData;
    } });
    var Jd = rd(Id);
    var Kd = A3({}, sd, { data: 0 });
    var Ld = rd(Kd);
    var Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a3) {
      var b3 = this.nativeEvent;
      return b3.getModifierState ? b3.getModifierState(a3) : (a3 = Od[a3]) ? !!b3[a3] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A3({}, ud, { key: function(a3) {
      if (a3.key) {
        var b3 = Md[a3.key] || a3.key;
        if ("Unidentified" !== b3) return b3;
      }
      return "keypress" === a3.type ? (a3 = od(a3), 13 === a3 ? "Enter" : String.fromCharCode(a3)) : "keydown" === a3.type || "keyup" === a3.type ? Nd[a3.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a3) {
      return "keypress" === a3.type ? od(a3) : 0;
    }, keyCode: function(a3) {
      return "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
    }, which: function(a3) {
      return "keypress" === a3.type ? od(a3) : "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
    } });
    var Rd = rd(Qd);
    var Sd = A3({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    var Td = rd(Sd);
    var Ud = A3({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
    var Vd = rd(Ud);
    var Wd = A3({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Xd = rd(Wd);
    var Yd = A3({}, Ad, {
      deltaX: function(a3) {
        return "deltaX" in a3 ? a3.deltaX : "wheelDeltaX" in a3 ? -a3.wheelDeltaX : 0;
      },
      deltaY: function(a3) {
        return "deltaY" in a3 ? a3.deltaY : "wheelDeltaY" in a3 ? -a3.wheelDeltaY : "wheelDelta" in a3 ? -a3.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Zd = rd(Yd);
    var $d = [9, 13, 27, 32];
    var ae = ia && "CompositionEvent" in window;
    var be = null;
    ia && "documentMode" in document && (be = document.documentMode);
    var ce = ia && "TextEvent" in window && !be;
    var de = ia && (!ae || be && 8 < be && 11 >= be);
    var ee2 = String.fromCharCode(32);
    var fe = false;
    function ge(a3, b3) {
      switch (a3) {
        case "keyup":
          return -1 !== $d.indexOf(b3.keyCode);
        case "keydown":
          return 229 !== b3.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a3) {
      a3 = a3.detail;
      return "object" === typeof a3 && "data" in a3 ? a3.data : null;
    }
    var ie = false;
    function je(a3, b3) {
      switch (a3) {
        case "compositionend":
          return he(b3);
        case "keypress":
          if (32 !== b3.which) return null;
          fe = true;
          return ee2;
        case "textInput":
          return a3 = b3.data, a3 === ee2 && fe ? null : a3;
        default:
          return null;
      }
    }
    function ke(a3, b3) {
      if (ie) return "compositionend" === a3 || !ae && ge(a3, b3) ? (a3 = nd(), md = ld = kd = null, ie = false, a3) : null;
      switch (a3) {
        case "paste":
          return null;
        case "keypress":
          if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
            if (b3.char && 1 < b3.char.length) return b3.char;
            if (b3.which) return String.fromCharCode(b3.which);
          }
          return null;
        case "compositionend":
          return de && "ko" !== b3.locale ? null : b3.data;
        default:
          return null;
      }
    }
    var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me(a3) {
      var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
      return "input" === b3 ? !!le[a3.type] : "textarea" === b3 ? true : false;
    }
    function ne(a3, b3, c3, d3) {
      Eb(d3);
      b3 = oe(b3, "onChange");
      0 < b3.length && (c3 = new td("onChange", "change", null, c3, d3), a3.push({ event: c3, listeners: b3 }));
    }
    var pe = null;
    var qe = null;
    function re2(a3) {
      se(a3, 0);
    }
    function te2(a3) {
      var b3 = ue(a3);
      if (Wa(b3)) return a3;
    }
    function ve(a3, b3) {
      if ("change" === a3) return b3;
    }
    var we = false;
    if (ia) {
      if (ia) {
        ye = "oninput" in document;
        if (!ye) {
          ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = "function" === typeof ze.oninput;
        }
        xe = ye;
      } else xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    var xe;
    var ye;
    var ze;
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a3) {
      if ("value" === a3.propertyName && te2(qe)) {
        var b3 = [];
        ne(b3, qe, a3, xb(a3));
        Jb(re2, b3);
      }
    }
    function Ce(a3, b3, c3) {
      "focusin" === a3 ? (Ae(), pe = b3, qe = c3, pe.attachEvent("onpropertychange", Be)) : "focusout" === a3 && Ae();
    }
    function De(a3) {
      if ("selectionchange" === a3 || "keyup" === a3 || "keydown" === a3) return te2(qe);
    }
    function Ee(a3, b3) {
      if ("click" === a3) return te2(b3);
    }
    function Fe(a3, b3) {
      if ("input" === a3 || "change" === a3) return te2(b3);
    }
    function Ge(a3, b3) {
      return a3 === b3 && (0 !== a3 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge;
    function Ie(a3, b3) {
      if (He(a3, b3)) return true;
      if ("object" !== typeof a3 || null === a3 || "object" !== typeof b3 || null === b3) return false;
      var c3 = Object.keys(a3), d3 = Object.keys(b3);
      if (c3.length !== d3.length) return false;
      for (d3 = 0; d3 < c3.length; d3++) {
        var e4 = c3[d3];
        if (!ja.call(b3, e4) || !He(a3[e4], b3[e4])) return false;
      }
      return true;
    }
    function Je(a3) {
      for (; a3 && a3.firstChild; ) a3 = a3.firstChild;
      return a3;
    }
    function Ke(a3, b3) {
      var c3 = Je(a3);
      a3 = 0;
      for (var d3; c3; ) {
        if (3 === c3.nodeType) {
          d3 = a3 + c3.textContent.length;
          if (a3 <= b3 && d3 >= b3) return { node: c3, offset: b3 - a3 };
          a3 = d3;
        }
        a: {
          for (; c3; ) {
            if (c3.nextSibling) {
              c3 = c3.nextSibling;
              break a;
            }
            c3 = c3.parentNode;
          }
          c3 = void 0;
        }
        c3 = Je(c3);
      }
    }
    function Le(a3, b3) {
      return a3 && b3 ? a3 === b3 ? true : a3 && 3 === a3.nodeType ? false : b3 && 3 === b3.nodeType ? Le(a3, b3.parentNode) : "contains" in a3 ? a3.contains(b3) : a3.compareDocumentPosition ? !!(a3.compareDocumentPosition(b3) & 16) : false : false;
    }
    function Me() {
      for (var a3 = window, b3 = Xa(); b3 instanceof a3.HTMLIFrameElement; ) {
        try {
          var c3 = "string" === typeof b3.contentWindow.location.href;
        } catch (d3) {
          c3 = false;
        }
        if (c3) a3 = b3.contentWindow;
        else break;
        b3 = Xa(a3.document);
      }
      return b3;
    }
    function Ne(a3) {
      var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
      return b3 && ("input" === b3 && ("text" === a3.type || "search" === a3.type || "tel" === a3.type || "url" === a3.type || "password" === a3.type) || "textarea" === b3 || "true" === a3.contentEditable);
    }
    function Oe(a3) {
      var b3 = Me(), c3 = a3.focusedElem, d3 = a3.selectionRange;
      if (b3 !== c3 && c3 && c3.ownerDocument && Le(c3.ownerDocument.documentElement, c3)) {
        if (null !== d3 && Ne(c3)) {
          if (b3 = d3.start, a3 = d3.end, void 0 === a3 && (a3 = b3), "selectionStart" in c3) c3.selectionStart = b3, c3.selectionEnd = Math.min(a3, c3.value.length);
          else if (a3 = (b3 = c3.ownerDocument || document) && b3.defaultView || window, a3.getSelection) {
            a3 = a3.getSelection();
            var e4 = c3.textContent.length, f3 = Math.min(d3.start, e4);
            d3 = void 0 === d3.end ? f3 : Math.min(d3.end, e4);
            !a3.extend && f3 > d3 && (e4 = d3, d3 = f3, f3 = e4);
            e4 = Ke(c3, f3);
            var g3 = Ke(
              c3,
              d3
            );
            e4 && g3 && (1 !== a3.rangeCount || a3.anchorNode !== e4.node || a3.anchorOffset !== e4.offset || a3.focusNode !== g3.node || a3.focusOffset !== g3.offset) && (b3 = b3.createRange(), b3.setStart(e4.node, e4.offset), a3.removeAllRanges(), f3 > d3 ? (a3.addRange(b3), a3.extend(g3.node, g3.offset)) : (b3.setEnd(g3.node, g3.offset), a3.addRange(b3)));
          }
        }
        b3 = [];
        for (a3 = c3; a3 = a3.parentNode; ) 1 === a3.nodeType && b3.push({ element: a3, left: a3.scrollLeft, top: a3.scrollTop });
        "function" === typeof c3.focus && c3.focus();
        for (c3 = 0; c3 < b3.length; c3++) a3 = b3[c3], a3.element.scrollLeft = a3.left, a3.element.scrollTop = a3.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
    var Qe = null;
    var Re = null;
    var Se = null;
    var Te = false;
    function Ue(a3, b3, c3) {
      var d3 = c3.window === c3 ? c3.document : 9 === c3.nodeType ? c3 : c3.ownerDocument;
      Te || null == Qe || Qe !== Xa(d3) || (d3 = Qe, "selectionStart" in d3 && Ne(d3) ? d3 = { start: d3.selectionStart, end: d3.selectionEnd } : (d3 = (d3.ownerDocument && d3.ownerDocument.defaultView || window).getSelection(), d3 = { anchorNode: d3.anchorNode, anchorOffset: d3.anchorOffset, focusNode: d3.focusNode, focusOffset: d3.focusOffset }), Se && Ie(Se, d3) || (Se = d3, d3 = oe(Re, "onSelect"), 0 < d3.length && (b3 = new td("onSelect", "select", null, b3, c3), a3.push({ event: b3, listeners: d3 }), b3.target = Qe)));
    }
    function Ve(a3, b3) {
      var c3 = {};
      c3[a3.toLowerCase()] = b3.toLowerCase();
      c3["Webkit" + a3] = "webkit" + b3;
      c3["Moz" + a3] = "moz" + b3;
      return c3;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
    var Xe = {};
    var Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a3) {
      if (Xe[a3]) return Xe[a3];
      if (!We[a3]) return a3;
      var b3 = We[a3], c3;
      for (c3 in b3) if (b3.hasOwnProperty(c3) && c3 in Ye) return Xe[a3] = b3[c3];
      return a3;
    }
    var $e = Ze("animationend");
    var af = Ze("animationiteration");
    var bf = Ze("animationstart");
    var cf = Ze("transitionend");
    var df = /* @__PURE__ */ new Map();
    var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a3, b3) {
      df.set(a3, b3);
      fa(b3, [a3]);
    }
    for (gf = 0; gf < ef.length; gf++) {
      hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    var hf;
    var jf;
    var kf;
    var gf;
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a3, b3, c3) {
      var d3 = a3.type || "unknown-event";
      a3.currentTarget = c3;
      Ub(d3, b3, void 0, a3);
      a3.currentTarget = null;
    }
    function se(a3, b3) {
      b3 = 0 !== (b3 & 4);
      for (var c3 = 0; c3 < a3.length; c3++) {
        var d3 = a3[c3], e4 = d3.event;
        d3 = d3.listeners;
        a: {
          var f3 = void 0;
          if (b3) for (var g3 = d3.length - 1; 0 <= g3; g3--) {
            var h3 = d3[g3], k3 = h3.instance, l3 = h3.currentTarget;
            h3 = h3.listener;
            if (k3 !== f3 && e4.isPropagationStopped()) break a;
            nf(e4, h3, l3);
            f3 = k3;
          }
          else for (g3 = 0; g3 < d3.length; g3++) {
            h3 = d3[g3];
            k3 = h3.instance;
            l3 = h3.currentTarget;
            h3 = h3.listener;
            if (k3 !== f3 && e4.isPropagationStopped()) break a;
            nf(e4, h3, l3);
            f3 = k3;
          }
        }
      }
      if (Qb) throw a3 = Rb, Qb = false, Rb = null, a3;
    }
    function D2(a3, b3) {
      var c3 = b3[of];
      void 0 === c3 && (c3 = b3[of] = /* @__PURE__ */ new Set());
      var d3 = a3 + "__bubble";
      c3.has(d3) || (pf(b3, a3, 2, false), c3.add(d3));
    }
    function qf(a3, b3, c3) {
      var d3 = 0;
      b3 && (d3 |= 4);
      pf(c3, a3, d3, b3);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a3) {
      if (!a3[rf]) {
        a3[rf] = true;
        da.forEach(function(b4) {
          "selectionchange" !== b4 && (mf.has(b4) || qf(b4, false, a3), qf(b4, true, a3));
        });
        var b3 = 9 === a3.nodeType ? a3 : a3.ownerDocument;
        null === b3 || b3[rf] || (b3[rf] = true, qf("selectionchange", false, b3));
      }
    }
    function pf(a3, b3, c3, d3) {
      switch (jd(b3)) {
        case 1:
          var e4 = ed;
          break;
        case 4:
          e4 = gd;
          break;
        default:
          e4 = fd;
      }
      c3 = e4.bind(null, b3, c3, a3);
      e4 = void 0;
      !Lb || "touchstart" !== b3 && "touchmove" !== b3 && "wheel" !== b3 || (e4 = true);
      d3 ? void 0 !== e4 ? a3.addEventListener(b3, c3, { capture: true, passive: e4 }) : a3.addEventListener(b3, c3, true) : void 0 !== e4 ? a3.addEventListener(b3, c3, { passive: e4 }) : a3.addEventListener(b3, c3, false);
    }
    function hd(a3, b3, c3, d3, e4) {
      var f3 = d3;
      if (0 === (b3 & 1) && 0 === (b3 & 2) && null !== d3) a: for (; ; ) {
        if (null === d3) return;
        var g3 = d3.tag;
        if (3 === g3 || 4 === g3) {
          var h3 = d3.stateNode.containerInfo;
          if (h3 === e4 || 8 === h3.nodeType && h3.parentNode === e4) break;
          if (4 === g3) for (g3 = d3.return; null !== g3; ) {
            var k3 = g3.tag;
            if (3 === k3 || 4 === k3) {
              if (k3 = g3.stateNode.containerInfo, k3 === e4 || 8 === k3.nodeType && k3.parentNode === e4) return;
            }
            g3 = g3.return;
          }
          for (; null !== h3; ) {
            g3 = Wc(h3);
            if (null === g3) return;
            k3 = g3.tag;
            if (5 === k3 || 6 === k3) {
              d3 = f3 = g3;
              continue a;
            }
            h3 = h3.parentNode;
          }
        }
        d3 = d3.return;
      }
      Jb(function() {
        var d4 = f3, e5 = xb(c3), g4 = [];
        a: {
          var h4 = df.get(a3);
          if (void 0 !== h4) {
            var k4 = td, n3 = a3;
            switch (a3) {
              case "keypress":
                if (0 === od(c3)) break a;
              case "keydown":
              case "keyup":
                k4 = Rd;
                break;
              case "focusin":
                n3 = "focus";
                k4 = Fd;
                break;
              case "focusout":
                n3 = "blur";
                k4 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k4 = Fd;
                break;
              case "click":
                if (2 === c3.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k4 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k4 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k4 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k4 = Hd;
                break;
              case cf:
                k4 = Xd;
                break;
              case "scroll":
                k4 = vd;
                break;
              case "wheel":
                k4 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k4 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k4 = Td;
            }
            var t4 = 0 !== (b3 & 4), J2 = !t4 && "scroll" === a3, x3 = t4 ? null !== h4 ? h4 + "Capture" : null : h4;
            t4 = [];
            for (var w3 = d4, u3; null !== w3; ) {
              u3 = w3;
              var F3 = u3.stateNode;
              5 === u3.tag && null !== F3 && (u3 = F3, null !== x3 && (F3 = Kb(w3, x3), null != F3 && t4.push(tf(w3, F3, u3))));
              if (J2) break;
              w3 = w3.return;
            }
            0 < t4.length && (h4 = new k4(h4, n3, null, c3, e5), g4.push({ event: h4, listeners: t4 }));
          }
        }
        if (0 === (b3 & 7)) {
          a: {
            h4 = "mouseover" === a3 || "pointerover" === a3;
            k4 = "mouseout" === a3 || "pointerout" === a3;
            if (h4 && c3 !== wb && (n3 = c3.relatedTarget || c3.fromElement) && (Wc(n3) || n3[uf])) break a;
            if (k4 || h4) {
              h4 = e5.window === e5 ? e5 : (h4 = e5.ownerDocument) ? h4.defaultView || h4.parentWindow : window;
              if (k4) {
                if (n3 = c3.relatedTarget || c3.toElement, k4 = d4, n3 = n3 ? Wc(n3) : null, null !== n3 && (J2 = Vb(n3), n3 !== J2 || 5 !== n3.tag && 6 !== n3.tag)) n3 = null;
              } else k4 = null, n3 = d4;
              if (k4 !== n3) {
                t4 = Bd;
                F3 = "onMouseLeave";
                x3 = "onMouseEnter";
                w3 = "mouse";
                if ("pointerout" === a3 || "pointerover" === a3) t4 = Td, F3 = "onPointerLeave", x3 = "onPointerEnter", w3 = "pointer";
                J2 = null == k4 ? h4 : ue(k4);
                u3 = null == n3 ? h4 : ue(n3);
                h4 = new t4(F3, w3 + "leave", k4, c3, e5);
                h4.target = J2;
                h4.relatedTarget = u3;
                F3 = null;
                Wc(e5) === d4 && (t4 = new t4(x3, w3 + "enter", n3, c3, e5), t4.target = u3, t4.relatedTarget = J2, F3 = t4);
                J2 = F3;
                if (k4 && n3) b: {
                  t4 = k4;
                  x3 = n3;
                  w3 = 0;
                  for (u3 = t4; u3; u3 = vf(u3)) w3++;
                  u3 = 0;
                  for (F3 = x3; F3; F3 = vf(F3)) u3++;
                  for (; 0 < w3 - u3; ) t4 = vf(t4), w3--;
                  for (; 0 < u3 - w3; ) x3 = vf(x3), u3--;
                  for (; w3--; ) {
                    if (t4 === x3 || null !== x3 && t4 === x3.alternate) break b;
                    t4 = vf(t4);
                    x3 = vf(x3);
                  }
                  t4 = null;
                }
                else t4 = null;
                null !== k4 && wf(g4, h4, k4, t4, false);
                null !== n3 && null !== J2 && wf(g4, J2, n3, t4, true);
              }
            }
          }
          a: {
            h4 = d4 ? ue(d4) : window;
            k4 = h4.nodeName && h4.nodeName.toLowerCase();
            if ("select" === k4 || "input" === k4 && "file" === h4.type) var na = ve;
            else if (me(h4)) if (we) na = Fe;
            else {
              na = De;
              var xa = Ce;
            }
            else (k4 = h4.nodeName) && "input" === k4.toLowerCase() && ("checkbox" === h4.type || "radio" === h4.type) && (na = Ee);
            if (na && (na = na(a3, d4))) {
              ne(g4, na, c3, e5);
              break a;
            }
            xa && xa(a3, h4, d4);
            "focusout" === a3 && (xa = h4._wrapperState) && xa.controlled && "number" === h4.type && cb(h4, "number", h4.value);
          }
          xa = d4 ? ue(d4) : window;
          switch (a3) {
            case "focusin":
              if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d4, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g4, c3, e5);
              break;
            case "selectionchange":
              if (Pe) break;
            case "keydown":
            case "keyup":
              Ue(g4, c3, e5);
          }
          var $a;
          if (ae) b: {
            switch (a3) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
          else ie ? ge(a3, c3) && (ba = "onCompositionEnd") : "keydown" === a3 && 229 === c3.keyCode && (ba = "onCompositionStart");
          ba && (de && "ko" !== c3.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e5, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d4, ba), 0 < xa.length && (ba = new Ld(ba, a3, null, c3, e5), g4.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c3), null !== $a && (ba.data = $a))));
          if ($a = ce ? je(a3, c3) : ke(a3, c3)) d4 = oe(d4, "onBeforeInput"), 0 < d4.length && (e5 = new Ld("onBeforeInput", "beforeinput", null, c3, e5), g4.push({ event: e5, listeners: d4 }), e5.data = $a);
        }
        se(g4, b3);
      });
    }
    function tf(a3, b3, c3) {
      return { instance: a3, listener: b3, currentTarget: c3 };
    }
    function oe(a3, b3) {
      for (var c3 = b3 + "Capture", d3 = []; null !== a3; ) {
        var e4 = a3, f3 = e4.stateNode;
        5 === e4.tag && null !== f3 && (e4 = f3, f3 = Kb(a3, c3), null != f3 && d3.unshift(tf(a3, f3, e4)), f3 = Kb(a3, b3), null != f3 && d3.push(tf(a3, f3, e4)));
        a3 = a3.return;
      }
      return d3;
    }
    function vf(a3) {
      if (null === a3) return null;
      do
        a3 = a3.return;
      while (a3 && 5 !== a3.tag);
      return a3 ? a3 : null;
    }
    function wf(a3, b3, c3, d3, e4) {
      for (var f3 = b3._reactName, g3 = []; null !== c3 && c3 !== d3; ) {
        var h3 = c3, k3 = h3.alternate, l3 = h3.stateNode;
        if (null !== k3 && k3 === d3) break;
        5 === h3.tag && null !== l3 && (h3 = l3, e4 ? (k3 = Kb(c3, f3), null != k3 && g3.unshift(tf(c3, k3, h3))) : e4 || (k3 = Kb(c3, f3), null != k3 && g3.push(tf(c3, k3, h3))));
        c3 = c3.return;
      }
      0 !== g3.length && a3.push({ event: b3, listeners: g3 });
    }
    var xf = /\r\n?/g;
    var yf = /\u0000|\uFFFD/g;
    function zf(a3) {
      return ("string" === typeof a3 ? a3 : "" + a3).replace(xf, "\n").replace(yf, "");
    }
    function Af(a3, b3, c3) {
      b3 = zf(b3);
      if (zf(a3) !== b3 && c3) throw Error(p3(425));
    }
    function Bf() {
    }
    var Cf = null;
    var Df = null;
    function Ef(a3, b3) {
      return "textarea" === a3 || "noscript" === a3 || "string" === typeof b3.children || "number" === typeof b3.children || "object" === typeof b3.dangerouslySetInnerHTML && null !== b3.dangerouslySetInnerHTML && null != b3.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
    var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
    var Hf = "function" === typeof Promise ? Promise : void 0;
    var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a3) {
      return Hf.resolve(null).then(a3).catch(If);
    } : Ff;
    function If(a3) {
      setTimeout(function() {
        throw a3;
      });
    }
    function Kf(a3, b3) {
      var c3 = b3, d3 = 0;
      do {
        var e4 = c3.nextSibling;
        a3.removeChild(c3);
        if (e4 && 8 === e4.nodeType) if (c3 = e4.data, "/$" === c3) {
          if (0 === d3) {
            a3.removeChild(e4);
            bd(b3);
            return;
          }
          d3--;
        } else "$" !== c3 && "$?" !== c3 && "$!" !== c3 || d3++;
        c3 = e4;
      } while (c3);
      bd(b3);
    }
    function Lf(a3) {
      for (; null != a3; a3 = a3.nextSibling) {
        var b3 = a3.nodeType;
        if (1 === b3 || 3 === b3) break;
        if (8 === b3) {
          b3 = a3.data;
          if ("$" === b3 || "$!" === b3 || "$?" === b3) break;
          if ("/$" === b3) return null;
        }
      }
      return a3;
    }
    function Mf(a3) {
      a3 = a3.previousSibling;
      for (var b3 = 0; a3; ) {
        if (8 === a3.nodeType) {
          var c3 = a3.data;
          if ("$" === c3 || "$!" === c3 || "$?" === c3) {
            if (0 === b3) return a3;
            b3--;
          } else "/$" === c3 && b3++;
        }
        a3 = a3.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2);
    var Of = "__reactFiber$" + Nf;
    var Pf = "__reactProps$" + Nf;
    var uf = "__reactContainer$" + Nf;
    var of = "__reactEvents$" + Nf;
    var Qf = "__reactListeners$" + Nf;
    var Rf = "__reactHandles$" + Nf;
    function Wc(a3) {
      var b3 = a3[Of];
      if (b3) return b3;
      for (var c3 = a3.parentNode; c3; ) {
        if (b3 = c3[uf] || c3[Of]) {
          c3 = b3.alternate;
          if (null !== b3.child || null !== c3 && null !== c3.child) for (a3 = Mf(a3); null !== a3; ) {
            if (c3 = a3[Of]) return c3;
            a3 = Mf(a3);
          }
          return b3;
        }
        a3 = c3;
        c3 = a3.parentNode;
      }
      return null;
    }
    function Cb(a3) {
      a3 = a3[Of] || a3[uf];
      return !a3 || 5 !== a3.tag && 6 !== a3.tag && 13 !== a3.tag && 3 !== a3.tag ? null : a3;
    }
    function ue(a3) {
      if (5 === a3.tag || 6 === a3.tag) return a3.stateNode;
      throw Error(p3(33));
    }
    function Db(a3) {
      return a3[Pf] || null;
    }
    var Sf = [];
    var Tf = -1;
    function Uf(a3) {
      return { current: a3 };
    }
    function E3(a3) {
      0 > Tf || (a3.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G2(a3, b3) {
      Tf++;
      Sf[Tf] = a3.current;
      a3.current = b3;
    }
    var Vf = {};
    var H3 = Uf(Vf);
    var Wf = Uf(false);
    var Xf = Vf;
    function Yf(a3, b3) {
      var c3 = a3.type.contextTypes;
      if (!c3) return Vf;
      var d3 = a3.stateNode;
      if (d3 && d3.__reactInternalMemoizedUnmaskedChildContext === b3) return d3.__reactInternalMemoizedMaskedChildContext;
      var e4 = {}, f3;
      for (f3 in c3) e4[f3] = b3[f3];
      d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = b3, a3.__reactInternalMemoizedMaskedChildContext = e4);
      return e4;
    }
    function Zf(a3) {
      a3 = a3.childContextTypes;
      return null !== a3 && void 0 !== a3;
    }
    function $f() {
      E3(Wf);
      E3(H3);
    }
    function ag(a3, b3, c3) {
      if (H3.current !== Vf) throw Error(p3(168));
      G2(H3, b3);
      G2(Wf, c3);
    }
    function bg(a3, b3, c3) {
      var d3 = a3.stateNode;
      b3 = b3.childContextTypes;
      if ("function" !== typeof d3.getChildContext) return c3;
      d3 = d3.getChildContext();
      for (var e4 in d3) if (!(e4 in b3)) throw Error(p3(108, Ra(a3) || "Unknown", e4));
      return A3({}, c3, d3);
    }
    function cg(a3) {
      a3 = (a3 = a3.stateNode) && a3.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H3.current;
      G2(H3, a3);
      G2(Wf, Wf.current);
      return true;
    }
    function dg(a3, b3, c3) {
      var d3 = a3.stateNode;
      if (!d3) throw Error(p3(169));
      c3 ? (a3 = bg(a3, b3, Xf), d3.__reactInternalMemoizedMergedChildContext = a3, E3(Wf), E3(H3), G2(H3, a3)) : E3(Wf);
      G2(Wf, c3);
    }
    var eg = null;
    var fg = false;
    var gg = false;
    function hg(a3) {
      null === eg ? eg = [a3] : eg.push(a3);
    }
    function ig(a3) {
      fg = true;
      hg(a3);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a3 = 0, b3 = C3;
        try {
          var c3 = eg;
          for (C3 = 1; a3 < c3.length; a3++) {
            var d3 = c3[a3];
            do
              d3 = d3(true);
            while (null !== d3);
          }
          eg = null;
          fg = false;
        } catch (e4) {
          throw null !== eg && (eg = eg.slice(a3 + 1)), ac(fc, jg), e4;
        } finally {
          C3 = b3, gg = false;
        }
      }
      return null;
    }
    var kg = [];
    var lg = 0;
    var mg = null;
    var ng = 0;
    var og = [];
    var pg = 0;
    var qg = null;
    var rg = 1;
    var sg = "";
    function tg(a3, b3) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a3;
      ng = b3;
    }
    function ug(a3, b3, c3) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a3;
      var d3 = rg;
      a3 = sg;
      var e4 = 32 - oc(d3) - 1;
      d3 &= ~(1 << e4);
      c3 += 1;
      var f3 = 32 - oc(b3) + e4;
      if (30 < f3) {
        var g3 = e4 - e4 % 5;
        f3 = (d3 & (1 << g3) - 1).toString(32);
        d3 >>= g3;
        e4 -= g3;
        rg = 1 << 32 - oc(b3) + e4 | c3 << e4 | d3;
        sg = f3 + a3;
      } else rg = 1 << f3 | c3 << e4 | d3, sg = a3;
    }
    function vg(a3) {
      null !== a3.return && (tg(a3, 1), ug(a3, 1, 0));
    }
    function wg(a3) {
      for (; a3 === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a3 === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null;
    var yg = null;
    var I3 = false;
    var zg = null;
    function Ag(a3, b3) {
      var c3 = Bg(5, null, null, 0);
      c3.elementType = "DELETED";
      c3.stateNode = b3;
      c3.return = a3;
      b3 = a3.deletions;
      null === b3 ? (a3.deletions = [c3], a3.flags |= 16) : b3.push(c3);
    }
    function Cg(a3, b3) {
      switch (a3.tag) {
        case 5:
          var c3 = a3.type;
          b3 = 1 !== b3.nodeType || c3.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
          return null !== b3 ? (a3.stateNode = b3, xg = a3, yg = Lf(b3.firstChild), true) : false;
        case 6:
          return b3 = "" === a3.pendingProps || 3 !== b3.nodeType ? null : b3, null !== b3 ? (a3.stateNode = b3, xg = a3, yg = null, true) : false;
        case 13:
          return b3 = 8 !== b3.nodeType ? null : b3, null !== b3 ? (c3 = null !== qg ? { id: rg, overflow: sg } : null, a3.memoizedState = { dehydrated: b3, treeContext: c3, retryLane: 1073741824 }, c3 = Bg(18, null, null, 0), c3.stateNode = b3, c3.return = a3, a3.child = c3, xg = a3, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a3) {
      return 0 !== (a3.mode & 1) && 0 === (a3.flags & 128);
    }
    function Eg(a3) {
      if (I3) {
        var b3 = yg;
        if (b3) {
          var c3 = b3;
          if (!Cg(a3, b3)) {
            if (Dg(a3)) throw Error(p3(418));
            b3 = Lf(c3.nextSibling);
            var d3 = xg;
            b3 && Cg(a3, b3) ? Ag(d3, c3) : (a3.flags = a3.flags & -4097 | 2, I3 = false, xg = a3);
          }
        } else {
          if (Dg(a3)) throw Error(p3(418));
          a3.flags = a3.flags & -4097 | 2;
          I3 = false;
          xg = a3;
        }
      }
    }
    function Fg(a3) {
      for (a3 = a3.return; null !== a3 && 5 !== a3.tag && 3 !== a3.tag && 13 !== a3.tag; ) a3 = a3.return;
      xg = a3;
    }
    function Gg(a3) {
      if (a3 !== xg) return false;
      if (!I3) return Fg(a3), I3 = true, false;
      var b3;
      (b3 = 3 !== a3.tag) && !(b3 = 5 !== a3.tag) && (b3 = a3.type, b3 = "head" !== b3 && "body" !== b3 && !Ef(a3.type, a3.memoizedProps));
      if (b3 && (b3 = yg)) {
        if (Dg(a3)) throw Hg(), Error(p3(418));
        for (; b3; ) Ag(a3, b3), b3 = Lf(b3.nextSibling);
      }
      Fg(a3);
      if (13 === a3.tag) {
        a3 = a3.memoizedState;
        a3 = null !== a3 ? a3.dehydrated : null;
        if (!a3) throw Error(p3(317));
        a: {
          a3 = a3.nextSibling;
          for (b3 = 0; a3; ) {
            if (8 === a3.nodeType) {
              var c3 = a3.data;
              if ("/$" === c3) {
                if (0 === b3) {
                  yg = Lf(a3.nextSibling);
                  break a;
                }
                b3--;
              } else "$" !== c3 && "$!" !== c3 && "$?" !== c3 || b3++;
            }
            a3 = a3.nextSibling;
          }
          yg = null;
        }
      } else yg = xg ? Lf(a3.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a3 = yg; a3; ) a3 = Lf(a3.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I3 = false;
    }
    function Jg(a3) {
      null === zg ? zg = [a3] : zg.push(a3);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a3, b3, c3) {
      a3 = c3.ref;
      if (null !== a3 && "function" !== typeof a3 && "object" !== typeof a3) {
        if (c3._owner) {
          c3 = c3._owner;
          if (c3) {
            if (1 !== c3.tag) throw Error(p3(309));
            var d3 = c3.stateNode;
          }
          if (!d3) throw Error(p3(147, a3));
          var e4 = d3, f3 = "" + a3;
          if (null !== b3 && null !== b3.ref && "function" === typeof b3.ref && b3.ref._stringRef === f3) return b3.ref;
          b3 = function(a4) {
            var b4 = e4.refs;
            null === a4 ? delete b4[f3] : b4[f3] = a4;
          };
          b3._stringRef = f3;
          return b3;
        }
        if ("string" !== typeof a3) throw Error(p3(284));
        if (!c3._owner) throw Error(p3(290, a3));
      }
      return a3;
    }
    function Mg(a3, b3) {
      a3 = Object.prototype.toString.call(b3);
      throw Error(p3(31, "[object Object]" === a3 ? "object with keys {" + Object.keys(b3).join(", ") + "}" : a3));
    }
    function Ng(a3) {
      var b3 = a3._init;
      return b3(a3._payload);
    }
    function Og(a3) {
      function b3(b4, c4) {
        if (a3) {
          var d4 = b4.deletions;
          null === d4 ? (b4.deletions = [c4], b4.flags |= 16) : d4.push(c4);
        }
      }
      function c3(c4, d4) {
        if (!a3) return null;
        for (; null !== d4; ) b3(c4, d4), d4 = d4.sibling;
        return null;
      }
      function d3(a4, b4) {
        for (a4 = /* @__PURE__ */ new Map(); null !== b4; ) null !== b4.key ? a4.set(b4.key, b4) : a4.set(b4.index, b4), b4 = b4.sibling;
        return a4;
      }
      function e4(a4, b4) {
        a4 = Pg(a4, b4);
        a4.index = 0;
        a4.sibling = null;
        return a4;
      }
      function f3(b4, c4, d4) {
        b4.index = d4;
        if (!a3) return b4.flags |= 1048576, c4;
        d4 = b4.alternate;
        if (null !== d4) return d4 = d4.index, d4 < c4 ? (b4.flags |= 2, c4) : d4;
        b4.flags |= 2;
        return c4;
      }
      function g3(b4) {
        a3 && null === b4.alternate && (b4.flags |= 2);
        return b4;
      }
      function h3(a4, b4, c4, d4) {
        if (null === b4 || 6 !== b4.tag) return b4 = Qg(c4, a4.mode, d4), b4.return = a4, b4;
        b4 = e4(b4, c4);
        b4.return = a4;
        return b4;
      }
      function k3(a4, b4, c4, d4) {
        var f4 = c4.type;
        if (f4 === ya) return m3(a4, b4, c4.props.children, d4, c4.key);
        if (null !== b4 && (b4.elementType === f4 || "object" === typeof f4 && null !== f4 && f4.$$typeof === Ha && Ng(f4) === b4.type)) return d4 = e4(b4, c4.props), d4.ref = Lg(a4, b4, c4), d4.return = a4, d4;
        d4 = Rg(c4.type, c4.key, c4.props, null, a4.mode, d4);
        d4.ref = Lg(a4, b4, c4);
        d4.return = a4;
        return d4;
      }
      function l3(a4, b4, c4, d4) {
        if (null === b4 || 4 !== b4.tag || b4.stateNode.containerInfo !== c4.containerInfo || b4.stateNode.implementation !== c4.implementation) return b4 = Sg(c4, a4.mode, d4), b4.return = a4, b4;
        b4 = e4(b4, c4.children || []);
        b4.return = a4;
        return b4;
      }
      function m3(a4, b4, c4, d4, f4) {
        if (null === b4 || 7 !== b4.tag) return b4 = Tg(c4, a4.mode, d4, f4), b4.return = a4, b4;
        b4 = e4(b4, c4);
        b4.return = a4;
        return b4;
      }
      function q3(a4, b4, c4) {
        if ("string" === typeof b4 && "" !== b4 || "number" === typeof b4) return b4 = Qg("" + b4, a4.mode, c4), b4.return = a4, b4;
        if ("object" === typeof b4 && null !== b4) {
          switch (b4.$$typeof) {
            case va:
              return c4 = Rg(b4.type, b4.key, b4.props, null, a4.mode, c4), c4.ref = Lg(a4, null, b4), c4.return = a4, c4;
            case wa:
              return b4 = Sg(b4, a4.mode, c4), b4.return = a4, b4;
            case Ha:
              var d4 = b4._init;
              return q3(a4, d4(b4._payload), c4);
          }
          if (eb(b4) || Ka(b4)) return b4 = Tg(b4, a4.mode, c4, null), b4.return = a4, b4;
          Mg(a4, b4);
        }
        return null;
      }
      function r3(a4, b4, c4, d4) {
        var e5 = null !== b4 ? b4.key : null;
        if ("string" === typeof c4 && "" !== c4 || "number" === typeof c4) return null !== e5 ? null : h3(a4, b4, "" + c4, d4);
        if ("object" === typeof c4 && null !== c4) {
          switch (c4.$$typeof) {
            case va:
              return c4.key === e5 ? k3(a4, b4, c4, d4) : null;
            case wa:
              return c4.key === e5 ? l3(a4, b4, c4, d4) : null;
            case Ha:
              return e5 = c4._init, r3(
                a4,
                b4,
                e5(c4._payload),
                d4
              );
          }
          if (eb(c4) || Ka(c4)) return null !== e5 ? null : m3(a4, b4, c4, d4, null);
          Mg(a4, c4);
        }
        return null;
      }
      function y3(a4, b4, c4, d4, e5) {
        if ("string" === typeof d4 && "" !== d4 || "number" === typeof d4) return a4 = a4.get(c4) || null, h3(b4, a4, "" + d4, e5);
        if ("object" === typeof d4 && null !== d4) {
          switch (d4.$$typeof) {
            case va:
              return a4 = a4.get(null === d4.key ? c4 : d4.key) || null, k3(b4, a4, d4, e5);
            case wa:
              return a4 = a4.get(null === d4.key ? c4 : d4.key) || null, l3(b4, a4, d4, e5);
            case Ha:
              var f4 = d4._init;
              return y3(a4, b4, c4, f4(d4._payload), e5);
          }
          if (eb(d4) || Ka(d4)) return a4 = a4.get(c4) || null, m3(b4, a4, d4, e5, null);
          Mg(b4, d4);
        }
        return null;
      }
      function n3(e5, g4, h4, k4) {
        for (var l4 = null, m4 = null, u3 = g4, w3 = g4 = 0, x3 = null; null !== u3 && w3 < h4.length; w3++) {
          u3.index > w3 ? (x3 = u3, u3 = null) : x3 = u3.sibling;
          var n4 = r3(e5, u3, h4[w3], k4);
          if (null === n4) {
            null === u3 && (u3 = x3);
            break;
          }
          a3 && u3 && null === n4.alternate && b3(e5, u3);
          g4 = f3(n4, g4, w3);
          null === m4 ? l4 = n4 : m4.sibling = n4;
          m4 = n4;
          u3 = x3;
        }
        if (w3 === h4.length) return c3(e5, u3), I3 && tg(e5, w3), l4;
        if (null === u3) {
          for (; w3 < h4.length; w3++) u3 = q3(e5, h4[w3], k4), null !== u3 && (g4 = f3(u3, g4, w3), null === m4 ? l4 = u3 : m4.sibling = u3, m4 = u3);
          I3 && tg(e5, w3);
          return l4;
        }
        for (u3 = d3(e5, u3); w3 < h4.length; w3++) x3 = y3(u3, e5, w3, h4[w3], k4), null !== x3 && (a3 && null !== x3.alternate && u3.delete(null === x3.key ? w3 : x3.key), g4 = f3(x3, g4, w3), null === m4 ? l4 = x3 : m4.sibling = x3, m4 = x3);
        a3 && u3.forEach(function(a4) {
          return b3(e5, a4);
        });
        I3 && tg(e5, w3);
        return l4;
      }
      function t4(e5, g4, h4, k4) {
        var l4 = Ka(h4);
        if ("function" !== typeof l4) throw Error(p3(150));
        h4 = l4.call(h4);
        if (null == h4) throw Error(p3(151));
        for (var u3 = l4 = null, m4 = g4, w3 = g4 = 0, x3 = null, n4 = h4.next(); null !== m4 && !n4.done; w3++, n4 = h4.next()) {
          m4.index > w3 ? (x3 = m4, m4 = null) : x3 = m4.sibling;
          var t5 = r3(e5, m4, n4.value, k4);
          if (null === t5) {
            null === m4 && (m4 = x3);
            break;
          }
          a3 && m4 && null === t5.alternate && b3(e5, m4);
          g4 = f3(t5, g4, w3);
          null === u3 ? l4 = t5 : u3.sibling = t5;
          u3 = t5;
          m4 = x3;
        }
        if (n4.done) return c3(
          e5,
          m4
        ), I3 && tg(e5, w3), l4;
        if (null === m4) {
          for (; !n4.done; w3++, n4 = h4.next()) n4 = q3(e5, n4.value, k4), null !== n4 && (g4 = f3(n4, g4, w3), null === u3 ? l4 = n4 : u3.sibling = n4, u3 = n4);
          I3 && tg(e5, w3);
          return l4;
        }
        for (m4 = d3(e5, m4); !n4.done; w3++, n4 = h4.next()) n4 = y3(m4, e5, w3, n4.value, k4), null !== n4 && (a3 && null !== n4.alternate && m4.delete(null === n4.key ? w3 : n4.key), g4 = f3(n4, g4, w3), null === u3 ? l4 = n4 : u3.sibling = n4, u3 = n4);
        a3 && m4.forEach(function(a4) {
          return b3(e5, a4);
        });
        I3 && tg(e5, w3);
        return l4;
      }
      function J2(a4, d4, f4, h4) {
        "object" === typeof f4 && null !== f4 && f4.type === ya && null === f4.key && (f4 = f4.props.children);
        if ("object" === typeof f4 && null !== f4) {
          switch (f4.$$typeof) {
            case va:
              a: {
                for (var k4 = f4.key, l4 = d4; null !== l4; ) {
                  if (l4.key === k4) {
                    k4 = f4.type;
                    if (k4 === ya) {
                      if (7 === l4.tag) {
                        c3(a4, l4.sibling);
                        d4 = e4(l4, f4.props.children);
                        d4.return = a4;
                        a4 = d4;
                        break a;
                      }
                    } else if (l4.elementType === k4 || "object" === typeof k4 && null !== k4 && k4.$$typeof === Ha && Ng(k4) === l4.type) {
                      c3(a4, l4.sibling);
                      d4 = e4(l4, f4.props);
                      d4.ref = Lg(a4, l4, f4);
                      d4.return = a4;
                      a4 = d4;
                      break a;
                    }
                    c3(a4, l4);
                    break;
                  } else b3(a4, l4);
                  l4 = l4.sibling;
                }
                f4.type === ya ? (d4 = Tg(f4.props.children, a4.mode, h4, f4.key), d4.return = a4, a4 = d4) : (h4 = Rg(f4.type, f4.key, f4.props, null, a4.mode, h4), h4.ref = Lg(a4, d4, f4), h4.return = a4, a4 = h4);
              }
              return g3(a4);
            case wa:
              a: {
                for (l4 = f4.key; null !== d4; ) {
                  if (d4.key === l4) if (4 === d4.tag && d4.stateNode.containerInfo === f4.containerInfo && d4.stateNode.implementation === f4.implementation) {
                    c3(a4, d4.sibling);
                    d4 = e4(d4, f4.children || []);
                    d4.return = a4;
                    a4 = d4;
                    break a;
                  } else {
                    c3(a4, d4);
                    break;
                  }
                  else b3(a4, d4);
                  d4 = d4.sibling;
                }
                d4 = Sg(f4, a4.mode, h4);
                d4.return = a4;
                a4 = d4;
              }
              return g3(a4);
            case Ha:
              return l4 = f4._init, J2(a4, d4, l4(f4._payload), h4);
          }
          if (eb(f4)) return n3(a4, d4, f4, h4);
          if (Ka(f4)) return t4(a4, d4, f4, h4);
          Mg(a4, f4);
        }
        return "string" === typeof f4 && "" !== f4 || "number" === typeof f4 ? (f4 = "" + f4, null !== d4 && 6 === d4.tag ? (c3(a4, d4.sibling), d4 = e4(d4, f4), d4.return = a4, a4 = d4) : (c3(a4, d4), d4 = Qg(f4, a4.mode, h4), d4.return = a4, a4 = d4), g3(a4)) : c3(a4, d4);
      }
      return J2;
    }
    var Ug = Og(true);
    var Vg = Og(false);
    var Wg = Uf(null);
    var Xg = null;
    var Yg = null;
    var Zg = null;
    function $g() {
      Zg = Yg = Xg = null;
    }
    function ah(a3) {
      var b3 = Wg.current;
      E3(Wg);
      a3._currentValue = b3;
    }
    function bh(a3, b3, c3) {
      for (; null !== a3; ) {
        var d3 = a3.alternate;
        (a3.childLanes & b3) !== b3 ? (a3.childLanes |= b3, null !== d3 && (d3.childLanes |= b3)) : null !== d3 && (d3.childLanes & b3) !== b3 && (d3.childLanes |= b3);
        if (a3 === c3) break;
        a3 = a3.return;
      }
    }
    function ch(a3, b3) {
      Xg = a3;
      Zg = Yg = null;
      a3 = a3.dependencies;
      null !== a3 && null !== a3.firstContext && (0 !== (a3.lanes & b3) && (dh = true), a3.firstContext = null);
    }
    function eh(a3) {
      var b3 = a3._currentValue;
      if (Zg !== a3) if (a3 = { context: a3, memoizedValue: b3, next: null }, null === Yg) {
        if (null === Xg) throw Error(p3(308));
        Yg = a3;
        Xg.dependencies = { lanes: 0, firstContext: a3 };
      } else Yg = Yg.next = a3;
      return b3;
    }
    var fh = null;
    function gh(a3) {
      null === fh ? fh = [a3] : fh.push(a3);
    }
    function hh(a3, b3, c3, d3) {
      var e4 = b3.interleaved;
      null === e4 ? (c3.next = c3, gh(b3)) : (c3.next = e4.next, e4.next = c3);
      b3.interleaved = c3;
      return ih(a3, d3);
    }
    function ih(a3, b3) {
      a3.lanes |= b3;
      var c3 = a3.alternate;
      null !== c3 && (c3.lanes |= b3);
      c3 = a3;
      for (a3 = a3.return; null !== a3; ) a3.childLanes |= b3, c3 = a3.alternate, null !== c3 && (c3.childLanes |= b3), c3 = a3, a3 = a3.return;
      return 3 === c3.tag ? c3.stateNode : null;
    }
    var jh = false;
    function kh(a3) {
      a3.updateQueue = { baseState: a3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function lh(a3, b3) {
      a3 = a3.updateQueue;
      b3.updateQueue === a3 && (b3.updateQueue = { baseState: a3.baseState, firstBaseUpdate: a3.firstBaseUpdate, lastBaseUpdate: a3.lastBaseUpdate, shared: a3.shared, effects: a3.effects });
    }
    function mh(a3, b3) {
      return { eventTime: a3, lane: b3, tag: 0, payload: null, callback: null, next: null };
    }
    function nh(a3, b3, c3) {
      var d3 = a3.updateQueue;
      if (null === d3) return null;
      d3 = d3.shared;
      if (0 !== (K2 & 2)) {
        var e4 = d3.pending;
        null === e4 ? b3.next = b3 : (b3.next = e4.next, e4.next = b3);
        d3.pending = b3;
        return ih(a3, c3);
      }
      e4 = d3.interleaved;
      null === e4 ? (b3.next = b3, gh(d3)) : (b3.next = e4.next, e4.next = b3);
      d3.interleaved = b3;
      return ih(a3, c3);
    }
    function oh(a3, b3, c3) {
      b3 = b3.updateQueue;
      if (null !== b3 && (b3 = b3.shared, 0 !== (c3 & 4194240))) {
        var d3 = b3.lanes;
        d3 &= a3.pendingLanes;
        c3 |= d3;
        b3.lanes = c3;
        Cc(a3, c3);
      }
    }
    function ph(a3, b3) {
      var c3 = a3.updateQueue, d3 = a3.alternate;
      if (null !== d3 && (d3 = d3.updateQueue, c3 === d3)) {
        var e4 = null, f3 = null;
        c3 = c3.firstBaseUpdate;
        if (null !== c3) {
          do {
            var g3 = { eventTime: c3.eventTime, lane: c3.lane, tag: c3.tag, payload: c3.payload, callback: c3.callback, next: null };
            null === f3 ? e4 = f3 = g3 : f3 = f3.next = g3;
            c3 = c3.next;
          } while (null !== c3);
          null === f3 ? e4 = f3 = b3 : f3 = f3.next = b3;
        } else e4 = f3 = b3;
        c3 = { baseState: d3.baseState, firstBaseUpdate: e4, lastBaseUpdate: f3, shared: d3.shared, effects: d3.effects };
        a3.updateQueue = c3;
        return;
      }
      a3 = c3.lastBaseUpdate;
      null === a3 ? c3.firstBaseUpdate = b3 : a3.next = b3;
      c3.lastBaseUpdate = b3;
    }
    function qh(a3, b3, c3, d3) {
      var e4 = a3.updateQueue;
      jh = false;
      var f3 = e4.firstBaseUpdate, g3 = e4.lastBaseUpdate, h3 = e4.shared.pending;
      if (null !== h3) {
        e4.shared.pending = null;
        var k3 = h3, l3 = k3.next;
        k3.next = null;
        null === g3 ? f3 = l3 : g3.next = l3;
        g3 = k3;
        var m3 = a3.alternate;
        null !== m3 && (m3 = m3.updateQueue, h3 = m3.lastBaseUpdate, h3 !== g3 && (null === h3 ? m3.firstBaseUpdate = l3 : h3.next = l3, m3.lastBaseUpdate = k3));
      }
      if (null !== f3) {
        var q3 = e4.baseState;
        g3 = 0;
        m3 = l3 = k3 = null;
        h3 = f3;
        do {
          var r3 = h3.lane, y3 = h3.eventTime;
          if ((d3 & r3) === r3) {
            null !== m3 && (m3 = m3.next = {
              eventTime: y3,
              lane: 0,
              tag: h3.tag,
              payload: h3.payload,
              callback: h3.callback,
              next: null
            });
            a: {
              var n3 = a3, t4 = h3;
              r3 = b3;
              y3 = c3;
              switch (t4.tag) {
                case 1:
                  n3 = t4.payload;
                  if ("function" === typeof n3) {
                    q3 = n3.call(y3, q3, r3);
                    break a;
                  }
                  q3 = n3;
                  break a;
                case 3:
                  n3.flags = n3.flags & -65537 | 128;
                case 0:
                  n3 = t4.payload;
                  r3 = "function" === typeof n3 ? n3.call(y3, q3, r3) : n3;
                  if (null === r3 || void 0 === r3) break a;
                  q3 = A3({}, q3, r3);
                  break a;
                case 2:
                  jh = true;
              }
            }
            null !== h3.callback && 0 !== h3.lane && (a3.flags |= 64, r3 = e4.effects, null === r3 ? e4.effects = [h3] : r3.push(h3));
          } else y3 = { eventTime: y3, lane: r3, tag: h3.tag, payload: h3.payload, callback: h3.callback, next: null }, null === m3 ? (l3 = m3 = y3, k3 = q3) : m3 = m3.next = y3, g3 |= r3;
          h3 = h3.next;
          if (null === h3) if (h3 = e4.shared.pending, null === h3) break;
          else r3 = h3, h3 = r3.next, r3.next = null, e4.lastBaseUpdate = r3, e4.shared.pending = null;
        } while (1);
        null === m3 && (k3 = q3);
        e4.baseState = k3;
        e4.firstBaseUpdate = l3;
        e4.lastBaseUpdate = m3;
        b3 = e4.shared.interleaved;
        if (null !== b3) {
          e4 = b3;
          do
            g3 |= e4.lane, e4 = e4.next;
          while (e4 !== b3);
        } else null === f3 && (e4.shared.lanes = 0);
        rh |= g3;
        a3.lanes = g3;
        a3.memoizedState = q3;
      }
    }
    function sh(a3, b3, c3) {
      a3 = b3.effects;
      b3.effects = null;
      if (null !== a3) for (b3 = 0; b3 < a3.length; b3++) {
        var d3 = a3[b3], e4 = d3.callback;
        if (null !== e4) {
          d3.callback = null;
          d3 = c3;
          if ("function" !== typeof e4) throw Error(p3(191, e4));
          e4.call(d3);
        }
      }
    }
    var th = {};
    var uh = Uf(th);
    var vh = Uf(th);
    var wh = Uf(th);
    function xh(a3) {
      if (a3 === th) throw Error(p3(174));
      return a3;
    }
    function yh(a3, b3) {
      G2(wh, b3);
      G2(vh, a3);
      G2(uh, th);
      a3 = b3.nodeType;
      switch (a3) {
        case 9:
        case 11:
          b3 = (b3 = b3.documentElement) ? b3.namespaceURI : lb(null, "");
          break;
        default:
          a3 = 8 === a3 ? b3.parentNode : b3, b3 = a3.namespaceURI || null, a3 = a3.tagName, b3 = lb(b3, a3);
      }
      E3(uh);
      G2(uh, b3);
    }
    function zh() {
      E3(uh);
      E3(vh);
      E3(wh);
    }
    function Ah(a3) {
      xh(wh.current);
      var b3 = xh(uh.current);
      var c3 = lb(b3, a3.type);
      b3 !== c3 && (G2(vh, a3), G2(uh, c3));
    }
    function Bh(a3) {
      vh.current === a3 && (E3(uh), E3(vh));
    }
    var L3 = Uf(0);
    function Ch(a3) {
      for (var b3 = a3; null !== b3; ) {
        if (13 === b3.tag) {
          var c3 = b3.memoizedState;
          if (null !== c3 && (c3 = c3.dehydrated, null === c3 || "$?" === c3.data || "$!" === c3.data)) return b3;
        } else if (19 === b3.tag && void 0 !== b3.memoizedProps.revealOrder) {
          if (0 !== (b3.flags & 128)) return b3;
        } else if (null !== b3.child) {
          b3.child.return = b3;
          b3 = b3.child;
          continue;
        }
        if (b3 === a3) break;
        for (; null === b3.sibling; ) {
          if (null === b3.return || b3.return === a3) return null;
          b3 = b3.return;
        }
        b3.sibling.return = b3.return;
        b3 = b3.sibling;
      }
      return null;
    }
    var Dh = [];
    function Eh() {
      for (var a3 = 0; a3 < Dh.length; a3++) Dh[a3]._workInProgressVersionPrimary = null;
      Dh.length = 0;
    }
    var Fh = ua.ReactCurrentDispatcher;
    var Gh = ua.ReactCurrentBatchConfig;
    var Hh = 0;
    var M3 = null;
    var N3 = null;
    var O3 = null;
    var Ih = false;
    var Jh = false;
    var Kh = 0;
    var Lh = 0;
    function P3() {
      throw Error(p3(321));
    }
    function Mh(a3, b3) {
      if (null === b3) return false;
      for (var c3 = 0; c3 < b3.length && c3 < a3.length; c3++) if (!He(a3[c3], b3[c3])) return false;
      return true;
    }
    function Nh(a3, b3, c3, d3, e4, f3) {
      Hh = f3;
      M3 = b3;
      b3.memoizedState = null;
      b3.updateQueue = null;
      b3.lanes = 0;
      Fh.current = null === a3 || null === a3.memoizedState ? Oh : Ph;
      a3 = c3(d3, e4);
      if (Jh) {
        f3 = 0;
        do {
          Jh = false;
          Kh = 0;
          if (25 <= f3) throw Error(p3(301));
          f3 += 1;
          O3 = N3 = null;
          b3.updateQueue = null;
          Fh.current = Qh;
          a3 = c3(d3, e4);
        } while (Jh);
      }
      Fh.current = Rh;
      b3 = null !== N3 && null !== N3.next;
      Hh = 0;
      O3 = N3 = M3 = null;
      Ih = false;
      if (b3) throw Error(p3(300));
      return a3;
    }
    function Sh() {
      var a3 = 0 !== Kh;
      Kh = 0;
      return a3;
    }
    function Th() {
      var a3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === O3 ? M3.memoizedState = O3 = a3 : O3 = O3.next = a3;
      return O3;
    }
    function Uh() {
      if (null === N3) {
        var a3 = M3.alternate;
        a3 = null !== a3 ? a3.memoizedState : null;
      } else a3 = N3.next;
      var b3 = null === O3 ? M3.memoizedState : O3.next;
      if (null !== b3) O3 = b3, N3 = a3;
      else {
        if (null === a3) throw Error(p3(310));
        N3 = a3;
        a3 = { memoizedState: N3.memoizedState, baseState: N3.baseState, baseQueue: N3.baseQueue, queue: N3.queue, next: null };
        null === O3 ? M3.memoizedState = O3 = a3 : O3 = O3.next = a3;
      }
      return O3;
    }
    function Vh(a3, b3) {
      return "function" === typeof b3 ? b3(a3) : b3;
    }
    function Wh(a3) {
      var b3 = Uh(), c3 = b3.queue;
      if (null === c3) throw Error(p3(311));
      c3.lastRenderedReducer = a3;
      var d3 = N3, e4 = d3.baseQueue, f3 = c3.pending;
      if (null !== f3) {
        if (null !== e4) {
          var g3 = e4.next;
          e4.next = f3.next;
          f3.next = g3;
        }
        d3.baseQueue = e4 = f3;
        c3.pending = null;
      }
      if (null !== e4) {
        f3 = e4.next;
        d3 = d3.baseState;
        var h3 = g3 = null, k3 = null, l3 = f3;
        do {
          var m3 = l3.lane;
          if ((Hh & m3) === m3) null !== k3 && (k3 = k3.next = { lane: 0, action: l3.action, hasEagerState: l3.hasEagerState, eagerState: l3.eagerState, next: null }), d3 = l3.hasEagerState ? l3.eagerState : a3(d3, l3.action);
          else {
            var q3 = {
              lane: m3,
              action: l3.action,
              hasEagerState: l3.hasEagerState,
              eagerState: l3.eagerState,
              next: null
            };
            null === k3 ? (h3 = k3 = q3, g3 = d3) : k3 = k3.next = q3;
            M3.lanes |= m3;
            rh |= m3;
          }
          l3 = l3.next;
        } while (null !== l3 && l3 !== f3);
        null === k3 ? g3 = d3 : k3.next = h3;
        He(d3, b3.memoizedState) || (dh = true);
        b3.memoizedState = d3;
        b3.baseState = g3;
        b3.baseQueue = k3;
        c3.lastRenderedState = d3;
      }
      a3 = c3.interleaved;
      if (null !== a3) {
        e4 = a3;
        do
          f3 = e4.lane, M3.lanes |= f3, rh |= f3, e4 = e4.next;
        while (e4 !== a3);
      } else null === e4 && (c3.lanes = 0);
      return [b3.memoizedState, c3.dispatch];
    }
    function Xh(a3) {
      var b3 = Uh(), c3 = b3.queue;
      if (null === c3) throw Error(p3(311));
      c3.lastRenderedReducer = a3;
      var d3 = c3.dispatch, e4 = c3.pending, f3 = b3.memoizedState;
      if (null !== e4) {
        c3.pending = null;
        var g3 = e4 = e4.next;
        do
          f3 = a3(f3, g3.action), g3 = g3.next;
        while (g3 !== e4);
        He(f3, b3.memoizedState) || (dh = true);
        b3.memoizedState = f3;
        null === b3.baseQueue && (b3.baseState = f3);
        c3.lastRenderedState = f3;
      }
      return [f3, d3];
    }
    function Yh() {
    }
    function Zh(a3, b3) {
      var c3 = M3, d3 = Uh(), e4 = b3(), f3 = !He(d3.memoizedState, e4);
      f3 && (d3.memoizedState = e4, dh = true);
      d3 = d3.queue;
      $h(ai.bind(null, c3, d3, a3), [a3]);
      if (d3.getSnapshot !== b3 || f3 || null !== O3 && O3.memoizedState.tag & 1) {
        c3.flags |= 2048;
        bi(9, ci.bind(null, c3, d3, e4, b3), void 0, null);
        if (null === Q2) throw Error(p3(349));
        0 !== (Hh & 30) || di(c3, b3, e4);
      }
      return e4;
    }
    function di(a3, b3, c3) {
      a3.flags |= 16384;
      a3 = { getSnapshot: b3, value: c3 };
      b3 = M3.updateQueue;
      null === b3 ? (b3 = { lastEffect: null, stores: null }, M3.updateQueue = b3, b3.stores = [a3]) : (c3 = b3.stores, null === c3 ? b3.stores = [a3] : c3.push(a3));
    }
    function ci(a3, b3, c3, d3) {
      b3.value = c3;
      b3.getSnapshot = d3;
      ei(b3) && fi(a3);
    }
    function ai(a3, b3, c3) {
      return c3(function() {
        ei(b3) && fi(a3);
      });
    }
    function ei(a3) {
      var b3 = a3.getSnapshot;
      a3 = a3.value;
      try {
        var c3 = b3();
        return !He(a3, c3);
      } catch (d3) {
        return true;
      }
    }
    function fi(a3) {
      var b3 = ih(a3, 1);
      null !== b3 && gi(b3, a3, 1, -1);
    }
    function hi(a3) {
      var b3 = Th();
      "function" === typeof a3 && (a3 = a3());
      b3.memoizedState = b3.baseState = a3;
      a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a3 };
      b3.queue = a3;
      a3 = a3.dispatch = ii.bind(null, M3, a3);
      return [b3.memoizedState, a3];
    }
    function bi(a3, b3, c3, d3) {
      a3 = { tag: a3, create: b3, destroy: c3, deps: d3, next: null };
      b3 = M3.updateQueue;
      null === b3 ? (b3 = { lastEffect: null, stores: null }, M3.updateQueue = b3, b3.lastEffect = a3.next = a3) : (c3 = b3.lastEffect, null === c3 ? b3.lastEffect = a3.next = a3 : (d3 = c3.next, c3.next = a3, a3.next = d3, b3.lastEffect = a3));
      return a3;
    }
    function ji() {
      return Uh().memoizedState;
    }
    function ki(a3, b3, c3, d3) {
      var e4 = Th();
      M3.flags |= a3;
      e4.memoizedState = bi(1 | b3, c3, void 0, void 0 === d3 ? null : d3);
    }
    function li(a3, b3, c3, d3) {
      var e4 = Uh();
      d3 = void 0 === d3 ? null : d3;
      var f3 = void 0;
      if (null !== N3) {
        var g3 = N3.memoizedState;
        f3 = g3.destroy;
        if (null !== d3 && Mh(d3, g3.deps)) {
          e4.memoizedState = bi(b3, c3, f3, d3);
          return;
        }
      }
      M3.flags |= a3;
      e4.memoizedState = bi(1 | b3, c3, f3, d3);
    }
    function mi(a3, b3) {
      return ki(8390656, 8, a3, b3);
    }
    function $h(a3, b3) {
      return li(2048, 8, a3, b3);
    }
    function ni(a3, b3) {
      return li(4, 2, a3, b3);
    }
    function oi(a3, b3) {
      return li(4, 4, a3, b3);
    }
    function pi(a3, b3) {
      if ("function" === typeof b3) return a3 = a3(), b3(a3), function() {
        b3(null);
      };
      if (null !== b3 && void 0 !== b3) return a3 = a3(), b3.current = a3, function() {
        b3.current = null;
      };
    }
    function qi(a3, b3, c3) {
      c3 = null !== c3 && void 0 !== c3 ? c3.concat([a3]) : null;
      return li(4, 4, pi.bind(null, b3, a3), c3);
    }
    function ri() {
    }
    function si(a3, b3) {
      var c3 = Uh();
      b3 = void 0 === b3 ? null : b3;
      var d3 = c3.memoizedState;
      if (null !== d3 && null !== b3 && Mh(b3, d3[1])) return d3[0];
      c3.memoizedState = [a3, b3];
      return a3;
    }
    function ti(a3, b3) {
      var c3 = Uh();
      b3 = void 0 === b3 ? null : b3;
      var d3 = c3.memoizedState;
      if (null !== d3 && null !== b3 && Mh(b3, d3[1])) return d3[0];
      a3 = a3();
      c3.memoizedState = [a3, b3];
      return a3;
    }
    function ui(a3, b3, c3) {
      if (0 === (Hh & 21)) return a3.baseState && (a3.baseState = false, dh = true), a3.memoizedState = c3;
      He(c3, b3) || (c3 = yc(), M3.lanes |= c3, rh |= c3, a3.baseState = true);
      return b3;
    }
    function vi(a3, b3) {
      var c3 = C3;
      C3 = 0 !== c3 && 4 > c3 ? c3 : 4;
      a3(true);
      var d3 = Gh.transition;
      Gh.transition = {};
      try {
        a3(false), b3();
      } finally {
        C3 = c3, Gh.transition = d3;
      }
    }
    function wi() {
      return Uh().memoizedState;
    }
    function xi(a3, b3, c3) {
      var d3 = yi(a3);
      c3 = { lane: d3, action: c3, hasEagerState: false, eagerState: null, next: null };
      if (zi(a3)) Ai(b3, c3);
      else if (c3 = hh(a3, b3, c3, d3), null !== c3) {
        var e4 = R2();
        gi(c3, a3, d3, e4);
        Bi(c3, b3, d3);
      }
    }
    function ii(a3, b3, c3) {
      var d3 = yi(a3), e4 = { lane: d3, action: c3, hasEagerState: false, eagerState: null, next: null };
      if (zi(a3)) Ai(b3, e4);
      else {
        var f3 = a3.alternate;
        if (0 === a3.lanes && (null === f3 || 0 === f3.lanes) && (f3 = b3.lastRenderedReducer, null !== f3)) try {
          var g3 = b3.lastRenderedState, h3 = f3(g3, c3);
          e4.hasEagerState = true;
          e4.eagerState = h3;
          if (He(h3, g3)) {
            var k3 = b3.interleaved;
            null === k3 ? (e4.next = e4, gh(b3)) : (e4.next = k3.next, k3.next = e4);
            b3.interleaved = e4;
            return;
          }
        } catch (l3) {
        } finally {
        }
        c3 = hh(a3, b3, e4, d3);
        null !== c3 && (e4 = R2(), gi(c3, a3, d3, e4), Bi(c3, b3, d3));
      }
    }
    function zi(a3) {
      var b3 = a3.alternate;
      return a3 === M3 || null !== b3 && b3 === M3;
    }
    function Ai(a3, b3) {
      Jh = Ih = true;
      var c3 = a3.pending;
      null === c3 ? b3.next = b3 : (b3.next = c3.next, c3.next = b3);
      a3.pending = b3;
    }
    function Bi(a3, b3, c3) {
      if (0 !== (c3 & 4194240)) {
        var d3 = b3.lanes;
        d3 &= a3.pendingLanes;
        c3 |= d3;
        b3.lanes = c3;
        Cc(a3, c3);
      }
    }
    var Rh = { readContext: eh, useCallback: P3, useContext: P3, useEffect: P3, useImperativeHandle: P3, useInsertionEffect: P3, useLayoutEffect: P3, useMemo: P3, useReducer: P3, useRef: P3, useState: P3, useDebugValue: P3, useDeferredValue: P3, useTransition: P3, useMutableSource: P3, useSyncExternalStore: P3, useId: P3, unstable_isNewReconciler: false };
    var Oh = { readContext: eh, useCallback: function(a3, b3) {
      Th().memoizedState = [a3, void 0 === b3 ? null : b3];
      return a3;
    }, useContext: eh, useEffect: mi, useImperativeHandle: function(a3, b3, c3) {
      c3 = null !== c3 && void 0 !== c3 ? c3.concat([a3]) : null;
      return ki(
        4194308,
        4,
        pi.bind(null, b3, a3),
        c3
      );
    }, useLayoutEffect: function(a3, b3) {
      return ki(4194308, 4, a3, b3);
    }, useInsertionEffect: function(a3, b3) {
      return ki(4, 2, a3, b3);
    }, useMemo: function(a3, b3) {
      var c3 = Th();
      b3 = void 0 === b3 ? null : b3;
      a3 = a3();
      c3.memoizedState = [a3, b3];
      return a3;
    }, useReducer: function(a3, b3, c3) {
      var d3 = Th();
      b3 = void 0 !== c3 ? c3(b3) : b3;
      d3.memoizedState = d3.baseState = b3;
      a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a3, lastRenderedState: b3 };
      d3.queue = a3;
      a3 = a3.dispatch = xi.bind(null, M3, a3);
      return [d3.memoizedState, a3];
    }, useRef: function(a3) {
      var b3 = Th();
      a3 = { current: a3 };
      return b3.memoizedState = a3;
    }, useState: hi, useDebugValue: ri, useDeferredValue: function(a3) {
      return Th().memoizedState = a3;
    }, useTransition: function() {
      var a3 = hi(false), b3 = a3[0];
      a3 = vi.bind(null, a3[1]);
      Th().memoizedState = a3;
      return [b3, a3];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a3, b3, c3) {
      var d3 = M3, e4 = Th();
      if (I3) {
        if (void 0 === c3) throw Error(p3(407));
        c3 = c3();
      } else {
        c3 = b3();
        if (null === Q2) throw Error(p3(349));
        0 !== (Hh & 30) || di(d3, b3, c3);
      }
      e4.memoizedState = c3;
      var f3 = { value: c3, getSnapshot: b3 };
      e4.queue = f3;
      mi(ai.bind(
        null,
        d3,
        f3,
        a3
      ), [a3]);
      d3.flags |= 2048;
      bi(9, ci.bind(null, d3, f3, c3, b3), void 0, null);
      return c3;
    }, useId: function() {
      var a3 = Th(), b3 = Q2.identifierPrefix;
      if (I3) {
        var c3 = sg;
        var d3 = rg;
        c3 = (d3 & ~(1 << 32 - oc(d3) - 1)).toString(32) + c3;
        b3 = ":" + b3 + "R" + c3;
        c3 = Kh++;
        0 < c3 && (b3 += "H" + c3.toString(32));
        b3 += ":";
      } else c3 = Lh++, b3 = ":" + b3 + "r" + c3.toString(32) + ":";
      return a3.memoizedState = b3;
    }, unstable_isNewReconciler: false };
    var Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function() {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function(a3) {
        var b3 = Uh();
        return ui(b3, N3.memoizedState, a3);
      },
      useTransition: function() {
        var a3 = Wh(Vh)[0], b3 = Uh().memoizedState;
        return [a3, b3];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false
    };
    var Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
      return Xh(Vh);
    }, useDebugValue: ri, useDeferredValue: function(a3) {
      var b3 = Uh();
      return null === N3 ? b3.memoizedState = a3 : ui(b3, N3.memoizedState, a3);
    }, useTransition: function() {
      var a3 = Xh(Vh)[0], b3 = Uh().memoizedState;
      return [a3, b3];
    }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
    function Ci(a3, b3) {
      if (a3 && a3.defaultProps) {
        b3 = A3({}, b3);
        a3 = a3.defaultProps;
        for (var c3 in a3) void 0 === b3[c3] && (b3[c3] = a3[c3]);
        return b3;
      }
      return b3;
    }
    function Di(a3, b3, c3, d3) {
      b3 = a3.memoizedState;
      c3 = c3(d3, b3);
      c3 = null === c3 || void 0 === c3 ? b3 : A3({}, b3, c3);
      a3.memoizedState = c3;
      0 === a3.lanes && (a3.updateQueue.baseState = c3);
    }
    var Ei = { isMounted: function(a3) {
      return (a3 = a3._reactInternals) ? Vb(a3) === a3 : false;
    }, enqueueSetState: function(a3, b3, c3) {
      a3 = a3._reactInternals;
      var d3 = R2(), e4 = yi(a3), f3 = mh(d3, e4);
      f3.payload = b3;
      void 0 !== c3 && null !== c3 && (f3.callback = c3);
      b3 = nh(a3, f3, e4);
      null !== b3 && (gi(b3, a3, e4, d3), oh(b3, a3, e4));
    }, enqueueReplaceState: function(a3, b3, c3) {
      a3 = a3._reactInternals;
      var d3 = R2(), e4 = yi(a3), f3 = mh(d3, e4);
      f3.tag = 1;
      f3.payload = b3;
      void 0 !== c3 && null !== c3 && (f3.callback = c3);
      b3 = nh(a3, f3, e4);
      null !== b3 && (gi(b3, a3, e4, d3), oh(b3, a3, e4));
    }, enqueueForceUpdate: function(a3, b3) {
      a3 = a3._reactInternals;
      var c3 = R2(), d3 = yi(a3), e4 = mh(c3, d3);
      e4.tag = 2;
      void 0 !== b3 && null !== b3 && (e4.callback = b3);
      b3 = nh(a3, e4, d3);
      null !== b3 && (gi(b3, a3, d3, c3), oh(b3, a3, d3));
    } };
    function Fi(a3, b3, c3, d3, e4, f3, g3) {
      a3 = a3.stateNode;
      return "function" === typeof a3.shouldComponentUpdate ? a3.shouldComponentUpdate(d3, f3, g3) : b3.prototype && b3.prototype.isPureReactComponent ? !Ie(c3, d3) || !Ie(e4, f3) : true;
    }
    function Gi(a3, b3, c3) {
      var d3 = false, e4 = Vf;
      var f3 = b3.contextType;
      "object" === typeof f3 && null !== f3 ? f3 = eh(f3) : (e4 = Zf(b3) ? Xf : H3.current, d3 = b3.contextTypes, f3 = (d3 = null !== d3 && void 0 !== d3) ? Yf(a3, e4) : Vf);
      b3 = new b3(c3, f3);
      a3.memoizedState = null !== b3.state && void 0 !== b3.state ? b3.state : null;
      b3.updater = Ei;
      a3.stateNode = b3;
      b3._reactInternals = a3;
      d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = e4, a3.__reactInternalMemoizedMaskedChildContext = f3);
      return b3;
    }
    function Hi(a3, b3, c3, d3) {
      a3 = b3.state;
      "function" === typeof b3.componentWillReceiveProps && b3.componentWillReceiveProps(c3, d3);
      "function" === typeof b3.UNSAFE_componentWillReceiveProps && b3.UNSAFE_componentWillReceiveProps(c3, d3);
      b3.state !== a3 && Ei.enqueueReplaceState(b3, b3.state, null);
    }
    function Ii(a3, b3, c3, d3) {
      var e4 = a3.stateNode;
      e4.props = c3;
      e4.state = a3.memoizedState;
      e4.refs = {};
      kh(a3);
      var f3 = b3.contextType;
      "object" === typeof f3 && null !== f3 ? e4.context = eh(f3) : (f3 = Zf(b3) ? Xf : H3.current, e4.context = Yf(a3, f3));
      e4.state = a3.memoizedState;
      f3 = b3.getDerivedStateFromProps;
      "function" === typeof f3 && (Di(a3, b3, f3, c3), e4.state = a3.memoizedState);
      "function" === typeof b3.getDerivedStateFromProps || "function" === typeof e4.getSnapshotBeforeUpdate || "function" !== typeof e4.UNSAFE_componentWillMount && "function" !== typeof e4.componentWillMount || (b3 = e4.state, "function" === typeof e4.componentWillMount && e4.componentWillMount(), "function" === typeof e4.UNSAFE_componentWillMount && e4.UNSAFE_componentWillMount(), b3 !== e4.state && Ei.enqueueReplaceState(e4, e4.state, null), qh(a3, c3, e4, d3), e4.state = a3.memoizedState);
      "function" === typeof e4.componentDidMount && (a3.flags |= 4194308);
    }
    function Ji(a3, b3) {
      try {
        var c3 = "", d3 = b3;
        do
          c3 += Pa(d3), d3 = d3.return;
        while (d3);
        var e4 = c3;
      } catch (f3) {
        e4 = "\nError generating stack: " + f3.message + "\n" + f3.stack;
      }
      return { value: a3, source: b3, stack: e4, digest: null };
    }
    function Ki(a3, b3, c3) {
      return { value: a3, source: null, stack: null != c3 ? c3 : null, digest: null != b3 ? b3 : null };
    }
    function Li(a3, b3) {
      try {
        console.error(b3.value);
      } catch (c3) {
        setTimeout(function() {
          throw c3;
        });
      }
    }
    var Mi = "function" === typeof WeakMap ? WeakMap : Map;
    function Ni(a3, b3, c3) {
      c3 = mh(-1, c3);
      c3.tag = 3;
      c3.payload = { element: null };
      var d3 = b3.value;
      c3.callback = function() {
        Oi || (Oi = true, Pi = d3);
        Li(a3, b3);
      };
      return c3;
    }
    function Qi(a3, b3, c3) {
      c3 = mh(-1, c3);
      c3.tag = 3;
      var d3 = a3.type.getDerivedStateFromError;
      if ("function" === typeof d3) {
        var e4 = b3.value;
        c3.payload = function() {
          return d3(e4);
        };
        c3.callback = function() {
          Li(a3, b3);
        };
      }
      var f3 = a3.stateNode;
      null !== f3 && "function" === typeof f3.componentDidCatch && (c3.callback = function() {
        Li(a3, b3);
        "function" !== typeof d3 && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
        var c4 = b3.stack;
        this.componentDidCatch(b3.value, { componentStack: null !== c4 ? c4 : "" });
      });
      return c3;
    }
    function Si(a3, b3, c3) {
      var d3 = a3.pingCache;
      if (null === d3) {
        d3 = a3.pingCache = new Mi();
        var e4 = /* @__PURE__ */ new Set();
        d3.set(b3, e4);
      } else e4 = d3.get(b3), void 0 === e4 && (e4 = /* @__PURE__ */ new Set(), d3.set(b3, e4));
      e4.has(c3) || (e4.add(c3), a3 = Ti.bind(null, a3, b3, c3), b3.then(a3, a3));
    }
    function Ui(a3) {
      do {
        var b3;
        if (b3 = 13 === a3.tag) b3 = a3.memoizedState, b3 = null !== b3 ? null !== b3.dehydrated ? true : false : true;
        if (b3) return a3;
        a3 = a3.return;
      } while (null !== a3);
      return null;
    }
    function Vi(a3, b3, c3, d3, e4) {
      if (0 === (a3.mode & 1)) return a3 === b3 ? a3.flags |= 65536 : (a3.flags |= 128, c3.flags |= 131072, c3.flags &= -52805, 1 === c3.tag && (null === c3.alternate ? c3.tag = 17 : (b3 = mh(-1, 1), b3.tag = 2, nh(c3, b3, 1))), c3.lanes |= 1), a3;
      a3.flags |= 65536;
      a3.lanes = e4;
      return a3;
    }
    var Wi = ua.ReactCurrentOwner;
    var dh = false;
    function Xi(a3, b3, c3, d3) {
      b3.child = null === a3 ? Vg(b3, null, c3, d3) : Ug(b3, a3.child, c3, d3);
    }
    function Yi(a3, b3, c3, d3, e4) {
      c3 = c3.render;
      var f3 = b3.ref;
      ch(b3, e4);
      d3 = Nh(a3, b3, c3, d3, f3, e4);
      c3 = Sh();
      if (null !== a3 && !dh) return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e4, Zi(a3, b3, e4);
      I3 && c3 && vg(b3);
      b3.flags |= 1;
      Xi(a3, b3, d3, e4);
      return b3.child;
    }
    function $i(a3, b3, c3, d3, e4) {
      if (null === a3) {
        var f3 = c3.type;
        if ("function" === typeof f3 && !aj(f3) && void 0 === f3.defaultProps && null === c3.compare && void 0 === c3.defaultProps) return b3.tag = 15, b3.type = f3, bj(a3, b3, f3, d3, e4);
        a3 = Rg(c3.type, null, d3, b3, b3.mode, e4);
        a3.ref = b3.ref;
        a3.return = b3;
        return b3.child = a3;
      }
      f3 = a3.child;
      if (0 === (a3.lanes & e4)) {
        var g3 = f3.memoizedProps;
        c3 = c3.compare;
        c3 = null !== c3 ? c3 : Ie;
        if (c3(g3, d3) && a3.ref === b3.ref) return Zi(a3, b3, e4);
      }
      b3.flags |= 1;
      a3 = Pg(f3, d3);
      a3.ref = b3.ref;
      a3.return = b3;
      return b3.child = a3;
    }
    function bj(a3, b3, c3, d3, e4) {
      if (null !== a3) {
        var f3 = a3.memoizedProps;
        if (Ie(f3, d3) && a3.ref === b3.ref) if (dh = false, b3.pendingProps = d3 = f3, 0 !== (a3.lanes & e4)) 0 !== (a3.flags & 131072) && (dh = true);
        else return b3.lanes = a3.lanes, Zi(a3, b3, e4);
      }
      return cj(a3, b3, c3, d3, e4);
    }
    function dj(a3, b3, c3) {
      var d3 = b3.pendingProps, e4 = d3.children, f3 = null !== a3 ? a3.memoizedState : null;
      if ("hidden" === d3.mode) if (0 === (b3.mode & 1)) b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(ej, fj), fj |= c3;
      else {
        if (0 === (c3 & 1073741824)) return a3 = null !== f3 ? f3.baseLanes | c3 : c3, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a3, cachePool: null, transitions: null }, b3.updateQueue = null, G2(ej, fj), fj |= a3, null;
        b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d3 = null !== f3 ? f3.baseLanes : c3;
        G2(ej, fj);
        fj |= d3;
      }
      else null !== f3 ? (d3 = f3.baseLanes | c3, b3.memoizedState = null) : d3 = c3, G2(ej, fj), fj |= d3;
      Xi(a3, b3, e4, c3);
      return b3.child;
    }
    function gj(a3, b3) {
      var c3 = b3.ref;
      if (null === a3 && null !== c3 || null !== a3 && a3.ref !== c3) b3.flags |= 512, b3.flags |= 2097152;
    }
    function cj(a3, b3, c3, d3, e4) {
      var f3 = Zf(c3) ? Xf : H3.current;
      f3 = Yf(b3, f3);
      ch(b3, e4);
      c3 = Nh(a3, b3, c3, d3, f3, e4);
      d3 = Sh();
      if (null !== a3 && !dh) return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e4, Zi(a3, b3, e4);
      I3 && d3 && vg(b3);
      b3.flags |= 1;
      Xi(a3, b3, c3, e4);
      return b3.child;
    }
    function hj(a3, b3, c3, d3, e4) {
      if (Zf(c3)) {
        var f3 = true;
        cg(b3);
      } else f3 = false;
      ch(b3, e4);
      if (null === b3.stateNode) ij(a3, b3), Gi(b3, c3, d3), Ii(b3, c3, d3, e4), d3 = true;
      else if (null === a3) {
        var g3 = b3.stateNode, h3 = b3.memoizedProps;
        g3.props = h3;
        var k3 = g3.context, l3 = c3.contextType;
        "object" === typeof l3 && null !== l3 ? l3 = eh(l3) : (l3 = Zf(c3) ? Xf : H3.current, l3 = Yf(b3, l3));
        var m3 = c3.getDerivedStateFromProps, q3 = "function" === typeof m3 || "function" === typeof g3.getSnapshotBeforeUpdate;
        q3 || "function" !== typeof g3.UNSAFE_componentWillReceiveProps && "function" !== typeof g3.componentWillReceiveProps || (h3 !== d3 || k3 !== l3) && Hi(b3, g3, d3, l3);
        jh = false;
        var r3 = b3.memoizedState;
        g3.state = r3;
        qh(b3, d3, g3, e4);
        k3 = b3.memoizedState;
        h3 !== d3 || r3 !== k3 || Wf.current || jh ? ("function" === typeof m3 && (Di(b3, c3, m3, d3), k3 = b3.memoizedState), (h3 = jh || Fi(b3, c3, h3, d3, r3, k3, l3)) ? (q3 || "function" !== typeof g3.UNSAFE_componentWillMount && "function" !== typeof g3.componentWillMount || ("function" === typeof g3.componentWillMount && g3.componentWillMount(), "function" === typeof g3.UNSAFE_componentWillMount && g3.UNSAFE_componentWillMount()), "function" === typeof g3.componentDidMount && (b3.flags |= 4194308)) : ("function" === typeof g3.componentDidMount && (b3.flags |= 4194308), b3.memoizedProps = d3, b3.memoizedState = k3), g3.props = d3, g3.state = k3, g3.context = l3, d3 = h3) : ("function" === typeof g3.componentDidMount && (b3.flags |= 4194308), d3 = false);
      } else {
        g3 = b3.stateNode;
        lh(a3, b3);
        h3 = b3.memoizedProps;
        l3 = b3.type === b3.elementType ? h3 : Ci(b3.type, h3);
        g3.props = l3;
        q3 = b3.pendingProps;
        r3 = g3.context;
        k3 = c3.contextType;
        "object" === typeof k3 && null !== k3 ? k3 = eh(k3) : (k3 = Zf(c3) ? Xf : H3.current, k3 = Yf(b3, k3));
        var y3 = c3.getDerivedStateFromProps;
        (m3 = "function" === typeof y3 || "function" === typeof g3.getSnapshotBeforeUpdate) || "function" !== typeof g3.UNSAFE_componentWillReceiveProps && "function" !== typeof g3.componentWillReceiveProps || (h3 !== q3 || r3 !== k3) && Hi(b3, g3, d3, k3);
        jh = false;
        r3 = b3.memoizedState;
        g3.state = r3;
        qh(b3, d3, g3, e4);
        var n3 = b3.memoizedState;
        h3 !== q3 || r3 !== n3 || Wf.current || jh ? ("function" === typeof y3 && (Di(b3, c3, y3, d3), n3 = b3.memoizedState), (l3 = jh || Fi(b3, c3, l3, d3, r3, n3, k3) || false) ? (m3 || "function" !== typeof g3.UNSAFE_componentWillUpdate && "function" !== typeof g3.componentWillUpdate || ("function" === typeof g3.componentWillUpdate && g3.componentWillUpdate(d3, n3, k3), "function" === typeof g3.UNSAFE_componentWillUpdate && g3.UNSAFE_componentWillUpdate(d3, n3, k3)), "function" === typeof g3.componentDidUpdate && (b3.flags |= 4), "function" === typeof g3.getSnapshotBeforeUpdate && (b3.flags |= 1024)) : ("function" !== typeof g3.componentDidUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g3.getSnapshotBeforeUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 1024), b3.memoizedProps = d3, b3.memoizedState = n3), g3.props = d3, g3.state = n3, g3.context = k3, d3 = l3) : ("function" !== typeof g3.componentDidUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g3.getSnapshotBeforeUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 1024), d3 = false);
      }
      return jj(a3, b3, c3, d3, f3, e4);
    }
    function jj(a3, b3, c3, d3, e4, f3) {
      gj(a3, b3);
      var g3 = 0 !== (b3.flags & 128);
      if (!d3 && !g3) return e4 && dg(b3, c3, false), Zi(a3, b3, f3);
      d3 = b3.stateNode;
      Wi.current = b3;
      var h3 = g3 && "function" !== typeof c3.getDerivedStateFromError ? null : d3.render();
      b3.flags |= 1;
      null !== a3 && g3 ? (b3.child = Ug(b3, a3.child, null, f3), b3.child = Ug(b3, null, h3, f3)) : Xi(a3, b3, h3, f3);
      b3.memoizedState = d3.state;
      e4 && dg(b3, c3, true);
      return b3.child;
    }
    function kj(a3) {
      var b3 = a3.stateNode;
      b3.pendingContext ? ag(a3, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && ag(a3, b3.context, false);
      yh(a3, b3.containerInfo);
    }
    function lj(a3, b3, c3, d3, e4) {
      Ig();
      Jg(e4);
      b3.flags |= 256;
      Xi(a3, b3, c3, d3);
      return b3.child;
    }
    var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function nj(a3) {
      return { baseLanes: a3, cachePool: null, transitions: null };
    }
    function oj(a3, b3, c3) {
      var d3 = b3.pendingProps, e4 = L3.current, f3 = false, g3 = 0 !== (b3.flags & 128), h3;
      (h3 = g3) || (h3 = null !== a3 && null === a3.memoizedState ? false : 0 !== (e4 & 2));
      if (h3) f3 = true, b3.flags &= -129;
      else if (null === a3 || null !== a3.memoizedState) e4 |= 1;
      G2(L3, e4 & 1);
      if (null === a3) {
        Eg(b3);
        a3 = b3.memoizedState;
        if (null !== a3 && (a3 = a3.dehydrated, null !== a3)) return 0 === (b3.mode & 1) ? b3.lanes = 1 : "$!" === a3.data ? b3.lanes = 8 : b3.lanes = 1073741824, null;
        g3 = d3.children;
        a3 = d3.fallback;
        return f3 ? (d3 = b3.mode, f3 = b3.child, g3 = { mode: "hidden", children: g3 }, 0 === (d3 & 1) && null !== f3 ? (f3.childLanes = 0, f3.pendingProps = g3) : f3 = pj(g3, d3, 0, null), a3 = Tg(a3, d3, c3, null), f3.return = b3, a3.return = b3, f3.sibling = a3, b3.child = f3, b3.child.memoizedState = nj(c3), b3.memoizedState = mj, a3) : qj(b3, g3);
      }
      e4 = a3.memoizedState;
      if (null !== e4 && (h3 = e4.dehydrated, null !== h3)) return rj(a3, b3, g3, d3, h3, e4, c3);
      if (f3) {
        f3 = d3.fallback;
        g3 = b3.mode;
        e4 = a3.child;
        h3 = e4.sibling;
        var k3 = { mode: "hidden", children: d3.children };
        0 === (g3 & 1) && b3.child !== e4 ? (d3 = b3.child, d3.childLanes = 0, d3.pendingProps = k3, b3.deletions = null) : (d3 = Pg(e4, k3), d3.subtreeFlags = e4.subtreeFlags & 14680064);
        null !== h3 ? f3 = Pg(h3, f3) : (f3 = Tg(f3, g3, c3, null), f3.flags |= 2);
        f3.return = b3;
        d3.return = b3;
        d3.sibling = f3;
        b3.child = d3;
        d3 = f3;
        f3 = b3.child;
        g3 = a3.child.memoizedState;
        g3 = null === g3 ? nj(c3) : { baseLanes: g3.baseLanes | c3, cachePool: null, transitions: g3.transitions };
        f3.memoizedState = g3;
        f3.childLanes = a3.childLanes & ~c3;
        b3.memoizedState = mj;
        return d3;
      }
      f3 = a3.child;
      a3 = f3.sibling;
      d3 = Pg(f3, { mode: "visible", children: d3.children });
      0 === (b3.mode & 1) && (d3.lanes = c3);
      d3.return = b3;
      d3.sibling = null;
      null !== a3 && (c3 = b3.deletions, null === c3 ? (b3.deletions = [a3], b3.flags |= 16) : c3.push(a3));
      b3.child = d3;
      b3.memoizedState = null;
      return d3;
    }
    function qj(a3, b3) {
      b3 = pj({ mode: "visible", children: b3 }, a3.mode, 0, null);
      b3.return = a3;
      return a3.child = b3;
    }
    function sj(a3, b3, c3, d3) {
      null !== d3 && Jg(d3);
      Ug(b3, a3.child, null, c3);
      a3 = qj(b3, b3.pendingProps.children);
      a3.flags |= 2;
      b3.memoizedState = null;
      return a3;
    }
    function rj(a3, b3, c3, d3, e4, f3, g3) {
      if (c3) {
        if (b3.flags & 256) return b3.flags &= -257, d3 = Ki(Error(p3(422))), sj(a3, b3, g3, d3);
        if (null !== b3.memoizedState) return b3.child = a3.child, b3.flags |= 128, null;
        f3 = d3.fallback;
        e4 = b3.mode;
        d3 = pj({ mode: "visible", children: d3.children }, e4, 0, null);
        f3 = Tg(f3, e4, g3, null);
        f3.flags |= 2;
        d3.return = b3;
        f3.return = b3;
        d3.sibling = f3;
        b3.child = d3;
        0 !== (b3.mode & 1) && Ug(b3, a3.child, null, g3);
        b3.child.memoizedState = nj(g3);
        b3.memoizedState = mj;
        return f3;
      }
      if (0 === (b3.mode & 1)) return sj(a3, b3, g3, null);
      if ("$!" === e4.data) {
        d3 = e4.nextSibling && e4.nextSibling.dataset;
        if (d3) var h3 = d3.dgst;
        d3 = h3;
        f3 = Error(p3(419));
        d3 = Ki(f3, d3, void 0);
        return sj(a3, b3, g3, d3);
      }
      h3 = 0 !== (g3 & a3.childLanes);
      if (dh || h3) {
        d3 = Q2;
        if (null !== d3) {
          switch (g3 & -g3) {
            case 4:
              e4 = 2;
              break;
            case 16:
              e4 = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e4 = 32;
              break;
            case 536870912:
              e4 = 268435456;
              break;
            default:
              e4 = 0;
          }
          e4 = 0 !== (e4 & (d3.suspendedLanes | g3)) ? 0 : e4;
          0 !== e4 && e4 !== f3.retryLane && (f3.retryLane = e4, ih(a3, e4), gi(d3, a3, e4, -1));
        }
        tj();
        d3 = Ki(Error(p3(421)));
        return sj(a3, b3, g3, d3);
      }
      if ("$?" === e4.data) return b3.flags |= 128, b3.child = a3.child, b3 = uj.bind(null, a3), e4._reactRetry = b3, null;
      a3 = f3.treeContext;
      yg = Lf(e4.nextSibling);
      xg = b3;
      I3 = true;
      zg = null;
      null !== a3 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a3.id, sg = a3.overflow, qg = b3);
      b3 = qj(b3, d3.children);
      b3.flags |= 4096;
      return b3;
    }
    function vj(a3, b3, c3) {
      a3.lanes |= b3;
      var d3 = a3.alternate;
      null !== d3 && (d3.lanes |= b3);
      bh(a3.return, b3, c3);
    }
    function wj(a3, b3, c3, d3, e4) {
      var f3 = a3.memoizedState;
      null === f3 ? a3.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d3, tail: c3, tailMode: e4 } : (f3.isBackwards = b3, f3.rendering = null, f3.renderingStartTime = 0, f3.last = d3, f3.tail = c3, f3.tailMode = e4);
    }
    function xj(a3, b3, c3) {
      var d3 = b3.pendingProps, e4 = d3.revealOrder, f3 = d3.tail;
      Xi(a3, b3, d3.children, c3);
      d3 = L3.current;
      if (0 !== (d3 & 2)) d3 = d3 & 1 | 2, b3.flags |= 128;
      else {
        if (null !== a3 && 0 !== (a3.flags & 128)) a: for (a3 = b3.child; null !== a3; ) {
          if (13 === a3.tag) null !== a3.memoizedState && vj(a3, c3, b3);
          else if (19 === a3.tag) vj(a3, c3, b3);
          else if (null !== a3.child) {
            a3.child.return = a3;
            a3 = a3.child;
            continue;
          }
          if (a3 === b3) break a;
          for (; null === a3.sibling; ) {
            if (null === a3.return || a3.return === b3) break a;
            a3 = a3.return;
          }
          a3.sibling.return = a3.return;
          a3 = a3.sibling;
        }
        d3 &= 1;
      }
      G2(L3, d3);
      if (0 === (b3.mode & 1)) b3.memoizedState = null;
      else switch (e4) {
        case "forwards":
          c3 = b3.child;
          for (e4 = null; null !== c3; ) a3 = c3.alternate, null !== a3 && null === Ch(a3) && (e4 = c3), c3 = c3.sibling;
          c3 = e4;
          null === c3 ? (e4 = b3.child, b3.child = null) : (e4 = c3.sibling, c3.sibling = null);
          wj(b3, false, e4, c3, f3);
          break;
        case "backwards":
          c3 = null;
          e4 = b3.child;
          for (b3.child = null; null !== e4; ) {
            a3 = e4.alternate;
            if (null !== a3 && null === Ch(a3)) {
              b3.child = e4;
              break;
            }
            a3 = e4.sibling;
            e4.sibling = c3;
            c3 = e4;
            e4 = a3;
          }
          wj(b3, true, c3, null, f3);
          break;
        case "together":
          wj(b3, false, null, null, void 0);
          break;
        default:
          b3.memoizedState = null;
      }
      return b3.child;
    }
    function ij(a3, b3) {
      0 === (b3.mode & 1) && null !== a3 && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
    }
    function Zi(a3, b3, c3) {
      null !== a3 && (b3.dependencies = a3.dependencies);
      rh |= b3.lanes;
      if (0 === (c3 & b3.childLanes)) return null;
      if (null !== a3 && b3.child !== a3.child) throw Error(p3(153));
      if (null !== b3.child) {
        a3 = b3.child;
        c3 = Pg(a3, a3.pendingProps);
        b3.child = c3;
        for (c3.return = b3; null !== a3.sibling; ) a3 = a3.sibling, c3 = c3.sibling = Pg(a3, a3.pendingProps), c3.return = b3;
        c3.sibling = null;
      }
      return b3.child;
    }
    function yj(a3, b3, c3) {
      switch (b3.tag) {
        case 3:
          kj(b3);
          Ig();
          break;
        case 5:
          Ah(b3);
          break;
        case 1:
          Zf(b3.type) && cg(b3);
          break;
        case 4:
          yh(b3, b3.stateNode.containerInfo);
          break;
        case 10:
          var d3 = b3.type._context, e4 = b3.memoizedProps.value;
          G2(Wg, d3._currentValue);
          d3._currentValue = e4;
          break;
        case 13:
          d3 = b3.memoizedState;
          if (null !== d3) {
            if (null !== d3.dehydrated) return G2(L3, L3.current & 1), b3.flags |= 128, null;
            if (0 !== (c3 & b3.child.childLanes)) return oj(a3, b3, c3);
            G2(L3, L3.current & 1);
            a3 = Zi(a3, b3, c3);
            return null !== a3 ? a3.sibling : null;
          }
          G2(L3, L3.current & 1);
          break;
        case 19:
          d3 = 0 !== (c3 & b3.childLanes);
          if (0 !== (a3.flags & 128)) {
            if (d3) return xj(a3, b3, c3);
            b3.flags |= 128;
          }
          e4 = b3.memoizedState;
          null !== e4 && (e4.rendering = null, e4.tail = null, e4.lastEffect = null);
          G2(L3, L3.current);
          if (d3) break;
          else return null;
        case 22:
        case 23:
          return b3.lanes = 0, dj(a3, b3, c3);
      }
      return Zi(a3, b3, c3);
    }
    var zj;
    var Aj;
    var Bj;
    var Cj;
    zj = function(a3, b3) {
      for (var c3 = b3.child; null !== c3; ) {
        if (5 === c3.tag || 6 === c3.tag) a3.appendChild(c3.stateNode);
        else if (4 !== c3.tag && null !== c3.child) {
          c3.child.return = c3;
          c3 = c3.child;
          continue;
        }
        if (c3 === b3) break;
        for (; null === c3.sibling; ) {
          if (null === c3.return || c3.return === b3) return;
          c3 = c3.return;
        }
        c3.sibling.return = c3.return;
        c3 = c3.sibling;
      }
    };
    Aj = function() {
    };
    Bj = function(a3, b3, c3, d3) {
      var e4 = a3.memoizedProps;
      if (e4 !== d3) {
        a3 = b3.stateNode;
        xh(uh.current);
        var f3 = null;
        switch (c3) {
          case "input":
            e4 = Ya(a3, e4);
            d3 = Ya(a3, d3);
            f3 = [];
            break;
          case "select":
            e4 = A3({}, e4, { value: void 0 });
            d3 = A3({}, d3, { value: void 0 });
            f3 = [];
            break;
          case "textarea":
            e4 = gb(a3, e4);
            d3 = gb(a3, d3);
            f3 = [];
            break;
          default:
            "function" !== typeof e4.onClick && "function" === typeof d3.onClick && (a3.onclick = Bf);
        }
        ub(c3, d3);
        var g3;
        c3 = null;
        for (l3 in e4) if (!d3.hasOwnProperty(l3) && e4.hasOwnProperty(l3) && null != e4[l3]) if ("style" === l3) {
          var h3 = e4[l3];
          for (g3 in h3) h3.hasOwnProperty(g3) && (c3 || (c3 = {}), c3[g3] = "");
        } else "dangerouslySetInnerHTML" !== l3 && "children" !== l3 && "suppressContentEditableWarning" !== l3 && "suppressHydrationWarning" !== l3 && "autoFocus" !== l3 && (ea.hasOwnProperty(l3) ? f3 || (f3 = []) : (f3 = f3 || []).push(l3, null));
        for (l3 in d3) {
          var k3 = d3[l3];
          h3 = null != e4 ? e4[l3] : void 0;
          if (d3.hasOwnProperty(l3) && k3 !== h3 && (null != k3 || null != h3)) if ("style" === l3) if (h3) {
            for (g3 in h3) !h3.hasOwnProperty(g3) || k3 && k3.hasOwnProperty(g3) || (c3 || (c3 = {}), c3[g3] = "");
            for (g3 in k3) k3.hasOwnProperty(g3) && h3[g3] !== k3[g3] && (c3 || (c3 = {}), c3[g3] = k3[g3]);
          } else c3 || (f3 || (f3 = []), f3.push(
            l3,
            c3
          )), c3 = k3;
          else "dangerouslySetInnerHTML" === l3 ? (k3 = k3 ? k3.__html : void 0, h3 = h3 ? h3.__html : void 0, null != k3 && h3 !== k3 && (f3 = f3 || []).push(l3, k3)) : "children" === l3 ? "string" !== typeof k3 && "number" !== typeof k3 || (f3 = f3 || []).push(l3, "" + k3) : "suppressContentEditableWarning" !== l3 && "suppressHydrationWarning" !== l3 && (ea.hasOwnProperty(l3) ? (null != k3 && "onScroll" === l3 && D2("scroll", a3), f3 || h3 === k3 || (f3 = [])) : (f3 = f3 || []).push(l3, k3));
        }
        c3 && (f3 = f3 || []).push("style", c3);
        var l3 = f3;
        if (b3.updateQueue = l3) b3.flags |= 4;
      }
    };
    Cj = function(a3, b3, c3, d3) {
      c3 !== d3 && (b3.flags |= 4);
    };
    function Dj(a3, b3) {
      if (!I3) switch (a3.tailMode) {
        case "hidden":
          b3 = a3.tail;
          for (var c3 = null; null !== b3; ) null !== b3.alternate && (c3 = b3), b3 = b3.sibling;
          null === c3 ? a3.tail = null : c3.sibling = null;
          break;
        case "collapsed":
          c3 = a3.tail;
          for (var d3 = null; null !== c3; ) null !== c3.alternate && (d3 = c3), c3 = c3.sibling;
          null === d3 ? b3 || null === a3.tail ? a3.tail = null : a3.tail.sibling = null : d3.sibling = null;
      }
    }
    function S3(a3) {
      var b3 = null !== a3.alternate && a3.alternate.child === a3.child, c3 = 0, d3 = 0;
      if (b3) for (var e4 = a3.child; null !== e4; ) c3 |= e4.lanes | e4.childLanes, d3 |= e4.subtreeFlags & 14680064, d3 |= e4.flags & 14680064, e4.return = a3, e4 = e4.sibling;
      else for (e4 = a3.child; null !== e4; ) c3 |= e4.lanes | e4.childLanes, d3 |= e4.subtreeFlags, d3 |= e4.flags, e4.return = a3, e4 = e4.sibling;
      a3.subtreeFlags |= d3;
      a3.childLanes = c3;
      return b3;
    }
    function Ej(a3, b3, c3) {
      var d3 = b3.pendingProps;
      wg(b3);
      switch (b3.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S3(b3), null;
        case 1:
          return Zf(b3.type) && $f(), S3(b3), null;
        case 3:
          d3 = b3.stateNode;
          zh();
          E3(Wf);
          E3(H3);
          Eh();
          d3.pendingContext && (d3.context = d3.pendingContext, d3.pendingContext = null);
          if (null === a3 || null === a3.child) Gg(b3) ? b3.flags |= 4 : null === a3 || a3.memoizedState.isDehydrated && 0 === (b3.flags & 256) || (b3.flags |= 1024, null !== zg && (Fj(zg), zg = null));
          Aj(a3, b3);
          S3(b3);
          return null;
        case 5:
          Bh(b3);
          var e4 = xh(wh.current);
          c3 = b3.type;
          if (null !== a3 && null != b3.stateNode) Bj(a3, b3, c3, d3, e4), a3.ref !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
          else {
            if (!d3) {
              if (null === b3.stateNode) throw Error(p3(166));
              S3(b3);
              return null;
            }
            a3 = xh(uh.current);
            if (Gg(b3)) {
              d3 = b3.stateNode;
              c3 = b3.type;
              var f3 = b3.memoizedProps;
              d3[Of] = b3;
              d3[Pf] = f3;
              a3 = 0 !== (b3.mode & 1);
              switch (c3) {
                case "dialog":
                  D2("cancel", d3);
                  D2("close", d3);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D2("load", d3);
                  break;
                case "video":
                case "audio":
                  for (e4 = 0; e4 < lf.length; e4++) D2(lf[e4], d3);
                  break;
                case "source":
                  D2("error", d3);
                  break;
                case "img":
                case "image":
                case "link":
                  D2(
                    "error",
                    d3
                  );
                  D2("load", d3);
                  break;
                case "details":
                  D2("toggle", d3);
                  break;
                case "input":
                  Za(d3, f3);
                  D2("invalid", d3);
                  break;
                case "select":
                  d3._wrapperState = { wasMultiple: !!f3.multiple };
                  D2("invalid", d3);
                  break;
                case "textarea":
                  hb(d3, f3), D2("invalid", d3);
              }
              ub(c3, f3);
              e4 = null;
              for (var g3 in f3) if (f3.hasOwnProperty(g3)) {
                var h3 = f3[g3];
                "children" === g3 ? "string" === typeof h3 ? d3.textContent !== h3 && (true !== f3.suppressHydrationWarning && Af(d3.textContent, h3, a3), e4 = ["children", h3]) : "number" === typeof h3 && d3.textContent !== "" + h3 && (true !== f3.suppressHydrationWarning && Af(
                  d3.textContent,
                  h3,
                  a3
                ), e4 = ["children", "" + h3]) : ea.hasOwnProperty(g3) && null != h3 && "onScroll" === g3 && D2("scroll", d3);
              }
              switch (c3) {
                case "input":
                  Va(d3);
                  db(d3, f3, true);
                  break;
                case "textarea":
                  Va(d3);
                  jb(d3);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f3.onClick && (d3.onclick = Bf);
              }
              d3 = e4;
              b3.updateQueue = d3;
              null !== d3 && (b3.flags |= 4);
            } else {
              g3 = 9 === e4.nodeType ? e4 : e4.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a3 && (a3 = kb(c3));
              "http://www.w3.org/1999/xhtml" === a3 ? "script" === c3 ? (a3 = g3.createElement("div"), a3.innerHTML = "<script><\/script>", a3 = a3.removeChild(a3.firstChild)) : "string" === typeof d3.is ? a3 = g3.createElement(c3, { is: d3.is }) : (a3 = g3.createElement(c3), "select" === c3 && (g3 = a3, d3.multiple ? g3.multiple = true : d3.size && (g3.size = d3.size))) : a3 = g3.createElementNS(a3, c3);
              a3[Of] = b3;
              a3[Pf] = d3;
              zj(a3, b3, false, false);
              b3.stateNode = a3;
              a: {
                g3 = vb(c3, d3);
                switch (c3) {
                  case "dialog":
                    D2("cancel", a3);
                    D2("close", a3);
                    e4 = d3;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D2("load", a3);
                    e4 = d3;
                    break;
                  case "video":
                  case "audio":
                    for (e4 = 0; e4 < lf.length; e4++) D2(lf[e4], a3);
                    e4 = d3;
                    break;
                  case "source":
                    D2("error", a3);
                    e4 = d3;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D2(
                      "error",
                      a3
                    );
                    D2("load", a3);
                    e4 = d3;
                    break;
                  case "details":
                    D2("toggle", a3);
                    e4 = d3;
                    break;
                  case "input":
                    Za(a3, d3);
                    e4 = Ya(a3, d3);
                    D2("invalid", a3);
                    break;
                  case "option":
                    e4 = d3;
                    break;
                  case "select":
                    a3._wrapperState = { wasMultiple: !!d3.multiple };
                    e4 = A3({}, d3, { value: void 0 });
                    D2("invalid", a3);
                    break;
                  case "textarea":
                    hb(a3, d3);
                    e4 = gb(a3, d3);
                    D2("invalid", a3);
                    break;
                  default:
                    e4 = d3;
                }
                ub(c3, e4);
                h3 = e4;
                for (f3 in h3) if (h3.hasOwnProperty(f3)) {
                  var k3 = h3[f3];
                  "style" === f3 ? sb(a3, k3) : "dangerouslySetInnerHTML" === f3 ? (k3 = k3 ? k3.__html : void 0, null != k3 && nb(a3, k3)) : "children" === f3 ? "string" === typeof k3 ? ("textarea" !== c3 || "" !== k3) && ob(a3, k3) : "number" === typeof k3 && ob(a3, "" + k3) : "suppressContentEditableWarning" !== f3 && "suppressHydrationWarning" !== f3 && "autoFocus" !== f3 && (ea.hasOwnProperty(f3) ? null != k3 && "onScroll" === f3 && D2("scroll", a3) : null != k3 && ta(a3, f3, k3, g3));
                }
                switch (c3) {
                  case "input":
                    Va(a3);
                    db(a3, d3, false);
                    break;
                  case "textarea":
                    Va(a3);
                    jb(a3);
                    break;
                  case "option":
                    null != d3.value && a3.setAttribute("value", "" + Sa(d3.value));
                    break;
                  case "select":
                    a3.multiple = !!d3.multiple;
                    f3 = d3.value;
                    null != f3 ? fb(a3, !!d3.multiple, f3, false) : null != d3.defaultValue && fb(
                      a3,
                      !!d3.multiple,
                      d3.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e4.onClick && (a3.onclick = Bf);
                }
                switch (c3) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d3 = !!d3.autoFocus;
                    break a;
                  case "img":
                    d3 = true;
                    break a;
                  default:
                    d3 = false;
                }
              }
              d3 && (b3.flags |= 4);
            }
            null !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
          }
          S3(b3);
          return null;
        case 6:
          if (a3 && null != b3.stateNode) Cj(a3, b3, a3.memoizedProps, d3);
          else {
            if ("string" !== typeof d3 && null === b3.stateNode) throw Error(p3(166));
            c3 = xh(wh.current);
            xh(uh.current);
            if (Gg(b3)) {
              d3 = b3.stateNode;
              c3 = b3.memoizedProps;
              d3[Of] = b3;
              if (f3 = d3.nodeValue !== c3) {
                if (a3 = xg, null !== a3) switch (a3.tag) {
                  case 3:
                    Af(d3.nodeValue, c3, 0 !== (a3.mode & 1));
                    break;
                  case 5:
                    true !== a3.memoizedProps.suppressHydrationWarning && Af(d3.nodeValue, c3, 0 !== (a3.mode & 1));
                }
              }
              f3 && (b3.flags |= 4);
            } else d3 = (9 === c3.nodeType ? c3 : c3.ownerDocument).createTextNode(d3), d3[Of] = b3, b3.stateNode = d3;
          }
          S3(b3);
          return null;
        case 13:
          E3(L3);
          d3 = b3.memoizedState;
          if (null === a3 || null !== a3.memoizedState && null !== a3.memoizedState.dehydrated) {
            if (I3 && null !== yg && 0 !== (b3.mode & 1) && 0 === (b3.flags & 128)) Hg(), Ig(), b3.flags |= 98560, f3 = false;
            else if (f3 = Gg(b3), null !== d3 && null !== d3.dehydrated) {
              if (null === a3) {
                if (!f3) throw Error(p3(318));
                f3 = b3.memoizedState;
                f3 = null !== f3 ? f3.dehydrated : null;
                if (!f3) throw Error(p3(317));
                f3[Of] = b3;
              } else Ig(), 0 === (b3.flags & 128) && (b3.memoizedState = null), b3.flags |= 4;
              S3(b3);
              f3 = false;
            } else null !== zg && (Fj(zg), zg = null), f3 = true;
            if (!f3) return b3.flags & 65536 ? b3 : null;
          }
          if (0 !== (b3.flags & 128)) return b3.lanes = c3, b3;
          d3 = null !== d3;
          d3 !== (null !== a3 && null !== a3.memoizedState) && d3 && (b3.child.flags |= 8192, 0 !== (b3.mode & 1) && (null === a3 || 0 !== (L3.current & 1) ? 0 === T3 && (T3 = 3) : tj()));
          null !== b3.updateQueue && (b3.flags |= 4);
          S3(b3);
          return null;
        case 4:
          return zh(), Aj(a3, b3), null === a3 && sf(b3.stateNode.containerInfo), S3(b3), null;
        case 10:
          return ah(b3.type._context), S3(b3), null;
        case 17:
          return Zf(b3.type) && $f(), S3(b3), null;
        case 19:
          E3(L3);
          f3 = b3.memoizedState;
          if (null === f3) return S3(b3), null;
          d3 = 0 !== (b3.flags & 128);
          g3 = f3.rendering;
          if (null === g3) if (d3) Dj(f3, false);
          else {
            if (0 !== T3 || null !== a3 && 0 !== (a3.flags & 128)) for (a3 = b3.child; null !== a3; ) {
              g3 = Ch(a3);
              if (null !== g3) {
                b3.flags |= 128;
                Dj(f3, false);
                d3 = g3.updateQueue;
                null !== d3 && (b3.updateQueue = d3, b3.flags |= 4);
                b3.subtreeFlags = 0;
                d3 = c3;
                for (c3 = b3.child; null !== c3; ) f3 = c3, a3 = d3, f3.flags &= 14680066, g3 = f3.alternate, null === g3 ? (f3.childLanes = 0, f3.lanes = a3, f3.child = null, f3.subtreeFlags = 0, f3.memoizedProps = null, f3.memoizedState = null, f3.updateQueue = null, f3.dependencies = null, f3.stateNode = null) : (f3.childLanes = g3.childLanes, f3.lanes = g3.lanes, f3.child = g3.child, f3.subtreeFlags = 0, f3.deletions = null, f3.memoizedProps = g3.memoizedProps, f3.memoizedState = g3.memoizedState, f3.updateQueue = g3.updateQueue, f3.type = g3.type, a3 = g3.dependencies, f3.dependencies = null === a3 ? null : { lanes: a3.lanes, firstContext: a3.firstContext }), c3 = c3.sibling;
                G2(L3, L3.current & 1 | 2);
                return b3.child;
              }
              a3 = a3.sibling;
            }
            null !== f3.tail && B3() > Gj && (b3.flags |= 128, d3 = true, Dj(f3, false), b3.lanes = 4194304);
          }
          else {
            if (!d3) if (a3 = Ch(g3), null !== a3) {
              if (b3.flags |= 128, d3 = true, c3 = a3.updateQueue, null !== c3 && (b3.updateQueue = c3, b3.flags |= 4), Dj(f3, true), null === f3.tail && "hidden" === f3.tailMode && !g3.alternate && !I3) return S3(b3), null;
            } else 2 * B3() - f3.renderingStartTime > Gj && 1073741824 !== c3 && (b3.flags |= 128, d3 = true, Dj(f3, false), b3.lanes = 4194304);
            f3.isBackwards ? (g3.sibling = b3.child, b3.child = g3) : (c3 = f3.last, null !== c3 ? c3.sibling = g3 : b3.child = g3, f3.last = g3);
          }
          if (null !== f3.tail) return b3 = f3.tail, f3.rendering = b3, f3.tail = b3.sibling, f3.renderingStartTime = B3(), b3.sibling = null, c3 = L3.current, G2(L3, d3 ? c3 & 1 | 2 : c3 & 1), b3;
          S3(b3);
          return null;
        case 22:
        case 23:
          return Hj(), d3 = null !== b3.memoizedState, null !== a3 && null !== a3.memoizedState !== d3 && (b3.flags |= 8192), d3 && 0 !== (b3.mode & 1) ? 0 !== (fj & 1073741824) && (S3(b3), b3.subtreeFlags & 6 && (b3.flags |= 8192)) : S3(b3), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p3(156, b3.tag));
    }
    function Ij(a3, b3) {
      wg(b3);
      switch (b3.tag) {
        case 1:
          return Zf(b3.type) && $f(), a3 = b3.flags, a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 3:
          return zh(), E3(Wf), E3(H3), Eh(), a3 = b3.flags, 0 !== (a3 & 65536) && 0 === (a3 & 128) ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 5:
          return Bh(b3), null;
        case 13:
          E3(L3);
          a3 = b3.memoizedState;
          if (null !== a3 && null !== a3.dehydrated) {
            if (null === b3.alternate) throw Error(p3(340));
            Ig();
          }
          a3 = b3.flags;
          return a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 19:
          return E3(L3), null;
        case 4:
          return zh(), null;
        case 10:
          return ah(b3.type._context), null;
        case 22:
        case 23:
          return Hj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Jj = false;
    var U2 = false;
    var Kj = "function" === typeof WeakSet ? WeakSet : Set;
    var V2 = null;
    function Lj(a3, b3) {
      var c3 = a3.ref;
      if (null !== c3) if ("function" === typeof c3) try {
        c3(null);
      } catch (d3) {
        W2(a3, b3, d3);
      }
      else c3.current = null;
    }
    function Mj(a3, b3, c3) {
      try {
        c3();
      } catch (d3) {
        W2(a3, b3, d3);
      }
    }
    var Nj = false;
    function Oj(a3, b3) {
      Cf = dd;
      a3 = Me();
      if (Ne(a3)) {
        if ("selectionStart" in a3) var c3 = { start: a3.selectionStart, end: a3.selectionEnd };
        else a: {
          c3 = (c3 = a3.ownerDocument) && c3.defaultView || window;
          var d3 = c3.getSelection && c3.getSelection();
          if (d3 && 0 !== d3.rangeCount) {
            c3 = d3.anchorNode;
            var e4 = d3.anchorOffset, f3 = d3.focusNode;
            d3 = d3.focusOffset;
            try {
              c3.nodeType, f3.nodeType;
            } catch (F3) {
              c3 = null;
              break a;
            }
            var g3 = 0, h3 = -1, k3 = -1, l3 = 0, m3 = 0, q3 = a3, r3 = null;
            b: for (; ; ) {
              for (var y3; ; ) {
                q3 !== c3 || 0 !== e4 && 3 !== q3.nodeType || (h3 = g3 + e4);
                q3 !== f3 || 0 !== d3 && 3 !== q3.nodeType || (k3 = g3 + d3);
                3 === q3.nodeType && (g3 += q3.nodeValue.length);
                if (null === (y3 = q3.firstChild)) break;
                r3 = q3;
                q3 = y3;
              }
              for (; ; ) {
                if (q3 === a3) break b;
                r3 === c3 && ++l3 === e4 && (h3 = g3);
                r3 === f3 && ++m3 === d3 && (k3 = g3);
                if (null !== (y3 = q3.nextSibling)) break;
                q3 = r3;
                r3 = q3.parentNode;
              }
              q3 = y3;
            }
            c3 = -1 === h3 || -1 === k3 ? null : { start: h3, end: k3 };
          } else c3 = null;
        }
        c3 = c3 || { start: 0, end: 0 };
      } else c3 = null;
      Df = { focusedElem: a3, selectionRange: c3 };
      dd = false;
      for (V2 = b3; null !== V2; ) if (b3 = V2, a3 = b3.child, 0 !== (b3.subtreeFlags & 1028) && null !== a3) a3.return = b3, V2 = a3;
      else for (; null !== V2; ) {
        b3 = V2;
        try {
          var n3 = b3.alternate;
          if (0 !== (b3.flags & 1024)) switch (b3.tag) {
            case 0:
            case 11:
            case 15:
              break;
            case 1:
              if (null !== n3) {
                var t4 = n3.memoizedProps, J2 = n3.memoizedState, x3 = b3.stateNode, w3 = x3.getSnapshotBeforeUpdate(b3.elementType === b3.type ? t4 : Ci(b3.type, t4), J2);
                x3.__reactInternalSnapshotBeforeUpdate = w3;
              }
              break;
            case 3:
              var u3 = b3.stateNode.containerInfo;
              1 === u3.nodeType ? u3.textContent = "" : 9 === u3.nodeType && u3.documentElement && u3.removeChild(u3.documentElement);
              break;
            case 5:
            case 6:
            case 4:
            case 17:
              break;
            default:
              throw Error(p3(163));
          }
        } catch (F3) {
          W2(b3, b3.return, F3);
        }
        a3 = b3.sibling;
        if (null !== a3) {
          a3.return = b3.return;
          V2 = a3;
          break;
        }
        V2 = b3.return;
      }
      n3 = Nj;
      Nj = false;
      return n3;
    }
    function Pj(a3, b3, c3) {
      var d3 = b3.updateQueue;
      d3 = null !== d3 ? d3.lastEffect : null;
      if (null !== d3) {
        var e4 = d3 = d3.next;
        do {
          if ((e4.tag & a3) === a3) {
            var f3 = e4.destroy;
            e4.destroy = void 0;
            void 0 !== f3 && Mj(b3, c3, f3);
          }
          e4 = e4.next;
        } while (e4 !== d3);
      }
    }
    function Qj(a3, b3) {
      b3 = b3.updateQueue;
      b3 = null !== b3 ? b3.lastEffect : null;
      if (null !== b3) {
        var c3 = b3 = b3.next;
        do {
          if ((c3.tag & a3) === a3) {
            var d3 = c3.create;
            c3.destroy = d3();
          }
          c3 = c3.next;
        } while (c3 !== b3);
      }
    }
    function Rj(a3) {
      var b3 = a3.ref;
      if (null !== b3) {
        var c3 = a3.stateNode;
        switch (a3.tag) {
          case 5:
            a3 = c3;
            break;
          default:
            a3 = c3;
        }
        "function" === typeof b3 ? b3(a3) : b3.current = a3;
      }
    }
    function Sj(a3) {
      var b3 = a3.alternate;
      null !== b3 && (a3.alternate = null, Sj(b3));
      a3.child = null;
      a3.deletions = null;
      a3.sibling = null;
      5 === a3.tag && (b3 = a3.stateNode, null !== b3 && (delete b3[Of], delete b3[Pf], delete b3[of], delete b3[Qf], delete b3[Rf]));
      a3.stateNode = null;
      a3.return = null;
      a3.dependencies = null;
      a3.memoizedProps = null;
      a3.memoizedState = null;
      a3.pendingProps = null;
      a3.stateNode = null;
      a3.updateQueue = null;
    }
    function Tj(a3) {
      return 5 === a3.tag || 3 === a3.tag || 4 === a3.tag;
    }
    function Uj(a3) {
      a: for (; ; ) {
        for (; null === a3.sibling; ) {
          if (null === a3.return || Tj(a3.return)) return null;
          a3 = a3.return;
        }
        a3.sibling.return = a3.return;
        for (a3 = a3.sibling; 5 !== a3.tag && 6 !== a3.tag && 18 !== a3.tag; ) {
          if (a3.flags & 2) continue a;
          if (null === a3.child || 4 === a3.tag) continue a;
          else a3.child.return = a3, a3 = a3.child;
        }
        if (!(a3.flags & 2)) return a3.stateNode;
      }
    }
    function Vj(a3, b3, c3) {
      var d3 = a3.tag;
      if (5 === d3 || 6 === d3) a3 = a3.stateNode, b3 ? 8 === c3.nodeType ? c3.parentNode.insertBefore(a3, b3) : c3.insertBefore(a3, b3) : (8 === c3.nodeType ? (b3 = c3.parentNode, b3.insertBefore(a3, c3)) : (b3 = c3, b3.appendChild(a3)), c3 = c3._reactRootContainer, null !== c3 && void 0 !== c3 || null !== b3.onclick || (b3.onclick = Bf));
      else if (4 !== d3 && (a3 = a3.child, null !== a3)) for (Vj(a3, b3, c3), a3 = a3.sibling; null !== a3; ) Vj(a3, b3, c3), a3 = a3.sibling;
    }
    function Wj(a3, b3, c3) {
      var d3 = a3.tag;
      if (5 === d3 || 6 === d3) a3 = a3.stateNode, b3 ? c3.insertBefore(a3, b3) : c3.appendChild(a3);
      else if (4 !== d3 && (a3 = a3.child, null !== a3)) for (Wj(a3, b3, c3), a3 = a3.sibling; null !== a3; ) Wj(a3, b3, c3), a3 = a3.sibling;
    }
    var X3 = null;
    var Xj = false;
    function Yj(a3, b3, c3) {
      for (c3 = c3.child; null !== c3; ) Zj(a3, b3, c3), c3 = c3.sibling;
    }
    function Zj(a3, b3, c3) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
        lc.onCommitFiberUnmount(kc, c3);
      } catch (h3) {
      }
      switch (c3.tag) {
        case 5:
          U2 || Lj(c3, b3);
        case 6:
          var d3 = X3, e4 = Xj;
          X3 = null;
          Yj(a3, b3, c3);
          X3 = d3;
          Xj = e4;
          null !== X3 && (Xj ? (a3 = X3, c3 = c3.stateNode, 8 === a3.nodeType ? a3.parentNode.removeChild(c3) : a3.removeChild(c3)) : X3.removeChild(c3.stateNode));
          break;
        case 18:
          null !== X3 && (Xj ? (a3 = X3, c3 = c3.stateNode, 8 === a3.nodeType ? Kf(a3.parentNode, c3) : 1 === a3.nodeType && Kf(a3, c3), bd(a3)) : Kf(X3, c3.stateNode));
          break;
        case 4:
          d3 = X3;
          e4 = Xj;
          X3 = c3.stateNode.containerInfo;
          Xj = true;
          Yj(a3, b3, c3);
          X3 = d3;
          Xj = e4;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U2 && (d3 = c3.updateQueue, null !== d3 && (d3 = d3.lastEffect, null !== d3))) {
            e4 = d3 = d3.next;
            do {
              var f3 = e4, g3 = f3.destroy;
              f3 = f3.tag;
              void 0 !== g3 && (0 !== (f3 & 2) ? Mj(c3, b3, g3) : 0 !== (f3 & 4) && Mj(c3, b3, g3));
              e4 = e4.next;
            } while (e4 !== d3);
          }
          Yj(a3, b3, c3);
          break;
        case 1:
          if (!U2 && (Lj(c3, b3), d3 = c3.stateNode, "function" === typeof d3.componentWillUnmount)) try {
            d3.props = c3.memoizedProps, d3.state = c3.memoizedState, d3.componentWillUnmount();
          } catch (h3) {
            W2(c3, b3, h3);
          }
          Yj(a3, b3, c3);
          break;
        case 21:
          Yj(a3, b3, c3);
          break;
        case 22:
          c3.mode & 1 ? (U2 = (d3 = U2) || null !== c3.memoizedState, Yj(a3, b3, c3), U2 = d3) : Yj(a3, b3, c3);
          break;
        default:
          Yj(a3, b3, c3);
      }
    }
    function ak(a3) {
      var b3 = a3.updateQueue;
      if (null !== b3) {
        a3.updateQueue = null;
        var c3 = a3.stateNode;
        null === c3 && (c3 = a3.stateNode = new Kj());
        b3.forEach(function(b4) {
          var d3 = bk.bind(null, a3, b4);
          c3.has(b4) || (c3.add(b4), b4.then(d3, d3));
        });
      }
    }
    function ck(a3, b3) {
      var c3 = b3.deletions;
      if (null !== c3) for (var d3 = 0; d3 < c3.length; d3++) {
        var e4 = c3[d3];
        try {
          var f3 = a3, g3 = b3, h3 = g3;
          a: for (; null !== h3; ) {
            switch (h3.tag) {
              case 5:
                X3 = h3.stateNode;
                Xj = false;
                break a;
              case 3:
                X3 = h3.stateNode.containerInfo;
                Xj = true;
                break a;
              case 4:
                X3 = h3.stateNode.containerInfo;
                Xj = true;
                break a;
            }
            h3 = h3.return;
          }
          if (null === X3) throw Error(p3(160));
          Zj(f3, g3, e4);
          X3 = null;
          Xj = false;
          var k3 = e4.alternate;
          null !== k3 && (k3.return = null);
          e4.return = null;
        } catch (l3) {
          W2(e4, b3, l3);
        }
      }
      if (b3.subtreeFlags & 12854) for (b3 = b3.child; null !== b3; ) dk(b3, a3), b3 = b3.sibling;
    }
    function dk(a3, b3) {
      var c3 = a3.alternate, d3 = a3.flags;
      switch (a3.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ck(b3, a3);
          ek(a3);
          if (d3 & 4) {
            try {
              Pj(3, a3, a3.return), Qj(3, a3);
            } catch (t4) {
              W2(a3, a3.return, t4);
            }
            try {
              Pj(5, a3, a3.return);
            } catch (t4) {
              W2(a3, a3.return, t4);
            }
          }
          break;
        case 1:
          ck(b3, a3);
          ek(a3);
          d3 & 512 && null !== c3 && Lj(c3, c3.return);
          break;
        case 5:
          ck(b3, a3);
          ek(a3);
          d3 & 512 && null !== c3 && Lj(c3, c3.return);
          if (a3.flags & 32) {
            var e4 = a3.stateNode;
            try {
              ob(e4, "");
            } catch (t4) {
              W2(a3, a3.return, t4);
            }
          }
          if (d3 & 4 && (e4 = a3.stateNode, null != e4)) {
            var f3 = a3.memoizedProps, g3 = null !== c3 ? c3.memoizedProps : f3, h3 = a3.type, k3 = a3.updateQueue;
            a3.updateQueue = null;
            if (null !== k3) try {
              "input" === h3 && "radio" === f3.type && null != f3.name && ab(e4, f3);
              vb(h3, g3);
              var l3 = vb(h3, f3);
              for (g3 = 0; g3 < k3.length; g3 += 2) {
                var m3 = k3[g3], q3 = k3[g3 + 1];
                "style" === m3 ? sb(e4, q3) : "dangerouslySetInnerHTML" === m3 ? nb(e4, q3) : "children" === m3 ? ob(e4, q3) : ta(e4, m3, q3, l3);
              }
              switch (h3) {
                case "input":
                  bb(e4, f3);
                  break;
                case "textarea":
                  ib(e4, f3);
                  break;
                case "select":
                  var r3 = e4._wrapperState.wasMultiple;
                  e4._wrapperState.wasMultiple = !!f3.multiple;
                  var y3 = f3.value;
                  null != y3 ? fb(e4, !!f3.multiple, y3, false) : r3 !== !!f3.multiple && (null != f3.defaultValue ? fb(
                    e4,
                    !!f3.multiple,
                    f3.defaultValue,
                    true
                  ) : fb(e4, !!f3.multiple, f3.multiple ? [] : "", false));
              }
              e4[Pf] = f3;
            } catch (t4) {
              W2(a3, a3.return, t4);
            }
          }
          break;
        case 6:
          ck(b3, a3);
          ek(a3);
          if (d3 & 4) {
            if (null === a3.stateNode) throw Error(p3(162));
            e4 = a3.stateNode;
            f3 = a3.memoizedProps;
            try {
              e4.nodeValue = f3;
            } catch (t4) {
              W2(a3, a3.return, t4);
            }
          }
          break;
        case 3:
          ck(b3, a3);
          ek(a3);
          if (d3 & 4 && null !== c3 && c3.memoizedState.isDehydrated) try {
            bd(b3.containerInfo);
          } catch (t4) {
            W2(a3, a3.return, t4);
          }
          break;
        case 4:
          ck(b3, a3);
          ek(a3);
          break;
        case 13:
          ck(b3, a3);
          ek(a3);
          e4 = a3.child;
          e4.flags & 8192 && (f3 = null !== e4.memoizedState, e4.stateNode.isHidden = f3, !f3 || null !== e4.alternate && null !== e4.alternate.memoizedState || (fk = B3()));
          d3 & 4 && ak(a3);
          break;
        case 22:
          m3 = null !== c3 && null !== c3.memoizedState;
          a3.mode & 1 ? (U2 = (l3 = U2) || m3, ck(b3, a3), U2 = l3) : ck(b3, a3);
          ek(a3);
          if (d3 & 8192) {
            l3 = null !== a3.memoizedState;
            if ((a3.stateNode.isHidden = l3) && !m3 && 0 !== (a3.mode & 1)) for (V2 = a3, m3 = a3.child; null !== m3; ) {
              for (q3 = V2 = m3; null !== V2; ) {
                r3 = V2;
                y3 = r3.child;
                switch (r3.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Pj(4, r3, r3.return);
                    break;
                  case 1:
                    Lj(r3, r3.return);
                    var n3 = r3.stateNode;
                    if ("function" === typeof n3.componentWillUnmount) {
                      d3 = r3;
                      c3 = r3.return;
                      try {
                        b3 = d3, n3.props = b3.memoizedProps, n3.state = b3.memoizedState, n3.componentWillUnmount();
                      } catch (t4) {
                        W2(d3, c3, t4);
                      }
                    }
                    break;
                  case 5:
                    Lj(r3, r3.return);
                    break;
                  case 22:
                    if (null !== r3.memoizedState) {
                      gk(q3);
                      continue;
                    }
                }
                null !== y3 ? (y3.return = r3, V2 = y3) : gk(q3);
              }
              m3 = m3.sibling;
            }
            a: for (m3 = null, q3 = a3; ; ) {
              if (5 === q3.tag) {
                if (null === m3) {
                  m3 = q3;
                  try {
                    e4 = q3.stateNode, l3 ? (f3 = e4.style, "function" === typeof f3.setProperty ? f3.setProperty("display", "none", "important") : f3.display = "none") : (h3 = q3.stateNode, k3 = q3.memoizedProps.style, g3 = void 0 !== k3 && null !== k3 && k3.hasOwnProperty("display") ? k3.display : null, h3.style.display = rb("display", g3));
                  } catch (t4) {
                    W2(a3, a3.return, t4);
                  }
                }
              } else if (6 === q3.tag) {
                if (null === m3) try {
                  q3.stateNode.nodeValue = l3 ? "" : q3.memoizedProps;
                } catch (t4) {
                  W2(a3, a3.return, t4);
                }
              } else if ((22 !== q3.tag && 23 !== q3.tag || null === q3.memoizedState || q3 === a3) && null !== q3.child) {
                q3.child.return = q3;
                q3 = q3.child;
                continue;
              }
              if (q3 === a3) break a;
              for (; null === q3.sibling; ) {
                if (null === q3.return || q3.return === a3) break a;
                m3 === q3 && (m3 = null);
                q3 = q3.return;
              }
              m3 === q3 && (m3 = null);
              q3.sibling.return = q3.return;
              q3 = q3.sibling;
            }
          }
          break;
        case 19:
          ck(b3, a3);
          ek(a3);
          d3 & 4 && ak(a3);
          break;
        case 21:
          break;
        default:
          ck(
            b3,
            a3
          ), ek(a3);
      }
    }
    function ek(a3) {
      var b3 = a3.flags;
      if (b3 & 2) {
        try {
          a: {
            for (var c3 = a3.return; null !== c3; ) {
              if (Tj(c3)) {
                var d3 = c3;
                break a;
              }
              c3 = c3.return;
            }
            throw Error(p3(160));
          }
          switch (d3.tag) {
            case 5:
              var e4 = d3.stateNode;
              d3.flags & 32 && (ob(e4, ""), d3.flags &= -33);
              var f3 = Uj(a3);
              Wj(a3, f3, e4);
              break;
            case 3:
            case 4:
              var g3 = d3.stateNode.containerInfo, h3 = Uj(a3);
              Vj(a3, h3, g3);
              break;
            default:
              throw Error(p3(161));
          }
        } catch (k3) {
          W2(a3, a3.return, k3);
        }
        a3.flags &= -3;
      }
      b3 & 4096 && (a3.flags &= -4097);
    }
    function hk(a3, b3, c3) {
      V2 = a3;
      ik(a3, b3, c3);
    }
    function ik(a3, b3, c3) {
      for (var d3 = 0 !== (a3.mode & 1); null !== V2; ) {
        var e4 = V2, f3 = e4.child;
        if (22 === e4.tag && d3) {
          var g3 = null !== e4.memoizedState || Jj;
          if (!g3) {
            var h3 = e4.alternate, k3 = null !== h3 && null !== h3.memoizedState || U2;
            h3 = Jj;
            var l3 = U2;
            Jj = g3;
            if ((U2 = k3) && !l3) for (V2 = e4; null !== V2; ) g3 = V2, k3 = g3.child, 22 === g3.tag && null !== g3.memoizedState ? jk(e4) : null !== k3 ? (k3.return = g3, V2 = k3) : jk(e4);
            for (; null !== f3; ) V2 = f3, ik(f3, b3, c3), f3 = f3.sibling;
            V2 = e4;
            Jj = h3;
            U2 = l3;
          }
          kk(a3, b3, c3);
        } else 0 !== (e4.subtreeFlags & 8772) && null !== f3 ? (f3.return = e4, V2 = f3) : kk(a3, b3, c3);
      }
    }
    function kk(a3) {
      for (; null !== V2; ) {
        var b3 = V2;
        if (0 !== (b3.flags & 8772)) {
          var c3 = b3.alternate;
          try {
            if (0 !== (b3.flags & 8772)) switch (b3.tag) {
              case 0:
              case 11:
              case 15:
                U2 || Qj(5, b3);
                break;
              case 1:
                var d3 = b3.stateNode;
                if (b3.flags & 4 && !U2) if (null === c3) d3.componentDidMount();
                else {
                  var e4 = b3.elementType === b3.type ? c3.memoizedProps : Ci(b3.type, c3.memoizedProps);
                  d3.componentDidUpdate(e4, c3.memoizedState, d3.__reactInternalSnapshotBeforeUpdate);
                }
                var f3 = b3.updateQueue;
                null !== f3 && sh(b3, f3, d3);
                break;
              case 3:
                var g3 = b3.updateQueue;
                if (null !== g3) {
                  c3 = null;
                  if (null !== b3.child) switch (b3.child.tag) {
                    case 5:
                      c3 = b3.child.stateNode;
                      break;
                    case 1:
                      c3 = b3.child.stateNode;
                  }
                  sh(b3, g3, c3);
                }
                break;
              case 5:
                var h3 = b3.stateNode;
                if (null === c3 && b3.flags & 4) {
                  c3 = h3;
                  var k3 = b3.memoizedProps;
                  switch (b3.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k3.autoFocus && c3.focus();
                      break;
                    case "img":
                      k3.src && (c3.src = k3.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b3.memoizedState) {
                  var l3 = b3.alternate;
                  if (null !== l3) {
                    var m3 = l3.memoizedState;
                    if (null !== m3) {
                      var q3 = m3.dehydrated;
                      null !== q3 && bd(q3);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p3(163));
            }
            U2 || b3.flags & 512 && Rj(b3);
          } catch (r3) {
            W2(b3, b3.return, r3);
          }
        }
        if (b3 === a3) {
          V2 = null;
          break;
        }
        c3 = b3.sibling;
        if (null !== c3) {
          c3.return = b3.return;
          V2 = c3;
          break;
        }
        V2 = b3.return;
      }
    }
    function gk(a3) {
      for (; null !== V2; ) {
        var b3 = V2;
        if (b3 === a3) {
          V2 = null;
          break;
        }
        var c3 = b3.sibling;
        if (null !== c3) {
          c3.return = b3.return;
          V2 = c3;
          break;
        }
        V2 = b3.return;
      }
    }
    function jk(a3) {
      for (; null !== V2; ) {
        var b3 = V2;
        try {
          switch (b3.tag) {
            case 0:
            case 11:
            case 15:
              var c3 = b3.return;
              try {
                Qj(4, b3);
              } catch (k3) {
                W2(b3, c3, k3);
              }
              break;
            case 1:
              var d3 = b3.stateNode;
              if ("function" === typeof d3.componentDidMount) {
                var e4 = b3.return;
                try {
                  d3.componentDidMount();
                } catch (k3) {
                  W2(b3, e4, k3);
                }
              }
              var f3 = b3.return;
              try {
                Rj(b3);
              } catch (k3) {
                W2(b3, f3, k3);
              }
              break;
            case 5:
              var g3 = b3.return;
              try {
                Rj(b3);
              } catch (k3) {
                W2(b3, g3, k3);
              }
          }
        } catch (k3) {
          W2(b3, b3.return, k3);
        }
        if (b3 === a3) {
          V2 = null;
          break;
        }
        var h3 = b3.sibling;
        if (null !== h3) {
          h3.return = b3.return;
          V2 = h3;
          break;
        }
        V2 = b3.return;
      }
    }
    var lk = Math.ceil;
    var mk = ua.ReactCurrentDispatcher;
    var nk = ua.ReactCurrentOwner;
    var ok3 = ua.ReactCurrentBatchConfig;
    var K2 = 0;
    var Q2 = null;
    var Y2 = null;
    var Z2 = 0;
    var fj = 0;
    var ej = Uf(0);
    var T3 = 0;
    var pk = null;
    var rh = 0;
    var qk = 0;
    var rk = 0;
    var sk = null;
    var tk = null;
    var fk = 0;
    var Gj = Infinity;
    var uk = null;
    var Oi = false;
    var Pi = null;
    var Ri = null;
    var vk = false;
    var wk = null;
    var xk = 0;
    var yk = 0;
    var zk = null;
    var Ak = -1;
    var Bk = 0;
    function R2() {
      return 0 !== (K2 & 6) ? B3() : -1 !== Ak ? Ak : Ak = B3();
    }
    function yi(a3) {
      if (0 === (a3.mode & 1)) return 1;
      if (0 !== (K2 & 2) && 0 !== Z2) return Z2 & -Z2;
      if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
      a3 = C3;
      if (0 !== a3) return a3;
      a3 = window.event;
      a3 = void 0 === a3 ? 16 : jd(a3.type);
      return a3;
    }
    function gi(a3, b3, c3, d3) {
      if (50 < yk) throw yk = 0, zk = null, Error(p3(185));
      Ac(a3, c3, d3);
      if (0 === (K2 & 2) || a3 !== Q2) a3 === Q2 && (0 === (K2 & 2) && (qk |= c3), 4 === T3 && Ck(a3, Z2)), Dk(a3, d3), 1 === c3 && 0 === K2 && 0 === (b3.mode & 1) && (Gj = B3() + 500, fg && jg());
    }
    function Dk(a3, b3) {
      var c3 = a3.callbackNode;
      wc(a3, b3);
      var d3 = uc(a3, a3 === Q2 ? Z2 : 0);
      if (0 === d3) null !== c3 && bc(c3), a3.callbackNode = null, a3.callbackPriority = 0;
      else if (b3 = d3 & -d3, a3.callbackPriority !== b3) {
        null != c3 && bc(c3);
        if (1 === b3) 0 === a3.tag ? ig(Ek.bind(null, a3)) : hg(Ek.bind(null, a3)), Jf(function() {
          0 === (K2 & 6) && jg();
        }), c3 = null;
        else {
          switch (Dc(d3)) {
            case 1:
              c3 = fc;
              break;
            case 4:
              c3 = gc;
              break;
            case 16:
              c3 = hc;
              break;
            case 536870912:
              c3 = jc;
              break;
            default:
              c3 = hc;
          }
          c3 = Fk(c3, Gk.bind(null, a3));
        }
        a3.callbackPriority = b3;
        a3.callbackNode = c3;
      }
    }
    function Gk(a3, b3) {
      Ak = -1;
      Bk = 0;
      if (0 !== (K2 & 6)) throw Error(p3(327));
      var c3 = a3.callbackNode;
      if (Hk() && a3.callbackNode !== c3) return null;
      var d3 = uc(a3, a3 === Q2 ? Z2 : 0);
      if (0 === d3) return null;
      if (0 !== (d3 & 30) || 0 !== (d3 & a3.expiredLanes) || b3) b3 = Ik(a3, d3);
      else {
        b3 = d3;
        var e4 = K2;
        K2 |= 2;
        var f3 = Jk();
        if (Q2 !== a3 || Z2 !== b3) uk = null, Gj = B3() + 500, Kk(a3, b3);
        do
          try {
            Lk();
            break;
          } catch (h3) {
            Mk(a3, h3);
          }
        while (1);
        $g();
        mk.current = f3;
        K2 = e4;
        null !== Y2 ? b3 = 0 : (Q2 = null, Z2 = 0, b3 = T3);
      }
      if (0 !== b3) {
        2 === b3 && (e4 = xc(a3), 0 !== e4 && (d3 = e4, b3 = Nk(a3, e4)));
        if (1 === b3) throw c3 = pk, Kk(a3, 0), Ck(a3, d3), Dk(a3, B3()), c3;
        if (6 === b3) Ck(a3, d3);
        else {
          e4 = a3.current.alternate;
          if (0 === (d3 & 30) && !Ok(e4) && (b3 = Ik(a3, d3), 2 === b3 && (f3 = xc(a3), 0 !== f3 && (d3 = f3, b3 = Nk(a3, f3))), 1 === b3)) throw c3 = pk, Kk(a3, 0), Ck(a3, d3), Dk(a3, B3()), c3;
          a3.finishedWork = e4;
          a3.finishedLanes = d3;
          switch (b3) {
            case 0:
            case 1:
              throw Error(p3(345));
            case 2:
              Pk(a3, tk, uk);
              break;
            case 3:
              Ck(a3, d3);
              if ((d3 & 130023424) === d3 && (b3 = fk + 500 - B3(), 10 < b3)) {
                if (0 !== uc(a3, 0)) break;
                e4 = a3.suspendedLanes;
                if ((e4 & d3) !== d3) {
                  R2();
                  a3.pingedLanes |= a3.suspendedLanes & e4;
                  break;
                }
                a3.timeoutHandle = Ff(Pk.bind(null, a3, tk, uk), b3);
                break;
              }
              Pk(a3, tk, uk);
              break;
            case 4:
              Ck(a3, d3);
              if ((d3 & 4194240) === d3) break;
              b3 = a3.eventTimes;
              for (e4 = -1; 0 < d3; ) {
                var g3 = 31 - oc(d3);
                f3 = 1 << g3;
                g3 = b3[g3];
                g3 > e4 && (e4 = g3);
                d3 &= ~f3;
              }
              d3 = e4;
              d3 = B3() - d3;
              d3 = (120 > d3 ? 120 : 480 > d3 ? 480 : 1080 > d3 ? 1080 : 1920 > d3 ? 1920 : 3e3 > d3 ? 3e3 : 4320 > d3 ? 4320 : 1960 * lk(d3 / 1960)) - d3;
              if (10 < d3) {
                a3.timeoutHandle = Ff(Pk.bind(null, a3, tk, uk), d3);
                break;
              }
              Pk(a3, tk, uk);
              break;
            case 5:
              Pk(a3, tk, uk);
              break;
            default:
              throw Error(p3(329));
          }
        }
      }
      Dk(a3, B3());
      return a3.callbackNode === c3 ? Gk.bind(null, a3) : null;
    }
    function Nk(a3, b3) {
      var c3 = sk;
      a3.current.memoizedState.isDehydrated && (Kk(a3, b3).flags |= 256);
      a3 = Ik(a3, b3);
      2 !== a3 && (b3 = tk, tk = c3, null !== b3 && Fj(b3));
      return a3;
    }
    function Fj(a3) {
      null === tk ? tk = a3 : tk.push.apply(tk, a3);
    }
    function Ok(a3) {
      for (var b3 = a3; ; ) {
        if (b3.flags & 16384) {
          var c3 = b3.updateQueue;
          if (null !== c3 && (c3 = c3.stores, null !== c3)) for (var d3 = 0; d3 < c3.length; d3++) {
            var e4 = c3[d3], f3 = e4.getSnapshot;
            e4 = e4.value;
            try {
              if (!He(f3(), e4)) return false;
            } catch (g3) {
              return false;
            }
          }
        }
        c3 = b3.child;
        if (b3.subtreeFlags & 16384 && null !== c3) c3.return = b3, b3 = c3;
        else {
          if (b3 === a3) break;
          for (; null === b3.sibling; ) {
            if (null === b3.return || b3.return === a3) return true;
            b3 = b3.return;
          }
          b3.sibling.return = b3.return;
          b3 = b3.sibling;
        }
      }
      return true;
    }
    function Ck(a3, b3) {
      b3 &= ~rk;
      b3 &= ~qk;
      a3.suspendedLanes |= b3;
      a3.pingedLanes &= ~b3;
      for (a3 = a3.expirationTimes; 0 < b3; ) {
        var c3 = 31 - oc(b3), d3 = 1 << c3;
        a3[c3] = -1;
        b3 &= ~d3;
      }
    }
    function Ek(a3) {
      if (0 !== (K2 & 6)) throw Error(p3(327));
      Hk();
      var b3 = uc(a3, 0);
      if (0 === (b3 & 1)) return Dk(a3, B3()), null;
      var c3 = Ik(a3, b3);
      if (0 !== a3.tag && 2 === c3) {
        var d3 = xc(a3);
        0 !== d3 && (b3 = d3, c3 = Nk(a3, d3));
      }
      if (1 === c3) throw c3 = pk, Kk(a3, 0), Ck(a3, b3), Dk(a3, B3()), c3;
      if (6 === c3) throw Error(p3(345));
      a3.finishedWork = a3.current.alternate;
      a3.finishedLanes = b3;
      Pk(a3, tk, uk);
      Dk(a3, B3());
      return null;
    }
    function Qk(a3, b3) {
      var c3 = K2;
      K2 |= 1;
      try {
        return a3(b3);
      } finally {
        K2 = c3, 0 === K2 && (Gj = B3() + 500, fg && jg());
      }
    }
    function Rk(a3) {
      null !== wk && 0 === wk.tag && 0 === (K2 & 6) && Hk();
      var b3 = K2;
      K2 |= 1;
      var c3 = ok3.transition, d3 = C3;
      try {
        if (ok3.transition = null, C3 = 1, a3) return a3();
      } finally {
        C3 = d3, ok3.transition = c3, K2 = b3, 0 === (K2 & 6) && jg();
      }
    }
    function Hj() {
      fj = ej.current;
      E3(ej);
    }
    function Kk(a3, b3) {
      a3.finishedWork = null;
      a3.finishedLanes = 0;
      var c3 = a3.timeoutHandle;
      -1 !== c3 && (a3.timeoutHandle = -1, Gf(c3));
      if (null !== Y2) for (c3 = Y2.return; null !== c3; ) {
        var d3 = c3;
        wg(d3);
        switch (d3.tag) {
          case 1:
            d3 = d3.type.childContextTypes;
            null !== d3 && void 0 !== d3 && $f();
            break;
          case 3:
            zh();
            E3(Wf);
            E3(H3);
            Eh();
            break;
          case 5:
            Bh(d3);
            break;
          case 4:
            zh();
            break;
          case 13:
            E3(L3);
            break;
          case 19:
            E3(L3);
            break;
          case 10:
            ah(d3.type._context);
            break;
          case 22:
          case 23:
            Hj();
        }
        c3 = c3.return;
      }
      Q2 = a3;
      Y2 = a3 = Pg(a3.current, null);
      Z2 = fj = b3;
      T3 = 0;
      pk = null;
      rk = qk = rh = 0;
      tk = sk = null;
      if (null !== fh) {
        for (b3 = 0; b3 < fh.length; b3++) if (c3 = fh[b3], d3 = c3.interleaved, null !== d3) {
          c3.interleaved = null;
          var e4 = d3.next, f3 = c3.pending;
          if (null !== f3) {
            var g3 = f3.next;
            f3.next = e4;
            d3.next = g3;
          }
          c3.pending = d3;
        }
        fh = null;
      }
      return a3;
    }
    function Mk(a3, b3) {
      do {
        var c3 = Y2;
        try {
          $g();
          Fh.current = Rh;
          if (Ih) {
            for (var d3 = M3.memoizedState; null !== d3; ) {
              var e4 = d3.queue;
              null !== e4 && (e4.pending = null);
              d3 = d3.next;
            }
            Ih = false;
          }
          Hh = 0;
          O3 = N3 = M3 = null;
          Jh = false;
          Kh = 0;
          nk.current = null;
          if (null === c3 || null === c3.return) {
            T3 = 1;
            pk = b3;
            Y2 = null;
            break;
          }
          a: {
            var f3 = a3, g3 = c3.return, h3 = c3, k3 = b3;
            b3 = Z2;
            h3.flags |= 32768;
            if (null !== k3 && "object" === typeof k3 && "function" === typeof k3.then) {
              var l3 = k3, m3 = h3, q3 = m3.tag;
              if (0 === (m3.mode & 1) && (0 === q3 || 11 === q3 || 15 === q3)) {
                var r3 = m3.alternate;
                r3 ? (m3.updateQueue = r3.updateQueue, m3.memoizedState = r3.memoizedState, m3.lanes = r3.lanes) : (m3.updateQueue = null, m3.memoizedState = null);
              }
              var y3 = Ui(g3);
              if (null !== y3) {
                y3.flags &= -257;
                Vi(y3, g3, h3, f3, b3);
                y3.mode & 1 && Si(f3, l3, b3);
                b3 = y3;
                k3 = l3;
                var n3 = b3.updateQueue;
                if (null === n3) {
                  var t4 = /* @__PURE__ */ new Set();
                  t4.add(k3);
                  b3.updateQueue = t4;
                } else n3.add(k3);
                break a;
              } else {
                if (0 === (b3 & 1)) {
                  Si(f3, l3, b3);
                  tj();
                  break a;
                }
                k3 = Error(p3(426));
              }
            } else if (I3 && h3.mode & 1) {
              var J2 = Ui(g3);
              if (null !== J2) {
                0 === (J2.flags & 65536) && (J2.flags |= 256);
                Vi(J2, g3, h3, f3, b3);
                Jg(Ji(k3, h3));
                break a;
              }
            }
            f3 = k3 = Ji(k3, h3);
            4 !== T3 && (T3 = 2);
            null === sk ? sk = [f3] : sk.push(f3);
            f3 = g3;
            do {
              switch (f3.tag) {
                case 3:
                  f3.flags |= 65536;
                  b3 &= -b3;
                  f3.lanes |= b3;
                  var x3 = Ni(f3, k3, b3);
                  ph(f3, x3);
                  break a;
                case 1:
                  h3 = k3;
                  var w3 = f3.type, u3 = f3.stateNode;
                  if (0 === (f3.flags & 128) && ("function" === typeof w3.getDerivedStateFromError || null !== u3 && "function" === typeof u3.componentDidCatch && (null === Ri || !Ri.has(u3)))) {
                    f3.flags |= 65536;
                    b3 &= -b3;
                    f3.lanes |= b3;
                    var F3 = Qi(f3, h3, b3);
                    ph(f3, F3);
                    break a;
                  }
              }
              f3 = f3.return;
            } while (null !== f3);
          }
          Sk(c3);
        } catch (na) {
          b3 = na;
          Y2 === c3 && null !== c3 && (Y2 = c3 = c3.return);
          continue;
        }
        break;
      } while (1);
    }
    function Jk() {
      var a3 = mk.current;
      mk.current = Rh;
      return null === a3 ? Rh : a3;
    }
    function tj() {
      if (0 === T3 || 3 === T3 || 2 === T3) T3 = 4;
      null === Q2 || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q2, Z2);
    }
    function Ik(a3, b3) {
      var c3 = K2;
      K2 |= 2;
      var d3 = Jk();
      if (Q2 !== a3 || Z2 !== b3) uk = null, Kk(a3, b3);
      do
        try {
          Tk();
          break;
        } catch (e4) {
          Mk(a3, e4);
        }
      while (1);
      $g();
      K2 = c3;
      mk.current = d3;
      if (null !== Y2) throw Error(p3(261));
      Q2 = null;
      Z2 = 0;
      return T3;
    }
    function Tk() {
      for (; null !== Y2; ) Uk(Y2);
    }
    function Lk() {
      for (; null !== Y2 && !cc(); ) Uk(Y2);
    }
    function Uk(a3) {
      var b3 = Vk(a3.alternate, a3, fj);
      a3.memoizedProps = a3.pendingProps;
      null === b3 ? Sk(a3) : Y2 = b3;
      nk.current = null;
    }
    function Sk(a3) {
      var b3 = a3;
      do {
        var c3 = b3.alternate;
        a3 = b3.return;
        if (0 === (b3.flags & 32768)) {
          if (c3 = Ej(c3, b3, fj), null !== c3) {
            Y2 = c3;
            return;
          }
        } else {
          c3 = Ij(c3, b3);
          if (null !== c3) {
            c3.flags &= 32767;
            Y2 = c3;
            return;
          }
          if (null !== a3) a3.flags |= 32768, a3.subtreeFlags = 0, a3.deletions = null;
          else {
            T3 = 6;
            Y2 = null;
            return;
          }
        }
        b3 = b3.sibling;
        if (null !== b3) {
          Y2 = b3;
          return;
        }
        Y2 = b3 = a3;
      } while (null !== b3);
      0 === T3 && (T3 = 5);
    }
    function Pk(a3, b3, c3) {
      var d3 = C3, e4 = ok3.transition;
      try {
        ok3.transition = null, C3 = 1, Wk(a3, b3, c3, d3);
      } finally {
        ok3.transition = e4, C3 = d3;
      }
      return null;
    }
    function Wk(a3, b3, c3, d3) {
      do
        Hk();
      while (null !== wk);
      if (0 !== (K2 & 6)) throw Error(p3(327));
      c3 = a3.finishedWork;
      var e4 = a3.finishedLanes;
      if (null === c3) return null;
      a3.finishedWork = null;
      a3.finishedLanes = 0;
      if (c3 === a3.current) throw Error(p3(177));
      a3.callbackNode = null;
      a3.callbackPriority = 0;
      var f3 = c3.lanes | c3.childLanes;
      Bc(a3, f3);
      a3 === Q2 && (Y2 = Q2 = null, Z2 = 0);
      0 === (c3.subtreeFlags & 2064) && 0 === (c3.flags & 2064) || vk || (vk = true, Fk(hc, function() {
        Hk();
        return null;
      }));
      f3 = 0 !== (c3.flags & 15990);
      if (0 !== (c3.subtreeFlags & 15990) || f3) {
        f3 = ok3.transition;
        ok3.transition = null;
        var g3 = C3;
        C3 = 1;
        var h3 = K2;
        K2 |= 4;
        nk.current = null;
        Oj(a3, c3);
        dk(c3, a3);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a3.current = c3;
        hk(c3, a3, e4);
        dc();
        K2 = h3;
        C3 = g3;
        ok3.transition = f3;
      } else a3.current = c3;
      vk && (vk = false, wk = a3, xk = e4);
      f3 = a3.pendingLanes;
      0 === f3 && (Ri = null);
      mc(c3.stateNode, d3);
      Dk(a3, B3());
      if (null !== b3) for (d3 = a3.onRecoverableError, c3 = 0; c3 < b3.length; c3++) e4 = b3[c3], d3(e4.value, { componentStack: e4.stack, digest: e4.digest });
      if (Oi) throw Oi = false, a3 = Pi, Pi = null, a3;
      0 !== (xk & 1) && 0 !== a3.tag && Hk();
      f3 = a3.pendingLanes;
      0 !== (f3 & 1) ? a3 === zk ? yk++ : (yk = 0, zk = a3) : yk = 0;
      jg();
      return null;
    }
    function Hk() {
      if (null !== wk) {
        var a3 = Dc(xk), b3 = ok3.transition, c3 = C3;
        try {
          ok3.transition = null;
          C3 = 16 > a3 ? 16 : a3;
          if (null === wk) var d3 = false;
          else {
            a3 = wk;
            wk = null;
            xk = 0;
            if (0 !== (K2 & 6)) throw Error(p3(331));
            var e4 = K2;
            K2 |= 4;
            for (V2 = a3.current; null !== V2; ) {
              var f3 = V2, g3 = f3.child;
              if (0 !== (V2.flags & 16)) {
                var h3 = f3.deletions;
                if (null !== h3) {
                  for (var k3 = 0; k3 < h3.length; k3++) {
                    var l3 = h3[k3];
                    for (V2 = l3; null !== V2; ) {
                      var m3 = V2;
                      switch (m3.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(8, m3, f3);
                      }
                      var q3 = m3.child;
                      if (null !== q3) q3.return = m3, V2 = q3;
                      else for (; null !== V2; ) {
                        m3 = V2;
                        var r3 = m3.sibling, y3 = m3.return;
                        Sj(m3);
                        if (m3 === l3) {
                          V2 = null;
                          break;
                        }
                        if (null !== r3) {
                          r3.return = y3;
                          V2 = r3;
                          break;
                        }
                        V2 = y3;
                      }
                    }
                  }
                  var n3 = f3.alternate;
                  if (null !== n3) {
                    var t4 = n3.child;
                    if (null !== t4) {
                      n3.child = null;
                      do {
                        var J2 = t4.sibling;
                        t4.sibling = null;
                        t4 = J2;
                      } while (null !== t4);
                    }
                  }
                  V2 = f3;
                }
              }
              if (0 !== (f3.subtreeFlags & 2064) && null !== g3) g3.return = f3, V2 = g3;
              else b: for (; null !== V2; ) {
                f3 = V2;
                if (0 !== (f3.flags & 2048)) switch (f3.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Pj(9, f3, f3.return);
                }
                var x3 = f3.sibling;
                if (null !== x3) {
                  x3.return = f3.return;
                  V2 = x3;
                  break b;
                }
                V2 = f3.return;
              }
            }
            var w3 = a3.current;
            for (V2 = w3; null !== V2; ) {
              g3 = V2;
              var u3 = g3.child;
              if (0 !== (g3.subtreeFlags & 2064) && null !== u3) u3.return = g3, V2 = u3;
              else b: for (g3 = w3; null !== V2; ) {
                h3 = V2;
                if (0 !== (h3.flags & 2048)) try {
                  switch (h3.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, h3);
                  }
                } catch (na) {
                  W2(h3, h3.return, na);
                }
                if (h3 === g3) {
                  V2 = null;
                  break b;
                }
                var F3 = h3.sibling;
                if (null !== F3) {
                  F3.return = h3.return;
                  V2 = F3;
                  break b;
                }
                V2 = h3.return;
              }
            }
            K2 = e4;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
              lc.onPostCommitFiberRoot(kc, a3);
            } catch (na) {
            }
            d3 = true;
          }
          return d3;
        } finally {
          C3 = c3, ok3.transition = b3;
        }
      }
      return false;
    }
    function Xk(a3, b3, c3) {
      b3 = Ji(c3, b3);
      b3 = Ni(a3, b3, 1);
      a3 = nh(a3, b3, 1);
      b3 = R2();
      null !== a3 && (Ac(a3, 1, b3), Dk(a3, b3));
    }
    function W2(a3, b3, c3) {
      if (3 === a3.tag) Xk(a3, a3, c3);
      else for (; null !== b3; ) {
        if (3 === b3.tag) {
          Xk(b3, a3, c3);
          break;
        } else if (1 === b3.tag) {
          var d3 = b3.stateNode;
          if ("function" === typeof b3.type.getDerivedStateFromError || "function" === typeof d3.componentDidCatch && (null === Ri || !Ri.has(d3))) {
            a3 = Ji(c3, a3);
            a3 = Qi(b3, a3, 1);
            b3 = nh(b3, a3, 1);
            a3 = R2();
            null !== b3 && (Ac(b3, 1, a3), Dk(b3, a3));
            break;
          }
        }
        b3 = b3.return;
      }
    }
    function Ti(a3, b3, c3) {
      var d3 = a3.pingCache;
      null !== d3 && d3.delete(b3);
      b3 = R2();
      a3.pingedLanes |= a3.suspendedLanes & c3;
      Q2 === a3 && (Z2 & c3) === c3 && (4 === T3 || 3 === T3 && (Z2 & 130023424) === Z2 && 500 > B3() - fk ? Kk(a3, 0) : rk |= c3);
      Dk(a3, b3);
    }
    function Yk(a3, b3) {
      0 === b3 && (0 === (a3.mode & 1) ? b3 = 1 : (b3 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c3 = R2();
      a3 = ih(a3, b3);
      null !== a3 && (Ac(a3, b3, c3), Dk(a3, c3));
    }
    function uj(a3) {
      var b3 = a3.memoizedState, c3 = 0;
      null !== b3 && (c3 = b3.retryLane);
      Yk(a3, c3);
    }
    function bk(a3, b3) {
      var c3 = 0;
      switch (a3.tag) {
        case 13:
          var d3 = a3.stateNode;
          var e4 = a3.memoizedState;
          null !== e4 && (c3 = e4.retryLane);
          break;
        case 19:
          d3 = a3.stateNode;
          break;
        default:
          throw Error(p3(314));
      }
      null !== d3 && d3.delete(b3);
      Yk(a3, c3);
    }
    var Vk;
    Vk = function(a3, b3, c3) {
      if (null !== a3) if (a3.memoizedProps !== b3.pendingProps || Wf.current) dh = true;
      else {
        if (0 === (a3.lanes & c3) && 0 === (b3.flags & 128)) return dh = false, yj(a3, b3, c3);
        dh = 0 !== (a3.flags & 131072) ? true : false;
      }
      else dh = false, I3 && 0 !== (b3.flags & 1048576) && ug(b3, ng, b3.index);
      b3.lanes = 0;
      switch (b3.tag) {
        case 2:
          var d3 = b3.type;
          ij(a3, b3);
          a3 = b3.pendingProps;
          var e4 = Yf(b3, H3.current);
          ch(b3, c3);
          e4 = Nh(null, b3, d3, a3, e4, c3);
          var f3 = Sh();
          b3.flags |= 1;
          "object" === typeof e4 && null !== e4 && "function" === typeof e4.render && void 0 === e4.$$typeof ? (b3.tag = 1, b3.memoizedState = null, b3.updateQueue = null, Zf(d3) ? (f3 = true, cg(b3)) : f3 = false, b3.memoizedState = null !== e4.state && void 0 !== e4.state ? e4.state : null, kh(b3), e4.updater = Ei, b3.stateNode = e4, e4._reactInternals = b3, Ii(b3, d3, a3, c3), b3 = jj(null, b3, d3, true, f3, c3)) : (b3.tag = 0, I3 && f3 && vg(b3), Xi(null, b3, e4, c3), b3 = b3.child);
          return b3;
        case 16:
          d3 = b3.elementType;
          a: {
            ij(a3, b3);
            a3 = b3.pendingProps;
            e4 = d3._init;
            d3 = e4(d3._payload);
            b3.type = d3;
            e4 = b3.tag = Zk(d3);
            a3 = Ci(d3, a3);
            switch (e4) {
              case 0:
                b3 = cj(null, b3, d3, a3, c3);
                break a;
              case 1:
                b3 = hj(null, b3, d3, a3, c3);
                break a;
              case 11:
                b3 = Yi(null, b3, d3, a3, c3);
                break a;
              case 14:
                b3 = $i(null, b3, d3, Ci(d3.type, a3), c3);
                break a;
            }
            throw Error(p3(
              306,
              d3,
              ""
            ));
          }
          return b3;
        case 0:
          return d3 = b3.type, e4 = b3.pendingProps, e4 = b3.elementType === d3 ? e4 : Ci(d3, e4), cj(a3, b3, d3, e4, c3);
        case 1:
          return d3 = b3.type, e4 = b3.pendingProps, e4 = b3.elementType === d3 ? e4 : Ci(d3, e4), hj(a3, b3, d3, e4, c3);
        case 3:
          a: {
            kj(b3);
            if (null === a3) throw Error(p3(387));
            d3 = b3.pendingProps;
            f3 = b3.memoizedState;
            e4 = f3.element;
            lh(a3, b3);
            qh(b3, d3, null, c3);
            var g3 = b3.memoizedState;
            d3 = g3.element;
            if (f3.isDehydrated) if (f3 = { element: d3, isDehydrated: false, cache: g3.cache, pendingSuspenseBoundaries: g3.pendingSuspenseBoundaries, transitions: g3.transitions }, b3.updateQueue.baseState = f3, b3.memoizedState = f3, b3.flags & 256) {
              e4 = Ji(Error(p3(423)), b3);
              b3 = lj(a3, b3, d3, c3, e4);
              break a;
            } else if (d3 !== e4) {
              e4 = Ji(Error(p3(424)), b3);
              b3 = lj(a3, b3, d3, c3, e4);
              break a;
            } else for (yg = Lf(b3.stateNode.containerInfo.firstChild), xg = b3, I3 = true, zg = null, c3 = Vg(b3, null, d3, c3), b3.child = c3; c3; ) c3.flags = c3.flags & -3 | 4096, c3 = c3.sibling;
            else {
              Ig();
              if (d3 === e4) {
                b3 = Zi(a3, b3, c3);
                break a;
              }
              Xi(a3, b3, d3, c3);
            }
            b3 = b3.child;
          }
          return b3;
        case 5:
          return Ah(b3), null === a3 && Eg(b3), d3 = b3.type, e4 = b3.pendingProps, f3 = null !== a3 ? a3.memoizedProps : null, g3 = e4.children, Ef(d3, e4) ? g3 = null : null !== f3 && Ef(d3, f3) && (b3.flags |= 32), gj(a3, b3), Xi(a3, b3, g3, c3), b3.child;
        case 6:
          return null === a3 && Eg(b3), null;
        case 13:
          return oj(a3, b3, c3);
        case 4:
          return yh(b3, b3.stateNode.containerInfo), d3 = b3.pendingProps, null === a3 ? b3.child = Ug(b3, null, d3, c3) : Xi(a3, b3, d3, c3), b3.child;
        case 11:
          return d3 = b3.type, e4 = b3.pendingProps, e4 = b3.elementType === d3 ? e4 : Ci(d3, e4), Yi(a3, b3, d3, e4, c3);
        case 7:
          return Xi(a3, b3, b3.pendingProps, c3), b3.child;
        case 8:
          return Xi(a3, b3, b3.pendingProps.children, c3), b3.child;
        case 12:
          return Xi(a3, b3, b3.pendingProps.children, c3), b3.child;
        case 10:
          a: {
            d3 = b3.type._context;
            e4 = b3.pendingProps;
            f3 = b3.memoizedProps;
            g3 = e4.value;
            G2(Wg, d3._currentValue);
            d3._currentValue = g3;
            if (null !== f3) if (He(f3.value, g3)) {
              if (f3.children === e4.children && !Wf.current) {
                b3 = Zi(a3, b3, c3);
                break a;
              }
            } else for (f3 = b3.child, null !== f3 && (f3.return = b3); null !== f3; ) {
              var h3 = f3.dependencies;
              if (null !== h3) {
                g3 = f3.child;
                for (var k3 = h3.firstContext; null !== k3; ) {
                  if (k3.context === d3) {
                    if (1 === f3.tag) {
                      k3 = mh(-1, c3 & -c3);
                      k3.tag = 2;
                      var l3 = f3.updateQueue;
                      if (null !== l3) {
                        l3 = l3.shared;
                        var m3 = l3.pending;
                        null === m3 ? k3.next = k3 : (k3.next = m3.next, m3.next = k3);
                        l3.pending = k3;
                      }
                    }
                    f3.lanes |= c3;
                    k3 = f3.alternate;
                    null !== k3 && (k3.lanes |= c3);
                    bh(
                      f3.return,
                      c3,
                      b3
                    );
                    h3.lanes |= c3;
                    break;
                  }
                  k3 = k3.next;
                }
              } else if (10 === f3.tag) g3 = f3.type === b3.type ? null : f3.child;
              else if (18 === f3.tag) {
                g3 = f3.return;
                if (null === g3) throw Error(p3(341));
                g3.lanes |= c3;
                h3 = g3.alternate;
                null !== h3 && (h3.lanes |= c3);
                bh(g3, c3, b3);
                g3 = f3.sibling;
              } else g3 = f3.child;
              if (null !== g3) g3.return = f3;
              else for (g3 = f3; null !== g3; ) {
                if (g3 === b3) {
                  g3 = null;
                  break;
                }
                f3 = g3.sibling;
                if (null !== f3) {
                  f3.return = g3.return;
                  g3 = f3;
                  break;
                }
                g3 = g3.return;
              }
              f3 = g3;
            }
            Xi(a3, b3, e4.children, c3);
            b3 = b3.child;
          }
          return b3;
        case 9:
          return e4 = b3.type, d3 = b3.pendingProps.children, ch(b3, c3), e4 = eh(e4), d3 = d3(e4), b3.flags |= 1, Xi(a3, b3, d3, c3), b3.child;
        case 14:
          return d3 = b3.type, e4 = Ci(d3, b3.pendingProps), e4 = Ci(d3.type, e4), $i(a3, b3, d3, e4, c3);
        case 15:
          return bj(a3, b3, b3.type, b3.pendingProps, c3);
        case 17:
          return d3 = b3.type, e4 = b3.pendingProps, e4 = b3.elementType === d3 ? e4 : Ci(d3, e4), ij(a3, b3), b3.tag = 1, Zf(d3) ? (a3 = true, cg(b3)) : a3 = false, ch(b3, c3), Gi(b3, d3, e4), Ii(b3, d3, e4, c3), jj(null, b3, d3, true, a3, c3);
        case 19:
          return xj(a3, b3, c3);
        case 22:
          return dj(a3, b3, c3);
      }
      throw Error(p3(156, b3.tag));
    };
    function Fk(a3, b3) {
      return ac(a3, b3);
    }
    function $k(a3, b3, c3, d3) {
      this.tag = a3;
      this.key = c3;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b3;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d3;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a3, b3, c3, d3) {
      return new $k(a3, b3, c3, d3);
    }
    function aj(a3) {
      a3 = a3.prototype;
      return !(!a3 || !a3.isReactComponent);
    }
    function Zk(a3) {
      if ("function" === typeof a3) return aj(a3) ? 1 : 0;
      if (void 0 !== a3 && null !== a3) {
        a3 = a3.$$typeof;
        if (a3 === Da) return 11;
        if (a3 === Ga) return 14;
      }
      return 2;
    }
    function Pg(a3, b3) {
      var c3 = a3.alternate;
      null === c3 ? (c3 = Bg(a3.tag, b3, a3.key, a3.mode), c3.elementType = a3.elementType, c3.type = a3.type, c3.stateNode = a3.stateNode, c3.alternate = a3, a3.alternate = c3) : (c3.pendingProps = b3, c3.type = a3.type, c3.flags = 0, c3.subtreeFlags = 0, c3.deletions = null);
      c3.flags = a3.flags & 14680064;
      c3.childLanes = a3.childLanes;
      c3.lanes = a3.lanes;
      c3.child = a3.child;
      c3.memoizedProps = a3.memoizedProps;
      c3.memoizedState = a3.memoizedState;
      c3.updateQueue = a3.updateQueue;
      b3 = a3.dependencies;
      c3.dependencies = null === b3 ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
      c3.sibling = a3.sibling;
      c3.index = a3.index;
      c3.ref = a3.ref;
      return c3;
    }
    function Rg(a3, b3, c3, d3, e4, f3) {
      var g3 = 2;
      d3 = a3;
      if ("function" === typeof a3) aj(a3) && (g3 = 1);
      else if ("string" === typeof a3) g3 = 5;
      else a: switch (a3) {
        case ya:
          return Tg(c3.children, e4, f3, b3);
        case za:
          g3 = 8;
          e4 |= 8;
          break;
        case Aa:
          return a3 = Bg(12, c3, b3, e4 | 2), a3.elementType = Aa, a3.lanes = f3, a3;
        case Ea:
          return a3 = Bg(13, c3, b3, e4), a3.elementType = Ea, a3.lanes = f3, a3;
        case Fa:
          return a3 = Bg(19, c3, b3, e4), a3.elementType = Fa, a3.lanes = f3, a3;
        case Ia:
          return pj(c3, e4, f3, b3);
        default:
          if ("object" === typeof a3 && null !== a3) switch (a3.$$typeof) {
            case Ba:
              g3 = 10;
              break a;
            case Ca:
              g3 = 9;
              break a;
            case Da:
              g3 = 11;
              break a;
            case Ga:
              g3 = 14;
              break a;
            case Ha:
              g3 = 16;
              d3 = null;
              break a;
          }
          throw Error(p3(130, null == a3 ? a3 : typeof a3, ""));
      }
      b3 = Bg(g3, c3, b3, e4);
      b3.elementType = a3;
      b3.type = d3;
      b3.lanes = f3;
      return b3;
    }
    function Tg(a3, b3, c3, d3) {
      a3 = Bg(7, a3, d3, b3);
      a3.lanes = c3;
      return a3;
    }
    function pj(a3, b3, c3, d3) {
      a3 = Bg(22, a3, d3, b3);
      a3.elementType = Ia;
      a3.lanes = c3;
      a3.stateNode = { isHidden: false };
      return a3;
    }
    function Qg(a3, b3, c3) {
      a3 = Bg(6, a3, null, b3);
      a3.lanes = c3;
      return a3;
    }
    function Sg(a3, b3, c3) {
      b3 = Bg(4, null !== a3.children ? a3.children : [], a3.key, b3);
      b3.lanes = c3;
      b3.stateNode = { containerInfo: a3.containerInfo, pendingChildren: null, implementation: a3.implementation };
      return b3;
    }
    function al(a3, b3, c3, d3, e4) {
      this.tag = b3;
      this.containerInfo = a3;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d3;
      this.onRecoverableError = e4;
      this.mutableSourceEagerHydrationData = null;
    }
    function bl(a3, b3, c3, d3, e4, f3, g3, h3, k3) {
      a3 = new al(a3, b3, c3, h3, k3);
      1 === b3 ? (b3 = 1, true === f3 && (b3 |= 8)) : b3 = 0;
      f3 = Bg(3, null, null, b3);
      a3.current = f3;
      f3.stateNode = a3;
      f3.memoizedState = { element: d3, isDehydrated: c3, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      kh(f3);
      return a3;
    }
    function cl(a3, b3, c3) {
      var d3 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d3 ? null : "" + d3, children: a3, containerInfo: b3, implementation: c3 };
    }
    function dl(a3) {
      if (!a3) return Vf;
      a3 = a3._reactInternals;
      a: {
        if (Vb(a3) !== a3 || 1 !== a3.tag) throw Error(p3(170));
        var b3 = a3;
        do {
          switch (b3.tag) {
            case 3:
              b3 = b3.stateNode.context;
              break a;
            case 1:
              if (Zf(b3.type)) {
                b3 = b3.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b3 = b3.return;
        } while (null !== b3);
        throw Error(p3(171));
      }
      if (1 === a3.tag) {
        var c3 = a3.type;
        if (Zf(c3)) return bg(a3, c3, b3);
      }
      return b3;
    }
    function el(a3, b3, c3, d3, e4, f3, g3, h3, k3) {
      a3 = bl(c3, d3, true, a3, e4, f3, g3, h3, k3);
      a3.context = dl(null);
      c3 = a3.current;
      d3 = R2();
      e4 = yi(c3);
      f3 = mh(d3, e4);
      f3.callback = void 0 !== b3 && null !== b3 ? b3 : null;
      nh(c3, f3, e4);
      a3.current.lanes = e4;
      Ac(a3, e4, d3);
      Dk(a3, d3);
      return a3;
    }
    function fl(a3, b3, c3, d3) {
      var e4 = b3.current, f3 = R2(), g3 = yi(e4);
      c3 = dl(c3);
      null === b3.context ? b3.context = c3 : b3.pendingContext = c3;
      b3 = mh(f3, g3);
      b3.payload = { element: a3 };
      d3 = void 0 === d3 ? null : d3;
      null !== d3 && (b3.callback = d3);
      a3 = nh(e4, b3, g3);
      null !== a3 && (gi(a3, e4, g3, f3), oh(a3, e4, g3));
      return g3;
    }
    function gl(a3) {
      a3 = a3.current;
      if (!a3.child) return null;
      switch (a3.child.tag) {
        case 5:
          return a3.child.stateNode;
        default:
          return a3.child.stateNode;
      }
    }
    function hl(a3, b3) {
      a3 = a3.memoizedState;
      if (null !== a3 && null !== a3.dehydrated) {
        var c3 = a3.retryLane;
        a3.retryLane = 0 !== c3 && c3 < b3 ? c3 : b3;
      }
    }
    function il(a3, b3) {
      hl(a3, b3);
      (a3 = a3.alternate) && hl(a3, b3);
    }
    function jl() {
      return null;
    }
    var kl = "function" === typeof reportError ? reportError : function(a3) {
      console.error(a3);
    };
    function ll(a3) {
      this._internalRoot = a3;
    }
    ml.prototype.render = ll.prototype.render = function(a3) {
      var b3 = this._internalRoot;
      if (null === b3) throw Error(p3(409));
      fl(a3, b3, null, null);
    };
    ml.prototype.unmount = ll.prototype.unmount = function() {
      var a3 = this._internalRoot;
      if (null !== a3) {
        this._internalRoot = null;
        var b3 = a3.containerInfo;
        Rk(function() {
          fl(null, a3, null, null);
        });
        b3[uf] = null;
      }
    };
    function ml(a3) {
      this._internalRoot = a3;
    }
    ml.prototype.unstable_scheduleHydration = function(a3) {
      if (a3) {
        var b3 = Hc();
        a3 = { blockedOn: null, target: a3, priority: b3 };
        for (var c3 = 0; c3 < Qc.length && 0 !== b3 && b3 < Qc[c3].priority; c3++) ;
        Qc.splice(c3, 0, a3);
        0 === c3 && Vc(a3);
      }
    };
    function nl(a3) {
      return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType);
    }
    function ol(a3) {
      return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType && (8 !== a3.nodeType || " react-mount-point-unstable " !== a3.nodeValue));
    }
    function pl() {
    }
    function ql(a3, b3, c3, d3, e4) {
      if (e4) {
        if ("function" === typeof d3) {
          var f3 = d3;
          d3 = function() {
            var a4 = gl(g3);
            f3.call(a4);
          };
        }
        var g3 = el(b3, d3, a3, 0, null, false, false, "", pl);
        a3._reactRootContainer = g3;
        a3[uf] = g3.current;
        sf(8 === a3.nodeType ? a3.parentNode : a3);
        Rk();
        return g3;
      }
      for (; e4 = a3.lastChild; ) a3.removeChild(e4);
      if ("function" === typeof d3) {
        var h3 = d3;
        d3 = function() {
          var a4 = gl(k3);
          h3.call(a4);
        };
      }
      var k3 = bl(a3, 0, false, null, null, false, false, "", pl);
      a3._reactRootContainer = k3;
      a3[uf] = k3.current;
      sf(8 === a3.nodeType ? a3.parentNode : a3);
      Rk(function() {
        fl(b3, k3, c3, d3);
      });
      return k3;
    }
    function rl(a3, b3, c3, d3, e4) {
      var f3 = c3._reactRootContainer;
      if (f3) {
        var g3 = f3;
        if ("function" === typeof e4) {
          var h3 = e4;
          e4 = function() {
            var a4 = gl(g3);
            h3.call(a4);
          };
        }
        fl(b3, g3, a3, e4);
      } else g3 = ql(c3, b3, a3, e4, d3);
      return gl(g3);
    }
    Ec = function(a3) {
      switch (a3.tag) {
        case 3:
          var b3 = a3.stateNode;
          if (b3.current.memoizedState.isDehydrated) {
            var c3 = tc(b3.pendingLanes);
            0 !== c3 && (Cc(b3, c3 | 1), Dk(b3, B3()), 0 === (K2 & 6) && (Gj = B3() + 500, jg()));
          }
          break;
        case 13:
          Rk(function() {
            var b4 = ih(a3, 1);
            if (null !== b4) {
              var c4 = R2();
              gi(b4, a3, 1, c4);
            }
          }), il(a3, 1);
      }
    };
    Fc = function(a3) {
      if (13 === a3.tag) {
        var b3 = ih(a3, 134217728);
        if (null !== b3) {
          var c3 = R2();
          gi(b3, a3, 134217728, c3);
        }
        il(a3, 134217728);
      }
    };
    Gc = function(a3) {
      if (13 === a3.tag) {
        var b3 = yi(a3), c3 = ih(a3, b3);
        if (null !== c3) {
          var d3 = R2();
          gi(c3, a3, b3, d3);
        }
        il(a3, b3);
      }
    };
    Hc = function() {
      return C3;
    };
    Ic = function(a3, b3) {
      var c3 = C3;
      try {
        return C3 = a3, b3();
      } finally {
        C3 = c3;
      }
    };
    yb = function(a3, b3, c3) {
      switch (b3) {
        case "input":
          bb(a3, c3);
          b3 = c3.name;
          if ("radio" === c3.type && null != b3) {
            for (c3 = a3; c3.parentNode; ) c3 = c3.parentNode;
            c3 = c3.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
            for (b3 = 0; b3 < c3.length; b3++) {
              var d3 = c3[b3];
              if (d3 !== a3 && d3.form === a3.form) {
                var e4 = Db(d3);
                if (!e4) throw Error(p3(90));
                Wa(d3);
                bb(d3, e4);
              }
            }
          }
          break;
        case "textarea":
          ib(a3, c3);
          break;
        case "select":
          b3 = c3.value, null != b3 && fb(a3, !!c3.multiple, b3, false);
      }
    };
    Gb = Qk;
    Hb = Rk;
    var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] };
    var tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
    var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
      a3 = Zb(a3);
      return null === a3 ? null : a3.stateNode;
    }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!vl.isDisabled && vl.supportsFiber) try {
        kc = vl.inject(ul), lc = vl;
      } catch (a3) {
      }
    }
    var vl;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
    exports.createPortal = function(a3, b3) {
      var c3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!nl(b3)) throw Error(p3(200));
      return cl(a3, b3, null, c3);
    };
    exports.createRoot = function(a3, b3) {
      if (!nl(a3)) throw Error(p3(299));
      var c3 = false, d3 = "", e4 = kl;
      null !== b3 && void 0 !== b3 && (true === b3.unstable_strictMode && (c3 = true), void 0 !== b3.identifierPrefix && (d3 = b3.identifierPrefix), void 0 !== b3.onRecoverableError && (e4 = b3.onRecoverableError));
      b3 = bl(a3, 1, false, null, null, c3, false, d3, e4);
      a3[uf] = b3.current;
      sf(8 === a3.nodeType ? a3.parentNode : a3);
      return new ll(b3);
    };
    exports.findDOMNode = function(a3) {
      if (null == a3) return null;
      if (1 === a3.nodeType) return a3;
      var b3 = a3._reactInternals;
      if (void 0 === b3) {
        if ("function" === typeof a3.render) throw Error(p3(188));
        a3 = Object.keys(a3).join(",");
        throw Error(p3(268, a3));
      }
      a3 = Zb(b3);
      a3 = null === a3 ? null : a3.stateNode;
      return a3;
    };
    exports.flushSync = function(a3) {
      return Rk(a3);
    };
    exports.hydrate = function(a3, b3, c3) {
      if (!ol(b3)) throw Error(p3(200));
      return rl(null, a3, b3, true, c3);
    };
    exports.hydrateRoot = function(a3, b3, c3) {
      if (!nl(a3)) throw Error(p3(405));
      var d3 = null != c3 && c3.hydratedSources || null, e4 = false, f3 = "", g3 = kl;
      null !== c3 && void 0 !== c3 && (true === c3.unstable_strictMode && (e4 = true), void 0 !== c3.identifierPrefix && (f3 = c3.identifierPrefix), void 0 !== c3.onRecoverableError && (g3 = c3.onRecoverableError));
      b3 = el(b3, null, a3, 1, null != c3 ? c3 : null, e4, false, f3, g3);
      a3[uf] = b3.current;
      sf(a3);
      if (d3) for (a3 = 0; a3 < d3.length; a3++) c3 = d3[a3], e4 = c3._getVersion, e4 = e4(c3._source), null == b3.mutableSourceEagerHydrationData ? b3.mutableSourceEagerHydrationData = [c3, e4] : b3.mutableSourceEagerHydrationData.push(
        c3,
        e4
      );
      return new ml(b3);
    };
    exports.render = function(a3, b3, c3) {
      if (!ol(b3)) throw Error(p3(200));
      return rl(null, a3, b3, false, c3);
    };
    exports.unmountComponentAtNode = function(a3) {
      if (!ol(a3)) throw Error(p3(40));
      return a3._reactRootContainer ? (Rk(function() {
        rl(null, null, a3, false, function() {
          a3._reactRootContainer = null;
          a3[uf] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = Qk;
    exports.unstable_renderSubtreeIntoContainer = function(a3, b3, c3, d3) {
      if (!ol(c3)) throw Error(p3(200));
      if (null == a3 || void 0 === a3._reactInternals) throw Error(p3(38));
      return rl(a3, b3, c3, false, d3);
    };
    exports.version = "18.3.1-next-f1338f8080-20240426";
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (false) {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (true) {
      checkDCE();
      module.exports = require_react_dom_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m3 = require_react_dom();
    if (true) {
      exports.createRoot = m3.createRoot;
      exports.hydrateRoot = m3.hydrateRoot;
    } else {
      i3 = m3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c3, o3) {
        i3.usingClientEntryPoint = true;
        try {
          return m3.createRoot(c3, o3);
        } finally {
          i3.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c3, h3, o3) {
        i3.usingClientEntryPoint = true;
        try {
          return m3.hydrateRoot(c3, h3, o3);
        } finally {
          i3.usingClientEntryPoint = false;
        }
      };
    }
    var i3;
  }
});

// node_modules/react-router/dist/development/chunk-C37GKA54.mjs
function createBrowserHistory(options2 = {}) {
  function createBrowserLocation(window2, globalHistory) {
    let { pathname, search: search2, hash: hash2 } = window2.location;
    return createLocation(
      "",
      { pathname, search: search2, hash: hash2 },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(
    createBrowserLocation,
    createBrowserHref,
    null,
    options2
  );
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e4) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substring(2, 10);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current, to, state = null, key) {
  let location = {
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: "",
    ...typeof to === "string" ? parsePath(to) : to,
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  };
  return location;
}
function createPath({
  pathname = "/",
  search: search2 = "",
  hash: hash2 = ""
}) {
  if (search2 && search2 !== "?")
    pathname += search2.charAt(0) === "?" ? search2 : "?" + search2;
  if (hash2 && hash2 !== "#")
    pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path2) {
  let parsedPath = {};
  if (path2) {
    let hashIndex = path2.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path2.substring(hashIndex);
      path2 = path2.substring(0, hashIndex);
    }
    let searchIndex = path2.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path2.substring(searchIndex);
      path2 = path2.substring(0, searchIndex);
    }
    if (path2) {
      parsedPath.pathname = path2;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref2, validateLocation, options2 = {}) {
  let { window: window2 = document.defaultView, v5Compat = false } = options2;
  let globalHistory = window2.history;
  let action = "POP";
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState({ ...globalHistory.state, idx: index2 }, "");
  }
  function getIndex() {
    let state = globalHistory.state || { idx: null };
    return state.idx;
  }
  function handlePop() {
    action = "POP";
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({ action, location: history.location, delta });
    }
  }
  function push2(to, state) {
    action = "PUSH";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url2 = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url2);
    } catch (error44) {
      if (error44 instanceof DOMException && error44.name === "DataCloneError") {
        throw error44;
      }
      window2.location.assign(url2);
    }
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 1 });
    }
  }
  function replace2(to, state) {
    action = "REPLACE";
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url2 = history.createHref(location);
    globalHistory.replaceState(historyState, "", url2);
    if (v5Compat && listener) {
      listener({ action, location: history.location, delta: 0 });
    }
  }
  function createURL(to) {
    return createBrowserURLImpl(to);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref2(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url2 = createURL(to);
      return {
        pathname: url2.pathname,
        search: url2.search,
        hash: url2.hash
      };
    },
    push: push2,
    replace: replace2,
    go(n3) {
      return globalHistory.go(n3);
    }
  };
  return history;
}
function createBrowserURLImpl(to, isAbsolute = false) {
  let base = "http://localhost";
  if (typeof window !== "undefined") {
    base = window.location.origin !== "null" ? window.location.origin : window.location.href;
  }
  invariant(base, "No window.location.(origin|href) available to create URL");
  let href = typeof to === "string" ? to : createPath(to);
  href = href.replace(/ $/, "%20");
  if (!isAbsolute && href.startsWith("//")) {
    href = base + href;
  }
  return new URL(href, base);
}
function matchRoutes(routes, locationArg, basename2 = "/") {
  return matchRoutesImpl(routes, locationArg, basename2, false);
}
function matchRoutesImpl(routes, locationArg, basename2, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename2);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i3 = 0; matches == null && i3 < branches.length; ++i3) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(
      branches[i3],
      decoded,
      allowPartial
    );
  }
  return matches;
}
function convertRouteMatchToUiMatch(match, loaderData) {
  let { route, pathname, params } = match;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(
        meta.relativePath.startsWith(parentPath),
        `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
      );
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path2 = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        `Index routes must not have child routes. Please remove all child routes from route path "${path2}".`
      );
      flattenRoutes(route.children, branches, routesMeta, path2);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path: path2,
      score: computeScore(path2, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    if (route.path === "" || !route.path?.includes("?")) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path2) {
  let segments = path2.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required2 = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required2, ""] : [required2];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(
    ...restExploded.map(
      (subpath) => subpath === "" ? required2 : [required2, subpath].join("/")
    )
  );
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map(
    (exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded
  );
}
function rankRouteBranches(branches) {
  branches.sort(
    (a3, b3) => a3.score !== b3.score ? b3.score - a3.score : compareIndexes(
      a3.routesMeta.map((meta) => meta.childrenIndex),
      b3.routesMeta.map((meta) => meta.childrenIndex)
    )
  );
}
function computeScore(path2, index2) {
  let segments = path2.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s3) => !isSplat(s3)).reduce(
    (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
    initialScore
  );
}
function compareIndexes(a3, b3) {
  let siblings = a3.length === b3.length && a3.slice(0, -1).every((n3, i3) => n3 === b3[i3]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a3[a3.length - 1] - b3[b3.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial = false) {
  let { routesMeta } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i3 = 0; i3 < routesMeta.length; ++i3) {
    let meta = routesMeta[i3];
    let end = i3 === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath(
      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
      remainingPathname
    );
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath(
        {
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        },
        remainingPathname
      );
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(
        joinPaths([matchedPathname, match.pathnameBase])
      ),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = { path: pattern, caseSensitive: false, end: true };
  }
  let [matcher, compiledParams] = compilePath(
    pattern.path,
    pattern.caseSensitive,
    pattern.end
  );
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce(
    (memo22, { paramName, isOptional }, index2) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index2];
      if (isOptional && !value) {
        memo22[paramName] = void 0;
      } else {
        memo22[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo22;
    },
    {}
  );
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path2, caseSensitive = false, end = true) {
  warning(
    path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"),
    `Route path "${path2}" will be treated as if it were "${path2.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path2.replace(/\*$/, "/*")}".`
  );
  let params = [];
  let regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
    /\/:([\w-]+)(\?)?/g,
    (_3, paramName, isOptional) => {
      params.push({ paramName, isOptional: isOptional != null });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    }
  );
  if (path2.endsWith("*")) {
    params.push({ paramName: "*" });
    regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path2 !== "" && path2 !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else {
  }
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v3) => decodeURIComponent(v3).replace(/\//g, "%2F")).join("/");
  } catch (error44) {
    warning(
      false,
      `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error44}).`
    );
    return value;
  }
}
function stripBasename(pathname, basename2) {
  if (basename2 === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename2.toLowerCase())) {
    return null;
  }
  let startIndex = basename2.endsWith("/") ? basename2.length - 1 : basename2.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname = "/") {
  let {
    pathname: toPathname,
    search: search2 = "",
    hash: hash2 = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search2),
    hash: normalizeHash(hash2)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path2) {
  return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
    path2
  )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
}
function getPathContributingMatches(matches) {
  return matches.filter(
    (match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0
  );
}
function getResolveToMatches(matches) {
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches.map(
    (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
  );
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = { ...toArg };
    invariant(
      !to.pathname || !to.pathname.includes("?"),
      getInvalidPathError("?", "pathname", "search", to)
    );
    invariant(
      !to.pathname || !to.pathname.includes("#"),
      getInvalidPathError("#", "pathname", "hash", to)
    );
    invariant(
      !to.search || !to.search.includes("#"),
      getInvalidPathError("#", "search", "hash", to)
    );
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path2 = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path2.pathname += "/";
  }
  return path2;
}
function isRouteErrorResponse(error44) {
  return error44 != null && typeof error44.status === "number" && typeof error44.statusText === "string" && typeof error44.internal === "boolean" && "data" in error44;
}
function useHref(to, { relative } = {}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useHref() may be used only in the context of a <Router> component.`
  );
  let { basename: basename2, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { hash: hash2, pathname, search: search2 } = useResolvedPath(to, { relative });
  let joinedPathname = pathname;
  if (basename2 !== "/") {
    joinedPathname = pathname === "/" ? basename2 : joinPaths([basename2, pathname]);
  }
  return navigator2.createHref({ pathname: joinedPathname, search: search2, hash: hash2 });
}
function useInRouterContext() {
  return React2.useContext(LocationContext) != null;
}
function useLocation() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useLocation() may be used only in the context of a <Router> component.`
  );
  return React2.useContext(LocationContext).location;
}
function useNavigationType() {
  return React2.useContext(LocationContext).navigationType;
}
function useIsomorphicLayoutEffect(cb) {
  let isStatic = React2.useContext(NavigationContext).static;
  if (!isStatic) {
    React2.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let { isDataRoute } = React2.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useNavigate() may be used only in the context of a <Router> component.`
  );
  let dataRouterContext = React2.useContext(DataRouterContext);
  let { basename: basename2, navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    (to, options2 = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path2 = resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        options2.relative === "path"
      );
      if (dataRouterContext == null && basename2 !== "/") {
        path2.pathname = path2.pathname === "/" ? basename2 : joinPaths([basename2, path2.pathname]);
      }
      (!!options2.replace ? navigator2.replace : navigator2.push)(
        path2,
        options2.state,
        options2
      );
    },
    [
      basename2,
      navigator2,
      routePathnamesJson,
      locationPathname,
      dataRouterContext
    ]
  );
  return navigate;
}
function useResolvedPath(to, { relative } = {}) {
  let { matches } = React2.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
  return React2.useMemo(
    () => resolveTo(
      to,
      JSON.parse(routePathnamesJson),
      locationPathname,
      relative === "path"
    ),
    [to, routePathnamesJson, locationPathname, relative]
  );
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    `useRoutes() may be used only in the context of a <Router> component.`
  );
  let { navigator: navigator2 } = React2.useContext(NavigationContext);
  let { matches: parentMatches } = React2.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (ENABLE_DEV_WARNINGS) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(
      parentPathname,
      !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
      `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
    );
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    invariant(
      parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
      `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
    );
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, { pathname: remainingPathname });
  if (ENABLE_DEV_WARNINGS) {
    warning(
      parentRoute || matches != null,
      `No routes matched location "${location.pathname}${location.search}${location.hash}" `
    );
    warning(
      matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
      `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
    );
  }
  let renderedMatches = _renderMatches(
    matches && matches.map(
      (match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
        ])
      })
    ),
    parentMatches,
    dataRouterState,
    future
  );
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ React2.createElement(
      LocationContext.Provider,
      {
        value: {
          location: {
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default",
            ...location
          },
          navigationType: "POP"
          /* Pop */
        }
      },
      renderedMatches
    );
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error44 = useRouteError();
  let message = isRouteErrorResponse(error44) ? `${error44.status} ${error44.statusText}` : error44 instanceof Error ? error44.message : JSON.stringify(error44);
  let stack = error44 instanceof Error ? error44.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
  let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
  let devInfo = null;
  if (ENABLE_DEV_WARNINGS) {
    console.error(
      "Error handled by React Router default ErrorBoundary:",
      error44
    );
    devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
}
function RenderedRoute({ routeContext, match, children }) {
  let dataRouterContext = React2.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
}
function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
  if (matches == null) {
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = dataRouterState?.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex(
      (m3) => m3.route.id && errors?.[m3.route.id] !== void 0
    );
    invariant(
      errorIndex >= 0,
      `Could not find a matching route for errors on route IDs: ${Object.keys(
        errors
      ).join(",")}`
    );
    renderedMatches = renderedMatches.slice(
      0,
      Math.min(renderedMatches.length, errorIndex + 1)
    );
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState) {
    for (let i3 = 0; i3 < renderedMatches.length; i3++) {
      let match = renderedMatches[i3];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i3;
      }
      if (match.route.id) {
        let { loaderData, errors: errors2 } = dataRouterState;
        let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight(
    (outlet, match, index2) => {
      let error44;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error44 = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index2 === 0) {
            warningOnce(
              "route-fallback",
              false,
              "No `HydrateFallback` element provided to render during initial hydration"
            );
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index2) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren = () => {
        let children;
        if (error44) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match.route.Component) {
          children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children = match.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React2.createElement(
          RenderedRoute,
          {
            match,
            routeContext: {
              outlet,
              matches: matches2,
              isDataRoute: dataRouterState != null
            },
            children
          }
        );
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React2.createElement(
        RenderErrorBoundary,
        {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error: error44,
          children: getChildren(),
          routeContext: { outlet: null, matches: matches2, isDataRoute: true }
        }
      ) : getChildren();
    },
    null
  );
}
function getDataRouterConsoleError(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError(hookName));
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError(hookName));
  return state;
}
function useRouteContext(hookName) {
  let route = React2.useContext(RouteContext);
  invariant(route, getDataRouterConsoleError(hookName));
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  invariant(
    thisRoute.route.id,
    `${hookName} can only be used on routes that contain a unique "id"`
  );
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(
    "useRouteId"
    /* UseRouteId */
  );
}
function useNavigation() {
  let state = useDataRouterState(
    "useNavigation"
    /* UseNavigation */
  );
  return state.navigation;
}
function useMatches() {
  let { matches, loaderData } = useDataRouterState(
    "useMatches"
    /* UseMatches */
  );
  return React2.useMemo(
    () => matches.map((m3) => convertRouteMatchToUiMatch(m3, loaderData)),
    [matches, loaderData]
  );
}
function useRouteError() {
  let error44 = React2.useContext(RouteErrorContext);
  let state = useDataRouterState(
    "useRouteError"
    /* UseRouteError */
  );
  let routeId = useCurrentRouteId(
    "useRouteError"
    /* UseRouteError */
  );
  if (error44 !== void 0) {
    return error44;
  }
  return state.errors?.[routeId];
}
function useNavigateStable() {
  let { router } = useDataRouterContext(
    "useNavigate"
    /* UseNavigateStable */
  );
  let id = useCurrentRouteId(
    "useNavigate"
    /* UseNavigateStable */
  );
  let activeRef = React2.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React2.useCallback(
    async (to, options2 = {}) => {
      warning(activeRef.current, navigateEffectWarning);
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        await router.navigate(to, { fromRouteId: id, ...options2 });
      }
    },
    [router, id]
  );
  return navigate;
}
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    warning(false, message);
  }
}
function DataRoutes({
  routes,
  future,
  state
}) {
  return useRoutesImpl(routes, void 0, state, future);
}
function Navigate({
  to,
  replace: replace2,
  state,
  relative
}) {
  invariant(
    useInRouterContext(),
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    `<Navigate> may be used only in the context of a <Router> component.`
  );
  let { static: isStatic } = React3.useContext(NavigationContext);
  warning(
    !isStatic,
    `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`
  );
  let { matches } = React3.useContext(RouteContext);
  let { pathname: locationPathname } = useLocation();
  let navigate = useNavigate();
  let path2 = resolveTo(
    to,
    getResolveToMatches(matches),
    locationPathname,
    relative === "path"
  );
  let jsonPath = JSON.stringify(path2);
  React3.useEffect(() => {
    navigate(JSON.parse(jsonPath), { replace: replace2, state, relative });
  }, [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Route(props) {
  invariant(
    false,
    `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
  );
}
function Router({
  basename: basenameProp = "/",
  children = null,
  location: locationProp,
  navigationType = "POP",
  navigator: navigator2,
  static: staticProp = false
}) {
  invariant(
    !useInRouterContext(),
    `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
  );
  let basename2 = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React3.useMemo(
    () => ({
      basename: basename2,
      navigator: navigator2,
      static: staticProp,
      future: {}
    }),
    [basename2, navigator2, staticProp]
  );
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search: search2 = "",
    hash: hash2 = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React3.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename2);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search: search2,
        hash: hash2,
        state,
        key
      },
      navigationType
    };
  }, [basename2, pathname, search2, hash2, state, key, navigationType]);
  warning(
    locationContext != null,
    `<Router basename="${basename2}"> is not able to match the URL "${pathname}${search2}${hash2}" because it does not start with the basename, so the <Router> won't render anything.`
  );
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
}
function Routes({
  children,
  location
}) {
  return useRoutes(createRoutesFromChildren(children), location);
}
function createRoutesFromChildren(children, parentPath = []) {
  let routes = [];
  React3.Children.forEach(children, (element3, index2) => {
    if (!React3.isValidElement(element3)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element3.type === React3.Fragment) {
      routes.push.apply(
        routes,
        createRoutesFromChildren(element3.props.children, treePath)
      );
      return;
    }
    invariant(
      element3.type === Route,
      `[${typeof element3.type === "string" ? element3.type : element3.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
    );
    invariant(
      !element3.props.index || !element3.props.children,
      "An index route cannot have child routes."
    );
    let route = {
      id: element3.props.id || treePath.join("-"),
      caseSensitive: element3.props.caseSensitive,
      element: element3.props.element,
      Component: element3.props.Component,
      index: element3.props.index,
      path: element3.props.path,
      loader: element3.props.loader,
      action: element3.props.action,
      hydrateFallbackElement: element3.props.hydrateFallbackElement,
      HydrateFallback: element3.props.HydrateFallback,
      errorElement: element3.props.errorElement,
      ErrorBoundary: element3.props.ErrorBoundary,
      hasErrorBoundary: element3.props.hasErrorBoundary === true || element3.props.ErrorBoundary != null || element3.props.errorElement != null,
      shouldRevalidate: element3.props.shouldRevalidate,
      handle: element3.props.handle,
      lazy: element3.props.lazy
    };
    if (element3.props.children) {
      route.children = createRoutesFromChildren(
        element3.props.children,
        treePath
      );
    }
    routes.push(route);
  });
  return routes;
}
function isHtmlElement(object2) {
  return object2 != null && typeof object2.tagName === "string";
}
function isButtonElement(object2) {
  return isHtmlElement(object2) && object2.tagName.toLowerCase() === "button";
}
function isFormElement(object2) {
  return isHtmlElement(object2) && object2.tagName.toLowerCase() === "form";
}
function isInputElement(object2) {
  return isHtmlElement(object2) && object2.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e4) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    warning(
      false,
      `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
    );
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename2) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename2) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error(
        `Cannot submit a <button> or <input type="submit"> without a <form>`
      );
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename2) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let { name: name2, type, value } = target;
      if (type === "image") {
        let prefix = name2 ? `${name2}.` : "";
        formData.append(`${prefix}x`, "0");
        formData.append(`${prefix}y`, "0");
      } else if (name2) {
        formData.append(name2, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error(
      `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
    );
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return { action, method: method.toLowerCase(), encType, formData, body };
}
function invariant2(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function singleFetchUrl(reqUrl, basename2, extension2) {
  let url2 = typeof reqUrl === "string" ? new URL(
    reqUrl,
    // This can be called during the SSR flow via PrefetchPageLinksImpl so
    // don't assume window is available
    typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
  ) : reqUrl;
  if (url2.pathname === "/") {
    url2.pathname = `_root.${extension2}`;
  } else if (basename2 && stripBasename(url2.pathname, basename2) === "/") {
    url2.pathname = `${basename2.replace(/\/$/, "")}/_root.${extension2}`;
  } else {
    url2.pathname = `${url2.pathname.replace(/\/$/, "")}.${extension2}`;
  }
  return url2;
}
async function loadRouteModule(route, routeModulesCache) {
  if (route.id in routeModulesCache) {
    return routeModulesCache[route.id];
  }
  try {
    let routeModule = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      route.module
    );
    routeModulesCache[route.id] = routeModule;
    return routeModule;
  } catch (error44) {
    console.error(
      `Error loading route module \`${route.module}\`, reloading page...`
    );
    console.error(error44);
    if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
    import.meta.hot) {
      throw error44;
    }
    window.location.reload();
    return new Promise(() => {
    });
  }
}
function isPageLinkDescriptor(object2) {
  return object2 != null && typeof object2.page === "string";
}
function isHtmlLinkDescriptor(object2) {
  if (object2 == null) {
    return false;
  }
  if (object2.href == null) {
    return object2.rel === "preload" && typeof object2.imageSrcSet === "string" && typeof object2.imageSizes === "string";
  }
  return typeof object2.rel === "string" && typeof object2.href === "string";
}
async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
  let links = await Promise.all(
    matches.map(async (match) => {
      let route = manifest.routes[match.route.id];
      if (route) {
        let mod = await loadRouteModule(route, routeModules);
        return mod.links ? mod.links() : [];
      }
      return [];
    })
  );
  return dedupeLinkDescriptors(
    links.flat(1).filter(isHtmlLinkDescriptor).filter((link2) => link2.rel === "stylesheet" || link2.rel === "preload").map(
      (link2) => link2.rel === "stylesheet" ? { ...link2, rel: "prefetch", as: "style" } : { ...link2, rel: "prefetch" }
    )
  );
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
  let isNew = (match, index2) => {
    if (!currentMatches[index2]) return true;
    return match.route.id !== currentMatches[index2].route.id;
  };
  let matchPathChanged = (match, index2) => {
    return (
      // param change, /users/123 -> /users/456
      currentMatches[index2].pathname !== match.pathname || // splat param changed, which is not present in match.path
      // e.g. /files/images/avatar.jpg -> files/finances.xls
      currentMatches[index2].route.path?.endsWith("*") && currentMatches[index2].params["*"] !== match.params["*"]
    );
  };
  if (mode === "assets") {
    return nextMatches.filter(
      (match, index2) => isNew(match, index2) || matchPathChanged(match, index2)
    );
  }
  if (mode === "data") {
    return nextMatches.filter((match, index2) => {
      let manifestRoute = manifest.routes[match.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return false;
      }
      if (isNew(match, index2) || matchPathChanged(match, index2)) {
        return true;
      }
      if (match.route.shouldRevalidate) {
        let routeChoice = match.route.shouldRevalidate({
          currentUrl: new URL(
            location.pathname + location.search + location.hash,
            window.origin
          ),
          currentParams: currentMatches[0]?.params || {},
          nextUrl: new URL(page, window.origin),
          nextParams: match.params,
          defaultShouldRevalidate: true
        });
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return true;
    });
  }
  return [];
}
function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
  return dedupeHrefs(
    matches.map((match) => {
      let route = manifest.routes[match.route.id];
      if (!route) return [];
      let hrefs = [route.module];
      if (route.clientActionModule) {
        hrefs = hrefs.concat(route.clientActionModule);
      }
      if (route.clientLoaderModule) {
        hrefs = hrefs.concat(route.clientLoaderModule);
      }
      if (includeHydrateFallback && route.hydrateFallbackModule) {
        hrefs = hrefs.concat(route.hydrateFallbackModule);
      }
      if (route.imports) {
        hrefs = hrefs.concat(route.imports);
      }
      return hrefs;
    }).flat(1)
  );
}
function dedupeHrefs(hrefs) {
  return [...new Set(hrefs)];
}
function sortKeys(obj) {
  let sorted = {};
  let keys2 = Object.keys(obj).sort();
  for (let key of keys2) {
    sorted[key] = obj[key];
  }
  return sorted;
}
function dedupeLinkDescriptors(descriptors, preloads) {
  let set2 = /* @__PURE__ */ new Set();
  let preloadsSet = new Set(preloads);
  return descriptors.reduce((deduped, descriptor) => {
    let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
    if (alreadyModulePreload) {
      return deduped;
    }
    let key = JSON.stringify(sortKeys(descriptor));
    if (!set2.has(key)) {
      set2.add(key);
      deduped.push({ key, link: descriptor });
    }
    return deduped;
  }, []);
}
function useDataRouterContext2() {
  let context = React8.useContext(DataRouterContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterContext.Provider> element"
  );
  return context;
}
function useDataRouterStateContext() {
  let context = React8.useContext(DataRouterStateContext);
  invariant2(
    context,
    "You must render this element inside a <DataRouterStateContext.Provider> element"
  );
  return context;
}
function useFrameworkContext() {
  let context = React8.useContext(FrameworkContext);
  invariant2(
    context,
    "You must render this element inside a <HydratedRouter> element"
  );
  return context;
}
function usePrefetchBehavior(prefetch, theirElementProps) {
  let frameworkContext = React8.useContext(FrameworkContext);
  let [maybePrefetch, setMaybePrefetch] = React8.useState(false);
  let [shouldPrefetch, setShouldPrefetch] = React8.useState(false);
  let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
  let ref = React8.useRef(null);
  React8.useEffect(() => {
    if (prefetch === "render") {
      setShouldPrefetch(true);
    }
    if (prefetch === "viewport") {
      let callback = (entries) => {
        entries.forEach((entry) => {
          setShouldPrefetch(entry.isIntersecting);
        });
      };
      let observer = new IntersectionObserver(callback, { threshold: 0.5 });
      if (ref.current) observer.observe(ref.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [prefetch]);
  React8.useEffect(() => {
    if (maybePrefetch) {
      let id = setTimeout(() => {
        setShouldPrefetch(true);
      }, 100);
      return () => {
        clearTimeout(id);
      };
    }
  }, [maybePrefetch]);
  let setIntent = () => {
    setMaybePrefetch(true);
  };
  let cancelIntent = () => {
    setMaybePrefetch(false);
    setShouldPrefetch(false);
  };
  if (!frameworkContext) {
    return [false, ref, {}];
  }
  if (prefetch !== "intent") {
    return [shouldPrefetch, ref, {}];
  }
  return [
    shouldPrefetch,
    ref,
    {
      onFocus: composeEventHandlers(onFocus, setIntent),
      onBlur: composeEventHandlers(onBlur, cancelIntent),
      onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
      onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
      onTouchStart: composeEventHandlers(onTouchStart, setIntent)
    }
  ];
}
function composeEventHandlers(theirHandler, ourHandler) {
  return (event) => {
    theirHandler && theirHandler(event);
    if (!event.defaultPrevented) {
      ourHandler(event);
    }
  };
}
function PrefetchPageLinks({ page, ...linkProps }) {
  let { router } = useDataRouterContext2();
  let matches = React8.useMemo(
    () => matchRoutes(router.routes, page, router.basename),
    [router.routes, page, router.basename]
  );
  if (!matches) {
    return null;
  }
  return /* @__PURE__ */ React8.createElement(PrefetchPageLinksImpl, { page, matches, ...linkProps });
}
function useKeyedPrefetchLinks(matches) {
  let { manifest, routeModules } = useFrameworkContext();
  let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React8.useState([]);
  React8.useEffect(() => {
    let interrupted = false;
    void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
      (links) => {
        if (!interrupted) {
          setKeyedPrefetchLinks(links);
        }
      }
    );
    return () => {
      interrupted = true;
    };
  }, [matches, manifest, routeModules]);
  return keyedPrefetchLinks;
}
function PrefetchPageLinksImpl({
  page,
  matches: nextMatches,
  ...linkProps
}) {
  let location = useLocation();
  let { manifest, routeModules } = useFrameworkContext();
  let { basename: basename2 } = useDataRouterContext2();
  let { loaderData, matches } = useDataRouterStateContext();
  let newMatchesForData = React8.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "data"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let newMatchesForAssets = React8.useMemo(
    () => getNewMatchesForLinks(
      page,
      nextMatches,
      matches,
      manifest,
      location,
      "assets"
    ),
    [page, nextMatches, matches, manifest, location]
  );
  let dataHrefs = React8.useMemo(() => {
    if (page === location.pathname + location.search + location.hash) {
      return [];
    }
    let routesParams = /* @__PURE__ */ new Set();
    let foundOptOutRoute = false;
    nextMatches.forEach((m3) => {
      let manifestRoute = manifest.routes[m3.route.id];
      if (!manifestRoute || !manifestRoute.hasLoader) {
        return;
      }
      if (!newMatchesForData.some((m22) => m22.route.id === m3.route.id) && m3.route.id in loaderData && routeModules[m3.route.id]?.shouldRevalidate) {
        foundOptOutRoute = true;
      } else if (manifestRoute.hasClientLoader) {
        foundOptOutRoute = true;
      } else {
        routesParams.add(m3.route.id);
      }
    });
    if (routesParams.size === 0) {
      return [];
    }
    let url2 = singleFetchUrl(page, basename2, "data");
    if (foundOptOutRoute && routesParams.size > 0) {
      url2.searchParams.set(
        "_routes",
        nextMatches.filter((m3) => routesParams.has(m3.route.id)).map((m3) => m3.route.id).join(",")
      );
    }
    return [url2.pathname + url2.search];
  }, [
    basename2,
    loaderData,
    location,
    manifest,
    newMatchesForData,
    nextMatches,
    page,
    routeModules
  ]);
  let moduleHrefs = React8.useMemo(
    () => getModuleLinkHrefs(newMatchesForAssets, manifest),
    [newMatchesForAssets, manifest]
  );
  let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "prefetch", as: "fetch", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "modulepreload", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link: link2 }) => (
    // these don't spread `linkProps` because they are full link descriptors
    // already with their own props
    /* @__PURE__ */ React8.createElement("link", { key, ...link2 })
  )));
}
function mergeRefs(...refs) {
  return (value) => {
    refs.forEach((ref) => {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref != null) {
        ref.current = value;
      }
    });
  };
}
function BrowserRouter({
  basename: basename2,
  children,
  window: window2
}) {
  let historyRef = React10.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename: basename2,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
function HistoryRouter({
  basename: basename2,
  children,
  history
}) {
  let [state, setStateImpl] = React10.useState({
    action: history.action,
    location: history.location
  });
  let setState = React10.useCallback(
    (newState) => {
      React10.startTransition(() => setStateImpl(newState));
    },
    [setStateImpl]
  );
  React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React10.createElement(
    Router,
    {
      basename: basename2,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    }
  );
}
function ScrollRestoration({
  getKey,
  storageKey,
  ...props
}) {
  let remixContext = React10.useContext(FrameworkContext);
  let { basename: basename2 } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  useScrollRestoration({ getKey, storageKey });
  let ssrKey = React10.useMemo(
    () => {
      if (!remixContext || !getKey) return null;
      let userKey = getScrollRestorationKey(
        location,
        matches,
        basename2,
        getKey
      );
      return userKey !== location.key ? userKey : null;
    },
    // Nah, we only need this the first time for the SSR render
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  if (!remixContext || remixContext.isSpaMode) {
    return null;
  }
  let restoreScroll = ((storageKey2, restoreKey) => {
    if (!window.history.state || !window.history.state.key) {
      let key = Math.random().toString(32).slice(2);
      window.history.replaceState({ key }, "");
    }
    try {
      let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
      let storedY = positions[restoreKey || window.history.state.key];
      if (typeof storedY === "number") {
        window.scrollTo(0, storedY);
      }
    } catch (error44) {
      console.error(error44);
      sessionStorage.removeItem(storageKey2);
    }
  }).toString();
  return /* @__PURE__ */ React10.createElement(
    "script",
    {
      ...props,
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: {
        __html: `(${restoreScroll})(${JSON.stringify(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        )}, ${JSON.stringify(ssrKey)})`
      }
    }
  );
}
function getDataRouterConsoleError2(hookName) {
  return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
}
function useDataRouterContext3(hookName) {
  let ctx = React10.useContext(DataRouterContext);
  invariant(ctx, getDataRouterConsoleError2(hookName));
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React10.useContext(DataRouterStateContext);
  invariant(state, getDataRouterConsoleError2(hookName));
  return state;
}
function useLinkClickHandler(to, {
  target,
  replace: replaceProp,
  state,
  preventScrollReset,
  relative,
  viewTransition
} = {}) {
  let navigate = useNavigate();
  let location = useLocation();
  let path2 = useResolvedPath(to, { relative });
  return React10.useCallback(
    (event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path2);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    },
    [
      location,
      navigate,
      path2,
      replaceProp,
      state,
      target,
      to,
      preventScrollReset,
      relative,
      viewTransition
    ]
  );
}
function useSubmit() {
  let { router } = useDataRouterContext3(
    "useSubmit"
    /* UseSubmit */
  );
  let { basename: basename2 } = React10.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React10.useCallback(
    async (target, options2 = {}) => {
      let { action, method, encType, formData, body } = getFormSubmissionInfo(
        target,
        basename2
      );
      if (options2.navigate === false) {
        let key = options2.fetcherKey || getUniqueFetcherId();
        await router.fetch(key, currentRouteId, options2.action || action, {
          preventScrollReset: options2.preventScrollReset,
          formData,
          body,
          formMethod: options2.method || method,
          formEncType: options2.encType || encType,
          flushSync: options2.flushSync
        });
      } else {
        await router.navigate(options2.action || action, {
          preventScrollReset: options2.preventScrollReset,
          formData,
          body,
          formMethod: options2.method || method,
          formEncType: options2.encType || encType,
          replace: options2.replace,
          state: options2.state,
          fromRouteId: currentRouteId,
          flushSync: options2.flushSync,
          viewTransition: options2.viewTransition
        });
      }
    },
    [router, basename2, currentRouteId]
  );
}
function useFormAction(action, { relative } = {}) {
  let { basename: basename2 } = React10.useContext(NavigationContext);
  let routeContext = React10.useContext(RouteContext);
  invariant(routeContext, "useFormAction must be used inside a RouteContext");
  let [match] = routeContext.matches.slice(-1);
  let path2 = { ...useResolvedPath(action ? action : ".", { relative }) };
  let location = useLocation();
  if (action == null) {
    path2.search = location.search;
    let params = new URLSearchParams(path2.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v3) => v3 === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v3) => v3).forEach((v3) => params.append("index", v3));
      let qs = params.toString();
      path2.search = qs ? `?${qs}` : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename2 !== "/") {
    path2.pathname = path2.pathname === "/" ? basename2 : joinPaths([basename2, path2.pathname]);
  }
  return createPath(path2);
}
function getScrollRestorationKey(location, matches, basename2, getKey) {
  let key = null;
  if (getKey) {
    if (basename2 !== "/") {
      key = getKey(
        {
          ...location,
          pathname: stripBasename(location.pathname, basename2) || location.pathname
        },
        matches
      );
    } else {
      key = getKey(location, matches);
    }
  }
  if (key == null) {
    key = location.key;
  }
  return key;
}
function useScrollRestoration({
  getKey,
  storageKey
} = {}) {
  let { router } = useDataRouterContext3(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
    "useScrollRestoration"
    /* UseScrollRestoration */
  );
  let { basename: basename2 } = React10.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React10.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(
    React10.useCallback(() => {
      if (navigation.state === "idle") {
        let key = getScrollRestorationKey(location, matches, basename2, getKey);
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY,
          JSON.stringify(savedScrollPositions)
        );
      } catch (error44) {
        warning(
          false,
          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error44}).`
        );
      }
      window.history.scrollRestoration = "auto";
    }, [navigation.state, getKey, basename2, location, matches, storageKey])
  );
  if (typeof document !== "undefined") {
    React10.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(
          storageKey || SCROLL_RESTORATION_STORAGE_KEY
        );
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e4) {
      }
    }, [storageKey]);
    React10.useLayoutEffect(() => {
      let disableScrollRestoration = router?.enableScrollRestoration(
        savedScrollPositions,
        () => window.scrollY,
        getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename2, getKey) : void 0
      );
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename2, getKey]);
    React10.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      try {
        if (location.hash) {
          let el = document.getElementById(
            decodeURIComponent(location.hash.slice(1))
          );
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
      } catch {
        warning(
          false,
          `"${location.hash.slice(
            1
          )}" is not a decodable element ID. The view will not scroll to it.`
        );
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function usePageHide(callback, options2) {
  let { capture } = options2 || {};
  React10.useEffect(() => {
    let opts = capture != null ? { capture } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function useViewTransitionState(to, { relative } = {}) {
  let vtContext = React10.useContext(ViewTransitionContext);
  invariant(
    vtContext != null,
    "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
  );
  let { basename: basename2 } = useDataRouterContext3(
    "useViewTransitionState"
    /* useViewTransitionState */
  );
  let path2 = useResolvedPath(to, { relative });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename2) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename2) || vtContext.nextLocation.pathname;
  return matchPath(path2.pathname, nextPath) != null || matchPath(path2.pathname, currentPath) != null;
}
var React, React2, React3, React4, React9, React8, React7, React6, React5, React10, React11, PopStateEventType, _map, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, validMutationMethodsArr, validMutationMethods, validRequestMethodsArr, validRequestMethods, ResetLoaderDataSymbol, DataRouterContext, DataRouterStateContext, RSCRouterContext, ViewTransitionContext, FetchersContext, AwaitContext, NavigationContext, LocationContext, RouteContext, RouteErrorContext, ENABLE_DEV_WARNINGS, navigateEffectWarning, OutletContext, defaultErrorElement, RenderErrorBoundary, alreadyWarned, MemoizedDataRoutes, defaultMethod, defaultEncType, _formDataSupportsSubmitter, supportedFormEncTypes, objectProtoNames, SingleFetchRedirectSymbol, FrameworkContext, isBrowser, ABSOLUTE_URL_REGEX2, Link, NavLink, Form, fetcherId, getUniqueFetcherId, SCROLL_RESTORATION_STORAGE_KEY, savedScrollPositions;
var init_chunk_C37GKA54 = __esm({
  "node_modules/react-router/dist/development/chunk-C37GKA54.mjs"() {
    React = __toESM(require_react(), 1);
    React2 = __toESM(require_react(), 1);
    React3 = __toESM(require_react(), 1);
    React4 = __toESM(require_react(), 1);
    React9 = __toESM(require_react(), 1);
    React8 = __toESM(require_react(), 1);
    React7 = __toESM(require_react(), 1);
    React6 = __toESM(require_react(), 1);
    React5 = __toESM(require_react(), 1);
    React10 = __toESM(require_react(), 1);
    React11 = __toESM(require_react(), 1);
    PopStateEventType = "popstate";
    _map = /* @__PURE__ */ new WeakMap();
    paramRe = /^:[\w-]+$/;
    dynamicSegmentValue = 3;
    indexRouteValue = 2;
    emptySegmentValue = 1;
    staticSegmentValue = 10;
    splatPenalty = -2;
    isSplat = (s3) => s3 === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    normalizeSearch = (search2) => !search2 || search2 === "?" ? "" : search2.startsWith("?") ? search2 : "?" + search2;
    normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
    validMutationMethodsArr = [
      "POST",
      "PUT",
      "PATCH",
      "DELETE"
    ];
    validMutationMethods = new Set(
      validMutationMethodsArr
    );
    validRequestMethodsArr = [
      "GET",
      ...validMutationMethodsArr
    ];
    validRequestMethods = new Set(validRequestMethodsArr);
    ResetLoaderDataSymbol = Symbol("ResetLoaderData");
    DataRouterContext = React.createContext(null);
    DataRouterContext.displayName = "DataRouter";
    DataRouterStateContext = React.createContext(null);
    DataRouterStateContext.displayName = "DataRouterState";
    RSCRouterContext = React.createContext(false);
    ViewTransitionContext = React.createContext({
      isTransitioning: false
    });
    ViewTransitionContext.displayName = "ViewTransition";
    FetchersContext = React.createContext(
      /* @__PURE__ */ new Map()
    );
    FetchersContext.displayName = "Fetchers";
    AwaitContext = React.createContext(null);
    AwaitContext.displayName = "Await";
    NavigationContext = React.createContext(
      null
    );
    NavigationContext.displayName = "Navigation";
    LocationContext = React.createContext(
      null
    );
    LocationContext.displayName = "Location";
    RouteContext = React.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    RouteContext.displayName = "Route";
    RouteErrorContext = React.createContext(null);
    RouteErrorContext.displayName = "RouteError";
    ENABLE_DEV_WARNINGS = true;
    navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
    OutletContext = React2.createContext(null);
    defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
    RenderErrorBoundary = class extends React2.Component {
      constructor(props) {
        super(props);
        this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error44) {
        return { error: error44 };
      }
      static getDerivedStateFromProps(props, state) {
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
          return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          };
        }
        return {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error44, errorInfo) {
        console.error(
          "React Router caught the following error during render",
          error44,
          errorInfo
        );
      }
      render() {
        return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
          RouteErrorContext.Provider,
          {
            value: this.state.error,
            children: this.props.component
          }
        )) : this.props.children;
      }
    };
    alreadyWarned = {};
    MemoizedDataRoutes = React3.memo(DataRoutes);
    defaultMethod = "get";
    defaultEncType = "application/x-www-form-urlencoded";
    _formDataSupportsSubmitter = null;
    supportedFormEncTypes = /* @__PURE__ */ new Set([
      "application/x-www-form-urlencoded",
      "multipart/form-data",
      "text/plain"
    ]);
    objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
    SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
    FrameworkContext = React8.createContext(void 0);
    FrameworkContext.displayName = "FrameworkContext";
    isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    try {
      if (isBrowser) {
        window.__reactRouterVersion = // @ts-expect-error
        "7.7.1";
      }
    } catch (e4) {
    }
    HistoryRouter.displayName = "unstable_HistoryRouter";
    ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    Link = React10.forwardRef(
      function LinkWithRef({
        onClick,
        discover = "render",
        prefetch = "none",
        relative,
        reloadDocument,
        replace: replace2,
        state,
        target,
        to,
        preventScrollReset,
        viewTransition,
        ...rest
      }, forwardedRef) {
        let { basename: basename2 } = React10.useContext(NavigationContext);
        let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
        let absoluteHref;
        let isExternal = false;
        if (typeof to === "string" && isAbsolute) {
          absoluteHref = to;
          if (isBrowser) {
            try {
              let currentUrl = new URL(window.location.href);
              let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
              let path2 = stripBasename(targetUrl.pathname, basename2);
              if (targetUrl.origin === currentUrl.origin && path2 != null) {
                to = path2 + targetUrl.search + targetUrl.hash;
              } else {
                isExternal = true;
              }
            } catch (e4) {
              warning(
                false,
                `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
              );
            }
          }
        }
        let href = useHref(to, { relative });
        let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
          prefetch,
          rest
        );
        let internalOnClick = useLinkClickHandler(to, {
          replace: replace2,
          state,
          target,
          preventScrollReset,
          relative,
          viewTransition
        });
        function handleClick(event) {
          if (onClick) onClick(event);
          if (!event.defaultPrevented) {
            internalOnClick(event);
          }
        }
        let link2 = (
          // eslint-disable-next-line jsx-a11y/anchor-has-content
          /* @__PURE__ */ React10.createElement(
            "a",
            {
              ...rest,
              ...prefetchHandlers,
              href: absoluteHref || href,
              onClick: isExternal || reloadDocument ? onClick : handleClick,
              ref: mergeRefs(forwardedRef, prefetchRef),
              target,
              "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
            }
          )
        );
        return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link2, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link2;
      }
    );
    Link.displayName = "Link";
    NavLink = React10.forwardRef(
      function NavLinkWithRef({
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = false,
        className: classNameProp = "",
        end = false,
        style: styleProp,
        to,
        viewTransition,
        children,
        ...rest
      }, ref) {
        let path2 = useResolvedPath(to, { relative: rest.relative });
        let location = useLocation();
        let routerState = React10.useContext(DataRouterStateContext);
        let { navigator: navigator2, basename: basename2 } = React10.useContext(NavigationContext);
        let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useViewTransitionState(path2) && viewTransition === true;
        let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname;
        let locationPathname = location.pathname;
        let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
        if (!caseSensitive) {
          locationPathname = locationPathname.toLowerCase();
          nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
          toPathname = toPathname.toLowerCase();
        }
        if (nextLocationPathname && basename2) {
          nextLocationPathname = stripBasename(nextLocationPathname, basename2) || nextLocationPathname;
        }
        const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
        let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
        let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
        let renderProps = {
          isActive,
          isPending,
          isTransitioning
        };
        let ariaCurrent = isActive ? ariaCurrentProp : void 0;
        let className;
        if (typeof classNameProp === "function") {
          className = classNameProp(renderProps);
        } else {
          className = [
            classNameProp,
            isActive ? "active" : null,
            isPending ? "pending" : null,
            isTransitioning ? "transitioning" : null
          ].filter(Boolean).join(" ");
        }
        let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
        return /* @__PURE__ */ React10.createElement(
          Link,
          {
            ...rest,
            "aria-current": ariaCurrent,
            className,
            ref,
            style,
            to,
            viewTransition
          },
          typeof children === "function" ? children(renderProps) : children
        );
      }
    );
    NavLink.displayName = "NavLink";
    Form = React10.forwardRef(
      ({
        discover = "render",
        fetcherKey,
        navigate,
        reloadDocument,
        replace: replace2,
        state,
        method = defaultMethod,
        action,
        onSubmit,
        relative,
        preventScrollReset,
        viewTransition,
        ...props
      }, forwardedRef) => {
        let submit = useSubmit();
        let formAction = useFormAction(action, { relative });
        let formMethod = method.toLowerCase() === "get" ? "get" : "post";
        let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
        let submitHandler = (event) => {
          onSubmit && onSubmit(event);
          if (event.defaultPrevented) return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter;
          let submitMethod = submitter?.getAttribute("formmethod") || method;
          submit(submitter || event.currentTarget, {
            fetcherKey,
            method: submitMethod,
            navigate,
            replace: replace2,
            state,
            relative,
            preventScrollReset,
            viewTransition
          });
        };
        return /* @__PURE__ */ React10.createElement(
          "form",
          {
            ref: forwardedRef,
            method: formMethod,
            action: formAction,
            onSubmit: reloadDocument ? onSubmit : submitHandler,
            ...props,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        );
      }
    );
    Form.displayName = "Form";
    ScrollRestoration.displayName = "ScrollRestoration";
    fetcherId = 0;
    getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
    SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
    savedScrollPositions = {};
  }
});

// node_modules/react-router/dist/development/index.mjs
var init_development = __esm({
  "node_modules/react-router/dist/development/index.mjs"() {
    "use client";
    init_chunk_C37GKA54();
  }
});

// node_modules/react-router-dom/dist/index.mjs
var init_dist = __esm({
  "node_modules/react-router-dom/dist/index.mjs"() {
    init_development();
  }
});

// node_modules/react/cjs/react-jsx-runtime.production.min.js
var require_react_jsx_runtime_production_min = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
    "use strict";
    var f3 = require_react();
    var k3 = Symbol.for("react.element");
    var l3 = Symbol.for("react.fragment");
    var m3 = Object.prototype.hasOwnProperty;
    var n3 = f3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
    var p3 = { key: true, ref: true, __self: true, __source: true };
    function q3(c3, a3, g3) {
      var b3, d3 = {}, e4 = null, h3 = null;
      void 0 !== g3 && (e4 = "" + g3);
      void 0 !== a3.key && (e4 = "" + a3.key);
      void 0 !== a3.ref && (h3 = a3.ref);
      for (b3 in a3) m3.call(a3, b3) && !p3.hasOwnProperty(b3) && (d3[b3] = a3[b3]);
      if (c3 && c3.defaultProps) for (b3 in a3 = c3.defaultProps, a3) void 0 === d3[b3] && (d3[b3] = a3[b3]);
      return { $$typeof: k3, type: c3, key: e4, ref: h3, props: d3, _owner: n3.current };
    }
    exports.Fragment = l3;
    exports.jsx = q3;
    exports.jsxs = q3;
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_react_jsx_runtime_production_min();
    } else {
      module.exports = null;
    }
  }
});

// src/services/webAuthService.ts
var WebAuthSession;
var init_webAuthService = __esm({
  "src/services/webAuthService.ts"() {
    "use strict";
    WebAuthSession = {
      makeRedirectUri: () => {
        return window.location.origin + "/auth/callback";
      },
      useAutoDiscovery: (domain2) => {
        return {
          authorizationEndpoint: `${domain2}/authorize`,
          tokenEndpoint: `${domain2}/oauth/token`,
          revocationEndpoint: `${domain2}/oauth/revoke`,
          userInfoEndpoint: `${domain2}/userinfo`,
          endSessionEndpoint: `${domain2}/v2/logout`
        };
      },
      ResponseType: {
        Token: "token",
        Code: "code"
      },
      useAuthRequest: (config2, discovery) => {
        const buildAuthUrl = () => {
          const params = new URLSearchParams({
            client_id: config2.clientId,
            redirect_uri: config2.redirectUri,
            response_type: config2.responseType,
            scope: config2.scopes.join(" "),
            audience: config2.extraParams?.audience || "",
            state: Math.random().toString(36).substring(7)
          });
          return `${discovery.authorizationEndpoint}?${params.toString()}`;
        };
        const promptAsync = async () => {
          const authUrl = buildAuthUrl();
          window.location.href = authUrl;
        };
        const urlParams = window.location.hash ? Object.fromEntries(new URLSearchParams(window.location.hash.substring(1))) : {};
        let response = null;
        if (window.location.hash) {
          if (urlParams.error) {
            response = {
              type: "error",
              params: urlParams,
              error: { message: urlParams.error_description || urlParams.error }
            };
          } else if (urlParams.access_token) {
            response = {
              type: "success",
              params: urlParams,
              error: null
            };
          }
        }
        const request = { url: buildAuthUrl() };
        return [request, response, promptAsync];
      },
      exchangeCodeAsync: async (_config) => {
        return { accessToken: "mock-token" };
      }
    };
  }
});

// src/services/demoDataService.ts
var DemoDataService, demoDataService;
var init_demoDataService = __esm({
  "src/services/demoDataService.ts"() {
    "use strict";
    DemoDataService = class _DemoDataService {
      static instance;
      static getInstance() {
        if (!_DemoDataService.instance) {
          _DemoDataService.instance = new _DemoDataService();
        }
        return _DemoDataService.instance;
      }
      // Starkeeper (User) Sample Data
      getStarkeeperJournalEntries(userToken) {
        return [
          {
            id: "journal-001",
            userToken,
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
            // 2 days ago
            content: "Been feeling really overwhelmed with work lately. The deadlines keep piling up and I feel like I'm drowning. Sometimes I wonder if I'm good enough for this job. Maybe talking to someone would help..."
          },
          {
            id: "journal-002",
            userToken,
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
            // 1 day ago
            content: "Had a breakthrough moment today during my session with Luna. She helped me realize that my anxiety spirals usually start with comparison to others. Going to try the breathing exercises she suggested."
          },
          {
            id: "journal-003",
            userToken,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            // Today
            content: "Practicing gratitude like my guide suggested. Three things I'm grateful for: 1) The supportive community here 2) Having a safe space to share my thoughts 3) Small progress feels significant. The tether feature really helped when I was panicking yesterday."
          }
        ];
      }
      getStarkeeperMoodCheckIns(userToken) {
        return [
          {
            id: "mood-001",
            userToken,
            timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
            moodScore: 2,
            anxietyLevel: 4,
            sleepQuality: 2,
            energyLevel: 2,
            tags: ["overwhelmed", "stressed", "isolated"],
            notes: "Work pressure getting to me. Barely sleeping."
          },
          {
            id: "mood-002",
            userToken,
            timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
            moodScore: 3,
            anxietyLevel: 3,
            sleepQuality: 3,
            energyLevel: 3,
            tags: ["hopeful", "supported"],
            notes: "Had a really good session with my guide. Feeling more hopeful."
          },
          {
            id: "mood-003",
            userToken,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            moodScore: 4,
            anxietyLevel: 2,
            sleepQuality: 4,
            energyLevel: 4,
            tags: ["grateful", "motivated", "calm"],
            notes: "Breathing exercises are working! Slept better last night."
          }
        ];
      }
      getStarkeeperDilemmas(userToken) {
        return [
          {
            id: "dilemma-001",
            userToken,
            category: "work-anxiety",
            content: "I've been having panic attacks at work almost daily. My boss keeps piling on more projects and I feel like I'm suffocating. I'm scared to tell anyone because I don't want to seem weak or lose my job. Has anyone else dealt with workplace anxiety like this?",
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
            supportCount: 12,
            isSupported: true,
            isReported: false,
            status: "resolved",
            assignedHelperId: "helper-luna",
            helperDisplayName: "Luna \u2728",
            resolved_by_seeker: true,
            summary: "Connected with Luna who provided excellent breathing techniques and workplace boundary strategies. Panic attacks have reduced significantly."
          },
          {
            id: "dilemma-002",
            userToken,
            category: "relationships",
            content: "My best friend has been distant lately and I'm worried I did something wrong. They used to text me every day but now it's been a week of silence. I'm anxious about reaching out because what if they're avoiding me on purpose?",
            timestamp: new Date(Date.now() - 5 * 60 * 60 * 1e3).toISOString(),
            // 5 hours ago
            supportCount: 7,
            isSupported: false,
            isReported: false,
            status: "active",
            aiMatchReason: "Relationship anxiety and fear of abandonment - would benefit from perspective on communication strategies"
          }
        ];
      }
      getStarkeeperAssessments(userToken) {
        return [
          {
            id: "assessment-001",
            userToken,
            type: "gad-7",
            timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
            score: 12,
            answers: [2, 2, 1, 2, 1, 2, 2]
          },
          {
            id: "assessment-002",
            userToken,
            type: "phq-9",
            timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
            score: 8,
            answers: [1, 1, 2, 1, 0, 1, 1, 1, 0]
          },
          {
            id: "assessment-003",
            userToken,
            type: "gad-7",
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            score: 8,
            answers: [1, 1, 1, 2, 1, 1, 1]
          }
        ];
      }
      // Constellation Guide (Helper) Sample Data
      getConstellationGuideProfile() {
        return {
          id: "helper-luna",
          auth0UserId: "demo-helper-001",
          displayName: "Luna \u2728",
          bio: "Certified therapist specializing in anxiety and workplace stress. Here to listen and support your journey. \u{1F319} Remember: seeking help is a sign of strength, not weakness.",
          joinDate: new Date(Date.now() - 180 * 24 * 60 * 60 * 1e3).toISOString(),
          // 6 months ago
          helperType: "Certified",
          role: "Certified",
          reputation: 4.9,
          isAvailable: true,
          expertise: ["anxiety", "workplace-stress", "panic-attacks", "breathing-techniques"],
          kudosCount: 89,
          xp: 2450,
          level: 8,
          nextLevelXp: 2500,
          applicationStatus: "approved",
          trainingCompleted: true,
          quizScore: 95
        };
      }
      getAllDilemmasForHelper() {
        return [
          // Active dilemmas that can be picked up
          {
            id: "dilemma-available-001",
            userToken: "user-need-help-001",
            category: "anxiety",
            content: "I've been having trouble sleeping because my mind races with worries about everything I need to do tomorrow. Even when I'm exhausted, I can't seem to turn off my thoughts. Has anyone found techniques that help with bedtime anxiety?",
            timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
            // 2 hours ago
            supportCount: 3,
            isSupported: false,
            isReported: false,
            status: "active",
            aiMatchReason: "Anxiety specialist match - Luna's expertise in breathing techniques could help with bedtime racing thoughts"
          },
          {
            id: "dilemma-available-002",
            userToken: "user-need-help-002",
            category: "workplace-stress",
            content: "My coworker keeps taking credit for my ideas in meetings. I'm too afraid to speak up because they have more seniority, but it's really affecting my confidence and motivation. I don't know how to handle this professionally.",
            timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
            // 4 hours ago
            supportCount: 1,
            isSupported: false,
            isReported: false,
            status: "active",
            aiMatchReason: "Workplace boundary issues - Luna's background in workplace stress management could provide professional guidance"
          },
          // Direct request for Luna
          {
            id: "dilemma-direct-001",
            userToken: "user-returning-001",
            category: "anxiety",
            content: "Hi Luna, you helped me a few weeks ago with my panic attacks and I was wondering if we could talk again? They've been getting worse since I started a new job and I could really use your guidance with the breathing techniques you taught me.",
            timestamp: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
            // 30 minutes ago
            supportCount: 0,
            isSupported: false,
            isReported: false,
            status: "direct_request",
            requestedHelperId: "helper-luna"
          },
          // Luna's active case
          {
            id: "dilemma-001",
            userToken: "demo-user-001",
            category: "work-anxiety",
            content: "I've been having panic attacks at work almost daily. My boss keeps piling on more projects and I feel like I'm suffocating. I'm scared to tell anyone because I don't want to seem weak or lose my job. Has anyone else dealt with workplace anxiety like this?",
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
            supportCount: 12,
            isSupported: true,
            isReported: false,
            status: "resolved",
            assignedHelperId: "helper-luna",
            helperDisplayName: "Luna \u2728",
            resolved_by_seeker: true,
            summary: "Connected with Luna who provided excellent breathing techniques and workplace boundary strategies. Panic attacks have reduced significantly."
          },
          // Community content from other users
          ...this.getStarkeeperDilemmas("demo-user-001")
        ];
      }
      getHelperChatSessions() {
        return [
          {
            dilemmaId: "dilemma-001",
            messages: [
              {
                id: "msg-001",
                sender: "user",
                text: "Thank you for reaching out. I really need someone to talk to about these panic attacks.",
                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString()
              },
              {
                id: "msg-002",
                sender: "poster",
                text: "I'm here to listen and support you. Panic attacks can feel overwhelming, but there are effective techniques we can explore together. Can you tell me what triggers them most at work?",
                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3 + 5 * 60 * 1e3).toISOString()
              },
              {
                id: "msg-003",
                sender: "user",
                text: "Usually when my boss assigns multiple urgent deadlines at once. My chest gets tight and I can't breathe properly.",
                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3 + 10 * 60 * 1e3).toISOString()
              },
              {
                id: "msg-004",
                sender: "poster",
                text: "That physical response is very common with anxiety. Let's try a grounding technique: 5-4-3-2-1. Name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste. This helps bring you back to the present moment.",
                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3 + 15 * 60 * 1e3).toISOString()
              }
            ],
            unread: false,
            perspective: "helper",
            helpSessionId: "session-001"
          }
        ];
      }
      getHelperSessions() {
        return [
          {
            id: "session-001",
            dilemmaId: "dilemma-001",
            seekerId: "demo-user-001",
            helperId: "helper-luna",
            helperDisplayName: "Luna \u2728",
            startedAt: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString(),
            endedAt: new Date(Date.now() - 23 * 60 * 60 * 1e3).toISOString(),
            isFavorited: true,
            kudosGiven: true,
            summary: "Successful session addressing workplace panic attacks. Provided grounding techniques and boundary-setting strategies.",
            helperSummary: "Responsive client, implemented breathing techniques effectively. Recommended ongoing practice and follow-up if symptoms persist."
          },
          {
            id: "session-002",
            dilemmaId: "dilemma-003",
            seekerId: "demo-user-002",
            helperId: "helper-luna",
            helperDisplayName: "Luna \u2728",
            startedAt: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
            isFavorited: false,
            summary: "Ongoing session - relationship anxiety support"
          }
        ];
      }
      // Astral Admin Sample Data
      getAdminHelperApplications() {
        return [
          {
            id: "helper-pending-001",
            auth0UserId: "pending-helper-001",
            displayName: "Alex Chen",
            bio: "Psychology graduate with experience in peer counseling. Passionate about mental health advocacy and crisis intervention.",
            joinDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
            helperType: "Community",
            role: "Community",
            reputation: 0,
            isAvailable: false,
            expertise: ["depression", "anxiety", "crisis-support"],
            xp: 0,
            level: 1,
            nextLevelXp: 100,
            applicationStatus: "pending",
            applicationNotes: "Strong background in psychology. Completed crisis intervention training. References pending verification.",
            trainingCompleted: true,
            quizScore: 88
          },
          {
            id: "helper-rejected-001",
            auth0UserId: "rejected-helper-001",
            displayName: "Sam Johnson",
            bio: "Want to help people with their problems.",
            joinDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
            helperType: "Community",
            role: "Community",
            reputation: 0,
            isAvailable: false,
            expertise: ["general"],
            xp: 0,
            level: 1,
            nextLevelXp: 100,
            applicationStatus: "rejected",
            applicationNotes: "Insufficient training completion. Bio lacks professionalism. Quiz score below threshold.",
            trainingCompleted: false,
            quizScore: 45
          }
        ];
      }
      getAdminModerationActions() {
        return [
          {
            id: "mod-001",
            userId: "user-flagged-001",
            action: "Post Removed",
            reason: "Inappropriate content - sharing personal contact information",
            timestamp: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
            relatedContentId: "dilemma-removed-001"
          },
          {
            id: "mod-002",
            userId: "user-warned-001",
            action: "Warning Issued",
            reason: "Multiple reports for aggressive language in chat sessions",
            timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString()
          },
          {
            id: "mod-003",
            userId: "helper-suspended-001",
            action: "Helper Suspended",
            reason: "Violation of helper guidelines - providing medical advice beyond scope",
            timestamp: new Date(Date.now() - 18 * 60 * 60 * 1e3).toISOString()
          }
        ];
      }
      getAdminCommunityStats() {
        return {
          activeDilemmas: 47,
          avgTimeToFirstSupport: "8m 32s",
          totalHelpers: 23,
          mostCommonCategory: "anxiety"
        };
      }
      // Comprehensive Astral Admin Profile & Dashboard Data
      getAstralAdminProfile() {
        return {
          id: "admin-001",
          name: "Dr. Michael Torres",
          role: "Astral Admin",
          department: "Platform Operations & Safety",
          clearanceLevel: "Executive",
          yearsWithPlatform: 3,
          profilePicture: "/demo-images/admin-torres.jpg",
          contactInfo: {
            email: "m.torres@astralcore.org",
            phone: "+1-555-0123",
            emergencyContact: "+1-555-0199"
          },
          // Helper Applications to Review
          helperApplications: [
            {
              id: "app-001",
              applicantName: "Dr. Lisa Wang",
              applicationType: "New Helper Application",
              submissionDate: /* @__PURE__ */ new Date("2024-01-10T09:15:00"),
              status: "pending_review",
              priority: "high",
              credentials: ["Licensed Psychologist", "PhD Clinical Psychology", "10+ years experience"],
              specialties: ["Trauma Recovery", "Addiction Support", "Family Therapy"],
              backgroundCheckStatus: "completed",
              referencesVerified: true,
              reviewNotes: "Strong credentials, excellent references. Recommend approval.",
              riskAssessment: "low"
            },
            {
              id: "app-002",
              applicantName: "Jordan Smith",
              applicationType: "Peer Support Specialist",
              submissionDate: /* @__PURE__ */ new Date("2024-01-12T14:30:00"),
              status: "under_review",
              priority: "medium",
              credentials: ["Certified Peer Support Specialist", "Lived Experience Advocate"],
              specialties: ["Depression Support", "Recovery Journey"],
              backgroundCheckStatus: "in_progress",
              referencesVerified: false,
              reviewNotes: "Awaiting final reference verification.",
              riskAssessment: "low"
            },
            {
              id: "app-003",
              applicantName: "Alex Chen",
              applicationType: "Crisis Intervention Specialist",
              submissionDate: /* @__PURE__ */ new Date("2024-01-08T11:45:00"),
              status: "flagged",
              priority: "urgent",
              credentials: ["Crisis Intervention Certification"],
              specialties: ["Suicide Prevention", "Emergency Response"],
              backgroundCheckStatus: "flagged",
              referencesVerified: true,
              reviewNotes: "Background check revealed undisclosed prior incident. Requires executive review.",
              riskAssessment: "high"
            }
          ],
          // Escalated Moderation Cases
          escalatedCases: [
            {
              id: "esc-001",
              type: "serious_safety_concern",
              description: "User posted detailed self-harm plan in community forum",
              reportedBy: "guide-001",
              escalationTime: /* @__PURE__ */ new Date("2024-01-15T16:20:00"),
              status: "urgent_intervention",
              userInvolved: "user-crisis-003",
              actionsTaken: ["Immediate crisis intervention", "Emergency contact notified", "Professional referral initiated"],
              outcome: "pending",
              followUpRequired: true
            },
            {
              id: "esc-002",
              type: "helper_boundary_violation",
              description: "Helper provided personal contact information to user",
              reportedBy: "automated_system",
              escalationTime: /* @__PURE__ */ new Date("2024-01-14T22:15:00"),
              status: "under_investigation",
              helperInvolved: "guide-003",
              actionsTaken: ["Temporary suspension", "Investigation initiated", "User safety verified"],
              outcome: "investigation_ongoing",
              followUpRequired: true
            },
            {
              id: "esc-003",
              type: "platform_security_incident",
              description: "Unauthorized access attempt to admin dashboard",
              reportedBy: "security_system",
              escalationTime: /* @__PURE__ */ new Date("2024-01-13T03:45:00"),
              status: "resolved",
              actionsTaken: ["IP blocked", "Security protocols updated", "Access logs reviewed"],
              outcome: "threat_neutralized",
              followUpRequired: false
            }
          ],
          // Platform Analytics Dashboard
          analytics: {
            userMetrics: {
              totalActiveUsers: 15724,
              newRegistrationsToday: 47,
              dailyActiveUsers: 3892,
              weeklyActiveUsers: 8456,
              userRetentionRate: 78.3,
              averageSessionDuration: 23.5
            },
            helperMetrics: {
              totalActiveHelpers: 324,
              averageResponseTime: 8.2,
              helpersOnline: 89,
              totalSessionsToday: 156,
              helperSatisfactionRating: 4.7,
              helperUtilizationRate: 67.8
            },
            crisisMetrics: {
              crisisAlertsToday: 12,
              averageResponseTimeToCrisis: 4.3,
              crisisResolutionRate: 94.2,
              escalationRate: 8.7,
              emergencyContactsActivated: 3,
              preventionSuccessRate: 91.5
            },
            platformHealth: {
              systemUptime: 99.97,
              averagePageLoadTime: 1.2,
              errorRate: 0.03,
              dataBackupStatus: "current",
              securityIncidents: 0,
              performanceScore: 96.8
            }
          },
          // Community Health Monitoring
          communityHealth: {
            totalPosts: 1847,
            flaggedContent: 23,
            moderatedContent: 156,
            positiveSentimentRate: 73.4,
            engagementRate: 45.2,
            reportedIncidents: 8,
            communityGuidanceInterventions: 34
          },
          // Quality Assurance Metrics
          qualityMetrics: {
            helperPerformanceReviews: 12,
            userSatisfactionScore: 4.6,
            platformFeatureUsage: {
              journaling: 89.3,
              peerSupport: 67.8,
              crisisSupport: 23.4,
              resourceLibrary: 56.7,
              moodTracking: 78.9
            },
            completedAudits: 4,
            pendingAudits: 2
          },
          // Administrative Actions Log
          recentActions: [
            {
              id: "action-001",
              type: "helper_approval",
              description: "Approved new helper application for Dr. Amanda Rodriguez",
              timestamp: /* @__PURE__ */ new Date("2024-01-15T10:30:00"),
              adminUser: "admin-001"
            },
            {
              id: "action-002",
              type: "policy_update",
              description: "Updated crisis intervention protocols per new guidelines",
              timestamp: /* @__PURE__ */ new Date("2024-01-14T15:45:00"),
              adminUser: "admin-001"
            },
            {
              id: "action-003",
              type: "security_enhancement",
              description: "Implemented additional 2FA requirements for helpers",
              timestamp: /* @__PURE__ */ new Date("2024-01-13T09:20:00"),
              adminUser: "admin-001"
            }
          ],
          // System Alerts
          systemAlerts: [
            {
              id: "alert-001",
              type: "performance",
              severity: "medium",
              message: "Database query response time above threshold in crisis support module",
              timestamp: /* @__PURE__ */ new Date("2024-01-15T14:20:00"),
              status: "acknowledged"
            },
            {
              id: "alert-002",
              type: "security",
              severity: "low",
              message: "Multiple failed login attempts from IP range 192.168.1.x",
              timestamp: /* @__PURE__ */ new Date("2024-01-15T11:35:00"),
              status: "monitoring"
            }
          ]
        };
      }
      // Community Content for All Users
      getCommunityReflections() {
        return [
          {
            id: "reflection-001",
            userToken: "community-user-001",
            content: "Today I realized that healing isn't linear. Some days are harder than others, and that's okay. Progress isn't always visible from the inside. \u{1F331}",
            timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
            reactions: { light: 15, heart: 8, strength: 12 },
            myReaction: "light"
          },
          {
            id: "reflection-002",
            userToken: "community-user-002",
            content: "Grateful for this community. Yesterday I was in a dark place, but reading everyone's stories reminded me I'm not alone. Sometimes just knowing others understand makes all the difference.",
            timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
            reactions: { heart: 22, light: 18, hug: 9 }
          },
          {
            id: "reflection-003",
            userToken: "demo-user-001",
            content: "Six months ago I couldn't leave my apartment without panic attacks. Today I gave a presentation at work. The breathing techniques from my guide Luna really work. If you're struggling, please reach out - it gets better. \u{1F499}",
            timestamp: new Date(Date.now() - 1 * 60 * 60 * 1e3).toISOString(),
            reactions: { strength: 28, light: 31, heart: 19 }
          }
        ];
      }
      getForumThreads() {
        return [
          {
            id: "thread-001",
            title: "Crisis Intervention Best Practices - Updated Guidelines",
            authorId: "helper-luna",
            authorName: "Luna \u2728",
            timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
            postCount: 12,
            lastReply: new Date(Date.now() - 30 * 60 * 1e3).toISOString()
          },
          {
            id: "thread-002",
            title: "Supporting Users with Workplace Anxiety - Strategies and Resources",
            authorId: "admin-001",
            authorName: "Demo Astral Admin",
            timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(),
            postCount: 8,
            lastReply: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString()
          }
        ];
      }
      // AI Chat Demo Scenarios
      getAIChatDemoSession() {
        return {
          messages: [
            {
              id: "ai-msg-001",
              sender: "user",
              text: "I'm feeling really anxious about a job interview tomorrow. My mind keeps racing with all the things that could go wrong.",
              timestamp: new Date(Date.now() - 10 * 60 * 1e3).toISOString()
            },
            {
              id: "ai-msg-002",
              sender: "ai",
              text: "It's completely natural to feel anxious before an important interview. This shows the opportunity matters to you. Let's work through some techniques to help you feel more prepared and calm. Can you tell me what specific concerns are weighing on your mind?",
              timestamp: new Date(Date.now() - 9 * 60 * 1e3).toISOString()
            },
            {
              id: "ai-msg-003",
              sender: "user",
              text: "I'm worried I'll blank out when they ask me questions, or that I'll say something wrong and embarrass myself.",
              timestamp: new Date(Date.now() - 8 * 60 * 1e3).toISOString()
            },
            {
              id: "ai-msg-004",
              sender: "ai",
              text: "Those are very common interview worries. Here are some strategies that can help:\n\n1. **Practice the STAR method** (Situation, Task, Action, Result) for answering behavioral questions\n2. **Prepare 3-5 key stories** about your experiences that showcase your skills\n3. **Use box breathing**: Inhale for 4, hold for 4, exhale for 4, hold for 4\n\nWould you like to practice one of these techniques right now?",
              timestamp: new Date(Date.now() - 7 * 60 * 1e3).toISOString()
            }
          ]
        };
      }
      // Crisis Escalation Demo Data
      getCrisisScenarioData() {
        return {
          dilemma: {
            id: "crisis-001",
            userToken: "crisis-user-001",
            category: "crisis",
            content: "I can't take this anymore. Everything feels hopeless and I don't see the point in continuing. I've been thinking about ending it all.",
            timestamp: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
            supportCount: 0,
            isSupported: false,
            isReported: true,
            reportReason: "Crisis - immediate intervention needed",
            status: "in_progress",
            assignedHelperId: "helper-crisis-specialist",
            helperDisplayName: "Crisis Support Team"
          },
          chatMessages: [
            {
              id: "crisis-msg-001",
              sender: "poster",
              text: "I see you're going through an incredibly difficult time right now, and I want you to know that reaching out here took courage. You matter, and there are people who want to help. Can you tell me if you're in a safe place right now?",
              timestamp: new Date(Date.now() - 25 * 60 * 1e3).toISOString()
            },
            {
              id: "crisis-msg-002",
              sender: "poster",
              text: "I'm connecting you with our crisis specialists and providing immediate resources. The National Suicide Prevention Lifeline is available 24/7 at 988. You don't have to go through this alone.",
              timestamp: new Date(Date.now() - 20 * 60 * 1e3).toISOString()
            }
          ]
        };
      }
      // Interconnected Workflow: User → Helper → Admin
      getInterconnectedWorkflowData() {
        return {
          // STEP 1: User posts vulnerable content that triggers AI concern detection
          userPost: {
            id: "workflow-dilemma-001",
            userToken: "demo-user-workflow",
            username: "Hope_Seeker_22",
            category: "crisis-support",
            content: "I've been having really dark thoughts lately and I don't know how to make them stop. Everything feels pointless and I'm wondering if people would be better off without me. I keep thinking about ways to just... not be here anymore. I don't want to feel this way but I can't see any way out.",
            timestamp: new Date(Date.now() - 3 * 60 * 60 * 1e3).toISOString(),
            // 3 hours ago
            supportCount: 0,
            isSupported: false,
            isReported: false,
            status: "crisis_detected",
            aiConcernLevel: "high",
            aiFlags: ["suicidal_ideation", "hopelessness", "social_withdrawal"],
            triggerKeywords: ["dark thoughts", "pointless", "better off without me", "not be here"],
            riskAssessment: "immediate_intervention_required"
          },
          // STEP 2: AI Detection and Automatic Helper Assignment
          aiDetectionResponse: {
            detectionTime: new Date(Date.now() - 3 * 60 * 60 * 1e3 + 2 * 60 * 1e3).toISOString(),
            // 2 mins after post
            confidenceScore: 0.94,
            riskLevel: "critical",
            flaggedConcerns: ["suicidal_ideation", "immediate_danger", "hopelessness"],
            automatedActions: [
              "Crisis specialist immediately notified",
              "Post prioritized in helper queue",
              "Safety resources automatically shared",
              "Admin alerted for potential escalation"
            ],
            assignedHelperId: "helper-crisis-001",
            helperDisplayName: "Dr. Sarah Chen - Crisis Specialist"
          },
          // STEP 3: Helper Response and Intervention
          helperIntervention: {
            responderId: "helper-crisis-001",
            responderName: "Dr. Sarah Chen",
            responderCredentials: ["Licensed Clinical Psychologist", "Crisis Intervention Specialist", "15+ years experience"],
            responseTime: new Date(Date.now() - 3 * 60 * 60 * 1e3 + 8 * 60 * 1e3).toISOString(),
            // 8 mins after post
            initialResponse: "Thank you for reaching out and sharing what you're going through - that took incredible courage. I want you to know that you're not alone, and these feelings, while overwhelming right now, can change. Your life has value and meaning. I'm here to support you through this difficult time.",
            interventionActions: [
              "Immediate safety assessment conducted",
              "Crisis resources provided",
              "Safety plan development initiated",
              "Professional referral offered",
              "Follow-up session scheduled"
            ],
            safetyPlan: {
              immediateSteps: [
                "If in immediate danger, call 988 (Suicide & Crisis Lifeline)",
                "Reach out to trusted friend/family member",
                "Remove any means of self-harm from immediate environment",
                "Stay in public/safe spaces"
              ],
              copingStrategies: [
                "Deep breathing exercises (4-7-8 technique)",
                "Grounding technique: 5-4-3-2-1 sensory awareness",
                "Listen to calming music or favorite podcast",
                "Take a warm shower or bath"
              ],
              supportContacts: [
                "Crisis Lifeline: 988",
                "Crisis Text Line: Text HOME to 741741",
                "Emergency Services: 911",
                "Platform Crisis Support: Available 24/7"
              ]
            },
            outcomeAssessment: "user_stabilized_accepting_help"
          },
          // STEP 4: Admin Review and Oversight
          adminReview: {
            reviewerId: "admin-001",
            reviewerName: "Dr. Michael Torres",
            reviewTime: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
            // 1 hour later
            reviewType: "crisis_intervention_audit",
            findings: {
              helperResponse: "excellent_professional_appropriate",
              timeToResponse: "within_acceptable_range",
              interventionQuality: "comprehensive_effective",
              safetyMeasures: "all_protocols_followed",
              userOutcome: "positive_engagement_achieved"
            },
            adminActions: [
              "Helper performance commended",
              "Crisis response documented for training",
              "User added to enhanced monitoring list",
              "Quality assurance metrics updated",
              "Follow-up reminder scheduled"
            ],
            qualityScore: 9.7,
            recommendedImprovements: [
              "Consider shorter initial response time target",
              "Add automated resource delivery enhancement"
            ],
            escalationDecision: "no_further_escalation_needed",
            followUpRequired: true,
            followUpScheduled: new Date(Date.now() + 24 * 60 * 60 * 1e3).toISOString()
            // 24 hours from now
          },
          // STEP 5: Positive Resolution Tracking
          resolutionTracking: {
            outcomeId: "resolution-workflow-001",
            currentStatus: "stable_with_support",
            timeToStabilization: "2 hours 15 minutes",
            interventionsUsed: [
              "Crisis counselor immediate response",
              "Safety plan implementation",
              "Professional referral accepted",
              "Ongoing platform support established"
            ],
            userFeedback: {
              rating: 5,
              comment: "Dr. Chen saved my life. I felt heard and supported when I had nowhere else to turn. The safety plan helped me get through the worst moments, and knowing help is available 24/7 gives me hope.",
              wouldRecommend: true,
              followUpAccepted: true
            },
            platformMetrics: {
              crisisResolutionSuccess: true,
              emergencyContactActivated: false,
              professionalReferralCompleted: true,
              userRetainedOnPlatform: true,
              helperKudosReceived: true
            },
            longTermOutcome: "user_engaging_ongoing_support"
          }
        };
      }
      // Additional Interconnected Scenarios
      getMultipleWorkflowScenarios() {
        return {
          // SCENARIO 1: Workplace Boundary Violation → Helper Response → Admin Action
          scenario1: {
            userReport: {
              id: "violation-report-001",
              reportingUser: "demo-user-002",
              reportedHelper: "helper-boundary-violation",
              incidentType: "inappropriate_contact",
              description: "Helper shared their personal phone number and suggested meeting in person outside the platform. This made me very uncomfortable.",
              timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
              evidence: [
                "Chat logs showing personal contact sharing",
                "Screenshot of meeting suggestion message"
              ],
              reportStatus: "under_investigation"
            },
            helperPerspective: {
              helperId: "helper-boundary-violation",
              helperName: "Jake Morrison",
              incidentFromHelperView: "I thought I was being helpful by offering more personal support. I didn't realize this violated platform guidelines.",
              violationType: "professional_boundary_crossed",
              priorViolations: 0,
              accountStatus: "temporarily_suspended",
              remedialAction: "mandatory_retraining_required"
            },
            adminResponse: {
              investigatingAdmin: "admin-001",
              investigationStarted: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
              investigationFindings: [
                "Clear boundary violation confirmed",
                "User safety compromised",
                "Helper training deficiency identified",
                "No malicious intent detected"
              ],
              actionsTaken: [
                "Helper temporarily suspended",
                "Mandatory retraining scheduled",
                "User provided additional support",
                "Platform guidelines clarified",
                "Monitoring increased for this helper"
              ],
              resolutionTime: "4 hours 30 minutes",
              outcome: "violation_confirmed_training_required"
            }
          },
          // SCENARIO 2: Community Content Escalation → Moderation → Policy Update
          scenario2: {
            communityPost: {
              id: "flagged-content-001",
              authorId: "user-problematic-001",
              category: "general_discussion",
              content: "I found a way to get prescription medication without seeing a doctor. DM me if you want to know how. These doctors don't understand what we really need.",
              timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
              flags: ["illegal_activity", "medication_advice", "safety_concern"],
              reportCount: 7,
              reportReasons: ["Promoting illegal activity", "Unsafe medical advice", "Community safety"]
            },
            helperModeration: {
              moderatingHelper: "helper-moderator-001",
              moderatorName: "Lisa Rodriguez",
              reviewTime: new Date(Date.now() - 11 * 60 * 60 * 1e3).toISOString(),
              moderationDecision: "remove_and_escalate",
              justification: "Content promotes illegal medication acquisition and poses serious safety risks to community members",
              immediateActions: [
                "Post removed from community",
                "User notified of violation",
                "Case escalated to admin team",
                "Similar content scan initiated"
              ],
              riskAssessment: "high_community_safety_risk"
            },
            adminPolicyResponse: {
              reviewingAdmin: "admin-001",
              escalationReview: new Date(Date.now() - 10 * 60 * 60 * 1e3).toISOString(),
              policyImplications: [
                "Medication advice guidelines need strengthening",
                "Automated detection filters require enhancement",
                "Helper training modules need updating"
              ],
              systemChanges: [
                "Enhanced keyword detection for medication-related content",
                "Automatic escalation for drug-related posts",
                "Community guidelines updated",
                "Helper training curriculum revised"
              ],
              preventiveMeasures: [
                "Proactive content scanning implemented",
                "Educational resources about medication safety added",
                "Community awareness campaign launched"
              ],
              outcome: "policy_strengthened_prevention_improved"
            }
          },
          // SCENARIO 3: Positive Success Story → Recognition → Platform Improvement
          scenario3: {
            successStory: {
              userId: "user-success-001",
              username: "GrowingStronger",
              journeyDuration: "6 months",
              initialState: "severe_anxiety_depression_isolation",
              supportReceived: [
                "Regular sessions with certified helper Dr. Amanda",
                "Peer support group participation",
                "Crisis intervention during difficult periods",
                "Resource library utilization",
                "Community engagement growth"
              ],
              currentState: "stable_managing_well_helping_others",
              testimonal: "Six months ago I could barely leave my house. Now I'm not only managing my anxiety but I'm here supporting others. This platform literally saved my life and gave me purpose.",
              metricsImprovement: {
                anxietyReduction: "70%",
                depressionImprovement: "65%",
                socialConnection: "300% increase",
                selfEfficacy: "80% improvement",
                qualityOfLife: "85% improvement"
              }
            },
            helperRecognition: {
              helperId: "helper-amanda-success",
              helperName: "Dr. Amanda Rodriguez",
              caseOutcome: "exceptional_success",
              clientProgress: "transformational_recovery",
              supportQuality: "exemplary_professional_caring",
              recognition: [
                "Helper of the Month award",
                "Case study selected for training materials",
                "Peer recognition from helper community",
                "Client testimonial featured"
              ],
              platformImpact: "demonstrates_platform_effectiveness"
            },
            adminAnalysis: {
              analysisType: "success_case_study",
              keyFactors: [
                "Consistent long-term support relationship",
                "Multi-modal platform feature utilization",
                "Effective crisis intervention when needed",
                "Community integration and peer support",
                "Resource accessibility and engagement"
              ],
              platformInsights: [
                "Long-term helper relationships drive better outcomes",
                "Crisis support safety net enables risk-taking in growth",
                "Community connection accelerates recovery",
                "Resource variety meets diverse learning styles"
              ],
              implementedImprovements: [
                "Helper continuity program enhanced",
                "Community connection features expanded",
                "Crisis support protocols refined",
                "Success milestone tracking added"
              ],
              outcomeForPlatform: "evidence_based_feature_enhancement"
            }
          }
        };
      }
      // Initialize demo data based on user type
      initializeDemoData(userType, userToken) {
        const data2 = {};
        const workflowData = this.getInterconnectedWorkflowData();
        const multipleScenarios = this.getMultipleWorkflowScenarios();
        const crisisScenarios = this.getCrisisEscalationScenarios();
        if (userType === "user") {
          data2.journalEntries = this.getStarkeeperJournalEntries(userToken);
          data2.moodCheckIns = this.getStarkeeperMoodCheckIns(userToken);
          data2.dilemmas = this.getStarkeeperDilemmas(userToken);
          data2.assessments = this.getStarkeeperAssessments(userToken);
          data2.workflowExample = {
            myPost: workflowData.userPost,
            helperSupport: workflowData.helperIntervention,
            safetyPlan: workflowData.helperIntervention.safetyPlan,
            myFeedback: workflowData.resolutionTracking.userFeedback,
            ongoingSupport: workflowData.resolutionTracking
          };
          data2.platformExamples = {
            crisisSupport: workflowData,
            boundaryProtection: multipleScenarios.scenario1.userReport,
            communityGuidelines: multipleScenarios.scenario2.communityPost,
            successStory: multipleScenarios.scenario3.successStory
          };
          data2.crisisScenarios = {
            suicidalCrisis: {
              myPost: crisisScenarios.immediateRisk.userPost,
              helpReceived: crisisScenarios.immediateRisk.helperResponse,
              safetyPlan: crisisScenarios.immediateRisk.helperResponse.safetyInterventions,
              outcome: crisisScenarios.immediateRisk.resolutionTracking
            },
            domesticViolenceCrisis: {
              myPost: crisisScenarios.domesticViolence.userPost,
              helpReceived: crisisScenarios.domesticViolence.helperResponse,
              safetyPlan: crisisScenarios.domesticViolence.helperResponse.safetyActions,
              outcome: crisisScenarios.domesticViolence.resolutionTracking
            },
            substanceCrisis: {
              myPost: crisisScenarios.substanceAbuseCrisis.userPost,
              helpReceived: crisisScenarios.substanceAbuseCrisis.helperResponse,
              medicalSupport: crisisScenarios.substanceAbuseCrisis.helperResponse.medicalGuidance,
              outcome: crisisScenarios.substanceAbuseCrisis.resolutionTracking
            }
          };
        } else if (userType === "helper") {
          data2.profile = this.getConstellationGuideProfile();
          data2.chatSessions = this.getHelperChatSessions();
          data2.helpSessions = this.getHelperSessions();
          data2.allDilemmas = this.getAllDilemmasForHelper();
          data2.workflowExample = {
            crisisAlert: workflowData.userPost,
            aiDetection: workflowData.aiDetectionResponse,
            myIntervention: workflowData.helperIntervention,
            adminReview: workflowData.adminReview,
            outcome: workflowData.resolutionTracking
          };
          data2.helperScenarios = {
            crisisIntervention: workflowData.helperIntervention,
            boundaryTraining: multipleScenarios.scenario1.helperPerspective,
            contentModeration: multipleScenarios.scenario2.helperModeration,
            successRecognition: multipleScenarios.scenario3.helperRecognition
          };
          data2.crisisInterventions = {
            suicideIntervention: {
              crisisAlert: crisisScenarios.immediateRisk.userPost,
              aiAssessment: crisisScenarios.immediateRisk.aiDetection,
              myResponse: crisisScenarios.immediateRisk.helperResponse,
              adminBackup: crisisScenarios.immediateRisk.adminEscalation,
              outcome: crisisScenarios.immediateRisk.resolutionTracking
            },
            domesticViolenceIntervention: {
              crisisAlert: crisisScenarios.domesticViolence.userPost,
              aiAssessment: crisisScenarios.domesticViolence.aiDetection,
              myResponse: crisisScenarios.domesticViolence.helperResponse,
              adminBackup: crisisScenarios.domesticViolence.adminEscalation,
              outcome: crisisScenarios.domesticViolence.resolutionTracking
            },
            medicalEmergencyIntervention: {
              crisisAlert: crisisScenarios.substanceAbuseCrisis.userPost,
              aiAssessment: crisisScenarios.substanceAbuseCrisis.aiDetection,
              myResponse: crisisScenarios.substanceAbuseCrisis.helperResponse,
              adminBackup: crisisScenarios.substanceAbuseCrisis.adminEscalation,
              outcome: crisisScenarios.substanceAbuseCrisis.resolutionTracking
            }
          };
        } else if (userType === "admin") {
          data2.profile = this.getAstralAdminProfile();
          data2.helperApplications = this.getAdminHelperApplications();
          data2.moderationActions = this.getAdminModerationActions();
          data2.communityStats = this.getAdminCommunityStats();
          data2.workflowExample = {
            incidentOverview: workflowData.userPost,
            aiSystem: workflowData.aiDetectionResponse,
            helperResponse: workflowData.helperIntervention,
            myReview: workflowData.adminReview,
            systemMetrics: workflowData.resolutionTracking.platformMetrics,
            qualityAssurance: workflowData.adminReview.findings
          };
          data2.adminOversight = {
            crisisManagement: workflowData.adminReview,
            boundaryEnforcement: multipleScenarios.scenario1.adminResponse,
            policyDevelopment: multipleScenarios.scenario2.adminPolicyResponse,
            successAnalysis: multipleScenarios.scenario3.adminAnalysis
          };
          data2.crisisManagement = {
            suicideCrisisOversight: {
              incident: crisisScenarios.immediateRisk.userPost,
              aiSystem: crisisScenarios.immediateRisk.aiDetection,
              helperResponse: crisisScenarios.immediateRisk.helperResponse,
              myEscalation: crisisScenarios.immediateRisk.adminEscalation,
              systemMetrics: crisisScenarios.immediateRisk.resolutionTracking
            },
            domesticViolenceCrisisOversight: {
              incident: crisisScenarios.domesticViolence.userPost,
              aiSystem: crisisScenarios.domesticViolence.aiDetection,
              helperResponse: crisisScenarios.domesticViolence.helperResponse,
              myEscalation: crisisScenarios.domesticViolence.adminEscalation,
              systemMetrics: crisisScenarios.domesticViolence.resolutionTracking
            },
            medicalEmergencyCrisisOversight: {
              incident: crisisScenarios.substanceAbuseCrisis.userPost,
              aiSystem: crisisScenarios.substanceAbuseCrisis.aiDetection,
              helperResponse: crisisScenarios.substanceAbuseCrisis.helperResponse,
              myEscalation: crisisScenarios.substanceAbuseCrisis.adminEscalation,
              systemMetrics: crisisScenarios.substanceAbuseCrisis.resolutionTracking
            }
          };
        }
        data2.communityReflections = this.getCommunityReflections();
        data2.forumThreads = this.getForumThreads();
        data2.aiChatSession = this.getAIChatDemoSession();
        data2.crisisScenario = this.getCrisisScenarioData();
        localStorage.setItem(`demo_data_${userType}`, JSON.stringify(data2));
        return data2;
      }
      // Get demo data for current user
      getDemoData(userType) {
        const stored = localStorage.getItem(`demo_data_${userType}`);
        if (stored) {
          return JSON.parse(stored);
        }
        const userToken = localStorage.getItem("demo_user") ? JSON.parse(localStorage.getItem("demo_user")).sub : "demo-token-" + Date.now();
        return this.initializeDemoData(userType, userToken);
      }
      // Clear demo data (for reset/logout)
      clearDemoData() {
        localStorage.removeItem("demo_data_user");
        localStorage.removeItem("demo_data_helper");
        localStorage.removeItem("demo_data_admin");
      }
      // Comprehensive Crisis Escalation Scenarios
      getCrisisEscalationScenarios() {
        return {
          // SCENARIO 1: Immediate Danger - Suicidal Ideation with Plan
          immediateRisk: {
            // Step 1: User posts crisis content
            userPost: {
              id: "crisis-immediate-001",
              userToken: "user-crisis-immediate",
              username: "desperateforanswers_92",
              category: "crisis-support",
              content: "I can't do this anymore. I have pills saved up and tonight feels like the right time. I've written letters to everyone. My family will be better off without the burden of dealing with me. I just wanted to say goodbye to this community that tried to help.",
              timestamp: new Date(Date.now() - 5 * 60 * 1e3).toISOString(),
              // 5 minutes ago
              supportCount: 0,
              isSupported: false,
              isReported: false,
              status: "critical_crisis_detected",
              aiFlags: ["suicide_plan", "means_available", "imminent_danger", "goodbye_message"],
              riskLevel: "critical",
              urgencyScore: 10
            },
            // Step 2: AI Detection Response (< 30 seconds)
            aiDetection: {
              detectionTime: new Date(Date.now() - 4.5 * 60 * 1e3).toISOString(),
              algorithm: "Advanced Crisis Detection v3.2",
              confidenceScore: 0.98,
              riskFactors: [
                "Specific method mentioned (pills)",
                "Expressed intent with timeline (tonight)",
                "Farewell behavior (letters written)",
                "Burden narrative (family better off)",
                "Finality language (goodbye message)"
              ],
              automatedActions: [
                "Crisis alert to all available specialists",
                "Emergency contact protocol activated",
                "Content flagged for immediate intervention",
                "User IP geo-location for emergency services",
                "Admin escalation triggered automatically"
              ],
              estimatedTimeToAct: "15-30 minutes based on post language"
            },
            // Step 3: Helper Crisis Response (within 2 minutes)
            helperResponse: {
              responderId: "helper-crisis-specialist-001",
              responderName: "Dr. Emma Williams",
              credentials: ["Licensed Clinical Psychologist", "Crisis Intervention Specialist", "Suicide Prevention Certified"],
              responseTime: new Date(Date.now() - 3 * 60 * 1e3).toISOString(),
              // 2 minutes after post
              urgencyProtocol: "Level 1 - Imminent Danger",
              initialResponse: "I can see you're in tremendous pain right now, and I'm so glad you reached out here. Your life has value and meaning, even when it doesn't feel that way. I'm a crisis specialist and I'm here with you right now. Please don't take those pills tonight. Can you help me understand what's making tonight feel different?",
              immediateActions: [
                "Private crisis chat initiated",
                "Emergency protocols activated",
                "Safety plan deployment",
                "Crisis lifeline numbers provided",
                "Emergency contact authorization requested"
              ],
              safetyInterventions: [
                "Pills removal from immediate area",
                "Crisis hotline: 988 Suicide & Crisis Lifeline",
                "Text support: HOME to 741741",
                "Emergency services: 911 if immediate danger",
                "Trusted person notification"
              ],
              riskMitigation: "Active engagement, safety contracting, means restriction"
            },
            // Step 4: Admin Emergency Escalation (within 5 minutes)
            adminEscalation: {
              escalatedBy: "helper-crisis-specialist-001",
              reviewingAdmin: "admin-crisis-001",
              adminName: "Dr. Michael Torres - Crisis Director",
              escalationTime: new Date(Date.now() - 2 * 60 * 1e3).toISOString(),
              escalationReason: "Imminent danger with specific plan and means",
              emergencyProtocols: [
                "Emergency services notification prepared",
                "Crisis team assembly activated",
                "Legal emergency contact override authorized",
                "Platform crisis mode engaged",
                "Follow-up intervention scheduled"
              ],
              legalActions: "Emergency contact authorization under crisis intervention protocols",
              resourcesDeployed: [
                "Crisis specialist team (3 helpers assigned)",
                "Emergency counselor on standby",
                "Legal emergency contact procedures",
                "Local crisis center notification",
                "24-hour monitoring activated"
              ]
            },
            // Step 5: Resolution Tracking
            resolutionTracking: {
              currentStatus: "crisis_stabilized_monitoring",
              timeToStabilization: "47 minutes",
              interventionSuccess: true,
              emergencyServicesContacted: false,
              // User accepted help voluntarily
              safetyPlanImplemented: true,
              ongoingSupport: "Intensive 72-hour monitoring with daily check-ins",
              outcome: "User agreed to remove pills, contacted trusted friend, emergency contact notified, professional referral accepted",
              followUpScheduled: [
                "2-hour safety check-in",
                "24-hour crisis counselor session",
                "72-hour platform welfare check",
                "Weekly therapy referral appointment"
              ]
            }
          },
          // SCENARIO 2: Domestic Violence Crisis with Escalation
          domesticViolence: {
            userPost: {
              id: "crisis-dv-002",
              userToken: "user-dv-crisis",
              username: "scared_but_trying",
              category: "crisis-support",
              content: "He found my phone and saw I was getting help here. He's escalating and I'm scared for tonight. He took my car keys and I can't leave. My kids are asleep upstairs. I don't know what to do. If something happens to me, please know this community gave me hope when I had none.",
              timestamp: new Date(Date.now() - 15 * 60 * 1e3).toISOString(),
              supportCount: 2,
              isSupported: false,
              isReported: true,
              status: "safety_crisis_detected",
              aiFlags: ["domestic_violence", "immediate_danger", "children_involved", "isolation_tactics"],
              riskLevel: "high",
              urgencyScore: 9
            },
            aiDetection: {
              detectionTime: new Date(Date.now() - 14 * 60 * 1e3).toISOString(),
              algorithm: "Domestic Violence Crisis Detection v2.1",
              confidenceScore: 0.94,
              riskFactors: [
                "Escalating abuser behavior",
                "Physical isolation (keys taken)",
                "Children present in dangerous situation",
                "Fear for immediate safety",
                "Potential goodbye message"
              ],
              automatedActions: [
                "Domestic violence specialist notified",
                "Safety planning resources deployed",
                "Local DV hotline information provided",
                "Emergency exit strategy resources",
                "Admin crisis team alerted"
              ]
            },
            helperResponse: {
              responderId: "helper-dv-specialist-001",
              responderName: "Maria Santos, LCSW",
              credentials: ["Licensed Clinical Social Worker", "Domestic Violence Specialist", "Child Safety Advocate"],
              responseTime: new Date(Date.now() - 13 * 60 * 1e3).toISOString(),
              urgencyProtocol: "Level 2 - Immediate Safety Risk",
              initialResponse: "I'm here with you and I believe you. This is not your fault. Your safety and your children's safety are the priority. Do you have a safe room you can go to right now? I'm going to share some immediate safety resources and we'll work through this together.",
              safetyActions: [
                "Immediate safety planning activated",
                "DV hotline: 1-800-799-7233 provided",
                "Local shelter information shared",
                "Safety bag checklist provided",
                "Emergency contact strategy discussed"
              ],
              emergencyResources: [
                "National DV Hotline with text option",
                "Local shelter with immediate availability",
                "Legal advocacy resources",
                "Child protective safety planning",
                "Emergency transportation assistance"
              ]
            },
            adminEscalation: {
              escalatedBy: "helper-dv-specialist-001",
              reviewingAdmin: "admin-safety-001",
              adminName: "Sarah Chen - Safety Operations Director",
              escalationTime: new Date(Date.now() - 10 * 60 * 1e3).toISOString(),
              escalationReason: "Children at risk, immediate physical danger",
              emergencyProtocols: [
                "Child protection services consultation",
                "Local law enforcement liaison",
                "Emergency shelter coordination",
                "Legal advocacy team notification",
                "Crisis intervention team deployment"
              ],
              legalConsiderations: "Mandatory reporting protocols for children at risk",
              resourcesDeployed: [
                "DV crisis team (2 specialists)",
                "Child safety advocate",
                "Emergency shelter coordination",
                "Legal advocacy referral",
                "Transportation assistance network"
              ]
            },
            resolutionTracking: {
              currentStatus: "emergency_safety_plan_implemented",
              timeToSafetyPlan: "25 minutes",
              interventionSuccess: true,
              emergencyServicesContacted: true,
              // Police wellness check requested
              safetyPlanImplemented: true,
              outcome: "User and children safely relocated to shelter, police welfare check completed, legal advocacy initiated",
              followUpScheduled: [
                "Daily safety check-ins for 1 week",
                "Legal advocacy appointment scheduled",
                "Counseling for children arranged",
                "Long-term safety planning session"
              ]
            }
          },
          // SCENARIO 3: Substance Abuse Crisis with Medical Emergency
          substanceAbuseCrisis: {
            userPost: {
              id: "crisis-substance-003",
              userToken: "user-substance-crisis",
              username: "trying_to_recover",
              category: "crisis-support",
              content: "I relapsed after 6 months clean and I took way too much. My heart is racing and I can't stop shaking. I'm scared I'm overdosing but I can't call anyone because I'll lose my job and my family will disown me. I don't want to die but I don't know what to do.",
              timestamp: new Date(Date.now() - 8 * 60 * 1e3).toISOString(),
              supportCount: 1,
              isSupported: false,
              isReported: false,
              status: "medical_crisis_detected",
              aiFlags: ["overdose_symptoms", "medical_emergency", "fear_of_consequences", "immediate_danger"],
              riskLevel: "critical",
              urgencyScore: 10
            },
            aiDetection: {
              detectionTime: new Date(Date.now() - 7.5 * 60 * 1e3).toISOString(),
              algorithm: "Medical Emergency Detection v1.8",
              confidenceScore: 0.96,
              riskFactors: [
                "Physical overdose symptoms described",
                "Fear preventing emergency contact",
                "Substance relapse with quantity concern",
                "Medical distress indicators",
                "Isolation due to stigma"
              ],
              automatedActions: [
                "Medical emergency specialist notified",
                "Overdose prevention resources provided",
                "Emergency medical guidance initiated",
                "Crisis medical team alerted",
                "Harm reduction resources deployed"
              ]
            },
            helperResponse: {
              responderId: "helper-medical-crisis-001",
              responderName: "Dr. James Rodriguez, MD",
              credentials: ["Emergency Medicine Physician", "Addiction Medicine Specialist", "Crisis Intervention Certified"],
              responseTime: new Date(Date.now() - 6.5 * 60 * 1e3).toISOString(),
              urgencyProtocol: "Level 1 - Medical Emergency",
              initialResponse: "This is a medical emergency and you need immediate help. Your life is more important than any job or relationship. Please call 911 or go to the nearest emergency room right now. I'm a doctor and I can tell you that what you're describing sounds like you need medical attention immediately. Your family and job can be dealt with later - right now we need to keep you alive.",
              medicalGuidance: [
                "Immediate 911 call strongly advised",
                "Stay awake and try to stay calm",
                "If you have someone nearby, ask them to stay with you",
                "Do not take any more substances",
                "Try to remember what and how much you took"
              ],
              emergencyActions: [
                "Medical emergency protocol activated",
                "Emergency services coordination offered",
                "Poison control center information provided",
                "Emergency room escort service offered",
                "Family notification support offered"
              ]
            },
            adminEscalation: {
              escalatedBy: "helper-medical-crisis-001",
              reviewingAdmin: "admin-medical-001",
              adminName: "Dr. Lisa Park - Medical Crisis Director",
              escalationTime: new Date(Date.now() - 5 * 60 * 1e3).toISOString(),
              escalationReason: "Life-threatening medical emergency, overdose symptoms",
              emergencyProtocols: [
                "Emergency medical services coordination",
                "Hospital emergency department notification",
                "Crisis medical team deployment",
                "Family notification protocols",
                "Employment protection advocacy"
              ],
              medicalProtocols: "Emergency overdose intervention, medical stabilization, addiction crisis support",
              resourcesDeployed: [
                "Emergency medical specialist team",
                "Hospital emergency coordination",
                "Addiction counselor on standby",
                "Employment rights advocate",
                "Family support services"
              ]
            },
            resolutionTracking: {
              currentStatus: "medical_emergency_resolved",
              timeToEmergencyServices: "12 minutes",
              interventionSuccess: true,
              emergencyServicesContacted: true,
              // User called 911 with helper support
              medicalTreatmentReceived: true,
              outcome: "User transported to emergency room, medically stabilized, addiction treatment referral completed, employment protection advocacy initiated",
              followUpScheduled: [
                "Daily recovery check-ins for 2 weeks",
                "Addiction counselor appointment scheduled",
                "Employment rights consultation",
                "Family support session arranged",
                "Relapse prevention planning"
              ]
            }
          }
        };
      }
      // ===== COMMUNITY CONTENT METHODS =====
      getWellnessChallenges() {
        return [
          {
            id: "challenge-mindfulness-001",
            title: "30-Day Mindful Moments",
            description: "Discover the power of mindfulness with daily 5-minute practices. Each day brings a new technique to help ground yourself and find inner peace.",
            category: "mindfulness",
            duration: 30,
            startDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1e3).toISOString(),
            endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1e3).toISOString(),
            createdBy: "helper-wellness-001",
            createdByName: "Luna Martinez, Mindfulness Coach",
            participants: [
              {
                userId: "user-mindful-001",
                username: "PeacefulJourney23",
                joinedDate: new Date(Date.now() - 12 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 12,
                totalDaysCompleted: 12,
                isActive: true
              },
              {
                userId: "user-mindful-002",
                username: "SerenitySeeker",
                joinedDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 8,
                totalDaysCompleted: 10,
                isActive: true
              },
              {
                userId: "user-mindful-003",
                username: "CalmWaters88",
                joinedDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 6,
                totalDaysCompleted: 8,
                isActive: true
              }
            ],
            dailyPrompts: [
              {
                day: 1,
                title: "Breath Awareness",
                description: "Spend 5 minutes focusing solely on your natural breath. Notice the sensation of air entering and leaving your body.",
                type: "mindfulness",
                estimatedTime: "5 minutes"
              },
              {
                day: 2,
                title: "Body Scan Meditation",
                description: "Slowly scan your body from head to toe, noticing any sensations without judgment.",
                type: "mindfulness",
                estimatedTime: "7 minutes"
              },
              {
                day: 3,
                title: "Mindful Walking",
                description: "Take a slow, deliberate walk, focusing on each step and the feeling of your feet touching the ground.",
                type: "action",
                estimatedTime: "10 minutes"
              }
            ],
            status: "active",
            isPublic: true,
            tags: ["mindfulness", "meditation", "stress-relief", "beginner-friendly"]
          },
          {
            id: "challenge-gratitude-002",
            title: "Gratitude Garden - 21 Days",
            description: "Cultivate an attitude of gratitude by identifying and reflecting on three things you're grateful for each day. Watch your perspective bloom!",
            category: "gratitude",
            duration: 21,
            startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
            endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1e3).toISOString(),
            createdBy: "helper-gratitude-001",
            createdByName: "Emma Chen, Positive Psychology Specialist",
            participants: [
              {
                userId: "user-grateful-001",
                username: "SunshineSpirit",
                joinedDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 6,
                totalDaysCompleted: 6,
                isActive: true
              },
              {
                userId: "user-grateful-002",
                username: "ThankfulHeart92",
                joinedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 5,
                totalDaysCompleted: 5,
                isActive: true
              }
            ],
            dailyPrompts: [
              {
                day: 1,
                title: "Simple Joys",
                description: "Identify three simple things that brought you joy today. They can be as small as a warm cup of coffee or a smile from a stranger.",
                type: "gratitude",
                estimatedTime: "5 minutes"
              },
              {
                day: 2,
                title: "People in Your Life",
                description: "Think of three people you're grateful for and why. Consider sending one of them a message of appreciation.",
                type: "reflection",
                estimatedTime: "8 minutes"
              },
              {
                day: 3,
                title: "Personal Strengths",
                description: "Reflect on three personal qualities or strengths you're grateful to possess. How have they helped you recently?",
                type: "reflection",
                estimatedTime: "10 minutes"
              }
            ],
            status: "active",
            isPublic: true,
            tags: ["gratitude", "positivity", "reflection", "mood-boost"]
          },
          {
            id: "challenge-creativity-003",
            title: "Creative Expression Journey",
            description: "Explore different forms of creative expression to boost mood and self-discovery. No artistic experience required - just an open heart!",
            category: "creativity",
            duration: 14,
            startDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1e3).toISOString(),
            endDate: new Date(Date.now() + 16 * 24 * 60 * 60 * 1e3).toISOString(),
            createdBy: "helper-creative-001",
            createdByName: "Alex Rivera, Art Therapist",
            participants: [
              {
                userId: "user-creative-001",
                username: "ColorfulSoul",
                joinedDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
                currentStreak: 0,
                totalDaysCompleted: 0,
                isActive: true
              }
            ],
            dailyPrompts: [
              {
                day: 1,
                title: "Emotion Doodling",
                description: `Draw or doodle how you're feeling right now. Don't worry about it looking "good" - just let your emotions flow onto paper.`,
                type: "creative",
                estimatedTime: "15 minutes"
              },
              {
                day: 2,
                title: "Poetry of the Moment",
                description: "Write a short poem (even just 4 lines) about something you noticed today. Focus on imagery and feeling rather than perfect rhymes.",
                type: "creative",
                estimatedTime: "10 minutes"
              }
            ],
            status: "upcoming",
            isPublic: true,
            tags: ["creativity", "art-therapy", "self-expression", "mood-boost"]
          }
        ];
      }
      getGroupDiscussions() {
        return [
          {
            id: "discussion-anxiety-001",
            title: "Managing Anxiety in Daily Life",
            description: "A supportive space to share practical strategies for managing anxiety, from breathing techniques to lifestyle adjustments. All levels of experience welcome.",
            category: "support",
            hostId: "helper-anxiety-001",
            hostName: "Dr. Jennifer Walsh",
            hostType: "helper",
            participants: [
              {
                userId: "user-anxiety-001",
                username: "BreatheEasy23",
                userType: "starkeeper",
                joinedDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString()
              },
              {
                userId: "user-anxiety-002",
                username: "CalmMind88",
                userType: "starkeeper",
                joinedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 30 * 60 * 1e3).toISOString()
              },
              {
                userId: "helper-peer-001",
                username: "PeerSupporter_Maria",
                userType: "helper",
                joinedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 10 * 60 * 1e3).toISOString()
              }
            ],
            messages: [
              {
                id: "msg-anxiety-001",
                senderId: "helper-anxiety-001",
                senderName: "Dr. Jennifer Walsh",
                senderType: "helper",
                content: "Welcome everyone! Let's start by sharing one small victory you've had this week in managing your anxiety. Remember, no victory is too small to celebrate.",
                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "heart", count: 5, users: ["user-anxiety-001", "user-anxiety-002", "helper-peer-001"] }
                ],
                isSupported: true,
                supportCount: 5
              },
              {
                id: "msg-anxiety-002",
                senderId: "user-anxiety-001",
                senderName: "BreatheEasy23",
                senderType: "starkeeper",
                content: "I actually used the 4-7-8 breathing technique before a meeting this week and it really helped! I felt so much more centered going in.",
                timestamp: new Date(Date.now() - 90 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "light", count: 3, users: ["helper-anxiety-001", "user-anxiety-002", "helper-peer-001"] },
                  { type: "strength", count: 2, users: ["helper-anxiety-001", "helper-peer-001"] }
                ],
                isSupported: true,
                supportCount: 8
              },
              {
                id: "msg-anxiety-003",
                senderId: "helper-peer-001",
                senderName: "PeerSupporter_Maria",
                senderType: "helper",
                content: "That's wonderful, @BreatheEasy23! The 4-7-8 technique is so powerful. I love how you prepared yourself before the meeting - that's such good self-care.",
                timestamp: new Date(Date.now() - 85 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "heart", count: 4, users: ["user-anxiety-001", "user-anxiety-002", "helper-anxiety-001"] }
                ],
                isSupported: true,
                supportCount: 6
              },
              {
                id: "msg-anxiety-004",
                senderId: "user-anxiety-002",
                senderName: "CalmMind88",
                senderType: "starkeeper",
                content: "I've been struggling with morning anxiety lately. Does anyone have tips for starting the day feeling more grounded?",
                timestamp: new Date(Date.now() - 45 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "hug", count: 6, users: ["helper-anxiety-001", "user-anxiety-001", "helper-peer-001"] }
                ],
                isSupported: true,
                supportCount: 6
              }
            ],
            scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1e3).toISOString(),
            duration: 60,
            isRecurring: true,
            recurrencePattern: "weekly",
            status: "active",
            isPrivate: false,
            maxParticipants: 12,
            tags: ["anxiety", "coping-strategies", "peer-support", "weekly"]
          },
          {
            id: "discussion-recovery-002",
            title: "Recovery Stories: Sharing Hope",
            description: "A space for those in recovery to share their journey, milestones, and insights. Whether you're just starting or years into recovery, your story matters.",
            category: "recovery",
            hostId: "helper-recovery-001",
            hostName: "Michael Chen, Recovery Counselor",
            hostType: "helper",
            participants: [
              {
                userId: "user-recovery-001",
                username: "PhoenixRising",
                userType: "starkeeper",
                joinedDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString()
              },
              {
                userId: "user-recovery-002",
                username: "OneDay_AtATime",
                userType: "starkeeper",
                joinedDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 1 * 60 * 60 * 1e3).toISOString()
              }
            ],
            messages: [
              {
                id: "msg-recovery-001",
                senderId: "user-recovery-001",
                senderName: "PhoenixRising",
                senderType: "starkeeper",
                content: "Today marks 6 months clean for me. Some days are still hard, but I'm learning to celebrate these milestones. Each day I choose recovery is a victory.",
                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "strength", count: 8, users: ["helper-recovery-001", "user-recovery-002"] },
                  { type: "star", count: 5, users: ["helper-recovery-001", "user-recovery-002"] }
                ],
                isSupported: true,
                supportCount: 15
              },
              {
                id: "msg-recovery-002",
                senderId: "helper-recovery-001",
                senderName: "Michael Chen",
                senderType: "helper",
                content: "6 months is incredible, @PhoenixRising! Your commitment to your recovery is inspiring. How are you celebrating this milestone?",
                timestamp: new Date(Date.now() - 2.5 * 60 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "heart", count: 3, users: ["user-recovery-001", "user-recovery-002"] }
                ],
                isSupported: true,
                supportCount: 4
              }
            ],
            scheduledDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1e3).toISOString(),
            duration: 90,
            isRecurring: true,
            recurrencePattern: "weekly",
            status: "scheduled",
            isPrivate: true,
            maxParticipants: 8,
            tags: ["recovery", "addiction", "peer-support", "hope", "milestones"]
          },
          {
            id: "discussion-social-003",
            title: "Building Healthy Relationships",
            description: "Explore strategies for building and maintaining healthy relationships, setting boundaries, and improving communication skills in a supportive environment.",
            category: "social",
            hostId: "helper-relationships-001",
            hostName: "Dr. Sarah Kim, Relationship Therapist",
            hostType: "helper",
            participants: [
              {
                userId: "user-social-001",
                username: "BoundaryBuilder",
                userType: "starkeeper",
                joinedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
                isActive: true,
                lastSeen: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString()
              }
            ],
            messages: [
              {
                id: "msg-social-001",
                senderId: "helper-relationships-001",
                senderName: "Dr. Sarah Kim",
                senderType: "helper",
                content: "This week, let's talk about the difference between being helpful and being enabling. How do we support others while maintaining healthy boundaries?",
                timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
                reactions: [
                  { type: "light", count: 2, users: ["user-social-001"] }
                ],
                isSupported: true,
                supportCount: 3
              }
            ],
            scheduledDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1e3).toISOString(),
            duration: 75,
            isRecurring: true,
            recurrencePattern: "biweekly",
            status: "scheduled",
            isPrivate: false,
            maxParticipants: 10,
            tags: ["relationships", "boundaries", "communication", "self-care"]
          }
        ];
      }
      getCommunityForumPosts() {
        return [
          {
            id: "forum-anxiety-tips-001",
            title: "Daily Anxiety Management - What's Working for You?",
            description: "Share your go-to strategies for managing anxiety day-to-day. Looking for practical tips I can use when things get overwhelming.",
            category: "anxiety-support",
            authorId: "user-forum-001",
            authorName: "SeekingCalm",
            authorType: "starkeeper",
            timestamp: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
            replyCount: 8,
            supportCount: 12,
            lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
            tags: ["anxiety", "coping-strategies", "daily-life"],
            isSticky: false,
            isLocked: false,
            responses: [
              {
                id: "reply-anxiety-001",
                authorId: "helper-anxiety-peer-001",
                authorName: "CalmingPresence",
                authorType: "helper",
                content: "The 5-4-3-2-1 grounding technique has been a game-changer for me: 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste. It brings me back to the present moment when my thoughts spiral.",
                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1e3).toISOString(),
                supportCount: 6,
                isSupported: true
              },
              {
                id: "reply-anxiety-002",
                authorId: "user-forum-002",
                authorName: "BreatheDeep22",
                authorType: "starkeeper",
                content: "I keep a 'worry time' - 15 minutes each day where I allow myself to worry about everything, then I close that mental door. It helps me not carry anxiety all day long.",
                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
                supportCount: 4,
                isSupported: true
              },
              {
                id: "reply-anxiety-003",
                authorId: "helper-professional-001",
                authorName: "Dr. Elena Rodriguez",
                authorType: "helper",
                content: "These are wonderful strategies! I'd also add that progressive muscle relaxation can be very effective. Start with your toes and work your way up, tensing and then relaxing each muscle group. It helps release physical tension that often accompanies anxiety.",
                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
                supportCount: 5,
                isSupported: true
              }
            ]
          },
          {
            id: "forum-recovery-celebrate-002",
            title: "Small Wins Worth Celebrating \u{1F31F}",
            description: "Recovery isn't just about the big milestones - it's made up of countless small victories. What small win are you celebrating today?",
            category: "recovery-support",
            authorId: "user-recovery-forum-001",
            authorName: "StepByStep",
            authorType: "starkeeper",
            timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
            replyCount: 15,
            supportCount: 23,
            lastActivity: new Date(Date.now() - 1 * 60 * 60 * 1e3).toISOString(),
            tags: ["recovery", "milestones", "celebration", "progress"],
            isSticky: true,
            isLocked: false,
            responses: [
              {
                id: "reply-recovery-001",
                authorId: "user-recovery-forum-002",
                authorName: "NewBeginnings",
                authorType: "starkeeper",
                content: "I went to a social event last night and didn't feel the urge to drink! Instead, I enjoyed meaningful conversations and woke up clear-headed this morning. Feels amazing.",
                timestamp: new Date(Date.now() - 10 * 60 * 60 * 1e3).toISOString(),
                supportCount: 8,
                isSupported: true
              },
              {
                id: "reply-recovery-002",
                authorId: "helper-recovery-peer-001",
                authorName: "SoberStrong",
                authorType: "helper",
                content: "That's incredible @NewBeginnings! Those first social events can be challenging. You should be so proud of yourself for staying true to your recovery and still having a good time.",
                timestamp: new Date(Date.now() - 9 * 60 * 60 * 1e3).toISOString(),
                supportCount: 6,
                isSupported: true
              },
              {
                id: "reply-recovery-003",
                authorId: "user-recovery-forum-003",
                authorName: "GratefulHeart",
                authorType: "starkeeper",
                content: "I called my sponsor when I was feeling triggered instead of isolating. It was hard to reach out, but I'm so glad I did. Connection is healing.",
                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
                supportCount: 9,
                isSupported: true
              }
            ]
          },
          {
            id: "forum-daily-checkin-003",
            title: "Daily Check-in: How are you feeling today?",
            description: "A safe space to share how you're doing today - the good, the challenging, and everything in between. No judgment, just support.",
            category: "daily-support",
            authorId: "moderator-checkin-001",
            authorName: "Community Guide Alex",
            authorType: "moderator",
            timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
            replyCount: 22,
            supportCount: 31,
            lastActivity: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
            tags: ["daily-checkin", "emotional-support", "community"],
            isSticky: true,
            isLocked: false,
            responses: [
              {
                id: "reply-checkin-001",
                authorId: "user-checkin-001",
                authorName: "MorningLight",
                authorType: "starkeeper",
                content: "Feeling cautiously optimistic today. Had a rough patch last week, but I'm taking things one moment at a time and focusing on self-compassion.",
                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
                supportCount: 7,
                isSupported: true
              },
              {
                id: "reply-checkin-002",
                authorId: "user-checkin-002",
                authorName: "QuietStrength",
                authorType: "starkeeper",
                content: "Struggling with some old thought patterns today, but I'm grateful for this community. Just knowing others understand makes a difference.",
                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
                supportCount: 12,
                isSupported: true
              },
              {
                id: "reply-checkin-003",
                authorId: "helper-support-001",
                authorName: "CompassionateHelper",
                authorType: "helper",
                content: "@QuietStrength - sending you strength today. Those old patterns are tough, but recognizing them is such an important step. You're not alone in this. \u{1F499}",
                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1e3).toISOString(),
                supportCount: 8,
                isSupported: true
              }
            ]
          },
          {
            id: "forum-relationships-boundaries-004",
            title: "Learning to Say No: Boundary Setting Tips",
            description: "I'm working on setting healthier boundaries but struggle with guilt when I say no. How do you balance being helpful with taking care of yourself?",
            category: "relationships",
            authorId: "user-boundaries-001",
            authorName: "LearningToChoose",
            authorType: "starkeeper",
            timestamp: new Date(Date.now() - 18 * 60 * 60 * 1e3).toISOString(),
            replyCount: 11,
            supportCount: 18,
            lastActivity: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
            tags: ["boundaries", "relationships", "self-care", "guilt"],
            isSticky: false,
            isLocked: false,
            responses: [
              {
                id: "reply-boundaries-001",
                authorId: "helper-boundaries-001",
                authorName: "Dr. Michelle Park",
                authorType: "helper",
                content: "Boundary guilt is so common! Remember that saying no to one thing means saying yes to something else - often your own well-being. You can't pour from an empty cup.",
                timestamp: new Date(Date.now() - 16 * 60 * 60 * 1e3).toISOString(),
                supportCount: 9,
                isSupported: true
              },
              {
                id: "reply-boundaries-002",
                authorId: "user-boundaries-002",
                authorName: "BoundaryBuilder88",
                authorType: "starkeeper",
                content: "I started with small nos first - like declining optional social events when I was exhausted. It helped me practice the skill before bigger situations came up.",
                timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
                supportCount: 6,
                isSupported: true
              }
            ]
          },
          {
            id: "forum-wellness-habits-005",
            title: "Building Sustainable Wellness Habits",
            description: "What small, daily habits have made the biggest difference in your mental health? Looking for realistic practices I can actually stick with.",
            category: "wellness",
            authorId: "user-wellness-001",
            authorName: "SmallSteps",
            authorType: "starkeeper",
            timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString(),
            replyCount: 19,
            supportCount: 26,
            lastActivity: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
            tags: ["wellness", "habits", "self-care", "routine"],
            isSticky: false,
            isLocked: false,
            responses: [
              {
                id: "reply-wellness-001",
                authorId: "user-wellness-002",
                authorName: "MindfulMornings",
                authorType: "starkeeper",
                content: "I started with just 2 minutes of deep breathing every morning before I even get out of bed. It's grown into a fuller meditation practice, but starting tiny was key.",
                timestamp: new Date(Date.now() - 20 * 60 * 60 * 1e3).toISOString(),
                supportCount: 8,
                isSupported: true
              },
              {
                id: "reply-wellness-002",
                authorId: "helper-wellness-001",
                authorName: "WellnessGuide_Sam",
                authorType: "helper",
                content: "The 'two-minute rule' is powerful! Any habit can be started in 2 minutes or less. Read one page, write one sentence in a journal, do one sun salutation. Small consistency beats large inconsistency every time.",
                timestamp: new Date(Date.now() - 15 * 60 * 60 * 1e3).toISOString(),
                supportCount: 11,
                isSupported: true
              }
            ]
          }
        ];
      }
      getCommunityEvents() {
        return [
          {
            id: "event-mindfulness-workshop-001",
            title: "Introduction to Mindfulness for Beginners",
            description: "A gentle introduction to mindfulness practices designed specifically for those dealing with anxiety and stress. No experience necessary - just bring an open mind and comfortable clothes.",
            type: "workshop",
            hostId: "helper-mindfulness-001",
            hostName: "Luna Martinez, Certified Mindfulness Instructor",
            startTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1e3).toISOString(),
            endTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1e3 + 90 * 60 * 1e3).toISOString(),
            timezone: "PST",
            maxParticipants: 15,
            currentParticipants: [
              {
                userId: "user-mindful-event-001",
                username: "SeekingPeace",
                registeredDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
                attended: false
              },
              {
                userId: "user-mindful-event-002",
                username: "CalmSeeker99",
                registeredDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
                attended: false
              },
              {
                userId: "user-mindful-event-003",
                username: "AnxiousNoMore",
                registeredDate: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
                attended: false
              }
            ],
            isVirtual: true,
            meetingLink: "https://astralcore.meeting/mindfulness-intro",
            resources: [
              {
                id: "resource-mindful-001",
                title: "Beginner's Guide to Breathing Exercises",
                type: "document",
                url: "/resources/breathing-guide.pdf",
                description: "Simple breathing techniques you can use anywhere"
              },
              {
                id: "resource-mindful-002",
                title: "Guided Body Scan Meditation",
                type: "audio",
                url: "/resources/body-scan-meditation.mp3",
                description: "15-minute guided meditation for relaxation"
              }
            ],
            status: "upcoming",
            tags: ["mindfulness", "anxiety-relief", "beginner-friendly", "stress-management"]
          },
          {
            id: "event-support-group-001",
            title: "Young Adults Support Circle",
            description: "A weekly support group for young adults (18-30) navigating life transitions, career stress, and relationship challenges. Safe, confidential, and peer-led.",
            type: "support-group",
            hostId: "helper-young-adult-001",
            hostName: "Alex Chen, Peer Support Specialist",
            startTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1e3).toISOString(),
            endTime: new Date(Date.now() + 5 * 24 * 60 * 60 * 1e3 + 75 * 60 * 1e3).toISOString(),
            timezone: "EST",
            maxParticipants: 8,
            currentParticipants: [
              {
                userId: "user-young-001",
                username: "TransitionTime",
                registeredDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(),
                attended: true,
                feedback: "Really appreciate the safe space to share. Feeling less alone.",
                rating: 5
              },
              {
                userId: "user-young-002",
                username: "CareerAnxiety",
                registeredDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
                attended: true,
                feedback: "Great group dynamic. Looking forward to next week.",
                rating: 4
              }
            ],
            isVirtual: true,
            meetingLink: "https://astralcore.meeting/young-adults-support",
            resources: [
              {
                id: "resource-support-001",
                title: "Young Adult Life Transition Guide",
                type: "document",
                url: "/resources/life-transition-guide.pdf"
              }
            ],
            status: "upcoming",
            tags: ["young-adults", "peer-support", "life-transitions", "weekly"]
          },
          {
            id: "event-wellness-session-001",
            title: "Art Therapy: Creative Expression for Healing",
            description: "Explore emotions through creative expression in this gentle art therapy session. All skill levels welcome - this is about healing, not creating perfect art.",
            type: "wellness",
            hostId: "helper-art-therapy-001",
            hostName: "Dr. Maria Rodriguez, Licensed Art Therapist",
            startTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3).toISOString(),
            endTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1e3 + 2 * 60 * 60 * 1e3).toISOString(),
            timezone: "CST",
            maxParticipants: 12,
            currentParticipants: [
              {
                userId: "user-art-001",
                username: "CreativeHealing",
                registeredDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
                attended: false
              }
            ],
            isVirtual: false,
            resources: [
              {
                id: "resource-art-001",
                title: "Art Therapy Supply List",
                type: "document",
                url: "/resources/art-supplies.pdf",
                description: "Basic supplies needed for the session"
              },
              {
                id: "resource-art-002",
                title: "Art for Emotional Expression Guide",
                type: "worksheet",
                url: "/resources/art-expression-worksheet.pdf"
              }
            ],
            status: "upcoming",
            tags: ["art-therapy", "creative-expression", "healing", "emotions"]
          }
        ];
      }
      getPeerConnections() {
        return [
          {
            id: "connection-accountability-001",
            starkeeperId: "user-account-001",
            peerId: "user-account-peer-001",
            peerName: "MindfulMate",
            connectionType: "accountability-buddy",
            connectedDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1e3).toISOString(),
            lastInteraction: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
            sharedGoals: [
              "Daily 10-minute meditation",
              "Journaling before bed",
              "Weekly anxiety check-ins"
            ],
            status: "active",
            interactionCount: 28,
            isMatched: true
          },
          {
            id: "connection-mentor-001",
            starkeeperId: "user-mentee-001",
            peerId: "helper-mentor-001",
            peerName: "RecoveryGuide_Sarah",
            connectionType: "mentor",
            connectedDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1e3).toISOString(),
            lastInteraction: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
            sharedGoals: [
              "90-day sobriety milestone",
              "Building healthy coping strategies",
              "Rebuilding family relationships"
            ],
            status: "active",
            interactionCount: 45,
            isMatched: true
          },
          {
            id: "connection-study-001",
            starkeeperId: "user-student-001",
            peerId: "user-student-peer-001",
            peerName: "StudyBuddy_Alex",
            connectionType: "study-partner",
            connectedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
            lastInteraction: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
            sharedGoals: [
              "DBT skills practice",
              "Anxiety management techniques",
              "Academic stress reduction"
            ],
            status: "active",
            interactionCount: 12,
            isMatched: true
          }
        ];
      }
      getCommunityUsers() {
        return [
          {
            id: "user-community-001",
            username: "HopefulJourney",
            userType: "starkeeper",
            joinedDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1e3).toISOString(),
            lastActive: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
            contributionScore: 245,
            badges: [
              {
                id: "badge-helper-001",
                name: "Supportive Voice",
                description: "Provided meaningful support to 10+ community members",
                icon: "\u{1F499}",
                earnedDate: new Date(Date.now() - 20 * 24 * 60 * 60 * 1e3).toISOString(),
                category: "helping"
              },
              {
                id: "badge-participation-001",
                name: "Active Participant",
                description: "Engaged in community for 30+ consecutive days",
                icon: "\u2B50",
                earnedDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1e3).toISOString(),
                category: "participation"
              }
            ],
            isOnline: true
          },
          {
            id: "helper-community-001",
            username: "CompassionateGuide",
            userType: "helper",
            joinedDate: new Date(Date.now() - 120 * 24 * 60 * 60 * 1e3).toISOString(),
            lastActive: new Date(Date.now() - 30 * 60 * 1e3).toISOString(),
            contributionScore: 890,
            badges: [
              {
                id: "badge-leader-001",
                name: "Community Leader",
                description: "Outstanding leadership and guidance in the community",
                icon: "\u{1F31F}",
                earnedDate: new Date(Date.now() - 45 * 24 * 60 * 60 * 1e3).toISOString(),
                category: "leadership"
              },
              {
                id: "badge-mentor-001",
                name: "Dedicated Mentor",
                description: "Mentored 25+ community members",
                icon: "\u{1F91D}",
                earnedDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1e3).toISOString(),
                category: "helping"
              }
            ],
            isOnline: true
          },
          {
            id: "user-community-002",
            username: "GrowingStronger",
            userType: "starkeeper",
            joinedDate: new Date(Date.now() - 21 * 24 * 60 * 60 * 1e3).toISOString(),
            lastActive: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
            contributionScore: 156,
            badges: [
              {
                id: "badge-milestone-001",
                name: "First Steps",
                description: "Completed first week in the community",
                icon: "\u{1F463}",
                earnedDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1e3).toISOString(),
                category: "milestone"
              }
            ],
            isOnline: false
          }
        ];
      }
    };
    demoDataService = DemoDataService.getInstance();
  }
});

// src/utils/ApiClient.ts
var netlifyFunctionsAvailable, checkNetlifyFunctions, isInDemoMode, getDemoUserType, getDemoDataOrCallApi, _callApi, ApiClient;
var init_ApiClient = __esm({
  "src/utils/ApiClient.ts"() {
    "use strict";
    init_demoDataService();
    netlifyFunctionsAvailable = null;
    checkNetlifyFunctions = async () => {
      if (netlifyFunctionsAvailable !== null) {
        return netlifyFunctionsAvailable;
      }
      if (true) {
        netlifyFunctionsAvailable = true;
        return true;
      }
      const currentPort = window.location.port;
      const isNetlifyDev = currentPort === "8888";
      if (isNetlifyDev) {
        netlifyFunctionsAvailable = true;
        console.info("\u2713 Running through Netlify Dev - API functions available");
      } else {
        netlifyFunctionsAvailable = false;
        console.info("\u2713 Running in demo mode on port", currentPort || "80");
      }
      return netlifyFunctionsAvailable;
    };
    isInDemoMode = () => {
      if (false) {
        return true;
      }
      return localStorage.getItem("demo_token") !== null || process.env.VITE_USE_DEMO_DATA === "true";
    };
    getDemoUserType = () => {
      const demoUser = localStorage.getItem("demo_user");
      if (!demoUser) return null;
      const user = JSON.parse(demoUser);
      if (user.userType === "seeker") return "user";
      if (user.userType === "helper") return "helper";
      if (user.userType === "admin") return "admin";
      return null;
    };
    getDemoDataOrCallApi = async (demoDataKey, apiCall2) => {
      if (isInDemoMode()) {
        const userType = getDemoUserType();
        if (userType) {
          const demoData = demoDataService.getDemoData(userType);
          if (demoData[demoDataKey]) {
            return demoData[demoDataKey];
          }
        }
      }
      return apiCall2();
    };
    _callApi = async (endpoint, options2 = {}) => {
      await checkNetlifyFunctions();
      const isDevelopment2 = window.location.hostname === "localhost";
      if (isDevelopment2 && netlifyFunctionsAvailable === false) {
        const devError = new Error("Demo mode - API skipped");
        devError.isDevelopmentError = true;
        throw devError;
      }
      const token = sessionStorage.getItem("accessToken");
      const baseUrl = process.env.VITE_API_URL || "/.netlify/functions";
      const response = await fetch(`${baseUrl}${endpoint}`, {
        ...options2,
        headers: {
          "Content-Type": "application/json",
          ...token && { "Authorization": `Bearer ${token}` },
          ...options2.headers
        }
      });
      if (response.status === 401) {
        window.dispatchEvent(new CustomEvent("auth-error"));
        throw new Error("Unauthorized");
      }
      if (!response.ok) {
        const contentType2 = response.headers.get("content-type");
        let errorData;
        if (contentType2 && contentType2.includes("text/html")) {
          if (false) {
            errorData = {
              message: "API endpoint not available in development mode. Using demo data fallback.",
              isDevelopmentError: true
            };
          } else {
            errorData = { message: "Server returned an unexpected response format." };
          }
        } else {
          errorData = await response.json().catch(() => ({ message: "An unknown API error occurred." }));
        }
        console.error(`API call to ${endpoint} failed with status ${response.status}.`, errorData);
        throw new Error(errorData.message || `Request failed with status ${response.status}`);
      }
      if (response.status === 204) {
        return;
      }
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("text/html")) {
        if (false) {
          throw new Error("API endpoint not available in development mode. Using demo data fallback.");
        }
        throw new Error("Server returned an unexpected response format.");
      }
      return response.json();
    };
    checkNetlifyFunctions();
    ApiClient = {
      // Initialize the API client (checks for Netlify Functions availability)
      initialize: async () => {
        await checkNetlifyFunctions();
      },
      resources: {
        getResources: () => {
          return _callApi("/wellness/resources");
        }
      },
      assessments: {
        submitPhq9Result: (userToken, score, answers) => {
          return _callApi("/wellness/assessments", { method: "POST", body: JSON.stringify({ userToken, score, answers, type: "phq-9" }) });
        },
        submitGad7Result: (userToken, score, answers) => {
          return _callApi("/wellness/assessments", { method: "POST", body: JSON.stringify({ userToken, score, answers, type: "gad-7" }) });
        },
        getHistory: (userToken) => {
          return _callApi(`/wellness/assessments/history/${userToken}`);
        }
      },
      habits: {
        getPredefinedHabits: () => {
          return _callApi("/wellness/habits/predefined");
        },
        getTrackedHabitIds: (userId) => {
          return _callApi(`/wellness/habits/tracked/${userId}`);
        },
        getCompletions: (userId) => {
          return _callApi(`/wellness/habits/completions/${userId}`);
        },
        trackHabit: (userId, habitId) => {
          return _callApi("/wellness/habits/track", { method: "POST", body: JSON.stringify({ userId, habitId }) });
        },
        untrackHabit: (userId, habitId) => {
          return _callApi("/wellness/habits/untrack", { method: "POST", body: JSON.stringify({ userId, habitId }) });
        },
        logCompletion: (userId, habitId, date5) => {
          return _callApi("/wellness/habits/log", { method: "POST", body: JSON.stringify({ userId, habitId, date: date5 }) });
        }
      },
      mood: {
        postCheckIn: (checkInData, userToken) => {
          return _callApi("/wellness/mood/checkin", { method: "POST", body: JSON.stringify({ ...checkInData, userToken }) });
        },
        getHistory: (userToken) => {
          return _callApi(`/wellness/mood/history/${userToken}`);
        }
      },
      journal: {
        getEntries: (userToken) => {
          return getDemoDataOrCallApi("journalEntries", () => _callApi(`/wellness/journal/${userToken}`));
        },
        getHistory: (userToken) => {
          return getDemoDataOrCallApi("journalEntries", () => _callApi(`/wellness/journal/history/${userToken}`));
        },
        postEntry: (content3, userToken) => {
          return _callApi("/wellness/journal/entry", { method: "POST", body: JSON.stringify({ content: content3, userToken }) });
        }
      },
      videos: {
        getVideos: () => {
          return _callApi("/wellness/videos");
        },
        likeVideo: (videoId) => {
          return _callApi(`/wellness/videos/like/${videoId}`, { method: "POST" });
        },
        uploadVideo: async (file2, description, userToken) => {
          return _callApi("/wellness/videos/upload", { method: "POST", body: JSON.stringify({ description, userToken, fileName: file2.name }) });
        }
      },
      safetyPlan: {
        get: (userToken) => {
          return _callApi(`/users/safety-plan/${userToken}`);
        },
        save: (plan, userToken) => {
          return _callApi("/users/safety-plan", { method: "POST", body: JSON.stringify({ plan, userToken }) });
        }
      },
      legal: {
        checkConsent: (userId, documentType) => {
          return _callApi(`/users/consent/${userId}/${documentType}`);
        },
        recordConsent: (userId, userType, documentType, documentVersion) => {
          return _callApi("/users/consent", { method: "POST", body: JSON.stringify({ userId, userType, documentType, documentVersion }) });
        }
      },
      payment: {
        createDonationIntent: (amount) => {
          return new Promise((resolve) => {
            console.log(`Simulating creating a payment intent for $${(amount / 100).toFixed(2)}`);
            setTimeout(() => {
              resolve({ clientSecret: `pi_${crypto.randomUUID()}_secret_${crypto.randomUUID()}` });
            }, 500);
          });
        }
      },
      emergency: {
        trigger: (dilemmaId, location) => {
          return new Promise((resolve) => {
            console.log(`!!! EMERGENCY TRIGGERED for Dilemma ${dilemmaId} !!!`);
            if (location) {
              console.log(`  > Location: lat=${location.latitude}, lon=${location.longitude}`);
            }
            setTimeout(() => resolve(), 300);
          });
        }
      },
      helpSessions: {
        getForSeeker: (userId) => {
          return getDemoDataOrCallApi("helpSessions", () => _callApi(`/sessions/user/${userId}`));
        },
        getForUser: (userId) => {
          return getDemoDataOrCallApi("helpSessions", () => _callApi(`/sessions/user/${userId}`));
        },
        toggleFavorite: (sessionId, seekerId) => {
          return _callApi(`/sessions/${sessionId}/favorite`, { method: "POST", body: JSON.stringify({ seekerId }) });
        },
        sendKudos: (sessionId, seekerId) => {
          return _callApi(`/sessions/${sessionId}/kudos`, { method: "POST", body: JSON.stringify({ seekerId }) });
        }
      },
      preferences: {
        getPreferences: (userId) => {
          return _callApi(`/users/preferences/${userId}`);
        },
        updatePreferences: (userId, prefs) => {
          return _callApi(`/users/preferences/${userId}`, { method: "PUT", body: JSON.stringify(prefs) });
        }
      },
      dilemmas: {
        getDilemmas: async () => {
          try {
            return await _callApi("/dilemmas");
          } catch (error44) {
            if (error44.isDevelopmentError || error44.message?.includes("Demo mode")) {
              const userType = getDemoUserType() || "user";
              const demoData = demoDataService.getDemoData(userType);
              return demoData.allDilemmas || demoData.dilemmas || [];
            }
            throw error44;
          }
        },
        getForYouFeed: (userToken) => {
          return _callApi(`/dilemmas/for-you/${userToken}`);
        },
        postDilemma: (dilemmaData, userToken) => {
          return _callApi("/dilemmas", { method: "POST", body: JSON.stringify({ ...dilemmaData, userToken }) });
        },
        createDirectRequest: (dilemmaData, userToken, requestedHelperId) => {
          return _callApi("/dilemmas/direct-request", { method: "POST", body: JSON.stringify({ ...dilemmaData, userToken, requestedHelperId }) });
        },
        declineRequest: (dilemmaId, helperId) => {
          return _callApi(`/dilemmas/${dilemmaId}/decline`, { method: "POST", body: JSON.stringify({ helperId }) });
        },
        toggleSupport: (dilemmaId) => {
          return _callApi(`/dilemmas/${dilemmaId}/support`, { method: "POST" });
        },
        report: (dilemmaId, reason) => {
          return _callApi(`/dilemmas/${dilemmaId}/report`, { method: "POST", body: JSON.stringify({ reason }) });
        },
        acceptDilemma: (dilemmaId, helperId) => {
          return _callApi(`/dilemmas/${dilemmaId}/accept`, { method: "POST", body: JSON.stringify({ helperId }) });
        },
        resolveBySeeker: (dilemmaId, userToken) => {
          return _callApi(`/dilemmas/${dilemmaId}/resolve`, { method: "POST", body: JSON.stringify({ userToken }) });
        }
      },
      chat: {
        getMessages: (dilemmaId) => {
          return _callApi(`/chat/${dilemmaId}/messages`);
        },
        sendMessage: (dilemmaId, text5, sender, senderId) => {
          return _callApi(`/chat/${dilemmaId}/messages`, { method: "POST", body: JSON.stringify({ text: text5, sender, senderId }) });
        }
      },
      helpers: {
        getById: (helperId) => {
          return _callApi(`/helpers/${helperId}`);
        },
        getAllHelpers: () => {
          return _callApi("/helpers");
        },
        getProfile: (auth0UserId) => {
          if (isInDemoMode()) {
            const userType = getDemoUserType();
            if (userType === "helper" || userType === "admin") {
              const demoData = demoDataService.getDemoData(userType);
              return Promise.resolve(demoData.profile || null);
            }
          }
          return _callApi(`/helpers/profile/${auth0UserId}`);
        },
        getFavoriteHelpersDetails: (seekerId) => {
          return _callApi(`/helpers/favorites/${seekerId}`);
        },
        createProfile: (profileData) => {
          return _callApi("/helpers", { method: "POST", body: JSON.stringify(profileData) });
        },
        updateProfile: (helperId, updates) => {
          return _callApi(`/helpers/${helperId}`, { method: "PUT", body: JSON.stringify(updates) });
        },
        setAvailability: (helperId, isAvailable) => {
          return _callApi(`/helpers/${helperId}/availability`, { method: "PUT", body: JSON.stringify({ isAvailable }) });
        },
        getOnlineHelperCount: async () => {
          try {
            return await _callApi("/helpers/online-count", { headers: { "Authorization": "" } });
          } catch (error44) {
            if (error44.isDevelopmentError || error44.message?.includes("Demo mode")) {
              return 12;
            }
            throw error44;
          }
        },
        getHelperAchievements: (helperId) => {
          return _callApi(`/helpers/${helperId}/achievements`);
        },
        submitTrainingQuiz: (helperId, score) => {
          return _callApi(`/helpers/${helperId}/training`, { method: "POST", body: JSON.stringify({ score }) });
        },
        submitApplication: (helperId) => {
          return _callApi(`/helpers/${helperId}/application`, { method: "POST" });
        }
      },
      admin: {
        getApplications: () => {
          return _callApi("/admin/applications");
        },
        getApplicantDetails: (helperId) => {
          return _callApi(`/admin/applicants/${helperId}`);
        },
        updateApplicationStatus: (helperId, status, _actingHelper, notes) => {
          return _callApi(`/admin/applications/${helperId}`, { method: "PUT", body: JSON.stringify({ status, notes }) });
        },
        getCommunityStats: () => {
          return _callApi("/admin/stats");
        }
      },
      feedback: {
        submitFeedback: (dilemmaId, helperId, wasHelpful) => {
          return _callApi("/feedback", { method: "POST", body: JSON.stringify({ dilemmaId, helperId, wasHelpful }) });
        },
        getFeedbackForHelper: (helperId) => {
          return _callApi(`/feedback/${helperId}`);
        }
      },
      helperCommunity: {
        getThreads: () => {
          return _callApi("/community/threads");
        },
        getPosts: (threadId) => {
          return _callApi(`/community/posts/${threadId}`);
        },
        createPost: (postData) => {
          return _callApi("/community/posts", { method: "POST", body: JSON.stringify(postData) });
        },
        createThread: (threadData, firstPostContent) => {
          return _callApi("/community/threads", { method: "POST", body: JSON.stringify({ ...threadData, firstPostContent }) });
        },
        getProposals: () => {
          return _callApi("/community/proposals");
        },
        createProposal: (proposalData) => {
          return _callApi("/community/proposals", { method: "POST", body: JSON.stringify(proposalData) });
        },
        voteOnProposal: (proposalId, helperId, vote) => {
          return _callApi(`/community/proposals/${proposalId}/vote`, { method: "POST", body: JSON.stringify({ helperId, vote }) });
        }
      },
      reflections: {
        getReflections: () => {
          return _callApi("/reflections");
        },
        postReflection: (userToken, content3) => {
          return _callApi("/reflections", { method: "POST", body: JSON.stringify({ userToken, content: content3 }) });
        },
        addReaction: (reflectionId, reactionType, userToken) => {
          return _callApi(`/reflections/${reflectionId}/react`, { method: "POST", body: JSON.stringify({ reactionType, userToken }) });
        }
      },
      userBlocking: {
        getBlockedUsers: (blockerId) => {
          return _callApi(`/users/blocked/${blockerId}`);
        },
        blockUser: (blockerId, blockedId) => {
          return _callApi("/users/block", { method: "POST", body: JSON.stringify({ blockerId, blockedId }) });
        },
        unblockUser: (blockerId, blockedId) => {
          return _callApi("/users/unblock", { method: "POST", body: JSON.stringify({ blockerId, blockedId }) });
        }
      },
      moderation: {
        getHistory: (userId) => {
          return _callApi(`/moderation/history/${userId}`);
        },
        dismissReport: (dilemmaId, _actingHelper) => {
          return _callApi(`/moderation/reports/${dilemmaId}/dismiss`, { method: "POST" });
        },
        removePost: (dilemmaId, _actingHelper) => {
          return _callApi(`/moderation/posts/${dilemmaId}`, { method: "DELETE" });
        },
        getUserStatus: (userId) => {
          return _callApi(`/moderation/users/${userId}/status`);
        },
        issueWarning: (userId) => {
          return _callApi(`/moderation/users/${userId}/warn`, { method: "POST" });
        },
        banUser: (userId, reason, durationHours) => {
          return _callApi(`/moderation/users/${userId}/ban`, { method: "POST", body: JSON.stringify({ reason, durationHours }) });
        }
      },
      ai: {
        chat: async (messages, systemInstruction) => {
          const response = await _callApi("/ai", {
            method: "POST",
            body: JSON.stringify({ messages, systemInstruction })
          });
          if (!response || !response.text) {
            throw new Error("Received an invalid response from the AI service.");
          }
          return response.text;
        },
        sendMessageToAI: async (messages, systemInstruction) => {
          return ApiClient.ai.chat(messages, systemInstruction);
        },
        resetAIChat: () => {
          _callApi("/ai/reset", { method: "POST" });
        },
        saveChatHistory: async (messages) => {
          _callApi("/ai/history", { method: "POST", body: JSON.stringify({ messages }) });
        },
        loadChatHistory: async () => {
          try {
            return await _callApi("/ai/history");
          } catch (error44) {
            if (error44.isDevelopmentError || error44.message?.includes("Demo mode")) {
              return [];
            }
            throw error44;
          }
        },
        draftPostFromChat: async (messages) => {
          return _callApi("/ai/draft-post", { method: "POST", body: JSON.stringify({ messages }) });
        },
        getHelperGuidance: async (text5) => {
          return _callApi("/ai/guidance", { method: "POST", body: JSON.stringify({ text: text5 }) });
        },
        summarizeDilemma: async (content3) => {
          const res = await _callApi("/ai/summarize-dilemma", { method: "POST", body: JSON.stringify({ content: content3 }) });
          return res.summary;
        },
        summarizeChat: async (transcript) => {
          const res = await _callApi("/ai/summarize-chat", { method: "POST", body: JSON.stringify({ transcript }) });
          return res.summary;
        },
        getAiMatchedDilemmas: async (helper, dilemmas) => {
          const res = await _callApi("/ai/match-dilemmas", { method: "POST", body: JSON.stringify({ helper, dilemmas }) });
          return res.matchedDilemmas;
        },
        summarizeHelperPerformance: async (transcript) => {
          const res = await _callApi("/ai/summarize-performance", { method: "POST", body: JSON.stringify({ transcript }) });
          return res.summary;
        }
      }
    };
  }
});

// src/contexts/NotificationContext.tsx
var import_react2, import_jsx_runtime2, NotificationContext, NotificationProvider, useNotification;
var init_NotificationContext = __esm({
  "src/contexts/NotificationContext.tsx"() {
    "use strict";
    import_react2 = __toESM(require_react());
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    NotificationContext = (0, import_react2.createContext)(void 0);
    NotificationProvider = ({ children }) => {
      const [toasts, setToasts] = (0, import_react2.useState)([]);
      const [confirmationModal, setConfirmationModal] = (0, import_react2.useState)(null);
      const addToast = (0, import_react2.useCallback)((message, type = "success") => {
        const id = crypto.randomUUID();
        setToasts((prev) => [...prev, { id, message, type }]);
      }, []);
      const removeToast = (0, import_react2.useCallback)((id) => {
        setToasts((prev) => prev.filter((t4) => t4.id !== id));
      }, []);
      const showConfirmationModal = (0, import_react2.useCallback)((config2) => {
        setConfirmationModal(config2);
      }, []);
      const hideConfirmationModal = (0, import_react2.useCallback)(() => {
        if (confirmationModal?.onCancel) {
          confirmationModal.onCancel();
        }
        setConfirmationModal(null);
      }, [confirmationModal]);
      const value = (0, import_react2.useMemo)(() => ({
        toasts,
        addToast,
        removeToast,
        confirmationModal,
        showConfirmationModal,
        hideConfirmationModal
      }), [toasts, addToast, removeToast, confirmationModal, showConfirmationModal, hideConfirmationModal]);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(NotificationContext.Provider, { value, children });
    };
    useNotification = () => {
      const context = (0, import_react2.useContext)(NotificationContext);
      if (!context) {
        throw new Error("useNotification must be used within a NotificationProvider");
      }
      return context;
    };
  }
});

// src/contexts/AuthContext.tsx
var import_react3, import_jsx_runtime3, AUTH0_DOMAIN, AUTH0_CLIENT_ID, AUTH0_AUDIENCE, REDIRECT_URI, authState, AuthContext, jwtDecode, AuthProvider, useAuth;
var init_AuthContext = __esm({
  "src/contexts/AuthContext.tsx"() {
    "use strict";
    import_react3 = __toESM(require_react());
    init_webAuthService();
    init_ApiClient();
    init_NotificationContext();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    AUTH0_DOMAIN = process.env.AUTH0_DOMAIN || "demo.auth0.com";
    AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID || "demo-client-id";
    AUTH0_AUDIENCE = process.env.AUTH0_AUDIENCE || "demo-audience";
    if (false) {
      const currentPort = typeof window !== "undefined" ? window.location.port : "";
      if (currentPort && currentPort !== "8888") {
        console.info("\u2713 Running in demo mode - Auth0 not required");
      }
    }
    REDIRECT_URI = WebAuthSession.makeRedirectUri();
    authState = {
      isAuthenticated: false,
      user: null,
      helperProfile: null,
      userToken: null
    };
    AuthContext = (0, import_react3.createContext)(void 0);
    jwtDecode = (token) => {
      try {
        const base64Url = token.split(".")[1];
        if (!base64Url) {
          console.error("Invalid JWT: Missing payload part.");
          return null;
        }
        const base643 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
        const jsonPayload = decodeURIComponent(atob(base643).split("").map(function(c3) {
          return "%" + ("00" + c3.charCodeAt(0).toString(16)).slice(-2);
        }).join(""));
        return JSON.parse(jsonPayload);
      } catch (e4) {
        console.error("Failed to decode JWT", e4);
        return null;
      }
    };
    AuthProvider = ({ children }) => {
      const [user, setUser2] = (0, import_react3.useState)(null);
      const [helperProfile, setHelperProfile] = (0, import_react3.useState)(null);
      const [isNewUser, setIsNewUser] = (0, import_react3.useState)(false);
      const [isLoading, setIsLoading] = (0, import_react3.useState)(true);
      const [userToken, setUserToken] = (0, import_react3.useState)(null);
      const { addToast } = useNotification();
      const discovery = WebAuthSession.useAutoDiscovery(`https://${AUTH0_DOMAIN}`);
      const [request, response, promptAsync] = WebAuthSession.useAuthRequest(
        {
          clientId: AUTH0_CLIENT_ID,
          redirectUri: REDIRECT_URI,
          responseType: WebAuthSession.ResponseType.Token,
          scopes: ["openid", "profile", "email"],
          extraParams: {
            audience: AUTH0_AUDIENCE
          }
        },
        discovery
      );
      const fetchHelperProfile = (0, import_react3.useCallback)(async (auth0UserId) => {
        if (!auth0UserId) return;
        try {
          const profile = await ApiClient.helpers.getProfile(auth0UserId);
          if (profile) {
            setHelperProfile(profile);
            setIsNewUser(false);
          } else {
            setHelperProfile(null);
            setIsNewUser(true);
          }
        } catch (error44) {
          console.error("Failed to fetch helper profile", error44);
          setHelperProfile(null);
          setIsNewUser(true);
        }
      }, []);
      const setAuthData = (0, import_react3.useCallback)(async (accessToken) => {
        if (accessToken) {
          sessionStorage.setItem("accessToken", accessToken);
          const decodedToken = jwtDecode(accessToken);
          setUser2(decodedToken);
          if (decodedToken?.sub) {
            await fetchHelperProfile(decodedToken.sub);
          }
        } else {
          sessionStorage.removeItem("accessToken");
          setUser2(null);
          setHelperProfile(null);
          setIsNewUser(false);
        }
      }, [fetchHelperProfile]);
      (0, import_react3.useEffect)(() => {
        let token = localStorage.getItem("userToken");
        if (!token) {
          token = crypto.randomUUID();
          localStorage.setItem("userToken", token);
        }
        setUserToken(token);
      }, []);
      const logout = (0, import_react3.useCallback)(async () => {
        setIsLoading(true);
        const demoUser = localStorage.getItem("demo_user");
        if (demoUser) {
          localStorage.removeItem("demo_user");
          localStorage.removeItem("demo_token");
          setUser2(null);
          setHelperProfile(null);
          setIsNewUser(false);
          setUserToken(null);
          authState.isAuthenticated = false;
          authState.user = null;
          authState.helperProfile = null;
          authState.userToken = null;
          setIsLoading(false);
          window.location.reload();
          return;
        }
        await setAuthData(null);
        if (discovery?.endSessionEndpoint) {
          const logoutUrl = `${discovery.endSessionEndpoint}?client_id=${AUTH0_CLIENT_ID}&returnTo=${encodeURIComponent(window.location.origin)}`;
          window.location.assign(logoutUrl);
        }
      }, [discovery, setAuthData]);
      (0, import_react3.useEffect)(() => {
        const loadToken = async () => {
          console.log("AuthContext: Starting token load, setting isLoading to true");
          setIsLoading(true);
          try {
            const demoUser = localStorage.getItem("demo_user");
            const demoToken = localStorage.getItem("demo_token");
            if (demoUser && demoToken) {
              console.log("AuthContext: Loading demo user");
              const userData = JSON.parse(demoUser);
              setUser2(userData);
              setUserToken(demoToken);
              if (userData.helperProfile) {
                setHelperProfile(userData.helperProfile);
                setIsNewUser(false);
              } else {
                setHelperProfile(null);
                setIsNewUser(userData.userType === "helper" || userData.userType === "admin");
              }
              authState.isAuthenticated = true;
              authState.user = userData;
              authState.helperProfile = userData.helperProfile || null;
              authState.userToken = demoToken;
              setIsLoading(false);
              return;
            }
            const storedToken = sessionStorage.getItem("accessToken");
            console.log("AuthContext: Stored token:", storedToken ? "exists" : "none");
            if (storedToken) {
              const decodedToken = jwtDecode(storedToken);
              if (decodedToken && decodedToken.exp * 1e3 > Date.now()) {
                await setAuthData(storedToken);
              } else {
                await setAuthData(null);
              }
            } else {
              console.log("AuthContext: No stored token, clearing auth data");
              await setAuthData(null);
            }
          } catch (error44) {
            console.error("Critical error during token loading:", error44);
            await setAuthData(null);
          } finally {
            console.log("AuthContext: Token load complete, setting isLoading to false");
            setIsLoading(false);
          }
        };
        loadToken();
      }, [setAuthData]);
      (0, import_react3.useEffect)(() => {
        if (response?.type === "success" && response.params.access_token) {
          setAuthData(response.params.access_token);
        } else if (response?.type === "error") {
          addToast("Authentication error: " + (response.params.error_description || response.error?.message), "error");
          console.error(response.error);
        }
      }, [response, setAuthData, addToast]);
      const login = (0, import_react3.useCallback)(async () => {
        if (!request || !AUTH0_DOMAIN || !AUTH0_CLIENT_ID) {
          const errorMessage = "Authentication service is not configured correctly.";
          console.error(errorMessage);
          addToast(errorMessage, "error");
          return;
        }
        await promptAsync();
      }, [request, promptAsync, addToast]);
      (0, import_react3.useEffect)(() => {
        const handleAuthError = () => {
          console.warn("Authentication error detected. Forcing logout.");
          addToast("Your session has expired or is invalid. Please log in again.", "error");
          logout();
        };
        window.addEventListener("auth-error", handleAuthError);
        return () => {
          window.removeEventListener("auth-error", handleAuthError);
        };
      }, [logout, addToast]);
      const reloadProfile = (0, import_react3.useCallback)(async () => {
        if (user?.sub) {
          await fetchHelperProfile(user.sub);
        }
      }, [user, fetchHelperProfile]);
      const updateHelperProfile = (0, import_react3.useCallback)((updatedProfile) => {
        setHelperProfile(updatedProfile);
      }, []);
      const value = (0, import_react3.useMemo)(() => ({
        isAuthenticated: !!user,
        user,
        helperProfile,
        isNewUser,
        isLoading,
        login,
        logout,
        reloadProfile,
        updateHelperProfile,
        userToken,
        isAnonymous: false,
        // Default to false, can be overridden in tests
        authState: { isAuthenticated: !!user, user, helperProfile, userToken }
        // Added for test compatibility
      }), [user, helperProfile, isNewUser, isLoading, login, logout, reloadProfile, updateHelperProfile, userToken]);
      (0, import_react3.useEffect)(() => {
        authState.isAuthenticated = value.isAuthenticated;
        authState.user = value.user;
        authState.helperProfile = value.helperProfile;
        authState.userToken = value.userToken;
      }, [value]);
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(AuthContext.Provider, { value, children });
    };
    useAuth = () => {
      const context = (0, import_react3.useContext)(AuthContext);
      if (context === void 0) {
        throw new Error("useAuth must be used within an AuthProvider");
      }
      return context;
    };
  }
});

// node_modules/@auth0/auth0-spa-js/dist/auth0-spa-js.production.esm.js
function e(e4, t4) {
  var i3 = {};
  for (var o3 in e4) Object.prototype.hasOwnProperty.call(e4, o3) && t4.indexOf(o3) < 0 && (i3[o3] = e4[o3]);
  if (null != e4 && "function" == typeof Object.getOwnPropertySymbols) {
    var n3 = 0;
    for (o3 = Object.getOwnPropertySymbols(e4); n3 < o3.length; n3++) t4.indexOf(o3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e4, o3[n3]) && (i3[o3[n3]] = e4[o3[n3]]);
  }
  return i3;
}
function i(e4) {
  return e4 && e4.__esModule && Object.prototype.hasOwnProperty.call(e4, "default") ? e4.default : e4;
}
function o(e4, t4) {
  return e4(t4 = { exports: {} }, t4.exports), t4.exports;
}
function g(e4, t4 = []) {
  return e4 && !t4.includes(e4) ? e4 : "";
}
async function T(t4, i3) {
  var { baseUrl: o3, timeout: n3, audience: a3, scope: r3, auth0Client: c3, useFormData: d3 } = t4, l3 = e(t4, ["baseUrl", "timeout", "audience", "scope", "auth0Client", "useFormData"]);
  const h3 = "urn:ietf:params:oauth:grant-type:token-exchange" === l3.grant_type, p3 = Object.assign(Object.assign(Object.assign({}, l3), h3 && a3 && { audience: a3 }), h3 && r3 && { scope: r3 }), g3 = d3 ? v(p3) : JSON.stringify(p3);
  return await async function(t5, i4, o4, n4, a4, r4, s3) {
    let c4, d4 = null;
    for (let e4 = 0; e4 < 3; e4++) try {
      c4 = await O(t5, o4, n4, a4, r4, s3, i4), d4 = null;
      break;
    } catch (e5) {
      d4 = e5;
    }
    if (d4) throw d4;
    const l4 = c4.json, { error: h4, error_description: p4 } = l4, g4 = e(l4, ["error", "error_description"]), { ok: w3 } = c4;
    if (!w3) {
      const e4 = p4 || `HTTP error. Unable to fetch ${t5}`;
      if ("mfa_required" === h4) throw new m(h4, e4, g4.mfa_token);
      if ("missing_refresh_token" === h4) throw new f(o4, n4);
      throw new u(h4 || "request_error", e4);
    }
    return g4;
  }(`${o3}/oauth/token`, n3, a3 || "default", r3, { method: "POST", body: g3, headers: { "Content-Type": d3 ? "application/x-www-form-urlencoded" : "application/json", "Auth0-Client": btoa(JSON.stringify(c3 || s)) } }, i3, d3);
}
function F(e4, t4, i3) {
  var o3 = void 0 === t4 ? null : t4, n3 = function(e5, t5) {
    var i4 = atob(e5);
    if (t5) {
      for (var o4 = new Uint8Array(i4.length), n4 = 0, a4 = i4.length; n4 < a4; ++n4) o4[n4] = i4.charCodeAt(n4);
      return String.fromCharCode.apply(null, new Uint16Array(o4.buffer));
    }
    return i4;
  }(e4, void 0 !== i3 && i3), a3 = n3.indexOf("\n", 10) + 1, r3 = n3.substring(a3) + (o3 ? "//# sourceMappingURL=" + o3 : ""), s3 = new Blob([r3], { type: "application/javascript" });
  return URL.createObjectURL(s3);
}
var t, n, a, r, s, c, u, d, l, h, p, m, f, w, y, k, v, b, _, I, S, O, j, z, C, P, x, Z, K, W, E, R, U, L, D, X, N, J, H, Y, G, V, M, A, B, $, q, Q, ee, te;
var init_auth0_spa_js_production_esm = __esm({
  "node_modules/@auth0/auth0-spa-js/dist/auth0-spa-js.production.esm.js"() {
    t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    n = o(function(e4, t4) {
      Object.defineProperty(t4, "__esModule", { value: true });
      var i3 = function() {
        function e5() {
          var e6 = this;
          this.locked = /* @__PURE__ */ new Map(), this.addToLocked = function(t5, i4) {
            var o3 = e6.locked.get(t5);
            void 0 === o3 ? void 0 === i4 ? e6.locked.set(t5, []) : e6.locked.set(t5, [i4]) : void 0 !== i4 && (o3.unshift(i4), e6.locked.set(t5, o3));
          }, this.isLocked = function(t5) {
            return e6.locked.has(t5);
          }, this.lock = function(t5) {
            return new Promise(function(i4, o3) {
              e6.isLocked(t5) ? e6.addToLocked(t5, i4) : (e6.addToLocked(t5), i4());
            });
          }, this.unlock = function(t5) {
            var i4 = e6.locked.get(t5);
            if (void 0 !== i4 && 0 !== i4.length) {
              var o3 = i4.pop();
              e6.locked.set(t5, i4), void 0 !== o3 && setTimeout(o3, 0);
            } else e6.locked.delete(t5);
          };
        }
        return e5.getInstance = function() {
          return void 0 === e5.instance && (e5.instance = new e5()), e5.instance;
        }, e5;
      }();
      t4.default = function() {
        return i3.getInstance();
      };
    });
    i(n);
    a = i(o(function(e4, i3) {
      var o3 = t && t.__awaiter || function(e5, t4, i4, o4) {
        return new (i4 || (i4 = Promise))(function(n3, a4) {
          function r4(e6) {
            try {
              c4(o4.next(e6));
            } catch (e7) {
              a4(e7);
            }
          }
          function s4(e6) {
            try {
              c4(o4.throw(e6));
            } catch (e7) {
              a4(e7);
            }
          }
          function c4(e6) {
            e6.done ? n3(e6.value) : new i4(function(t5) {
              t5(e6.value);
            }).then(r4, s4);
          }
          c4((o4 = o4.apply(e5, t4 || [])).next());
        });
      }, a3 = t && t.__generator || function(e5, t4) {
        var i4, o4, n3, a4, r4 = { label: 0, sent: function() {
          if (1 & n3[0]) throw n3[1];
          return n3[1];
        }, trys: [], ops: [] };
        return a4 = { next: s4(0), throw: s4(1), return: s4(2) }, "function" == typeof Symbol && (a4[Symbol.iterator] = function() {
          return this;
        }), a4;
        function s4(a5) {
          return function(s5) {
            return function(a6) {
              if (i4) throw new TypeError("Generator is already executing.");
              for (; r4; ) try {
                if (i4 = 1, o4 && (n3 = 2 & a6[0] ? o4.return : a6[0] ? o4.throw || ((n3 = o4.return) && n3.call(o4), 0) : o4.next) && !(n3 = n3.call(o4, a6[1])).done) return n3;
                switch (o4 = 0, n3 && (a6 = [2 & a6[0], n3.value]), a6[0]) {
                  case 0:
                  case 1:
                    n3 = a6;
                    break;
                  case 4:
                    return r4.label++, { value: a6[1], done: false };
                  case 5:
                    r4.label++, o4 = a6[1], a6 = [0];
                    continue;
                  case 7:
                    a6 = r4.ops.pop(), r4.trys.pop();
                    continue;
                  default:
                    if (!(n3 = r4.trys, (n3 = n3.length > 0 && n3[n3.length - 1]) || 6 !== a6[0] && 2 !== a6[0])) {
                      r4 = 0;
                      continue;
                    }
                    if (3 === a6[0] && (!n3 || a6[1] > n3[0] && a6[1] < n3[3])) {
                      r4.label = a6[1];
                      break;
                    }
                    if (6 === a6[0] && r4.label < n3[1]) {
                      r4.label = n3[1], n3 = a6;
                      break;
                    }
                    if (n3 && r4.label < n3[2]) {
                      r4.label = n3[2], r4.ops.push(a6);
                      break;
                    }
                    n3[2] && r4.ops.pop(), r4.trys.pop();
                    continue;
                }
                a6 = t4.call(e5, r4);
              } catch (e6) {
                a6 = [6, e6], o4 = 0;
              } finally {
                i4 = n3 = 0;
              }
              if (5 & a6[0]) throw a6[1];
              return { value: a6[0] ? a6[1] : void 0, done: true };
            }([a5, s5]);
          };
        }
      }, r3 = t;
      Object.defineProperty(i3, "__esModule", { value: true });
      var s3 = "browser-tabs-lock-key", c3 = { key: function(e5) {
        return o3(r3, void 0, void 0, function() {
          return a3(this, function(e6) {
            throw new Error("Unsupported");
          });
        });
      }, getItem: function(e5) {
        return o3(r3, void 0, void 0, function() {
          return a3(this, function(e6) {
            throw new Error("Unsupported");
          });
        });
      }, clear: function() {
        return o3(r3, void 0, void 0, function() {
          return a3(this, function(e5) {
            return [2, window.localStorage.clear()];
          });
        });
      }, removeItem: function(e5) {
        return o3(r3, void 0, void 0, function() {
          return a3(this, function(e6) {
            throw new Error("Unsupported");
          });
        });
      }, setItem: function(e5, t4) {
        return o3(r3, void 0, void 0, function() {
          return a3(this, function(e6) {
            throw new Error("Unsupported");
          });
        });
      }, keySync: function(e5) {
        return window.localStorage.key(e5);
      }, getItemSync: function(e5) {
        return window.localStorage.getItem(e5);
      }, clearSync: function() {
        return window.localStorage.clear();
      }, removeItemSync: function(e5) {
        return window.localStorage.removeItem(e5);
      }, setItemSync: function(e5, t4) {
        return window.localStorage.setItem(e5, t4);
      } };
      function u3(e5) {
        return new Promise(function(t4) {
          return setTimeout(t4, e5);
        });
      }
      function d3(e5) {
        for (var t4 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz", i4 = "", o4 = 0; o4 < e5; o4++) {
          i4 += t4[Math.floor(Math.random() * t4.length)];
        }
        return i4;
      }
      var l3 = function() {
        function e5(t4) {
          this.acquiredIatSet = /* @__PURE__ */ new Set(), this.storageHandler = void 0, this.id = Date.now().toString() + d3(15), this.acquireLock = this.acquireLock.bind(this), this.releaseLock = this.releaseLock.bind(this), this.releaseLock__private__ = this.releaseLock__private__.bind(this), this.waitForSomethingToChange = this.waitForSomethingToChange.bind(this), this.refreshLockWhileAcquired = this.refreshLockWhileAcquired.bind(this), this.storageHandler = t4, void 0 === e5.waiters && (e5.waiters = []);
        }
        return e5.prototype.acquireLock = function(t4, i4) {
          return void 0 === i4 && (i4 = 5e3), o3(this, void 0, void 0, function() {
            var o4, n3, r4, l4, h3, p3, m3;
            return a3(this, function(a4) {
              switch (a4.label) {
                case 0:
                  o4 = Date.now() + d3(4), n3 = Date.now() + i4, r4 = s3 + "-" + t4, l4 = void 0 === this.storageHandler ? c3 : this.storageHandler, a4.label = 1;
                case 1:
                  return Date.now() < n3 ? [4, u3(30)] : [3, 8];
                case 2:
                  return a4.sent(), null !== l4.getItemSync(r4) ? [3, 5] : (h3 = this.id + "-" + t4 + "-" + o4, [4, u3(Math.floor(25 * Math.random()))]);
                case 3:
                  return a4.sent(), l4.setItemSync(r4, JSON.stringify({ id: this.id, iat: o4, timeoutKey: h3, timeAcquired: Date.now(), timeRefreshed: Date.now() })), [4, u3(30)];
                case 4:
                  return a4.sent(), null !== (p3 = l4.getItemSync(r4)) && (m3 = JSON.parse(p3)).id === this.id && m3.iat === o4 ? (this.acquiredIatSet.add(o4), this.refreshLockWhileAcquired(r4, o4), [2, true]) : [3, 7];
                case 5:
                  return e5.lockCorrector(void 0 === this.storageHandler ? c3 : this.storageHandler), [4, this.waitForSomethingToChange(n3)];
                case 6:
                  a4.sent(), a4.label = 7;
                case 7:
                  return o4 = Date.now() + d3(4), [3, 1];
                case 8:
                  return [2, false];
              }
            });
          });
        }, e5.prototype.refreshLockWhileAcquired = function(e6, t4) {
          return o3(this, void 0, void 0, function() {
            var i4 = this;
            return a3(this, function(r4) {
              return setTimeout(function() {
                return o3(i4, void 0, void 0, function() {
                  var i5, o4, r5;
                  return a3(this, function(a4) {
                    switch (a4.label) {
                      case 0:
                        return [4, n.default().lock(t4)];
                      case 1:
                        return a4.sent(), this.acquiredIatSet.has(t4) ? (i5 = void 0 === this.storageHandler ? c3 : this.storageHandler, null === (o4 = i5.getItemSync(e6)) ? (n.default().unlock(t4), [2]) : ((r5 = JSON.parse(o4)).timeRefreshed = Date.now(), i5.setItemSync(e6, JSON.stringify(r5)), n.default().unlock(t4), this.refreshLockWhileAcquired(e6, t4), [2])) : (n.default().unlock(t4), [2]);
                    }
                  });
                });
              }, 1e3), [2];
            });
          });
        }, e5.prototype.waitForSomethingToChange = function(t4) {
          return o3(this, void 0, void 0, function() {
            return a3(this, function(i4) {
              switch (i4.label) {
                case 0:
                  return [4, new Promise(function(i5) {
                    var o4 = false, n3 = Date.now(), a4 = false;
                    function r4() {
                      if (a4 || (window.removeEventListener("storage", r4), e5.removeFromWaiting(r4), clearTimeout(s4), a4 = true), !o4) {
                        o4 = true;
                        var t5 = 50 - (Date.now() - n3);
                        t5 > 0 ? setTimeout(i5, t5) : i5(null);
                      }
                    }
                    window.addEventListener("storage", r4), e5.addToWaiting(r4);
                    var s4 = setTimeout(r4, Math.max(0, t4 - Date.now()));
                  })];
                case 1:
                  return i4.sent(), [2];
              }
            });
          });
        }, e5.addToWaiting = function(t4) {
          this.removeFromWaiting(t4), void 0 !== e5.waiters && e5.waiters.push(t4);
        }, e5.removeFromWaiting = function(t4) {
          void 0 !== e5.waiters && (e5.waiters = e5.waiters.filter(function(e6) {
            return e6 !== t4;
          }));
        }, e5.notifyWaiters = function() {
          void 0 !== e5.waiters && e5.waiters.slice().forEach(function(e6) {
            return e6();
          });
        }, e5.prototype.releaseLock = function(e6) {
          return o3(this, void 0, void 0, function() {
            return a3(this, function(t4) {
              switch (t4.label) {
                case 0:
                  return [4, this.releaseLock__private__(e6)];
                case 1:
                  return [2, t4.sent()];
              }
            });
          });
        }, e5.prototype.releaseLock__private__ = function(t4) {
          return o3(this, void 0, void 0, function() {
            var i4, o4, r4, u4;
            return a3(this, function(a4) {
              switch (a4.label) {
                case 0:
                  return i4 = void 0 === this.storageHandler ? c3 : this.storageHandler, o4 = s3 + "-" + t4, null === (r4 = i4.getItemSync(o4)) ? [2] : (u4 = JSON.parse(r4)).id !== this.id ? [3, 2] : [4, n.default().lock(u4.iat)];
                case 1:
                  a4.sent(), this.acquiredIatSet.delete(u4.iat), i4.removeItemSync(o4), n.default().unlock(u4.iat), e5.notifyWaiters(), a4.label = 2;
                case 2:
                  return [2];
              }
            });
          });
        }, e5.lockCorrector = function(t4) {
          for (var i4 = Date.now() - 5e3, o4 = t4, n3 = [], a4 = 0; ; ) {
            var r4 = o4.keySync(a4);
            if (null === r4) break;
            n3.push(r4), a4++;
          }
          for (var c4 = false, u4 = 0; u4 < n3.length; u4++) {
            var d4 = n3[u4];
            if (d4.includes(s3)) {
              var l4 = o4.getItemSync(d4);
              if (null !== l4) {
                var h3 = JSON.parse(l4);
                (void 0 === h3.timeRefreshed && h3.timeAcquired < i4 || void 0 !== h3.timeRefreshed && h3.timeRefreshed < i4) && (o4.removeItemSync(d4), c4 = true);
              }
            }
          }
          c4 && e5.notifyWaiters();
        }, e5.waiters = void 0, e5;
      }();
      i3.default = l3;
    }));
    r = { timeoutInSeconds: 60 };
    s = { name: "auth0-spa-js", version: "2.3.0" };
    c = () => Date.now();
    u = class _u extends Error {
      constructor(e4, t4) {
        super(t4), this.error = e4, this.error_description = t4, Object.setPrototypeOf(this, _u.prototype);
      }
      static fromPayload({ error: e4, error_description: t4 }) {
        return new _u(e4, t4);
      }
    };
    d = class _d extends u {
      constructor(e4, t4, i3, o3 = null) {
        super(e4, t4), this.state = i3, this.appState = o3, Object.setPrototypeOf(this, _d.prototype);
      }
    };
    l = class _l extends u {
      constructor() {
        super("timeout", "Timeout"), Object.setPrototypeOf(this, _l.prototype);
      }
    };
    h = class _h extends l {
      constructor(e4) {
        super(), this.popup = e4, Object.setPrototypeOf(this, _h.prototype);
      }
    };
    p = class _p extends u {
      constructor(e4) {
        super("cancelled", "Popup closed"), this.popup = e4, Object.setPrototypeOf(this, _p.prototype);
      }
    };
    m = class _m extends u {
      constructor(e4, t4, i3) {
        super(e4, t4), this.mfa_token = i3, Object.setPrototypeOf(this, _m.prototype);
      }
    };
    f = class _f extends u {
      constructor(e4, t4) {
        super("missing_refresh_token", `Missing Refresh Token (audience: '${g(e4, ["default"])}', scope: '${g(t4)}')`), this.audience = e4, this.scope = t4, Object.setPrototypeOf(this, _f.prototype);
      }
    };
    w = () => window.crypto;
    y = () => {
      const e4 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~.";
      let t4 = "";
      return Array.from(w().getRandomValues(new Uint8Array(43))).forEach((i3) => t4 += e4[i3 % e4.length]), t4;
    };
    k = (e4) => btoa(e4);
    v = (t4) => {
      var { clientId: i3 } = t4, o3 = e(t4, ["clientId"]);
      return new URLSearchParams(((e4) => Object.keys(e4).filter((t5) => void 0 !== e4[t5]).reduce((t5, i4) => Object.assign(Object.assign({}, t5), { [i4]: e4[i4] }), {}))(Object.assign({ client_id: i3 }, o3))).toString();
    };
    b = (e4) => ((e5) => decodeURIComponent(atob(e5).split("").map((e6) => "%" + ("00" + e6.charCodeAt(0).toString(16)).slice(-2)).join("")))(e4.replace(/_/g, "/").replace(/-/g, "+"));
    _ = async (e4, t4) => {
      const i3 = await fetch(e4, t4);
      return { ok: i3.ok, json: await i3.json() };
    };
    I = async (e4, t4, i3) => {
      const o3 = new AbortController();
      let n3;
      return t4.signal = o3.signal, Promise.race([_(e4, t4), new Promise((e5, t5) => {
        n3 = setTimeout(() => {
          o3.abort(), t5(new Error("Timeout when executing 'fetch'"));
        }, i3);
      })]).finally(() => {
        clearTimeout(n3);
      });
    };
    S = async (e4, t4, i3, o3, n3, a3, r3) => {
      return s3 = { auth: { audience: t4, scope: i3 }, timeout: n3, fetchUrl: e4, fetchOptions: o3, useFormData: r3 }, c3 = a3, new Promise(function(e5, t5) {
        const i4 = new MessageChannel();
        i4.port1.onmessage = function(o4) {
          o4.data.error ? t5(new Error(o4.data.error)) : e5(o4.data), i4.port1.close();
        }, c3.postMessage(s3, [i4.port2]);
      });
      var s3, c3;
    };
    O = async (e4, t4, i3, o3, n3, a3, r3 = 1e4) => n3 ? S(e4, t4, i3, o3, r3, n3, a3) : I(e4, o3, r3);
    j = (...e4) => {
      return (t4 = e4.filter(Boolean).join(" ").trim().split(/\s+/), Array.from(new Set(t4))).join(" ");
      var t4;
    };
    z = class _z {
      constructor(e4, t4 = "@@auth0spajs@@", i3) {
        this.prefix = t4, this.suffix = i3, this.clientId = e4.clientId, this.scope = e4.scope, this.audience = e4.audience;
      }
      toKey() {
        return [this.prefix, this.clientId, this.audience, this.scope, this.suffix].filter(Boolean).join("::");
      }
      static fromKey(e4) {
        const [t4, i3, o3, n3] = e4.split("::");
        return new _z({ clientId: i3, scope: n3, audience: o3 }, t4);
      }
      static fromCacheEntry(e4) {
        const { scope: t4, audience: i3, client_id: o3 } = e4;
        return new _z({ scope: t4, audience: i3, clientId: o3 });
      }
    };
    C = class {
      set(e4, t4) {
        localStorage.setItem(e4, JSON.stringify(t4));
      }
      get(e4) {
        const t4 = window.localStorage.getItem(e4);
        if (t4) try {
          return JSON.parse(t4);
        } catch (e5) {
          return;
        }
      }
      remove(e4) {
        localStorage.removeItem(e4);
      }
      allKeys() {
        return Object.keys(window.localStorage).filter((e4) => e4.startsWith("@@auth0spajs@@"));
      }
    };
    P = class {
      constructor() {
        this.enclosedCache = /* @__PURE__ */ function() {
          let e4 = {};
          return { set(t4, i3) {
            e4[t4] = i3;
          }, get(t4) {
            const i3 = e4[t4];
            if (i3) return i3;
          }, remove(t4) {
            delete e4[t4];
          }, allKeys: () => Object.keys(e4) };
        }();
      }
    };
    x = class {
      constructor(e4, t4, i3) {
        this.cache = e4, this.keyManifest = t4, this.nowProvider = i3 || c;
      }
      async setIdToken(e4, t4, i3) {
        var o3;
        const n3 = this.getIdTokenCacheKey(e4);
        await this.cache.set(n3, { id_token: t4, decodedToken: i3 }), await (null === (o3 = this.keyManifest) || void 0 === o3 ? void 0 : o3.add(n3));
      }
      async getIdToken(e4) {
        const t4 = await this.cache.get(this.getIdTokenCacheKey(e4.clientId));
        if (!t4 && e4.scope && e4.audience) {
          const t5 = await this.get(e4);
          if (!t5) return;
          if (!t5.id_token || !t5.decodedToken) return;
          return { id_token: t5.id_token, decodedToken: t5.decodedToken };
        }
        if (t4) return { id_token: t4.id_token, decodedToken: t4.decodedToken };
      }
      async get(e4, t4 = 0) {
        var i3;
        let o3 = await this.cache.get(e4.toKey());
        if (!o3) {
          const t5 = await this.getCacheKeys();
          if (!t5) return;
          const i4 = this.matchExistingCacheKey(e4, t5);
          i4 && (o3 = await this.cache.get(i4));
        }
        if (!o3) return;
        const n3 = await this.nowProvider(), a3 = Math.floor(n3 / 1e3);
        return o3.expiresAt - t4 < a3 ? o3.body.refresh_token ? (o3.body = { refresh_token: o3.body.refresh_token }, await this.cache.set(e4.toKey(), o3), o3.body) : (await this.cache.remove(e4.toKey()), void await (null === (i3 = this.keyManifest) || void 0 === i3 ? void 0 : i3.remove(e4.toKey()))) : o3.body;
      }
      async set(e4) {
        var t4;
        const i3 = new z({ clientId: e4.client_id, scope: e4.scope, audience: e4.audience }), o3 = await this.wrapCacheEntry(e4);
        await this.cache.set(i3.toKey(), o3), await (null === (t4 = this.keyManifest) || void 0 === t4 ? void 0 : t4.add(i3.toKey()));
      }
      async clear(e4) {
        var t4;
        const i3 = await this.getCacheKeys();
        i3 && (await i3.filter((t5) => !e4 || t5.includes(e4)).reduce(async (e5, t5) => {
          await e5, await this.cache.remove(t5);
        }, Promise.resolve()), await (null === (t4 = this.keyManifest) || void 0 === t4 ? void 0 : t4.clear()));
      }
      async wrapCacheEntry(e4) {
        const t4 = await this.nowProvider();
        return { body: e4, expiresAt: Math.floor(t4 / 1e3) + e4.expires_in };
      }
      async getCacheKeys() {
        var e4;
        return this.keyManifest ? null === (e4 = await this.keyManifest.get()) || void 0 === e4 ? void 0 : e4.keys : this.cache.allKeys ? this.cache.allKeys() : void 0;
      }
      getIdTokenCacheKey(e4) {
        return new z({ clientId: e4 }, "@@auth0spajs@@", "@@user@@").toKey();
      }
      matchExistingCacheKey(e4, t4) {
        return t4.filter((t5) => {
          var i3;
          const o3 = z.fromKey(t5), n3 = new Set(o3.scope && o3.scope.split(" ")), a3 = (null === (i3 = e4.scope) || void 0 === i3 ? void 0 : i3.split(" ")) || [], r3 = o3.scope && a3.reduce((e5, t6) => e5 && n3.has(t6), true);
          return "@@auth0spajs@@" === o3.prefix && o3.clientId === e4.clientId && o3.audience === e4.audience && r3;
        })[0];
      }
    };
    Z = class {
      constructor(e4, t4, i3) {
        this.storage = e4, this.clientId = t4, this.cookieDomain = i3, this.storageKey = `a0.spajs.txs.${this.clientId}`;
      }
      create(e4) {
        this.storage.save(this.storageKey, e4, { daysUntilExpire: 1, cookieDomain: this.cookieDomain });
      }
      get() {
        return this.storage.get(this.storageKey);
      }
      remove() {
        this.storage.remove(this.storageKey, { cookieDomain: this.cookieDomain });
      }
    };
    K = (e4) => "number" == typeof e4;
    W = ["iss", "aud", "exp", "nbf", "iat", "jti", "azp", "nonce", "auth_time", "at_hash", "c_hash", "acr", "amr", "sub_jwk", "cnf", "sip_from_tag", "sip_date", "sip_callid", "sip_cseq_num", "sip_via_branch", "orig", "dest", "mky", "events", "toe", "txn", "rph", "sid", "vot", "vtm"];
    E = (e4) => {
      if (!e4.id_token) throw new Error("ID token is required but missing");
      const t4 = ((e5) => {
        const t5 = e5.split("."), [i4, o4, n4] = t5;
        if (3 !== t5.length || !i4 || !o4 || !n4) throw new Error("ID token could not be decoded");
        const a3 = JSON.parse(b(o4)), r3 = { __raw: e5 }, s3 = {};
        return Object.keys(a3).forEach((e6) => {
          r3[e6] = a3[e6], W.includes(e6) || (s3[e6] = a3[e6]);
        }), { encoded: { header: i4, payload: o4, signature: n4 }, header: JSON.parse(b(i4)), claims: r3, user: s3 };
      })(e4.id_token);
      if (!t4.claims.iss) throw new Error("Issuer (iss) claim must be a string present in the ID token");
      if (t4.claims.iss !== e4.iss) throw new Error(`Issuer (iss) claim mismatch in the ID token; expected "${e4.iss}", found "${t4.claims.iss}"`);
      if (!t4.user.sub) throw new Error("Subject (sub) claim must be a string present in the ID token");
      if ("RS256" !== t4.header.alg) throw new Error(`Signature algorithm of "${t4.header.alg}" is not supported. Expected the ID token to be signed with "RS256".`);
      if (!t4.claims.aud || "string" != typeof t4.claims.aud && !Array.isArray(t4.claims.aud)) throw new Error("Audience (aud) claim must be a string or array of strings present in the ID token");
      if (Array.isArray(t4.claims.aud)) {
        if (!t4.claims.aud.includes(e4.aud)) throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e4.aud}" but was not one of "${t4.claims.aud.join(", ")}"`);
        if (t4.claims.aud.length > 1) {
          if (!t4.claims.azp) throw new Error("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values");
          if (t4.claims.azp !== e4.aud) throw new Error(`Authorized Party (azp) claim mismatch in the ID token; expected "${e4.aud}", found "${t4.claims.azp}"`);
        }
      } else if (t4.claims.aud !== e4.aud) throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${e4.aud}" but found "${t4.claims.aud}"`);
      if (e4.nonce) {
        if (!t4.claims.nonce) throw new Error("Nonce (nonce) claim must be a string present in the ID token");
        if (t4.claims.nonce !== e4.nonce) throw new Error(`Nonce (nonce) claim mismatch in the ID token; expected "${e4.nonce}", found "${t4.claims.nonce}"`);
      }
      if (e4.max_age && !K(t4.claims.auth_time)) throw new Error("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified");
      if (null == t4.claims.exp || !K(t4.claims.exp)) throw new Error("Expiration Time (exp) claim must be a number present in the ID token");
      if (!K(t4.claims.iat)) throw new Error("Issued At (iat) claim must be a number present in the ID token");
      const i3 = e4.leeway || 60, o3 = new Date(e4.now || Date.now()), n3 = /* @__PURE__ */ new Date(0);
      if (n3.setUTCSeconds(t4.claims.exp + i3), o3 > n3) throw new Error(`Expiration Time (exp) claim error in the ID token; current time (${o3}) is after expiration time (${n3})`);
      if (null != t4.claims.nbf && K(t4.claims.nbf)) {
        const e5 = /* @__PURE__ */ new Date(0);
        if (e5.setUTCSeconds(t4.claims.nbf - i3), o3 < e5) throw new Error(`Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Current time (${o3}) is before ${e5}`);
      }
      if (null != t4.claims.auth_time && K(t4.claims.auth_time)) {
        const n4 = /* @__PURE__ */ new Date(0);
        if (n4.setUTCSeconds(parseInt(t4.claims.auth_time) + e4.max_age + i3), o3 > n4) throw new Error(`Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Current time (${o3}) is after last auth at ${n4}`);
      }
      if (e4.organization) {
        const i4 = e4.organization.trim();
        if (i4.startsWith("org_")) {
          const e5 = i4;
          if (!t4.claims.org_id) throw new Error("Organization ID (org_id) claim must be a string present in the ID token");
          if (e5 !== t4.claims.org_id) throw new Error(`Organization ID (org_id) claim mismatch in the ID token; expected "${e5}", found "${t4.claims.org_id}"`);
        } else {
          const e5 = i4.toLowerCase();
          if (!t4.claims.org_name) throw new Error("Organization Name (org_name) claim must be a string present in the ID token");
          if (e5 !== t4.claims.org_name) throw new Error(`Organization Name (org_name) claim mismatch in the ID token; expected "${e5}", found "${t4.claims.org_name}"`);
        }
      }
      return t4;
    };
    R = o(function(e4, i3) {
      var o3 = t && t.__assign || function() {
        return o3 = Object.assign || function(e5) {
          for (var t4, i4 = 1, o4 = arguments.length; i4 < o4; i4++) for (var n4 in t4 = arguments[i4]) Object.prototype.hasOwnProperty.call(t4, n4) && (e5[n4] = t4[n4]);
          return e5;
        }, o3.apply(this, arguments);
      };
      function n3(e5, t4) {
        if (!t4) return "";
        var i4 = "; " + e5;
        return true === t4 ? i4 : i4 + "=" + t4;
      }
      function a3(e5, t4, i4) {
        return encodeURIComponent(e5).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/\(/g, "%28").replace(/\)/g, "%29") + "=" + encodeURIComponent(t4).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent) + function(e6) {
          if ("number" == typeof e6.expires) {
            var t5 = /* @__PURE__ */ new Date();
            t5.setMilliseconds(t5.getMilliseconds() + 864e5 * e6.expires), e6.expires = t5;
          }
          return n3("Expires", e6.expires ? e6.expires.toUTCString() : "") + n3("Domain", e6.domain) + n3("Path", e6.path) + n3("Secure", e6.secure) + n3("SameSite", e6.sameSite);
        }(i4);
      }
      function r3(e5) {
        for (var t4 = {}, i4 = e5 ? e5.split("; ") : [], o4 = /(%[\dA-F]{2})+/gi, n4 = 0; n4 < i4.length; n4++) {
          var a4 = i4[n4].split("="), r4 = a4.slice(1).join("=");
          '"' === r4.charAt(0) && (r4 = r4.slice(1, -1));
          try {
            t4[a4[0].replace(o4, decodeURIComponent)] = r4.replace(o4, decodeURIComponent);
          } catch (e6) {
          }
        }
        return t4;
      }
      function s3() {
        return r3(document.cookie);
      }
      function c3(e5, t4, i4) {
        document.cookie = a3(e5, t4, o3({ path: "/" }, i4));
      }
      i3.__esModule = true, i3.encode = a3, i3.parse = r3, i3.getAll = s3, i3.get = function(e5) {
        return s3()[e5];
      }, i3.set = c3, i3.remove = function(e5, t4) {
        c3(e5, "", o3(o3({}, t4), { expires: -1 }));
      };
    });
    i(R), R.encode, R.parse, R.getAll;
    U = R.get;
    L = R.set;
    D = R.remove;
    X = { get(e4) {
      const t4 = U(e4);
      if (void 0 !== t4) return JSON.parse(t4);
    }, save(e4, t4, i3) {
      let o3 = {};
      "https:" === window.location.protocol && (o3 = { secure: true, sameSite: "none" }), (null == i3 ? void 0 : i3.daysUntilExpire) && (o3.expires = i3.daysUntilExpire), (null == i3 ? void 0 : i3.cookieDomain) && (o3.domain = i3.cookieDomain), L(e4, JSON.stringify(t4), o3);
    }, remove(e4, t4) {
      let i3 = {};
      (null == t4 ? void 0 : t4.cookieDomain) && (i3.domain = t4.cookieDomain), D(e4, i3);
    } };
    N = { get(e4) {
      const t4 = X.get(e4);
      return t4 || X.get(`_legacy_${e4}`);
    }, save(e4, t4, i3) {
      let o3 = {};
      "https:" === window.location.protocol && (o3 = { secure: true }), (null == i3 ? void 0 : i3.daysUntilExpire) && (o3.expires = i3.daysUntilExpire), (null == i3 ? void 0 : i3.cookieDomain) && (o3.domain = i3.cookieDomain), L(`_legacy_${e4}`, JSON.stringify(t4), o3), X.save(e4, t4, i3);
    }, remove(e4, t4) {
      let i3 = {};
      (null == t4 ? void 0 : t4.cookieDomain) && (i3.domain = t4.cookieDomain), D(e4, i3), X.remove(e4, t4), X.remove(`_legacy_${e4}`, t4);
    } };
    J = { get(e4) {
      if ("undefined" == typeof sessionStorage) return;
      const t4 = sessionStorage.getItem(e4);
      return null != t4 ? JSON.parse(t4) : void 0;
    }, save(e4, t4) {
      sessionStorage.setItem(e4, JSON.stringify(t4));
    }, remove(e4) {
      sessionStorage.removeItem(e4);
    } };
    M = (H = "Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgZSBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHQscil7c3VwZXIociksdGhpcy5lcnJvcj10LHRoaXMuZXJyb3JfZGVzY3JpcHRpb249cixPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxlLnByb3RvdHlwZSl9c3RhdGljIGZyb21QYXlsb2FkKHtlcnJvcjp0LGVycm9yX2Rlc2NyaXB0aW9uOnJ9KXtyZXR1cm4gbmV3IGUodCxyKX19Y2xhc3MgdCBleHRlbmRzIGV7Y29uc3RydWN0b3IoZSxzKXtzdXBlcigibWlzc2luZ19yZWZyZXNoX3Rva2VuIixgTWlzc2luZyBSZWZyZXNoIFRva2VuIChhdWRpZW5jZTogJyR7cihlLFsiZGVmYXVsdCJdKX0nLCBzY29wZTogJyR7cihzKX0nKWApLHRoaXMuYXVkaWVuY2U9ZSx0aGlzLnNjb3BlPXMsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsdC5wcm90b3R5cGUpfX1mdW5jdGlvbiByKGUsdD1bXSl7cmV0dXJuIGUmJiF0LmluY2x1ZGVzKGUpP2U6IiJ9ImZ1bmN0aW9uIj09dHlwZW9mIFN1cHByZXNzZWRFcnJvciYmU3VwcHJlc3NlZEVycm9yO2NvbnN0IHM9ZT0+e3ZhcntjbGllbnRJZDp0fT1lLHI9ZnVuY3Rpb24oZSx0KXt2YXIgcj17fTtmb3IodmFyIHMgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSYmdC5pbmRleE9mKHMpPDAmJihyW3NdPWVbc10pO2lmKG51bGwhPWUmJiJmdW5jdGlvbiI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbz0wO2ZvcihzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7bzxzLmxlbmd0aDtvKyspdC5pbmRleE9mKHNbb10pPDAmJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlLHNbb10pJiYocltzW29dXT1lW3Nbb11dKX1yZXR1cm4gcn0oZSxbImNsaWVudElkIl0pO3JldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKChlPT5PYmplY3Qua2V5cyhlKS5maWx0ZXIoKHQ9PnZvaWQgMCE9PWVbdF0pKS5yZWR1Y2UoKCh0LHIpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCkse1tyXTplW3JdfSkpLHt9KSkoT2JqZWN0LmFzc2lnbih7Y2xpZW50X2lkOnR9LHIpKSkudG9TdHJpbmcoKX07bGV0IG89e307Y29uc3Qgbj0oZSx0KT0+YCR7ZX18JHt0fWA7YWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsKGFzeW5jKHtkYXRhOnt0aW1lb3V0OmUsYXV0aDpyLGZldGNoVXJsOmksZmV0Y2hPcHRpb25zOmMsdXNlRm9ybURhdGE6YX0scG9ydHM6W3BdfSk9PntsZXQgZjtjb25zdHthdWRpZW5jZTp1LHNjb3BlOmx9PXJ8fHt9O3RyeXtjb25zdCByPWE/KGU9Pntjb25zdCB0PW5ldyBVUkxTZWFyY2hQYXJhbXMoZSkscj17fTtyZXR1cm4gdC5mb3JFYWNoKCgoZSx0KT0+e3JbdF09ZX0pKSxyfSkoYy5ib2R5KTpKU09OLnBhcnNlKGMuYm9keSk7aWYoIXIucmVmcmVzaF90b2tlbiYmInJlZnJlc2hfdG9rZW4iPT09ci5ncmFudF90eXBlKXtjb25zdCBlPSgoZSx0KT0+b1tuKGUsdCldKSh1LGwpO2lmKCFlKXRocm93IG5ldyB0KHUsbCk7Yy5ib2R5PWE/cyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKTpKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scikse3JlZnJlc2hfdG9rZW46ZX0pKX1sZXQgaCxnOyJmdW5jdGlvbiI9PXR5cGVvZiBBYm9ydENvbnRyb2xsZXImJihoPW5ldyBBYm9ydENvbnRyb2xsZXIsYy5zaWduYWw9aC5zaWduYWwpO3RyeXtnPWF3YWl0IFByb21pc2UucmFjZShbKGQ9ZSxuZXcgUHJvbWlzZSgoZT0+c2V0VGltZW91dChlLGQpKSkpLGZldGNoKGksT2JqZWN0LmFzc2lnbih7fSxjKSldKX1jYXRjaChlKXtyZXR1cm4gdm9pZCBwLnBvc3RNZXNzYWdlKHtlcnJvcjplLm1lc3NhZ2V9KX1pZighZylyZXR1cm4gaCYmaC5hYm9ydCgpLHZvaWQgcC5wb3N0TWVzc2FnZSh7ZXJyb3I6IlRpbWVvdXQgd2hlbiBleGVjdXRpbmcgJ2ZldGNoJyJ9KTtmPWF3YWl0IGcuanNvbigpLGYucmVmcmVzaF90b2tlbj8oKChlLHQscik9PntvW24odCxyKV09ZX0pKGYucmVmcmVzaF90b2tlbix1LGwpLGRlbGV0ZSBmLnJlZnJlc2hfdG9rZW4pOigoZSx0KT0+e2RlbGV0ZSBvW24oZSx0KV19KSh1LGwpLHAucG9zdE1lc3NhZ2Uoe29rOmcub2ssanNvbjpmfSl9Y2F0Y2goZSl7cC5wb3N0TWVzc2FnZSh7b2s6ITEsanNvbjp7ZXJyb3I6ZS5lcnJvcixlcnJvcl9kZXNjcmlwdGlvbjplLm1lc3NhZ2V9fSl9dmFyIGR9KSl9KCk7Cgo=", Y = null, G = false, function(e4) {
      return V = V || F(H, Y, G), new Worker(V, e4);
    });
    A = {};
    B = class {
      constructor(e4, t4) {
        this.cache = e4, this.clientId = t4, this.manifestKey = this.createManifestKeyFrom(this.clientId);
      }
      async add(e4) {
        var t4;
        const i3 = new Set((null === (t4 = await this.cache.get(this.manifestKey)) || void 0 === t4 ? void 0 : t4.keys) || []);
        i3.add(e4), await this.cache.set(this.manifestKey, { keys: [...i3] });
      }
      async remove(e4) {
        const t4 = await this.cache.get(this.manifestKey);
        if (t4) {
          const i3 = new Set(t4.keys);
          return i3.delete(e4), i3.size > 0 ? await this.cache.set(this.manifestKey, { keys: [...i3] }) : await this.cache.remove(this.manifestKey);
        }
      }
      get() {
        return this.cache.get(this.manifestKey);
      }
      clear() {
        return this.cache.remove(this.manifestKey);
      }
      createManifestKeyFrom(e4) {
        return `@@auth0spajs@@::${e4}`;
      }
    };
    $ = { memory: () => new P().enclosedCache, localstorage: () => new C() };
    q = (e4) => $[e4];
    Q = (t4) => {
      const { openUrl: i3, onRedirect: o3 } = t4, n3 = e(t4, ["openUrl", "onRedirect"]);
      return Object.assign(Object.assign({}, n3), { openUrl: false === i3 || i3 ? i3 : o3 });
    };
    ee = new a();
    te = class {
      constructor(e4) {
        let t4, i3;
        if (this.userCache = new P().enclosedCache, this.defaultOptions = { authorizationParams: { scope: "openid profile email" }, useRefreshTokensFallback: false, useFormData: true }, this._releaseLockOnPageHide = async () => {
          await ee.releaseLock("auth0.lock.getTokenSilently"), window.removeEventListener("pagehide", this._releaseLockOnPageHide);
        }, this.options = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), e4), { authorizationParams: Object.assign(Object.assign({}, this.defaultOptions.authorizationParams), e4.authorizationParams) }), "undefined" != typeof window && (() => {
          if (!w()) throw new Error("For security reasons, `window.crypto` is required to run `auth0-spa-js`.");
          if (void 0 === w().subtle) throw new Error("\n      auth0-spa-js must run on a secure origin. See https://github.com/auth0/auth0-spa-js/blob/main/FAQ.md#why-do-i-get-auth0-spa-js-must-run-on-a-secure-origin for more information.\n    ");
        })(), e4.cache && e4.cacheLocation && console.warn("Both `cache` and `cacheLocation` options have been specified in the Auth0Client configuration; ignoring `cacheLocation` and using `cache`."), e4.cache) i3 = e4.cache;
        else {
          if (t4 = e4.cacheLocation || "memory", !q(t4)) throw new Error(`Invalid cache location "${t4}"`);
          i3 = q(t4)();
        }
        this.httpTimeoutMs = e4.httpTimeoutInSeconds ? 1e3 * e4.httpTimeoutInSeconds : 1e4, this.cookieStorage = false === e4.legacySameSiteCookie ? X : N, this.orgHintCookieName = `auth0.${this.options.clientId}.organization_hint`, this.isAuthenticatedCookieName = ((e5) => `auth0.${e5}.is.authenticated`)(this.options.clientId), this.sessionCheckExpiryDays = e4.sessionCheckExpiryDays || 1;
        const o3 = e4.useCookiesForTransactions ? this.cookieStorage : J;
        var n3;
        this.scope = j("openid", this.options.authorizationParams.scope, this.options.useRefreshTokens ? "offline_access" : ""), this.transactionManager = new Z(o3, this.options.clientId, this.options.cookieDomain), this.nowProvider = this.options.nowProvider || c, this.cacheManager = new x(i3, i3.allKeys ? void 0 : new B(i3, this.options.clientId), this.nowProvider), this.domainUrl = (n3 = this.options.domain, /^https?:\/\//.test(n3) ? n3 : `https://${n3}`), this.tokenIssuer = ((e5, t5) => e5 ? e5.startsWith("https://") ? e5 : `https://${e5}/` : `${t5}/`)(this.options.issuer, this.domainUrl), "undefined" != typeof window && window.Worker && this.options.useRefreshTokens && "memory" === t4 && (this.options.workerUrl ? this.worker = new Worker(this.options.workerUrl) : this.worker = new M());
      }
      _url(e4) {
        const t4 = encodeURIComponent(btoa(JSON.stringify(this.options.auth0Client || s)));
        return `${this.domainUrl}${e4}&auth0Client=${t4}`;
      }
      _authorizeUrl(e4) {
        return this._url(`/authorize?${v(e4)}`);
      }
      async _verifyIdToken(e4, t4, i3) {
        const o3 = await this.nowProvider();
        return E({ iss: this.tokenIssuer, aud: this.options.clientId, id_token: e4, nonce: t4, organization: i3, leeway: this.options.leeway, max_age: (n3 = this.options.authorizationParams.max_age, "string" != typeof n3 ? n3 : parseInt(n3, 10) || void 0), now: o3 });
        var n3;
      }
      _processOrgHint(e4) {
        e4 ? this.cookieStorage.save(this.orgHintCookieName, e4, { daysUntilExpire: this.sessionCheckExpiryDays, cookieDomain: this.options.cookieDomain }) : this.cookieStorage.remove(this.orgHintCookieName, { cookieDomain: this.options.cookieDomain });
      }
      async _prepareAuthorizeUrl(e4, t4, i3) {
        const o3 = k(y()), n3 = k(y()), a3 = y(), r3 = ((e5) => {
          const t5 = new Uint8Array(e5);
          return ((e6) => {
            const t6 = { "+": "-", "/": "_", "=": "" };
            return e6.replace(/[+/=]/g, (e7) => t6[e7]);
          })(window.btoa(String.fromCharCode(...Array.from(t5))));
        })(await (async (e5) => {
          const t5 = w().subtle.digest({ name: "SHA-256" }, new TextEncoder().encode(e5));
          return await t5;
        })(a3)), s3 = ((e5, t5, i4, o4, n4, a4, r4, s4) => Object.assign(Object.assign(Object.assign({ client_id: e5.clientId }, e5.authorizationParams), i4), { scope: j(t5, i4.scope), response_type: "code", response_mode: s4 || "query", state: o4, nonce: n4, redirect_uri: r4 || e5.authorizationParams.redirect_uri, code_challenge: a4, code_challenge_method: "S256" }))(this.options, this.scope, e4, o3, n3, r3, e4.redirect_uri || this.options.authorizationParams.redirect_uri || i3, null == t4 ? void 0 : t4.response_mode), c3 = this._authorizeUrl(s3);
        return { nonce: n3, code_verifier: a3, scope: s3.scope, audience: s3.audience || "default", redirect_uri: s3.redirect_uri, state: o3, url: c3 };
      }
      async loginWithPopup(e4, t4) {
        var i3;
        if (e4 = e4 || {}, !(t4 = t4 || {}).popup && (t4.popup = ((e5) => {
          const t5 = window.screenX + (window.innerWidth - 400) / 2, i4 = window.screenY + (window.innerHeight - 600) / 2;
          return window.open(e5, "auth0:authorize:popup", `left=${t5},top=${i4},width=400,height=600,resizable,scrollbars=yes,status=1`);
        })(""), !t4.popup)) throw new Error("Unable to open a popup for loginWithPopup - window.open returned `null`");
        const o3 = await this._prepareAuthorizeUrl(e4.authorizationParams || {}, { response_mode: "web_message" }, window.location.origin);
        t4.popup.location.href = o3.url;
        const n3 = await ((e5) => new Promise((t5, i4) => {
          let o4;
          const n4 = setInterval(() => {
            e5.popup && e5.popup.closed && (clearInterval(n4), clearTimeout(a4), window.removeEventListener("message", o4, false), i4(new p(e5.popup)));
          }, 1e3), a4 = setTimeout(() => {
            clearInterval(n4), i4(new h(e5.popup)), window.removeEventListener("message", o4, false);
          }, 1e3 * (e5.timeoutInSeconds || 60));
          o4 = function(r3) {
            if (r3.data && "authorization_response" === r3.data.type) {
              if (clearTimeout(a4), clearInterval(n4), window.removeEventListener("message", o4, false), e5.popup.close(), r3.data.response.error) return i4(u.fromPayload(r3.data.response));
              t5(r3.data.response);
            }
          }, window.addEventListener("message", o4);
        }))(Object.assign(Object.assign({}, t4), { timeoutInSeconds: t4.timeoutInSeconds || this.options.authorizeTimeoutInSeconds || 60 }));
        if (o3.state !== n3.state) throw new u("state_mismatch", "Invalid state");
        const a3 = (null === (i3 = e4.authorizationParams) || void 0 === i3 ? void 0 : i3.organization) || this.options.authorizationParams.organization;
        await this._requestToken({ audience: o3.audience, scope: o3.scope, code_verifier: o3.code_verifier, grant_type: "authorization_code", code: n3.code, redirect_uri: o3.redirect_uri }, { nonceIn: o3.nonce, organization: a3 });
      }
      async getUser() {
        var e4;
        const t4 = await this._getIdTokenFromCache();
        return null === (e4 = null == t4 ? void 0 : t4.decodedToken) || void 0 === e4 ? void 0 : e4.user;
      }
      async getIdTokenClaims() {
        var e4;
        const t4 = await this._getIdTokenFromCache();
        return null === (e4 = null == t4 ? void 0 : t4.decodedToken) || void 0 === e4 ? void 0 : e4.claims;
      }
      async loginWithRedirect(t4 = {}) {
        var i3;
        const o3 = Q(t4), { openUrl: n3, fragment: a3, appState: r3 } = o3, s3 = e(o3, ["openUrl", "fragment", "appState"]), c3 = (null === (i3 = s3.authorizationParams) || void 0 === i3 ? void 0 : i3.organization) || this.options.authorizationParams.organization, u3 = await this._prepareAuthorizeUrl(s3.authorizationParams || {}), { url: d3 } = u3, l3 = e(u3, ["url"]);
        this.transactionManager.create(Object.assign(Object.assign(Object.assign({}, l3), { appState: r3 }), c3 && { organization: c3 }));
        const h3 = a3 ? `${d3}#${a3}` : d3;
        n3 ? await n3(h3) : window.location.assign(h3);
      }
      async handleRedirectCallback(e4 = window.location.href) {
        const t4 = e4.split("?").slice(1);
        if (0 === t4.length) throw new Error("There are no query params available for parsing.");
        const { state: i3, code: o3, error: n3, error_description: a3 } = ((e5) => {
          e5.indexOf("#") > -1 && (e5 = e5.substring(0, e5.indexOf("#")));
          const t5 = new URLSearchParams(e5);
          return { state: t5.get("state"), code: t5.get("code") || void 0, error: t5.get("error") || void 0, error_description: t5.get("error_description") || void 0 };
        })(t4.join("")), r3 = this.transactionManager.get();
        if (!r3) throw new u("missing_transaction", "Invalid state");
        if (this.transactionManager.remove(), n3) throw new d(n3, a3 || n3, i3, r3.appState);
        if (!r3.code_verifier || r3.state && r3.state !== i3) throw new u("state_mismatch", "Invalid state");
        const s3 = r3.organization, c3 = r3.nonce, l3 = r3.redirect_uri;
        return await this._requestToken(Object.assign({ audience: r3.audience, scope: r3.scope, code_verifier: r3.code_verifier, grant_type: "authorization_code", code: o3 }, l3 ? { redirect_uri: l3 } : {}), { nonceIn: c3, organization: s3 }), { appState: r3.appState };
      }
      async checkSession(e4) {
        if (!this.cookieStorage.get(this.isAuthenticatedCookieName)) {
          if (!this.cookieStorage.get("auth0.is.authenticated")) return;
          this.cookieStorage.save(this.isAuthenticatedCookieName, true, { daysUntilExpire: this.sessionCheckExpiryDays, cookieDomain: this.options.cookieDomain }), this.cookieStorage.remove("auth0.is.authenticated");
        }
        try {
          await this.getTokenSilently(e4);
        } catch (e5) {
        }
      }
      async getTokenSilently(e4 = {}) {
        var t4;
        const i3 = Object.assign(Object.assign({ cacheMode: "on" }, e4), { authorizationParams: Object.assign(Object.assign(Object.assign({}, this.options.authorizationParams), e4.authorizationParams), { scope: j(this.scope, null === (t4 = e4.authorizationParams) || void 0 === t4 ? void 0 : t4.scope) }) }), o3 = await ((e5, t5) => {
          let i4 = A[t5];
          return i4 || (i4 = e5().finally(() => {
            delete A[t5], i4 = null;
          }), A[t5] = i4), i4;
        })(() => this._getTokenSilently(i3), `${this.options.clientId}::${i3.authorizationParams.audience}::${i3.authorizationParams.scope}`);
        return e4.detailedResponse ? o3 : null == o3 ? void 0 : o3.access_token;
      }
      async _getTokenSilently(t4) {
        const { cacheMode: i3 } = t4, o3 = e(t4, ["cacheMode"]);
        if ("off" !== i3) {
          const e4 = await this._getEntryFromCache({ scope: o3.authorizationParams.scope, audience: o3.authorizationParams.audience || "default", clientId: this.options.clientId });
          if (e4) return e4;
        }
        if ("cache-only" !== i3) {
          if (!await (async (e4, t5 = 3) => {
            for (let i4 = 0; i4 < t5; i4++) if (await e4()) return true;
            return false;
          })(() => ee.acquireLock("auth0.lock.getTokenSilently", 5e3), 10)) throw new l();
          try {
            if (window.addEventListener("pagehide", this._releaseLockOnPageHide), "off" !== i3) {
              const e5 = await this._getEntryFromCache({ scope: o3.authorizationParams.scope, audience: o3.authorizationParams.audience || "default", clientId: this.options.clientId });
              if (e5) return e5;
            }
            const e4 = this.options.useRefreshTokens ? await this._getTokenUsingRefreshToken(o3) : await this._getTokenFromIFrame(o3), { id_token: t5, access_token: n3, oauthTokenScope: a3, expires_in: r3 } = e4;
            return Object.assign(Object.assign({ id_token: t5, access_token: n3 }, a3 ? { scope: a3 } : null), { expires_in: r3 });
          } finally {
            await ee.releaseLock("auth0.lock.getTokenSilently"), window.removeEventListener("pagehide", this._releaseLockOnPageHide);
          }
        }
      }
      async getTokenWithPopup(e4 = {}, t4 = {}) {
        var i3;
        const o3 = Object.assign(Object.assign({}, e4), { authorizationParams: Object.assign(Object.assign(Object.assign({}, this.options.authorizationParams), e4.authorizationParams), { scope: j(this.scope, null === (i3 = e4.authorizationParams) || void 0 === i3 ? void 0 : i3.scope) }) });
        t4 = Object.assign(Object.assign({}, r), t4), await this.loginWithPopup(o3, t4);
        return (await this.cacheManager.get(new z({ scope: o3.authorizationParams.scope, audience: o3.authorizationParams.audience || "default", clientId: this.options.clientId }))).access_token;
      }
      async isAuthenticated() {
        return !!await this.getUser();
      }
      _buildLogoutUrl(t4) {
        null !== t4.clientId ? t4.clientId = t4.clientId || this.options.clientId : delete t4.clientId;
        const i3 = t4.logoutParams || {}, { federated: o3 } = i3, n3 = e(i3, ["federated"]), a3 = o3 ? "&federated" : "";
        return this._url(`/v2/logout?${v(Object.assign({ clientId: t4.clientId }, n3))}`) + a3;
      }
      async logout(t4 = {}) {
        const i3 = Q(t4), { openUrl: o3 } = i3, n3 = e(i3, ["openUrl"]);
        null === t4.clientId ? await this.cacheManager.clear() : await this.cacheManager.clear(t4.clientId || this.options.clientId), this.cookieStorage.remove(this.orgHintCookieName, { cookieDomain: this.options.cookieDomain }), this.cookieStorage.remove(this.isAuthenticatedCookieName, { cookieDomain: this.options.cookieDomain }), this.userCache.remove("@@user@@");
        const a3 = this._buildLogoutUrl(n3);
        o3 ? await o3(a3) : false !== o3 && window.location.assign(a3);
      }
      async _getTokenFromIFrame(e4) {
        const t4 = Object.assign(Object.assign({}, e4.authorizationParams), { prompt: "none" }), i3 = this.cookieStorage.get(this.orgHintCookieName);
        i3 && !t4.organization && (t4.organization = i3);
        const { url: o3, state: n3, nonce: a3, code_verifier: r3, redirect_uri: s3, scope: c3, audience: d3 } = await this._prepareAuthorizeUrl(t4, { response_mode: "web_message" }, window.location.origin);
        try {
          if (window.crossOriginIsolated) throw new u("login_required", "The application is running in a Cross-Origin Isolated context, silently retrieving a token without refresh token is not possible.");
          const i4 = e4.timeoutInSeconds || this.options.authorizeTimeoutInSeconds;
          let h3;
          try {
            h3 = new URL(this.domainUrl).origin;
          } catch (e5) {
            h3 = this.domainUrl;
          }
          const p3 = await ((e5, t5, i5 = 60) => new Promise((o4, n4) => {
            const a4 = window.document.createElement("iframe");
            a4.setAttribute("width", "0"), a4.setAttribute("height", "0"), a4.style.display = "none";
            const r4 = () => {
              window.document.body.contains(a4) && (window.document.body.removeChild(a4), window.removeEventListener("message", s4, false));
            };
            let s4;
            const c4 = setTimeout(() => {
              n4(new l()), r4();
            }, 1e3 * i5);
            s4 = function(e6) {
              if (e6.origin != t5) return;
              if (!e6.data || "authorization_response" !== e6.data.type) return;
              const i6 = e6.source;
              i6 && i6.close(), e6.data.response.error ? n4(u.fromPayload(e6.data.response)) : o4(e6.data.response), clearTimeout(c4), window.removeEventListener("message", s4, false), setTimeout(r4, 2e3);
            }, window.addEventListener("message", s4, false), window.document.body.appendChild(a4), a4.setAttribute("src", e5);
          }))(o3, h3, i4);
          if (n3 !== p3.state) throw new u("state_mismatch", "Invalid state");
          const m3 = await this._requestToken(Object.assign(Object.assign({}, e4.authorizationParams), { code_verifier: r3, code: p3.code, grant_type: "authorization_code", redirect_uri: s3, timeout: e4.authorizationParams.timeout || this.httpTimeoutMs }), { nonceIn: a3, organization: t4.organization });
          return Object.assign(Object.assign({}, m3), { scope: c3, oauthTokenScope: m3.scope, audience: d3 });
        } catch (e5) {
          throw "login_required" === e5.error && this.logout({ openUrl: false }), e5;
        }
      }
      async _getTokenUsingRefreshToken(e4) {
        const t4 = await this.cacheManager.get(new z({ scope: e4.authorizationParams.scope, audience: e4.authorizationParams.audience || "default", clientId: this.options.clientId }));
        if (!(t4 && t4.refresh_token || this.worker)) {
          if (this.options.useRefreshTokensFallback) return await this._getTokenFromIFrame(e4);
          throw new f(e4.authorizationParams.audience || "default", e4.authorizationParams.scope);
        }
        const i3 = e4.authorizationParams.redirect_uri || this.options.authorizationParams.redirect_uri || window.location.origin, o3 = "number" == typeof e4.timeoutInSeconds ? 1e3 * e4.timeoutInSeconds : null;
        try {
          const n3 = await this._requestToken(Object.assign(Object.assign(Object.assign({}, e4.authorizationParams), { grant_type: "refresh_token", refresh_token: t4 && t4.refresh_token, redirect_uri: i3 }), o3 && { timeout: o3 }));
          return Object.assign(Object.assign({}, n3), { scope: e4.authorizationParams.scope, oauthTokenScope: n3.scope, audience: e4.authorizationParams.audience || "default" });
        } catch (t5) {
          if ((t5.message.indexOf("Missing Refresh Token") > -1 || t5.message && t5.message.indexOf("invalid refresh token") > -1) && this.options.useRefreshTokensFallback) return await this._getTokenFromIFrame(e4);
          throw t5;
        }
      }
      async _saveEntryInCache(t4) {
        const { id_token: i3, decodedToken: o3 } = t4, n3 = e(t4, ["id_token", "decodedToken"]);
        this.userCache.set("@@user@@", { id_token: i3, decodedToken: o3 }), await this.cacheManager.setIdToken(this.options.clientId, t4.id_token, t4.decodedToken), await this.cacheManager.set(n3);
      }
      async _getIdTokenFromCache() {
        const e4 = this.options.authorizationParams.audience || "default", t4 = await this.cacheManager.getIdToken(new z({ clientId: this.options.clientId, audience: e4, scope: this.scope })), i3 = this.userCache.get("@@user@@");
        return t4 && t4.id_token === (null == i3 ? void 0 : i3.id_token) ? i3 : (this.userCache.set("@@user@@", t4), t4);
      }
      async _getEntryFromCache({ scope: e4, audience: t4, clientId: i3 }) {
        const o3 = await this.cacheManager.get(new z({ scope: e4, audience: t4, clientId: i3 }), 60);
        if (o3 && o3.access_token) {
          const { access_token: e5, oauthTokenScope: t5, expires_in: i4 } = o3, n3 = await this._getIdTokenFromCache();
          return n3 && Object.assign(Object.assign({ id_token: n3.id_token, access_token: e5 }, t5 ? { scope: t5 } : null), { expires_in: i4 });
        }
      }
      async _requestToken(e4, t4) {
        const { nonceIn: i3, organization: o3 } = t4 || {}, n3 = await T(Object.assign({ baseUrl: this.domainUrl, client_id: this.options.clientId, auth0Client: this.options.auth0Client, useFormData: this.options.useFormData, timeout: this.httpTimeoutMs }, e4), this.worker), a3 = await this._verifyIdToken(n3.id_token, i3, o3);
        return await this._saveEntryInCache(Object.assign(Object.assign(Object.assign(Object.assign({}, n3), { decodedToken: a3, scope: e4.scope, audience: e4.audience || "default" }), n3.scope ? { oauthTokenScope: n3.scope } : null), { client_id: this.options.clientId })), this.cookieStorage.save(this.isAuthenticatedCookieName, true, { daysUntilExpire: this.sessionCheckExpiryDays, cookieDomain: this.options.cookieDomain }), this._processOrgHint(o3 || a3.claims.org_id), Object.assign(Object.assign({}, n3), { decodedToken: a3 });
      }
      async exchangeToken(e4) {
        return this._requestToken({ grant_type: "urn:ietf:params:oauth:grant-type:token-exchange", subject_token: e4.subject_token, subject_token_type: e4.subject_token_type, scope: j(e4.scope, this.scope), audience: e4.audience || this.options.authorizationParams.audience });
      }
    };
  }
});

// node_modules/zod/v4/core/core.js
// @__NO_SIDE_EFFECTS__
function $constructor(name2, initializer3, params) {
  function init4(inst, def) {
    var _a;
    Object.defineProperty(inst, "_zod", {
      value: inst._zod ?? {},
      enumerable: false
    });
    (_a = inst._zod).traits ?? (_a.traits = /* @__PURE__ */ new Set());
    inst._zod.traits.add(name2);
    initializer3(inst, def);
    for (const k3 in _3.prototype) {
      if (!(k3 in inst))
        Object.defineProperty(inst, k3, { value: _3.prototype[k3].bind(inst) });
    }
    inst._zod.constr = _3;
    inst._zod.def = def;
  }
  const Parent = params?.Parent ?? Object;
  class Definition extends Parent {
  }
  Object.defineProperty(Definition, "name", { value: name2 });
  function _3(def) {
    var _a;
    const inst = params?.Parent ? new Definition() : this;
    init4(inst, def);
    (_a = inst._zod).deferred ?? (_a.deferred = []);
    for (const fn of inst._zod.deferred) {
      fn();
    }
    return inst;
  }
  Object.defineProperty(_3, "init", { value: init4 });
  Object.defineProperty(_3, Symbol.hasInstance, {
    value: (inst) => {
      if (params?.Parent && inst instanceof params.Parent)
        return true;
      return inst?._zod?.traits?.has(name2);
    }
  });
  Object.defineProperty(_3, "name", { value: name2 });
  return _3;
}
function config(newConfig) {
  if (newConfig)
    Object.assign(globalConfig, newConfig);
  return globalConfig;
}
var NEVER, $brand, $ZodAsyncError, globalConfig;
var init_core = __esm({
  "node_modules/zod/v4/core/core.js"() {
    NEVER = Object.freeze({
      status: "aborted"
    });
    $brand = Symbol("zod_brand");
    $ZodAsyncError = class extends Error {
      constructor() {
        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);
      }
    };
    globalConfig = {};
  }
});

// node_modules/zod/v4/core/util.js
var util_exports = {};
__export(util_exports, {
  BIGINT_FORMAT_RANGES: () => BIGINT_FORMAT_RANGES,
  Class: () => Class,
  NUMBER_FORMAT_RANGES: () => NUMBER_FORMAT_RANGES,
  aborted: () => aborted,
  allowsEval: () => allowsEval,
  assert: () => assert,
  assertEqual: () => assertEqual,
  assertIs: () => assertIs,
  assertNever: () => assertNever,
  assertNotEqual: () => assertNotEqual,
  assignProp: () => assignProp,
  cached: () => cached,
  captureStackTrace: () => captureStackTrace,
  cleanEnum: () => cleanEnum,
  cleanRegex: () => cleanRegex,
  clone: () => clone,
  cloneDef: () => cloneDef,
  createTransparentProxy: () => createTransparentProxy,
  defineLazy: () => defineLazy,
  esc: () => esc,
  escapeRegex: () => escapeRegex,
  extend: () => extend,
  finalizeIssue: () => finalizeIssue,
  floatSafeRemainder: () => floatSafeRemainder,
  getElementAtPath: () => getElementAtPath,
  getEnumValues: () => getEnumValues,
  getLengthableOrigin: () => getLengthableOrigin,
  getParsedType: () => getParsedType,
  getSizableOrigin: () => getSizableOrigin,
  isObject: () => isObject,
  isPlainObject: () => isPlainObject2,
  issue: () => issue,
  joinValues: () => joinValues,
  jsonStringifyReplacer: () => jsonStringifyReplacer,
  merge: () => merge2,
  mergeDefs: () => mergeDefs,
  normalizeParams: () => normalizeParams,
  nullish: () => nullish,
  numKeys: () => numKeys,
  objectClone: () => objectClone,
  omit: () => omit,
  optionalKeys: () => optionalKeys,
  partial: () => partial,
  pick: () => pick,
  prefixIssues: () => prefixIssues,
  primitiveTypes: () => primitiveTypes,
  promiseAllObject: () => promiseAllObject,
  propertyKeyTypes: () => propertyKeyTypes,
  randomString: () => randomString,
  required: () => required,
  shallowClone: () => shallowClone,
  stringifyPrimitive: () => stringifyPrimitive,
  unwrapMessage: () => unwrapMessage
});
function assertEqual(val) {
  return val;
}
function assertNotEqual(val) {
  return val;
}
function assertIs(_arg) {
}
function assertNever(_x) {
  throw new Error();
}
function assert(_3) {
}
function getEnumValues(entries) {
  const numericValues = Object.values(entries).filter((v3) => typeof v3 === "number");
  const values = Object.entries(entries).filter(([k3, _3]) => numericValues.indexOf(+k3) === -1).map(([_3, v3]) => v3);
  return values;
}
function joinValues(array2, separator = "|") {
  return array2.map((val) => stringifyPrimitive(val)).join(separator);
}
function jsonStringifyReplacer(_3, value) {
  if (typeof value === "bigint")
    return value.toString();
  return value;
}
function cached(getter) {
  const set2 = false;
  return {
    get value() {
      if (!set2) {
        const value = getter();
        Object.defineProperty(this, "value", { value });
        return value;
      }
      throw new Error("cached value already set");
    }
  };
}
function nullish(input) {
  return input === null || input === void 0;
}
function cleanRegex(source) {
  const start2 = source.startsWith("^") ? 1 : 0;
  const end = source.endsWith("$") ? source.length - 1 : source.length;
  return source.slice(start2, end);
}
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepString = step.toString();
  let stepDecCount = (stepString.split(".")[1] || "").length;
  if (stepDecCount === 0 && /\d?e-\d?/.test(stepString)) {
    const match = stepString.match(/\d?e-(\d?)/);
    if (match?.[1]) {
      stepDecCount = Number.parseInt(match[1]);
    }
  }
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
function defineLazy(object2, key, getter) {
  let value = void 0;
  Object.defineProperty(object2, key, {
    get() {
      if (value === EVALUATING) {
        return void 0;
      }
      if (value === void 0) {
        value = EVALUATING;
        value = getter();
      }
      return value;
    },
    set(v3) {
      Object.defineProperty(object2, key, {
        value: v3
        // configurable: true,
      });
    },
    configurable: true
  });
}
function objectClone(obj) {
  return Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
}
function assignProp(target, prop, value) {
  Object.defineProperty(target, prop, {
    value,
    writable: true,
    enumerable: true,
    configurable: true
  });
}
function mergeDefs(...defs) {
  const mergedDescriptors = {};
  for (const def of defs) {
    const descriptors = Object.getOwnPropertyDescriptors(def);
    Object.assign(mergedDescriptors, descriptors);
  }
  return Object.defineProperties({}, mergedDescriptors);
}
function cloneDef(schema) {
  return mergeDefs(schema._zod.def);
}
function getElementAtPath(obj, path2) {
  if (!path2)
    return obj;
  return path2.reduce((acc, key) => acc?.[key], obj);
}
function promiseAllObject(promisesObj) {
  const keys2 = Object.keys(promisesObj);
  const promises = keys2.map((key) => promisesObj[key]);
  return Promise.all(promises).then((results) => {
    const resolvedObj = {};
    for (let i3 = 0; i3 < keys2.length; i3++) {
      resolvedObj[keys2[i3]] = results[i3];
    }
    return resolvedObj;
  });
}
function randomString(length = 10) {
  const chars2 = "abcdefghijklmnopqrstuvwxyz";
  let str = "";
  for (let i3 = 0; i3 < length; i3++) {
    str += chars2[Math.floor(Math.random() * chars2.length)];
  }
  return str;
}
function esc(str) {
  return JSON.stringify(str);
}
function isObject(data2) {
  return typeof data2 === "object" && data2 !== null && !Array.isArray(data2);
}
function isPlainObject2(o3) {
  if (isObject(o3) === false)
    return false;
  const ctor = o3.constructor;
  if (ctor === void 0)
    return true;
  const prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (Object.prototype.hasOwnProperty.call(prot, "isPrototypeOf") === false) {
    return false;
  }
  return true;
}
function shallowClone(o3) {
  if (isPlainObject2(o3))
    return { ...o3 };
  return o3;
}
function numKeys(data2) {
  let keyCount = 0;
  for (const key in data2) {
    if (Object.prototype.hasOwnProperty.call(data2, key)) {
      keyCount++;
    }
  }
  return keyCount;
}
function escapeRegex(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function clone(inst, def, params) {
  const cl = new inst._zod.constr(def ?? inst._zod.def);
  if (!def || params?.parent)
    cl._zod.parent = inst;
  return cl;
}
function normalizeParams(_params) {
  const params = _params;
  if (!params)
    return {};
  if (typeof params === "string")
    return { error: () => params };
  if (params?.message !== void 0) {
    if (params?.error !== void 0)
      throw new Error("Cannot specify both `message` and `error` params");
    params.error = params.message;
  }
  delete params.message;
  if (typeof params.error === "string")
    return { ...params, error: () => params.error };
  return params;
}
function createTransparentProxy(getter) {
  let target;
  return new Proxy({}, {
    get(_3, prop, receiver) {
      target ?? (target = getter());
      return Reflect.get(target, prop, receiver);
    },
    set(_3, prop, value, receiver) {
      target ?? (target = getter());
      return Reflect.set(target, prop, value, receiver);
    },
    has(_3, prop) {
      target ?? (target = getter());
      return Reflect.has(target, prop);
    },
    deleteProperty(_3, prop) {
      target ?? (target = getter());
      return Reflect.deleteProperty(target, prop);
    },
    ownKeys(_3) {
      target ?? (target = getter());
      return Reflect.ownKeys(target);
    },
    getOwnPropertyDescriptor(_3, prop) {
      target ?? (target = getter());
      return Reflect.getOwnPropertyDescriptor(target, prop);
    },
    defineProperty(_3, prop, descriptor) {
      target ?? (target = getter());
      return Reflect.defineProperty(target, prop, descriptor);
    }
  });
}
function stringifyPrimitive(value) {
  if (typeof value === "bigint")
    return value.toString() + "n";
  if (typeof value === "string")
    return `"${value}"`;
  return `${value}`;
}
function optionalKeys(shape) {
  return Object.keys(shape).filter((k3) => {
    return shape[k3]._zod.optin === "optional" && shape[k3]._zod.optout === "optional";
  });
}
function pick(schema, mask) {
  const currDef = schema._zod.def;
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const newShape = {};
      for (const key in mask) {
        if (!(key in currDef.shape)) {
          throw new Error(`Unrecognized key: "${key}"`);
        }
        if (!mask[key])
          continue;
        newShape[key] = currDef.shape[key];
      }
      assignProp(this, "shape", newShape);
      return newShape;
    },
    checks: []
  });
  return clone(schema, def);
}
function omit(schema, mask) {
  const currDef = schema._zod.def;
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const newShape = { ...schema._zod.def.shape };
      for (const key in mask) {
        if (!(key in currDef.shape)) {
          throw new Error(`Unrecognized key: "${key}"`);
        }
        if (!mask[key])
          continue;
        delete newShape[key];
      }
      assignProp(this, "shape", newShape);
      return newShape;
    },
    checks: []
  });
  return clone(schema, def);
}
function extend(schema, shape) {
  if (!isPlainObject2(shape)) {
    throw new Error("Invalid input to extend: expected a plain object");
  }
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const _shape = { ...schema._zod.def.shape, ...shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    checks: []
  });
  return clone(schema, def);
}
function merge2(a3, b3) {
  const def = mergeDefs(a3._zod.def, {
    get shape() {
      const _shape = { ...a3._zod.def.shape, ...b3._zod.def.shape };
      assignProp(this, "shape", _shape);
      return _shape;
    },
    get catchall() {
      return b3._zod.def.catchall;
    },
    checks: []
    // delete existing checks
  });
  return clone(a3, def);
}
function partial(Class2, schema, mask) {
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const oldShape = schema._zod.def.shape;
      const shape = { ...oldShape };
      if (mask) {
        for (const key in mask) {
          if (!(key in oldShape)) {
            throw new Error(`Unrecognized key: "${key}"`);
          }
          if (!mask[key])
            continue;
          shape[key] = Class2 ? new Class2({
            type: "optional",
            innerType: oldShape[key]
          }) : oldShape[key];
        }
      } else {
        for (const key in oldShape) {
          shape[key] = Class2 ? new Class2({
            type: "optional",
            innerType: oldShape[key]
          }) : oldShape[key];
        }
      }
      assignProp(this, "shape", shape);
      return shape;
    },
    checks: []
  });
  return clone(schema, def);
}
function required(Class2, schema, mask) {
  const def = mergeDefs(schema._zod.def, {
    get shape() {
      const oldShape = schema._zod.def.shape;
      const shape = { ...oldShape };
      if (mask) {
        for (const key in mask) {
          if (!(key in shape)) {
            throw new Error(`Unrecognized key: "${key}"`);
          }
          if (!mask[key])
            continue;
          shape[key] = new Class2({
            type: "nonoptional",
            innerType: oldShape[key]
          });
        }
      } else {
        for (const key in oldShape) {
          shape[key] = new Class2({
            type: "nonoptional",
            innerType: oldShape[key]
          });
        }
      }
      assignProp(this, "shape", shape);
      return shape;
    },
    checks: []
  });
  return clone(schema, def);
}
function aborted(x3, startIndex = 0) {
  for (let i3 = startIndex; i3 < x3.issues.length; i3++) {
    if (x3.issues[i3]?.continue !== true) {
      return true;
    }
  }
  return false;
}
function prefixIssues(path2, issues) {
  return issues.map((iss) => {
    var _a;
    (_a = iss).path ?? (_a.path = []);
    iss.path.unshift(path2);
    return iss;
  });
}
function unwrapMessage(message) {
  return typeof message === "string" ? message : message?.message;
}
function finalizeIssue(iss, ctx, config2) {
  const full = { ...iss, path: iss.path ?? [] };
  if (!iss.message) {
    const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ?? unwrapMessage(ctx?.error?.(iss)) ?? unwrapMessage(config2.customError?.(iss)) ?? unwrapMessage(config2.localeError?.(iss)) ?? "Invalid input";
    full.message = message;
  }
  delete full.inst;
  delete full.continue;
  if (!ctx?.reportInput) {
    delete full.input;
  }
  return full;
}
function getSizableOrigin(input) {
  if (input instanceof Set)
    return "set";
  if (input instanceof Map)
    return "map";
  if (input instanceof File)
    return "file";
  return "unknown";
}
function getLengthableOrigin(input) {
  if (Array.isArray(input))
    return "array";
  if (typeof input === "string")
    return "string";
  return "unknown";
}
function issue(...args) {
  const [iss, input, inst] = args;
  if (typeof iss === "string") {
    return {
      message: iss,
      code: "custom",
      input,
      inst
    };
  }
  return { ...iss };
}
function cleanEnum(obj) {
  return Object.entries(obj).filter(([k3, _3]) => {
    return Number.isNaN(Number.parseInt(k3, 10));
  }).map((el) => el[1]);
}
var EVALUATING, captureStackTrace, allowsEval, getParsedType, propertyKeyTypes, primitiveTypes, NUMBER_FORMAT_RANGES, BIGINT_FORMAT_RANGES, Class;
var init_util = __esm({
  "node_modules/zod/v4/core/util.js"() {
    EVALUATING = Symbol("evaluating");
    captureStackTrace = "captureStackTrace" in Error ? Error.captureStackTrace : (..._args) => {
    };
    allowsEval = cached(() => {
      if (typeof navigator !== "undefined" && navigator?.userAgent?.includes("Cloudflare")) {
        return false;
      }
      try {
        const F3 = Function;
        new F3("");
        return true;
      } catch (_3) {
        return false;
      }
    });
    getParsedType = (data2) => {
      const t4 = typeof data2;
      switch (t4) {
        case "undefined":
          return "undefined";
        case "string":
          return "string";
        case "number":
          return Number.isNaN(data2) ? "nan" : "number";
        case "boolean":
          return "boolean";
        case "function":
          return "function";
        case "bigint":
          return "bigint";
        case "symbol":
          return "symbol";
        case "object":
          if (Array.isArray(data2)) {
            return "array";
          }
          if (data2 === null) {
            return "null";
          }
          if (data2.then && typeof data2.then === "function" && data2.catch && typeof data2.catch === "function") {
            return "promise";
          }
          if (typeof Map !== "undefined" && data2 instanceof Map) {
            return "map";
          }
          if (typeof Set !== "undefined" && data2 instanceof Set) {
            return "set";
          }
          if (typeof Date !== "undefined" && data2 instanceof Date) {
            return "date";
          }
          if (typeof File !== "undefined" && data2 instanceof File) {
            return "file";
          }
          return "object";
        default:
          throw new Error(`Unknown data type: ${t4}`);
      }
    };
    propertyKeyTypes = /* @__PURE__ */ new Set(["string", "number", "symbol"]);
    primitiveTypes = /* @__PURE__ */ new Set(["string", "number", "bigint", "boolean", "symbol", "undefined"]);
    NUMBER_FORMAT_RANGES = {
      safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
      int32: [-2147483648, 2147483647],
      uint32: [0, 4294967295],
      float32: [-34028234663852886e22, 34028234663852886e22],
      float64: [-Number.MAX_VALUE, Number.MAX_VALUE]
    };
    BIGINT_FORMAT_RANGES = {
      int64: [/* @__PURE__ */ BigInt("-9223372036854775808"), /* @__PURE__ */ BigInt("9223372036854775807")],
      uint64: [/* @__PURE__ */ BigInt(0), /* @__PURE__ */ BigInt("18446744073709551615")]
    };
    Class = class {
      constructor(..._args) {
      }
    };
  }
});

// node_modules/zod/v4/core/errors.js
function flattenError(error44, mapper = (issue2) => issue2.message) {
  const fieldErrors = {};
  const formErrors = [];
  for (const sub of error44.issues) {
    if (sub.path.length > 0) {
      fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
      fieldErrors[sub.path[0]].push(mapper(sub));
    } else {
      formErrors.push(mapper(sub));
    }
  }
  return { formErrors, fieldErrors };
}
function formatError(error44, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const fieldErrors = { _errors: [] };
  const processError = (error45) => {
    for (const issue2 of error45.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues });
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues });
      } else if (issue2.path.length === 0) {
        fieldErrors._errors.push(mapper(issue2));
      } else {
        let curr = fieldErrors;
        let i3 = 0;
        while (i3 < issue2.path.length) {
          const el = issue2.path[i3];
          const terminal = i3 === issue2.path.length - 1;
          if (!terminal) {
            curr[el] = curr[el] || { _errors: [] };
          } else {
            curr[el] = curr[el] || { _errors: [] };
            curr[el]._errors.push(mapper(issue2));
          }
          curr = curr[el];
          i3++;
        }
      }
    }
  };
  processError(error44);
  return fieldErrors;
}
function treeifyError(error44, _mapper) {
  const mapper = _mapper || function(issue2) {
    return issue2.message;
  };
  const result = { errors: [] };
  const processError = (error45, path2 = []) => {
    var _a, _b;
    for (const issue2 of error45.issues) {
      if (issue2.code === "invalid_union" && issue2.errors.length) {
        issue2.errors.map((issues) => processError({ issues }, issue2.path));
      } else if (issue2.code === "invalid_key") {
        processError({ issues: issue2.issues }, issue2.path);
      } else if (issue2.code === "invalid_element") {
        processError({ issues: issue2.issues }, issue2.path);
      } else {
        const fullpath = [...path2, ...issue2.path];
        if (fullpath.length === 0) {
          result.errors.push(mapper(issue2));
          continue;
        }
        let curr = result;
        let i3 = 0;
        while (i3 < fullpath.length) {
          const el = fullpath[i3];
          const terminal = i3 === fullpath.length - 1;
          if (typeof el === "string") {
            curr.properties ?? (curr.properties = {});
            (_a = curr.properties)[el] ?? (_a[el] = { errors: [] });
            curr = curr.properties[el];
          } else {
            curr.items ?? (curr.items = []);
            (_b = curr.items)[el] ?? (_b[el] = { errors: [] });
            curr = curr.items[el];
          }
          if (terminal) {
            curr.errors.push(mapper(issue2));
          }
          i3++;
        }
      }
    }
  };
  processError(error44);
  return result;
}
function toDotPath(_path) {
  const segs = [];
  const path2 = _path.map((seg) => typeof seg === "object" ? seg.key : seg);
  for (const seg of path2) {
    if (typeof seg === "number")
      segs.push(`[${seg}]`);
    else if (typeof seg === "symbol")
      segs.push(`[${JSON.stringify(String(seg))}]`);
    else if (/[^\w$]/.test(seg))
      segs.push(`[${JSON.stringify(seg)}]`);
    else {
      if (segs.length)
        segs.push(".");
      segs.push(seg);
    }
  }
  return segs.join("");
}
function prettifyError(error44) {
  const lines = [];
  const issues = [...error44.issues].sort((a3, b3) => (a3.path ?? []).length - (b3.path ?? []).length);
  for (const issue2 of issues) {
    lines.push(`\u2716 ${issue2.message}`);
    if (issue2.path?.length)
      lines.push(`  \u2192 at ${toDotPath(issue2.path)}`);
  }
  return lines.join("\n");
}
var initializer, $ZodError, $ZodRealError;
var init_errors = __esm({
  "node_modules/zod/v4/core/errors.js"() {
    init_core();
    init_util();
    initializer = (inst, def) => {
      inst.name = "$ZodError";
      Object.defineProperty(inst, "_zod", {
        value: inst._zod,
        enumerable: false
      });
      Object.defineProperty(inst, "issues", {
        value: def,
        enumerable: false
      });
      inst.message = JSON.stringify(def, jsonStringifyReplacer, 2);
      Object.defineProperty(inst, "toString", {
        value: () => inst.message,
        enumerable: false
      });
    };
    $ZodError = $constructor("$ZodError", initializer);
    $ZodRealError = $constructor("$ZodError", initializer, { Parent: Error });
  }
});

// node_modules/zod/v4/core/parse.js
var _parse, parse, _parseAsync, parseAsync, _safeParse, safeParse, _safeParseAsync, safeParseAsync;
var init_parse = __esm({
  "node_modules/zod/v4/core/parse.js"() {
    init_core();
    init_errors();
    init_util();
    _parse = (_Err) => (schema, value, _ctx, _params) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };
      const result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      if (result.issues.length) {
        const e4 = new (_params?.Err ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
        captureStackTrace(e4, _params?.callee);
        throw e4;
      }
      return result.value;
    };
    parse = /* @__PURE__ */ _parse($ZodRealError);
    _parseAsync = (_Err) => async (schema, value, _ctx, params) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
      let result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise)
        result = await result;
      if (result.issues.length) {
        const e4 = new (params?.Err ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
        captureStackTrace(e4, params?.callee);
        throw e4;
      }
      return result.value;
    };
    parseAsync = /* @__PURE__ */ _parseAsync($ZodRealError);
    _safeParse = (_Err) => (schema, value, _ctx) => {
      const ctx = _ctx ? { ..._ctx, async: false } : { async: false };
      const result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      return result.issues.length ? {
        success: false,
        error: new (_Err ?? $ZodError)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
      } : { success: true, data: result.value };
    };
    safeParse = /* @__PURE__ */ _safeParse($ZodRealError);
    _safeParseAsync = (_Err) => async (schema, value, _ctx) => {
      const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
      let result = schema._zod.run({ value, issues: [] }, ctx);
      if (result instanceof Promise)
        result = await result;
      return result.issues.length ? {
        success: false,
        error: new _Err(result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
      } : { success: true, data: result.value };
    };
    safeParseAsync = /* @__PURE__ */ _safeParseAsync($ZodRealError);
  }
});

// node_modules/zod/v4/core/regexes.js
var regexes_exports = {};
__export(regexes_exports, {
  base64: () => base64,
  base64url: () => base64url,
  bigint: () => bigint,
  boolean: () => boolean,
  browserEmail: () => browserEmail,
  cidrv4: () => cidrv4,
  cidrv6: () => cidrv6,
  cuid: () => cuid,
  cuid2: () => cuid2,
  date: () => date,
  datetime: () => datetime,
  domain: () => domain,
  duration: () => duration,
  e164: () => e164,
  email: () => email,
  emoji: () => emoji,
  extendedDuration: () => extendedDuration,
  guid: () => guid,
  hostname: () => hostname,
  html5Email: () => html5Email,
  idnEmail: () => idnEmail,
  integer: () => integer,
  ipv4: () => ipv4,
  ipv6: () => ipv6,
  ksuid: () => ksuid,
  lowercase: () => lowercase,
  nanoid: () => nanoid,
  null: () => _null,
  number: () => number,
  rfc5322Email: () => rfc5322Email,
  string: () => string,
  time: () => time,
  ulid: () => ulid,
  undefined: () => _undefined,
  unicodeEmail: () => unicodeEmail,
  uppercase: () => uppercase,
  uuid: () => uuid,
  uuid4: () => uuid42,
  uuid6: () => uuid6,
  uuid7: () => uuid7,
  xid: () => xid
});
function emoji() {
  return new RegExp(_emoji, "u");
}
function timeSource(args) {
  const hhmm = `(?:[01]\\d|2[0-3]):[0-5]\\d`;
  const regex = typeof args.precision === "number" ? args.precision === -1 ? `${hhmm}` : args.precision === 0 ? `${hhmm}:[0-5]\\d` : `${hhmm}:[0-5]\\d\\.\\d{${args.precision}}` : `${hhmm}(?::[0-5]\\d(?:\\.\\d+)?)?`;
  return regex;
}
function time(args) {
  return new RegExp(`^${timeSource(args)}$`);
}
function datetime(args) {
  const time3 = timeSource({ precision: args.precision });
  const opts = ["Z"];
  if (args.local)
    opts.push("");
  if (args.offset)
    opts.push(`([+-](?:[01]\\d|2[0-3]):[0-5]\\d)`);
  const timeRegex = `${time3}(?:${opts.join("|")})`;
  return new RegExp(`^${dateSource}T(?:${timeRegex})$`);
}
var cuid, cuid2, ulid, xid, ksuid, nanoid, duration, extendedDuration, guid, uuid, uuid42, uuid6, uuid7, email, html5Email, rfc5322Email, unicodeEmail, idnEmail, browserEmail, _emoji, ipv4, ipv6, cidrv4, cidrv6, base64, base64url, hostname, domain, e164, dateSource, date, string, bigint, integer, number, boolean, _null, _undefined, lowercase, uppercase;
var init_regexes = __esm({
  "node_modules/zod/v4/core/regexes.js"() {
    cuid = /^[cC][^\s-]{8,}$/;
    cuid2 = /^[0-9a-z]+$/;
    ulid = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;
    xid = /^[0-9a-vA-V]{20}$/;
    ksuid = /^[A-Za-z0-9]{27}$/;
    nanoid = /^[a-zA-Z0-9_-]{21}$/;
    duration = /^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/;
    extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    guid = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;
    uuid = (version4) => {
      if (!version4)
        return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$/;
      return new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${version4}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`);
    };
    uuid42 = /* @__PURE__ */ uuid(4);
    uuid6 = /* @__PURE__ */ uuid(6);
    uuid7 = /* @__PURE__ */ uuid(7);
    email = /^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/;
    html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    rfc5322Email = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    unicodeEmail = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u;
    idnEmail = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u;
    browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    _emoji = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/;
    cidrv4 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/;
    cidrv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    base64 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;
    base64url = /^[A-Za-z0-9_-]*$/;
    hostname = /^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/;
    domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/;
    e164 = /^\+(?:[0-9]){6,14}[0-9]$/;
    dateSource = `(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))`;
    date = /* @__PURE__ */ new RegExp(`^${dateSource}$`);
    string = (params) => {
      const regex = params ? `[\\s\\S]{${params?.minimum ?? 0},${params?.maximum ?? ""}}` : `[\\s\\S]*`;
      return new RegExp(`^${regex}$`);
    };
    bigint = /^\d+n?$/;
    integer = /^\d+$/;
    number = /^-?\d+(?:\.\d+)?/i;
    boolean = /true|false/i;
    _null = /null/i;
    _undefined = /undefined/i;
    lowercase = /^[^A-Z]*$/;
    uppercase = /^[^a-z]*$/;
  }
});

// node_modules/zod/v4/core/checks.js
function handleCheckPropertyResult(result, payload, property) {
  if (result.issues.length) {
    payload.issues.push(...prefixIssues(property, result.issues));
  }
}
var $ZodCheck, numericOriginMap, $ZodCheckLessThan, $ZodCheckGreaterThan, $ZodCheckMultipleOf, $ZodCheckNumberFormat, $ZodCheckBigIntFormat, $ZodCheckMaxSize, $ZodCheckMinSize, $ZodCheckSizeEquals, $ZodCheckMaxLength, $ZodCheckMinLength, $ZodCheckLengthEquals, $ZodCheckStringFormat, $ZodCheckRegex, $ZodCheckLowerCase, $ZodCheckUpperCase, $ZodCheckIncludes, $ZodCheckStartsWith, $ZodCheckEndsWith, $ZodCheckProperty, $ZodCheckMimeType, $ZodCheckOverwrite;
var init_checks = __esm({
  "node_modules/zod/v4/core/checks.js"() {
    init_core();
    init_regexes();
    init_util();
    $ZodCheck = /* @__PURE__ */ $constructor("$ZodCheck", (inst, def) => {
      var _a;
      inst._zod ?? (inst._zod = {});
      inst._zod.def = def;
      (_a = inst._zod).onattach ?? (_a.onattach = []);
    });
    numericOriginMap = {
      number: "number",
      bigint: "bigint",
      object: "date"
    };
    $ZodCheckLessThan = /* @__PURE__ */ $constructor("$ZodCheckLessThan", (inst, def) => {
      $ZodCheck.init(inst, def);
      const origin = numericOriginMap[typeof def.value];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        const curr = (def.inclusive ? bag.maximum : bag.exclusiveMaximum) ?? Number.POSITIVE_INFINITY;
        if (def.value < curr) {
          if (def.inclusive)
            bag.maximum = def.value;
          else
            bag.exclusiveMaximum = def.value;
        }
      });
      inst._zod.check = (payload) => {
        if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {
          return;
        }
        payload.issues.push({
          origin,
          code: "too_big",
          maximum: def.value,
          input: payload.value,
          inclusive: def.inclusive,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckGreaterThan = /* @__PURE__ */ $constructor("$ZodCheckGreaterThan", (inst, def) => {
      $ZodCheck.init(inst, def);
      const origin = numericOriginMap[typeof def.value];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        const curr = (def.inclusive ? bag.minimum : bag.exclusiveMinimum) ?? Number.NEGATIVE_INFINITY;
        if (def.value > curr) {
          if (def.inclusive)
            bag.minimum = def.value;
          else
            bag.exclusiveMinimum = def.value;
        }
      });
      inst._zod.check = (payload) => {
        if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {
          return;
        }
        payload.issues.push({
          origin,
          code: "too_small",
          minimum: def.value,
          input: payload.value,
          inclusive: def.inclusive,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMultipleOf = /* @__PURE__ */ $constructor("$ZodCheckMultipleOf", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        var _a;
        (_a = inst2._zod.bag).multipleOf ?? (_a.multipleOf = def.value);
      });
      inst._zod.check = (payload) => {
        if (typeof payload.value !== typeof def.value)
          throw new Error("Cannot mix number and bigint in multiple_of check.");
        const isMultiple = typeof payload.value === "bigint" ? payload.value % def.value === BigInt(0) : floatSafeRemainder(payload.value, def.value) === 0;
        if (isMultiple)
          return;
        payload.issues.push({
          origin: typeof payload.value,
          code: "not_multiple_of",
          divisor: def.value,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckNumberFormat = /* @__PURE__ */ $constructor("$ZodCheckNumberFormat", (inst, def) => {
      $ZodCheck.init(inst, def);
      def.format = def.format || "float64";
      const isInt = def.format?.includes("int");
      const origin = isInt ? "int" : "number";
      const [minimum, maximum] = NUMBER_FORMAT_RANGES[def.format];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        bag.minimum = minimum;
        bag.maximum = maximum;
        if (isInt)
          bag.pattern = integer;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        if (isInt) {
          if (!Number.isInteger(input)) {
            payload.issues.push({
              expected: origin,
              format: def.format,
              code: "invalid_type",
              continue: false,
              input,
              inst
            });
            return;
          }
          if (!Number.isSafeInteger(input)) {
            if (input > 0) {
              payload.issues.push({
                input,
                code: "too_big",
                maximum: Number.MAX_SAFE_INTEGER,
                note: "Integers must be within the safe integer range.",
                inst,
                origin,
                continue: !def.abort
              });
            } else {
              payload.issues.push({
                input,
                code: "too_small",
                minimum: Number.MIN_SAFE_INTEGER,
                note: "Integers must be within the safe integer range.",
                inst,
                origin,
                continue: !def.abort
              });
            }
            return;
          }
        }
        if (input < minimum) {
          payload.issues.push({
            origin: "number",
            input,
            code: "too_small",
            minimum,
            inclusive: true,
            inst,
            continue: !def.abort
          });
        }
        if (input > maximum) {
          payload.issues.push({
            origin: "number",
            input,
            code: "too_big",
            maximum,
            inst
          });
        }
      };
    });
    $ZodCheckBigIntFormat = /* @__PURE__ */ $constructor("$ZodCheckBigIntFormat", (inst, def) => {
      $ZodCheck.init(inst, def);
      const [minimum, maximum] = BIGINT_FORMAT_RANGES[def.format];
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        bag.minimum = minimum;
        bag.maximum = maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        if (input < minimum) {
          payload.issues.push({
            origin: "bigint",
            input,
            code: "too_small",
            minimum,
            inclusive: true,
            inst,
            continue: !def.abort
          });
        }
        if (input > maximum) {
          payload.issues.push({
            origin: "bigint",
            input,
            code: "too_big",
            maximum,
            inst
          });
        }
      };
    });
    $ZodCheckMaxSize = /* @__PURE__ */ $constructor("$ZodCheckMaxSize", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
        if (def.maximum < curr)
          inst2._zod.bag.maximum = def.maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size <= def.maximum)
          return;
        payload.issues.push({
          origin: getSizableOrigin(input),
          code: "too_big",
          maximum: def.maximum,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMinSize = /* @__PURE__ */ $constructor("$ZodCheckMinSize", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
        if (def.minimum > curr)
          inst2._zod.bag.minimum = def.minimum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size >= def.minimum)
          return;
        payload.issues.push({
          origin: getSizableOrigin(input),
          code: "too_small",
          minimum: def.minimum,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckSizeEquals = /* @__PURE__ */ $constructor("$ZodCheckSizeEquals", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.size !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.minimum = def.size;
        bag.maximum = def.size;
        bag.size = def.size;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const size = input.size;
        if (size === def.size)
          return;
        const tooBig = size > def.size;
        payload.issues.push({
          origin: getSizableOrigin(input),
          ...tooBig ? { code: "too_big", maximum: def.size } : { code: "too_small", minimum: def.size },
          inclusive: true,
          exact: true,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMaxLength = /* @__PURE__ */ $constructor("$ZodCheckMaxLength", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.maximum ?? Number.POSITIVE_INFINITY;
        if (def.maximum < curr)
          inst2._zod.bag.maximum = def.maximum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length <= def.maximum)
          return;
        const origin = getLengthableOrigin(input);
        payload.issues.push({
          origin,
          code: "too_big",
          maximum: def.maximum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckMinLength = /* @__PURE__ */ $constructor("$ZodCheckMinLength", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const curr = inst2._zod.bag.minimum ?? Number.NEGATIVE_INFINITY;
        if (def.minimum > curr)
          inst2._zod.bag.minimum = def.minimum;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length >= def.minimum)
          return;
        const origin = getLengthableOrigin(input);
        payload.issues.push({
          origin,
          code: "too_small",
          minimum: def.minimum,
          inclusive: true,
          input,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckLengthEquals = /* @__PURE__ */ $constructor("$ZodCheckLengthEquals", (inst, def) => {
      var _a;
      $ZodCheck.init(inst, def);
      (_a = inst._zod.def).when ?? (_a.when = (payload) => {
        const val = payload.value;
        return !nullish(val) && val.length !== void 0;
      });
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.minimum = def.length;
        bag.maximum = def.length;
        bag.length = def.length;
      });
      inst._zod.check = (payload) => {
        const input = payload.value;
        const length = input.length;
        if (length === def.length)
          return;
        const origin = getLengthableOrigin(input);
        const tooBig = length > def.length;
        payload.issues.push({
          origin,
          ...tooBig ? { code: "too_big", maximum: def.length } : { code: "too_small", minimum: def.length },
          inclusive: true,
          exact: true,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckStringFormat = /* @__PURE__ */ $constructor("$ZodCheckStringFormat", (inst, def) => {
      var _a, _b;
      $ZodCheck.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = def.format;
        if (def.pattern) {
          bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
          bag.patterns.add(def.pattern);
        }
      });
      if (def.pattern)
        (_a = inst._zod).check ?? (_a.check = (payload) => {
          def.pattern.lastIndex = 0;
          if (def.pattern.test(payload.value))
            return;
          payload.issues.push({
            origin: "string",
            code: "invalid_format",
            format: def.format,
            input: payload.value,
            ...def.pattern ? { pattern: def.pattern.toString() } : {},
            inst,
            continue: !def.abort
          });
        });
      else
        (_b = inst._zod).check ?? (_b.check = () => {
        });
    });
    $ZodCheckRegex = /* @__PURE__ */ $constructor("$ZodCheckRegex", (inst, def) => {
      $ZodCheckStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        def.pattern.lastIndex = 0;
        if (def.pattern.test(payload.value))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "regex",
          input: payload.value,
          pattern: def.pattern.toString(),
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckLowerCase = /* @__PURE__ */ $constructor("$ZodCheckLowerCase", (inst, def) => {
      def.pattern ?? (def.pattern = lowercase);
      $ZodCheckStringFormat.init(inst, def);
    });
    $ZodCheckUpperCase = /* @__PURE__ */ $constructor("$ZodCheckUpperCase", (inst, def) => {
      def.pattern ?? (def.pattern = uppercase);
      $ZodCheckStringFormat.init(inst, def);
    });
    $ZodCheckIncludes = /* @__PURE__ */ $constructor("$ZodCheckIncludes", (inst, def) => {
      $ZodCheck.init(inst, def);
      const escapedRegex = escapeRegex(def.includes);
      const pattern = new RegExp(typeof def.position === "number" ? `^.{${def.position}}${escapedRegex}` : escapedRegex);
      def.pattern = pattern;
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.includes(def.includes, def.position))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "includes",
          includes: def.includes,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckStartsWith = /* @__PURE__ */ $constructor("$ZodCheckStartsWith", (inst, def) => {
      $ZodCheck.init(inst, def);
      const pattern = new RegExp(`^${escapeRegex(def.prefix)}.*`);
      def.pattern ?? (def.pattern = pattern);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.startsWith(def.prefix))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "starts_with",
          prefix: def.prefix,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckEndsWith = /* @__PURE__ */ $constructor("$ZodCheckEndsWith", (inst, def) => {
      $ZodCheck.init(inst, def);
      const pattern = new RegExp(`.*${escapeRegex(def.suffix)}$`);
      def.pattern ?? (def.pattern = pattern);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.patterns ?? (bag.patterns = /* @__PURE__ */ new Set());
        bag.patterns.add(pattern);
      });
      inst._zod.check = (payload) => {
        if (payload.value.endsWith(def.suffix))
          return;
        payload.issues.push({
          origin: "string",
          code: "invalid_format",
          format: "ends_with",
          suffix: def.suffix,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckProperty = /* @__PURE__ */ $constructor("$ZodCheckProperty", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.check = (payload) => {
        const result = def.schema._zod.run({
          value: payload.value[def.property],
          issues: []
        }, {});
        if (result instanceof Promise) {
          return result.then((result2) => handleCheckPropertyResult(result2, payload, def.property));
        }
        handleCheckPropertyResult(result, payload, def.property);
        return;
      };
    });
    $ZodCheckMimeType = /* @__PURE__ */ $constructor("$ZodCheckMimeType", (inst, def) => {
      $ZodCheck.init(inst, def);
      const mimeSet = new Set(def.mime);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.mime = def.mime;
      });
      inst._zod.check = (payload) => {
        if (mimeSet.has(payload.value.type))
          return;
        payload.issues.push({
          code: "invalid_value",
          values: def.mime,
          input: payload.value.type,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCheckOverwrite = /* @__PURE__ */ $constructor("$ZodCheckOverwrite", (inst, def) => {
      $ZodCheck.init(inst, def);
      inst._zod.check = (payload) => {
        payload.value = def.tx(payload.value);
      };
    });
  }
});

// node_modules/zod/v4/core/doc.js
var Doc;
var init_doc = __esm({
  "node_modules/zod/v4/core/doc.js"() {
    Doc = class {
      constructor(args = []) {
        this.content = [];
        this.indent = 0;
        if (this)
          this.args = args;
      }
      indented(fn) {
        this.indent += 1;
        fn(this);
        this.indent -= 1;
      }
      write(arg) {
        if (typeof arg === "function") {
          arg(this, { execution: "sync" });
          arg(this, { execution: "async" });
          return;
        }
        const content3 = arg;
        const lines = content3.split("\n").filter((x3) => x3);
        const minIndent = Math.min(...lines.map((x3) => x3.length - x3.trimStart().length));
        const dedented = lines.map((x3) => x3.slice(minIndent)).map((x3) => " ".repeat(this.indent * 2) + x3);
        for (const line of dedented) {
          this.content.push(line);
        }
      }
      compile() {
        const F3 = Function;
        const args = this?.args;
        const content3 = this?.content ?? [``];
        const lines = [...content3.map((x3) => `  ${x3}`)];
        return new F3(...args, lines.join("\n"));
      }
    };
  }
});

// node_modules/zod/v4/core/versions.js
var version3;
var init_versions = __esm({
  "node_modules/zod/v4/core/versions.js"() {
    version3 = {
      major: 4,
      minor: 0,
      patch: 17
    };
  }
});

// node_modules/zod/v4/core/schemas.js
function isValidBase64(data2) {
  if (data2 === "")
    return true;
  if (data2.length % 4 !== 0)
    return false;
  try {
    atob(data2);
    return true;
  } catch {
    return false;
  }
}
function isValidBase64URL(data2) {
  if (!base64url.test(data2))
    return false;
  const base643 = data2.replace(/[-_]/g, (c3) => c3 === "-" ? "+" : "/");
  const padded = base643.padEnd(Math.ceil(base643.length / 4) * 4, "=");
  return isValidBase64(padded);
}
function isValidJWT(token, algorithm = null) {
  try {
    const tokensParts = token.split(".");
    if (tokensParts.length !== 3)
      return false;
    const [header] = tokensParts;
    if (!header)
      return false;
    const parsedHeader = JSON.parse(atob(header));
    if ("typ" in parsedHeader && parsedHeader?.typ !== "JWT")
      return false;
    if (!parsedHeader.alg)
      return false;
    if (algorithm && (!("alg" in parsedHeader) || parsedHeader.alg !== algorithm))
      return false;
    return true;
  } catch {
    return false;
  }
}
function handleArrayResult(result, final, index2) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index2, result.issues));
  }
  final.value[index2] = result.value;
}
function handlePropertyResult(result, final, key, input) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(key, result.issues));
  }
  if (result.value === void 0) {
    if (key in input) {
      final.value[key] = void 0;
    }
  } else {
    final.value[key] = result.value;
  }
}
function handleUnionResults(results, final, inst, ctx) {
  for (const result of results) {
    if (result.issues.length === 0) {
      final.value = result.value;
      return final;
    }
  }
  const nonaborted = results.filter((r3) => !aborted(r3));
  if (nonaborted.length === 1) {
    final.value = nonaborted[0].value;
    return nonaborted[0];
  }
  final.issues.push({
    code: "invalid_union",
    input: final.value,
    inst,
    errors: results.map((result) => result.issues.map((iss) => finalizeIssue(iss, ctx, config())))
  });
  return final;
}
function mergeValues(a3, b3) {
  if (a3 === b3) {
    return { valid: true, data: a3 };
  }
  if (a3 instanceof Date && b3 instanceof Date && +a3 === +b3) {
    return { valid: true, data: a3 };
  }
  if (isPlainObject2(a3) && isPlainObject2(b3)) {
    const bKeys = Object.keys(b3);
    const sharedKeys = Object.keys(a3).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a3, ...b3 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a3[key], b3[key]);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [key, ...sharedValue.mergeErrorPath]
        };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  }
  if (Array.isArray(a3) && Array.isArray(b3)) {
    if (a3.length !== b3.length) {
      return { valid: false, mergeErrorPath: [] };
    }
    const newArray = [];
    for (let index2 = 0; index2 < a3.length; index2++) {
      const itemA = a3[index2];
      const itemB = b3[index2];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return {
          valid: false,
          mergeErrorPath: [index2, ...sharedValue.mergeErrorPath]
        };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  }
  return { valid: false, mergeErrorPath: [] };
}
function handleIntersectionResults(result, left, right) {
  if (left.issues.length) {
    result.issues.push(...left.issues);
  }
  if (right.issues.length) {
    result.issues.push(...right.issues);
  }
  if (aborted(result))
    return result;
  const merged = mergeValues(left.value, right.value);
  if (!merged.valid) {
    throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(merged.mergeErrorPath)}`);
  }
  result.value = merged.data;
  return result;
}
function handleTupleResult(result, final, index2) {
  if (result.issues.length) {
    final.issues.push(...prefixIssues(index2, result.issues));
  }
  final.value[index2] = result.value;
}
function handleMapResult(keyResult, valueResult, final, key, input, inst, ctx) {
  if (keyResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, keyResult.issues));
    } else {
      final.issues.push({
        code: "invalid_key",
        origin: "map",
        input,
        inst,
        issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  if (valueResult.issues.length) {
    if (propertyKeyTypes.has(typeof key)) {
      final.issues.push(...prefixIssues(key, valueResult.issues));
    } else {
      final.issues.push({
        origin: "map",
        code: "invalid_element",
        input,
        inst,
        key,
        issues: valueResult.issues.map((iss) => finalizeIssue(iss, ctx, config()))
      });
    }
  }
  final.value.set(keyResult.value, valueResult.value);
}
function handleSetResult(result, final) {
  if (result.issues.length) {
    final.issues.push(...result.issues);
  }
  final.value.add(result.value);
}
function handleOptionalResult(result, input) {
  if (result.issues.length && input === void 0) {
    return { issues: [], value: void 0 };
  }
  return result;
}
function handleDefaultResult(payload, def) {
  if (payload.value === void 0) {
    payload.value = def.defaultValue;
  }
  return payload;
}
function handleNonOptionalResult(payload, inst) {
  if (!payload.issues.length && payload.value === void 0) {
    payload.issues.push({
      code: "invalid_type",
      expected: "nonoptional",
      input: payload.value,
      inst
    });
  }
  return payload;
}
function handlePipeResult(left, def, ctx) {
  if (left.issues.length) {
    return left;
  }
  return def.out._zod.run({ value: left.value, issues: left.issues }, ctx);
}
function handleReadonlyResult(payload) {
  payload.value = Object.freeze(payload.value);
  return payload;
}
function handleRefineResult(result, payload, input, inst) {
  if (!result) {
    const _iss = {
      code: "custom",
      input,
      inst,
      // incorporates params.error into issue reporting
      path: [...inst._zod.def.path ?? []],
      // incorporates params.error into issue reporting
      continue: !inst._zod.def.abort
      // params: inst._zod.def.params,
    };
    if (inst._zod.def.params)
      _iss.params = inst._zod.def.params;
    payload.issues.push(issue(_iss));
  }
}
var $ZodType, $ZodString, $ZodStringFormat, $ZodGUID, $ZodUUID, $ZodEmail, $ZodURL, $ZodEmoji, $ZodNanoID, $ZodCUID, $ZodCUID2, $ZodULID, $ZodXID, $ZodKSUID, $ZodISODateTime, $ZodISODate, $ZodISOTime, $ZodISODuration, $ZodIPv4, $ZodIPv6, $ZodCIDRv4, $ZodCIDRv6, $ZodBase64, $ZodBase64URL, $ZodE164, $ZodJWT, $ZodCustomStringFormat, $ZodNumber, $ZodNumberFormat, $ZodBoolean, $ZodBigInt, $ZodBigIntFormat, $ZodSymbol, $ZodUndefined, $ZodNull, $ZodAny, $ZodUnknown, $ZodNever, $ZodVoid, $ZodDate, $ZodArray, $ZodObject, $ZodUnion, $ZodDiscriminatedUnion, $ZodIntersection, $ZodTuple, $ZodRecord, $ZodMap, $ZodSet, $ZodEnum, $ZodLiteral, $ZodFile, $ZodTransform, $ZodOptional, $ZodNullable, $ZodDefault, $ZodPrefault, $ZodNonOptional, $ZodSuccess, $ZodCatch, $ZodNaN, $ZodPipe, $ZodReadonly, $ZodTemplateLiteral, $ZodPromise, $ZodLazy, $ZodCustom;
var init_schemas = __esm({
  "node_modules/zod/v4/core/schemas.js"() {
    init_checks();
    init_core();
    init_doc();
    init_parse();
    init_regexes();
    init_util();
    init_versions();
    init_util();
    $ZodType = /* @__PURE__ */ $constructor("$ZodType", (inst, def) => {
      var _a;
      inst ?? (inst = {});
      inst._zod.def = def;
      inst._zod.bag = inst._zod.bag || {};
      inst._zod.version = version3;
      const checks2 = [...inst._zod.def.checks ?? []];
      if (inst._zod.traits.has("$ZodCheck")) {
        checks2.unshift(inst);
      }
      for (const ch of checks2) {
        for (const fn of ch._zod.onattach) {
          fn(inst);
        }
      }
      if (checks2.length === 0) {
        (_a = inst._zod).deferred ?? (_a.deferred = []);
        inst._zod.deferred?.push(() => {
          inst._zod.run = inst._zod.parse;
        });
      } else {
        const runChecks = (payload, checks3, ctx) => {
          let isAborted = aborted(payload);
          let asyncResult;
          for (const ch of checks3) {
            if (ch._zod.def.when) {
              const shouldRun = ch._zod.def.when(payload);
              if (!shouldRun)
                continue;
            } else if (isAborted) {
              continue;
            }
            const currLen = payload.issues.length;
            const _3 = ch._zod.check(payload);
            if (_3 instanceof Promise && ctx?.async === false) {
              throw new $ZodAsyncError();
            }
            if (asyncResult || _3 instanceof Promise) {
              asyncResult = (asyncResult ?? Promise.resolve()).then(async () => {
                await _3;
                const nextLen = payload.issues.length;
                if (nextLen === currLen)
                  return;
                if (!isAborted)
                  isAborted = aborted(payload, currLen);
              });
            } else {
              const nextLen = payload.issues.length;
              if (nextLen === currLen)
                continue;
              if (!isAborted)
                isAborted = aborted(payload, currLen);
            }
          }
          if (asyncResult) {
            return asyncResult.then(() => {
              return payload;
            });
          }
          return payload;
        };
        inst._zod.run = (payload, ctx) => {
          const result = inst._zod.parse(payload, ctx);
          if (result instanceof Promise) {
            if (ctx.async === false)
              throw new $ZodAsyncError();
            return result.then((result2) => runChecks(result2, checks2, ctx));
          }
          return runChecks(result, checks2, ctx);
        };
      }
      inst["~standard"] = {
        validate: (value) => {
          try {
            const r3 = safeParse(inst, value);
            return r3.success ? { value: r3.data } : { issues: r3.error?.issues };
          } catch (_3) {
            return safeParseAsync(inst, value).then((r3) => r3.success ? { value: r3.data } : { issues: r3.error?.issues });
          }
        },
        vendor: "zod",
        version: 1
      };
    });
    $ZodString = /* @__PURE__ */ $constructor("$ZodString", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = [...inst?._zod.bag?.patterns ?? []].pop() ?? string(inst._zod.bag);
      inst._zod.parse = (payload, _3) => {
        if (def.coerce)
          try {
            payload.value = String(payload.value);
          } catch (_4) {
          }
        if (typeof payload.value === "string")
          return payload;
        payload.issues.push({
          expected: "string",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodStringFormat = /* @__PURE__ */ $constructor("$ZodStringFormat", (inst, def) => {
      $ZodCheckStringFormat.init(inst, def);
      $ZodString.init(inst, def);
    });
    $ZodGUID = /* @__PURE__ */ $constructor("$ZodGUID", (inst, def) => {
      def.pattern ?? (def.pattern = guid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodUUID = /* @__PURE__ */ $constructor("$ZodUUID", (inst, def) => {
      if (def.version) {
        const versionMap = {
          v1: 1,
          v2: 2,
          v3: 3,
          v4: 4,
          v5: 5,
          v6: 6,
          v7: 7,
          v8: 8
        };
        const v3 = versionMap[def.version];
        if (v3 === void 0)
          throw new Error(`Invalid UUID version: "${def.version}"`);
        def.pattern ?? (def.pattern = uuid(v3));
      } else
        def.pattern ?? (def.pattern = uuid());
      $ZodStringFormat.init(inst, def);
    });
    $ZodEmail = /* @__PURE__ */ $constructor("$ZodEmail", (inst, def) => {
      def.pattern ?? (def.pattern = email);
      $ZodStringFormat.init(inst, def);
    });
    $ZodURL = /* @__PURE__ */ $constructor("$ZodURL", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        try {
          const trimmed = payload.value.trim();
          const url2 = new URL(trimmed);
          if (def.hostname) {
            def.hostname.lastIndex = 0;
            if (!def.hostname.test(url2.hostname)) {
              payload.issues.push({
                code: "invalid_format",
                format: "url",
                note: "Invalid hostname",
                pattern: hostname.source,
                input: payload.value,
                inst,
                continue: !def.abort
              });
            }
          }
          if (def.protocol) {
            def.protocol.lastIndex = 0;
            if (!def.protocol.test(url2.protocol.endsWith(":") ? url2.protocol.slice(0, -1) : url2.protocol)) {
              payload.issues.push({
                code: "invalid_format",
                format: "url",
                note: "Invalid protocol",
                pattern: def.protocol.source,
                input: payload.value,
                inst,
                continue: !def.abort
              });
            }
          }
          if (def.normalize) {
            payload.value = url2.href;
          } else {
            payload.value = trimmed;
          }
          return;
        } catch (_3) {
          payload.issues.push({
            code: "invalid_format",
            format: "url",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    $ZodEmoji = /* @__PURE__ */ $constructor("$ZodEmoji", (inst, def) => {
      def.pattern ?? (def.pattern = emoji());
      $ZodStringFormat.init(inst, def);
    });
    $ZodNanoID = /* @__PURE__ */ $constructor("$ZodNanoID", (inst, def) => {
      def.pattern ?? (def.pattern = nanoid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCUID = /* @__PURE__ */ $constructor("$ZodCUID", (inst, def) => {
      def.pattern ?? (def.pattern = cuid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCUID2 = /* @__PURE__ */ $constructor("$ZodCUID2", (inst, def) => {
      def.pattern ?? (def.pattern = cuid2);
      $ZodStringFormat.init(inst, def);
    });
    $ZodULID = /* @__PURE__ */ $constructor("$ZodULID", (inst, def) => {
      def.pattern ?? (def.pattern = ulid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodXID = /* @__PURE__ */ $constructor("$ZodXID", (inst, def) => {
      def.pattern ?? (def.pattern = xid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodKSUID = /* @__PURE__ */ $constructor("$ZodKSUID", (inst, def) => {
      def.pattern ?? (def.pattern = ksuid);
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODateTime = /* @__PURE__ */ $constructor("$ZodISODateTime", (inst, def) => {
      def.pattern ?? (def.pattern = datetime(def));
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODate = /* @__PURE__ */ $constructor("$ZodISODate", (inst, def) => {
      def.pattern ?? (def.pattern = date);
      $ZodStringFormat.init(inst, def);
    });
    $ZodISOTime = /* @__PURE__ */ $constructor("$ZodISOTime", (inst, def) => {
      def.pattern ?? (def.pattern = time(def));
      $ZodStringFormat.init(inst, def);
    });
    $ZodISODuration = /* @__PURE__ */ $constructor("$ZodISODuration", (inst, def) => {
      def.pattern ?? (def.pattern = duration);
      $ZodStringFormat.init(inst, def);
    });
    $ZodIPv4 = /* @__PURE__ */ $constructor("$ZodIPv4", (inst, def) => {
      def.pattern ?? (def.pattern = ipv4);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = `ipv4`;
      });
    });
    $ZodIPv6 = /* @__PURE__ */ $constructor("$ZodIPv6", (inst, def) => {
      def.pattern ?? (def.pattern = ipv6);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        const bag = inst2._zod.bag;
        bag.format = `ipv6`;
      });
      inst._zod.check = (payload) => {
        try {
          new URL(`http://[${payload.value}]`);
        } catch {
          payload.issues.push({
            code: "invalid_format",
            format: "ipv6",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    $ZodCIDRv4 = /* @__PURE__ */ $constructor("$ZodCIDRv4", (inst, def) => {
      def.pattern ?? (def.pattern = cidrv4);
      $ZodStringFormat.init(inst, def);
    });
    $ZodCIDRv6 = /* @__PURE__ */ $constructor("$ZodCIDRv6", (inst, def) => {
      def.pattern ?? (def.pattern = cidrv6);
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        const [address, prefix] = payload.value.split("/");
        try {
          if (!prefix)
            throw new Error();
          const prefixNum = Number(prefix);
          if (`${prefixNum}` !== prefix)
            throw new Error();
          if (prefixNum < 0 || prefixNum > 128)
            throw new Error();
          new URL(`http://[${address}]`);
        } catch {
          payload.issues.push({
            code: "invalid_format",
            format: "cidrv6",
            input: payload.value,
            inst,
            continue: !def.abort
          });
        }
      };
    });
    $ZodBase64 = /* @__PURE__ */ $constructor("$ZodBase64", (inst, def) => {
      def.pattern ?? (def.pattern = base64);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.contentEncoding = "base64";
      });
      inst._zod.check = (payload) => {
        if (isValidBase64(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "base64",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodBase64URL = /* @__PURE__ */ $constructor("$ZodBase64URL", (inst, def) => {
      def.pattern ?? (def.pattern = base64url);
      $ZodStringFormat.init(inst, def);
      inst._zod.onattach.push((inst2) => {
        inst2._zod.bag.contentEncoding = "base64url";
      });
      inst._zod.check = (payload) => {
        if (isValidBase64URL(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "base64url",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodE164 = /* @__PURE__ */ $constructor("$ZodE164", (inst, def) => {
      def.pattern ?? (def.pattern = e164);
      $ZodStringFormat.init(inst, def);
    });
    $ZodJWT = /* @__PURE__ */ $constructor("$ZodJWT", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        if (isValidJWT(payload.value, def.alg))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: "jwt",
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodCustomStringFormat = /* @__PURE__ */ $constructor("$ZodCustomStringFormat", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      inst._zod.check = (payload) => {
        if (def.fn(payload.value))
          return;
        payload.issues.push({
          code: "invalid_format",
          format: def.format,
          input: payload.value,
          inst,
          continue: !def.abort
        });
      };
    });
    $ZodNumber = /* @__PURE__ */ $constructor("$ZodNumber", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = inst._zod.bag.pattern ?? number;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = Number(payload.value);
          } catch (_3) {
          }
        const input = payload.value;
        if (typeof input === "number" && !Number.isNaN(input) && Number.isFinite(input)) {
          return payload;
        }
        const received = typeof input === "number" ? Number.isNaN(input) ? "NaN" : !Number.isFinite(input) ? "Infinity" : void 0 : void 0;
        payload.issues.push({
          expected: "number",
          code: "invalid_type",
          input,
          inst,
          ...received ? { received } : {}
        });
        return payload;
      };
    });
    $ZodNumberFormat = /* @__PURE__ */ $constructor("$ZodNumber", (inst, def) => {
      $ZodCheckNumberFormat.init(inst, def);
      $ZodNumber.init(inst, def);
    });
    $ZodBoolean = /* @__PURE__ */ $constructor("$ZodBoolean", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = boolean;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = Boolean(payload.value);
          } catch (_3) {
          }
        const input = payload.value;
        if (typeof input === "boolean")
          return payload;
        payload.issues.push({
          expected: "boolean",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodBigInt = /* @__PURE__ */ $constructor("$ZodBigInt", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = bigint;
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce)
          try {
            payload.value = BigInt(payload.value);
          } catch (_3) {
          }
        if (typeof payload.value === "bigint")
          return payload;
        payload.issues.push({
          expected: "bigint",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodBigIntFormat = /* @__PURE__ */ $constructor("$ZodBigInt", (inst, def) => {
      $ZodCheckBigIntFormat.init(inst, def);
      $ZodBigInt.init(inst, def);
    });
    $ZodSymbol = /* @__PURE__ */ $constructor("$ZodSymbol", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "symbol")
          return payload;
        payload.issues.push({
          expected: "symbol",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodUndefined = /* @__PURE__ */ $constructor("$ZodUndefined", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = _undefined;
      inst._zod.values = /* @__PURE__ */ new Set([void 0]);
      inst._zod.optin = "optional";
      inst._zod.optout = "optional";
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "undefined")
          return payload;
        payload.issues.push({
          expected: "undefined",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodNull = /* @__PURE__ */ $constructor("$ZodNull", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.pattern = _null;
      inst._zod.values = /* @__PURE__ */ new Set([null]);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (input === null)
          return payload;
        payload.issues.push({
          expected: "null",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodAny = /* @__PURE__ */ $constructor("$ZodAny", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload) => payload;
    });
    $ZodUnknown = /* @__PURE__ */ $constructor("$ZodUnknown", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload) => payload;
    });
    $ZodNever = /* @__PURE__ */ $constructor("$ZodNever", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        payload.issues.push({
          expected: "never",
          code: "invalid_type",
          input: payload.value,
          inst
        });
        return payload;
      };
    });
    $ZodVoid = /* @__PURE__ */ $constructor("$ZodVoid", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (typeof input === "undefined")
          return payload;
        payload.issues.push({
          expected: "void",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodDate = /* @__PURE__ */ $constructor("$ZodDate", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        if (def.coerce) {
          try {
            payload.value = new Date(payload.value);
          } catch (_err) {
          }
        }
        const input = payload.value;
        const isDate = input instanceof Date;
        const isValidDate = isDate && !Number.isNaN(input.getTime());
        if (isValidDate)
          return payload;
        payload.issues.push({
          expected: "date",
          code: "invalid_type",
          input,
          ...isDate ? { received: "Invalid Date" } : {},
          inst
        });
        return payload;
      };
    });
    $ZodArray = /* @__PURE__ */ $constructor("$ZodArray", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!Array.isArray(input)) {
          payload.issues.push({
            expected: "array",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        payload.value = Array(input.length);
        const proms = [];
        for (let i3 = 0; i3 < input.length; i3++) {
          const item = input[i3];
          const result = def.element._zod.run({
            value: item,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleArrayResult(result2, payload, i3)));
          } else {
            handleArrayResult(result, payload, i3);
          }
        }
        if (proms.length) {
          return Promise.all(proms).then(() => payload);
        }
        return payload;
      };
    });
    $ZodObject = /* @__PURE__ */ $constructor("$ZodObject", (inst, def) => {
      $ZodType.init(inst, def);
      const _normalized = cached(() => {
        const keys2 = Object.keys(def.shape);
        for (const k3 of keys2) {
          if (!def.shape[k3]._zod.traits.has("$ZodType")) {
            throw new Error(`Invalid element at key "${k3}": expected a Zod schema`);
          }
        }
        const okeys = optionalKeys(def.shape);
        return {
          shape: def.shape,
          keys: keys2,
          keySet: new Set(keys2),
          numKeys: keys2.length,
          optionalKeys: new Set(okeys)
        };
      });
      defineLazy(inst._zod, "propValues", () => {
        const shape = def.shape;
        const propValues = {};
        for (const key in shape) {
          const field = shape[key]._zod;
          if (field.values) {
            propValues[key] ?? (propValues[key] = /* @__PURE__ */ new Set());
            for (const v3 of field.values)
              propValues[key].add(v3);
          }
        }
        return propValues;
      });
      const generateFastpass = (shape) => {
        const doc = new Doc(["shape", "payload", "ctx"]);
        const normalized = _normalized.value;
        const parseStr = (key) => {
          const k3 = esc(key);
          return `shape[${k3}]._zod.run({ value: input[${k3}], issues: [] }, ctx)`;
        };
        doc.write(`const input = payload.value;`);
        const ids = /* @__PURE__ */ Object.create(null);
        let counter = 0;
        for (const key of normalized.keys) {
          ids[key] = `key_${counter++}`;
        }
        doc.write(`const newResult = {}`);
        for (const key of normalized.keys) {
          const id = ids[key];
          const k3 = esc(key);
          doc.write(`const ${id} = ${parseStr(key)};`);
          doc.write(`
        if (${id}.issues.length) {
          payload.issues = payload.issues.concat(${id}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${k3}, ...iss.path] : [${k3}]
          })));
        }
        
        if (${id}.value === undefined) {
          if (${k3} in input) {
            newResult[${k3}] = undefined;
          }
        } else {
          newResult[${k3}] = ${id}.value;
        }
      `);
        }
        doc.write(`payload.value = newResult;`);
        doc.write(`return payload;`);
        const fn = doc.compile();
        return (payload, ctx) => fn(shape, payload, ctx);
      };
      let fastpass;
      const isObject3 = isObject;
      const jit = !globalConfig.jitless;
      const allowsEval2 = allowsEval;
      const fastEnabled = jit && allowsEval2.value;
      const catchall = def.catchall;
      let value;
      inst._zod.parse = (payload, ctx) => {
        value ?? (value = _normalized.value);
        const input = payload.value;
        if (!isObject3(input)) {
          payload.issues.push({
            expected: "object",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        const proms = [];
        if (jit && fastEnabled && ctx?.async === false && ctx.jitless !== true) {
          if (!fastpass)
            fastpass = generateFastpass(def.shape);
          payload = fastpass(payload, ctx);
        } else {
          payload.value = {};
          const shape = value.shape;
          for (const key of value.keys) {
            const el = shape[key];
            const r3 = el._zod.run({ value: input[key], issues: [] }, ctx);
            if (r3 instanceof Promise) {
              proms.push(r3.then((r4) => handlePropertyResult(r4, payload, key, input)));
            } else {
              handlePropertyResult(r3, payload, key, input);
            }
          }
        }
        if (!catchall) {
          return proms.length ? Promise.all(proms).then(() => payload) : payload;
        }
        const unrecognized = [];
        const keySet = value.keySet;
        const _catchall = catchall._zod;
        const t4 = _catchall.def.type;
        for (const key of Object.keys(input)) {
          if (keySet.has(key))
            continue;
          if (t4 === "never") {
            unrecognized.push(key);
            continue;
          }
          const r3 = _catchall.run({ value: input[key], issues: [] }, ctx);
          if (r3 instanceof Promise) {
            proms.push(r3.then((r4) => handlePropertyResult(r4, payload, key, input)));
          } else {
            handlePropertyResult(r3, payload, key, input);
          }
        }
        if (unrecognized.length) {
          payload.issues.push({
            code: "unrecognized_keys",
            keys: unrecognized,
            input,
            inst
          });
        }
        if (!proms.length)
          return payload;
        return Promise.all(proms).then(() => {
          return payload;
        });
      };
    });
    $ZodUnion = /* @__PURE__ */ $constructor("$ZodUnion", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.options.some((o3) => o3._zod.optin === "optional") ? "optional" : void 0);
      defineLazy(inst._zod, "optout", () => def.options.some((o3) => o3._zod.optout === "optional") ? "optional" : void 0);
      defineLazy(inst._zod, "values", () => {
        if (def.options.every((o3) => o3._zod.values)) {
          return new Set(def.options.flatMap((option) => Array.from(option._zod.values)));
        }
        return void 0;
      });
      defineLazy(inst._zod, "pattern", () => {
        if (def.options.every((o3) => o3._zod.pattern)) {
          const patterns = def.options.map((o3) => o3._zod.pattern);
          return new RegExp(`^(${patterns.map((p3) => cleanRegex(p3.source)).join("|")})$`);
        }
        return void 0;
      });
      const single = def.options.length === 1;
      const first = def.options[0]._zod.run;
      inst._zod.parse = (payload, ctx) => {
        if (single) {
          return first(payload, ctx);
        }
        let async = false;
        const results = [];
        for (const option of def.options) {
          const result = option._zod.run({
            value: payload.value,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            results.push(result);
            async = true;
          } else {
            if (result.issues.length === 0)
              return result;
            results.push(result);
          }
        }
        if (!async)
          return handleUnionResults(results, payload, inst, ctx);
        return Promise.all(results).then((results2) => {
          return handleUnionResults(results2, payload, inst, ctx);
        });
      };
    });
    $ZodDiscriminatedUnion = /* @__PURE__ */ $constructor("$ZodDiscriminatedUnion", (inst, def) => {
      $ZodUnion.init(inst, def);
      const _super = inst._zod.parse;
      defineLazy(inst._zod, "propValues", () => {
        const propValues = {};
        for (const option of def.options) {
          const pv = option._zod.propValues;
          if (!pv || Object.keys(pv).length === 0)
            throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(option)}"`);
          for (const [k3, v3] of Object.entries(pv)) {
            if (!propValues[k3])
              propValues[k3] = /* @__PURE__ */ new Set();
            for (const val of v3) {
              propValues[k3].add(val);
            }
          }
        }
        return propValues;
      });
      const disc = cached(() => {
        const opts = def.options;
        const map2 = /* @__PURE__ */ new Map();
        for (const o3 of opts) {
          const values = o3._zod.propValues?.[def.discriminator];
          if (!values || values.size === 0)
            throw new Error(`Invalid discriminated union option at index "${def.options.indexOf(o3)}"`);
          for (const v3 of values) {
            if (map2.has(v3)) {
              throw new Error(`Duplicate discriminator value "${String(v3)}"`);
            }
            map2.set(v3, o3);
          }
        }
        return map2;
      });
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!isObject(input)) {
          payload.issues.push({
            code: "invalid_type",
            expected: "object",
            input,
            inst
          });
          return payload;
        }
        const opt = disc.value.get(input?.[def.discriminator]);
        if (opt) {
          return opt._zod.run(payload, ctx);
        }
        if (def.unionFallback) {
          return _super(payload, ctx);
        }
        payload.issues.push({
          code: "invalid_union",
          errors: [],
          note: "No matching discriminator",
          discriminator: def.discriminator,
          input,
          path: [def.discriminator],
          inst
        });
        return payload;
      };
    });
    $ZodIntersection = /* @__PURE__ */ $constructor("$ZodIntersection", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        const left = def.left._zod.run({ value: input, issues: [] }, ctx);
        const right = def.right._zod.run({ value: input, issues: [] }, ctx);
        const async = left instanceof Promise || right instanceof Promise;
        if (async) {
          return Promise.all([left, right]).then(([left2, right2]) => {
            return handleIntersectionResults(payload, left2, right2);
          });
        }
        return handleIntersectionResults(payload, left, right);
      };
    });
    $ZodTuple = /* @__PURE__ */ $constructor("$ZodTuple", (inst, def) => {
      $ZodType.init(inst, def);
      const items = def.items;
      const optStart = items.length - [...items].reverse().findIndex((item) => item._zod.optin !== "optional");
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!Array.isArray(input)) {
          payload.issues.push({
            input,
            inst,
            expected: "tuple",
            code: "invalid_type"
          });
          return payload;
        }
        payload.value = [];
        const proms = [];
        if (!def.rest) {
          const tooBig = input.length > items.length;
          const tooSmall = input.length < optStart - 1;
          if (tooBig || tooSmall) {
            payload.issues.push({
              ...tooBig ? { code: "too_big", maximum: items.length } : { code: "too_small", minimum: items.length },
              input,
              inst,
              origin: "array"
            });
            return payload;
          }
        }
        let i3 = -1;
        for (const item of items) {
          i3++;
          if (i3 >= input.length) {
            if (i3 >= optStart)
              continue;
          }
          const result = item._zod.run({
            value: input[i3],
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleTupleResult(result2, payload, i3)));
          } else {
            handleTupleResult(result, payload, i3);
          }
        }
        if (def.rest) {
          const rest = input.slice(items.length);
          for (const el of rest) {
            i3++;
            const result = def.rest._zod.run({
              value: el,
              issues: []
            }, ctx);
            if (result instanceof Promise) {
              proms.push(result.then((result2) => handleTupleResult(result2, payload, i3)));
            } else {
              handleTupleResult(result, payload, i3);
            }
          }
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    $ZodRecord = /* @__PURE__ */ $constructor("$ZodRecord", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!isPlainObject2(input)) {
          payload.issues.push({
            expected: "record",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        const proms = [];
        if (def.keyType._zod.values) {
          const values = def.keyType._zod.values;
          payload.value = {};
          for (const key of values) {
            if (typeof key === "string" || typeof key === "number" || typeof key === "symbol") {
              const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
              if (result instanceof Promise) {
                proms.push(result.then((result2) => {
                  if (result2.issues.length) {
                    payload.issues.push(...prefixIssues(key, result2.issues));
                  }
                  payload.value[key] = result2.value;
                }));
              } else {
                if (result.issues.length) {
                  payload.issues.push(...prefixIssues(key, result.issues));
                }
                payload.value[key] = result.value;
              }
            }
          }
          let unrecognized;
          for (const key in input) {
            if (!values.has(key)) {
              unrecognized = unrecognized ?? [];
              unrecognized.push(key);
            }
          }
          if (unrecognized && unrecognized.length > 0) {
            payload.issues.push({
              code: "unrecognized_keys",
              input,
              inst,
              keys: unrecognized
            });
          }
        } else {
          payload.value = {};
          for (const key of Reflect.ownKeys(input)) {
            if (key === "__proto__")
              continue;
            const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
            if (keyResult instanceof Promise) {
              throw new Error("Async schemas not supported in object keys currently");
            }
            if (keyResult.issues.length) {
              payload.issues.push({
                code: "invalid_key",
                origin: "record",
                issues: keyResult.issues.map((iss) => finalizeIssue(iss, ctx, config())),
                input: key,
                path: [key],
                inst
              });
              payload.value[keyResult.value] = keyResult.value;
              continue;
            }
            const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);
            if (result instanceof Promise) {
              proms.push(result.then((result2) => {
                if (result2.issues.length) {
                  payload.issues.push(...prefixIssues(key, result2.issues));
                }
                payload.value[keyResult.value] = result2.value;
              }));
            } else {
              if (result.issues.length) {
                payload.issues.push(...prefixIssues(key, result.issues));
              }
              payload.value[keyResult.value] = result.value;
            }
          }
        }
        if (proms.length) {
          return Promise.all(proms).then(() => payload);
        }
        return payload;
      };
    });
    $ZodMap = /* @__PURE__ */ $constructor("$ZodMap", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!(input instanceof Map)) {
          payload.issues.push({
            expected: "map",
            code: "invalid_type",
            input,
            inst
          });
          return payload;
        }
        const proms = [];
        payload.value = /* @__PURE__ */ new Map();
        for (const [key, value] of input) {
          const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);
          const valueResult = def.valueType._zod.run({ value, issues: [] }, ctx);
          if (keyResult instanceof Promise || valueResult instanceof Promise) {
            proms.push(Promise.all([keyResult, valueResult]).then(([keyResult2, valueResult2]) => {
              handleMapResult(keyResult2, valueResult2, payload, key, input, inst, ctx);
            }));
          } else {
            handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);
          }
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    $ZodSet = /* @__PURE__ */ $constructor("$ZodSet", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const input = payload.value;
        if (!(input instanceof Set)) {
          payload.issues.push({
            input,
            inst,
            expected: "set",
            code: "invalid_type"
          });
          return payload;
        }
        const proms = [];
        payload.value = /* @__PURE__ */ new Set();
        for (const item of input) {
          const result = def.valueType._zod.run({ value: item, issues: [] }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then((result2) => handleSetResult(result2, payload)));
          } else
            handleSetResult(result, payload);
        }
        if (proms.length)
          return Promise.all(proms).then(() => payload);
        return payload;
      };
    });
    $ZodEnum = /* @__PURE__ */ $constructor("$ZodEnum", (inst, def) => {
      $ZodType.init(inst, def);
      const values = getEnumValues(def.entries);
      const valuesSet = new Set(values);
      inst._zod.values = valuesSet;
      inst._zod.pattern = new RegExp(`^(${values.filter((k3) => propertyKeyTypes.has(typeof k3)).map((o3) => typeof o3 === "string" ? escapeRegex(o3) : o3.toString()).join("|")})$`);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (valuesSet.has(input)) {
          return payload;
        }
        payload.issues.push({
          code: "invalid_value",
          values,
          input,
          inst
        });
        return payload;
      };
    });
    $ZodLiteral = /* @__PURE__ */ $constructor("$ZodLiteral", (inst, def) => {
      $ZodType.init(inst, def);
      if (def.values.length === 0) {
        throw new Error("Cannot create literal schema with no valid values");
      }
      inst._zod.values = new Set(def.values);
      inst._zod.pattern = new RegExp(`^(${def.values.map((o3) => typeof o3 === "string" ? escapeRegex(o3) : o3 ? escapeRegex(o3.toString()) : String(o3)).join("|")})$`);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (inst._zod.values.has(input)) {
          return payload;
        }
        payload.issues.push({
          code: "invalid_value",
          values: def.values,
          input,
          inst
        });
        return payload;
      };
    });
    $ZodFile = /* @__PURE__ */ $constructor("$ZodFile", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const input = payload.value;
        if (input instanceof File)
          return payload;
        payload.issues.push({
          expected: "file",
          code: "invalid_type",
          input,
          inst
        });
        return payload;
      };
    });
    $ZodTransform = /* @__PURE__ */ $constructor("$ZodTransform", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        const _out = def.transform(payload.value, payload);
        if (_ctx.async) {
          const output = _out instanceof Promise ? _out : Promise.resolve(_out);
          return output.then((output2) => {
            payload.value = output2;
            return payload;
          });
        }
        if (_out instanceof Promise) {
          throw new $ZodAsyncError();
        }
        payload.value = _out;
        return payload;
      };
    });
    $ZodOptional = /* @__PURE__ */ $constructor("$ZodOptional", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      inst._zod.optout = "optional";
      defineLazy(inst._zod, "values", () => {
        return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, void 0]) : void 0;
      });
      defineLazy(inst._zod, "pattern", () => {
        const pattern = def.innerType._zod.pattern;
        return pattern ? new RegExp(`^(${cleanRegex(pattern.source)})?$`) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        if (def.innerType._zod.optin === "optional") {
          const result = def.innerType._zod.run(payload, ctx);
          if (result instanceof Promise)
            return result.then((r3) => handleOptionalResult(r3, payload.value));
          return handleOptionalResult(result, payload.value);
        }
        if (payload.value === void 0) {
          return payload;
        }
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodNullable = /* @__PURE__ */ $constructor("$ZodNullable", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      defineLazy(inst._zod, "pattern", () => {
        const pattern = def.innerType._zod.pattern;
        return pattern ? new RegExp(`^(${cleanRegex(pattern.source)}|null)$`) : void 0;
      });
      defineLazy(inst._zod, "values", () => {
        return def.innerType._zod.values ? /* @__PURE__ */ new Set([...def.innerType._zod.values, null]) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        if (payload.value === null)
          return payload;
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodDefault = /* @__PURE__ */ $constructor("$ZodDefault", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        if (payload.value === void 0) {
          payload.value = def.defaultValue;
          return payload;
        }
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => handleDefaultResult(result2, def));
        }
        return handleDefaultResult(result, def);
      };
    });
    $ZodPrefault = /* @__PURE__ */ $constructor("$ZodPrefault", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.optin = "optional";
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        if (payload.value === void 0) {
          payload.value = def.defaultValue;
        }
        return def.innerType._zod.run(payload, ctx);
      };
    });
    $ZodNonOptional = /* @__PURE__ */ $constructor("$ZodNonOptional", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "values", () => {
        const v3 = def.innerType._zod.values;
        return v3 ? new Set([...v3].filter((x3) => x3 !== void 0)) : void 0;
      });
      inst._zod.parse = (payload, ctx) => {
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => handleNonOptionalResult(result2, inst));
        }
        return handleNonOptionalResult(result, inst);
      };
    });
    $ZodSuccess = /* @__PURE__ */ $constructor("$ZodSuccess", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => {
            payload.value = result2.issues.length === 0;
            return payload;
          });
        }
        payload.value = result.issues.length === 0;
        return payload;
      };
    });
    $ZodCatch = /* @__PURE__ */ $constructor("$ZodCatch", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      inst._zod.parse = (payload, ctx) => {
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then((result2) => {
            payload.value = result2.value;
            if (result2.issues.length) {
              payload.value = def.catchValue({
                ...payload,
                error: {
                  issues: result2.issues.map((iss) => finalizeIssue(iss, ctx, config()))
                },
                input: payload.value
              });
              payload.issues = [];
            }
            return payload;
          });
        }
        payload.value = result.value;
        if (result.issues.length) {
          payload.value = def.catchValue({
            ...payload,
            error: {
              issues: result.issues.map((iss) => finalizeIssue(iss, ctx, config()))
            },
            input: payload.value
          });
          payload.issues = [];
        }
        return payload;
      };
    });
    $ZodNaN = /* @__PURE__ */ $constructor("$ZodNaN", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        if (typeof payload.value !== "number" || !Number.isNaN(payload.value)) {
          payload.issues.push({
            input: payload.value,
            inst,
            expected: "nan",
            code: "invalid_type"
          });
          return payload;
        }
        return payload;
      };
    });
    $ZodPipe = /* @__PURE__ */ $constructor("$ZodPipe", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "values", () => def.in._zod.values);
      defineLazy(inst._zod, "optin", () => def.in._zod.optin);
      defineLazy(inst._zod, "optout", () => def.out._zod.optout);
      defineLazy(inst._zod, "propValues", () => def.in._zod.propValues);
      inst._zod.parse = (payload, ctx) => {
        const left = def.in._zod.run(payload, ctx);
        if (left instanceof Promise) {
          return left.then((left2) => handlePipeResult(left2, def, ctx));
        }
        return handlePipeResult(left, def, ctx);
      };
    });
    $ZodReadonly = /* @__PURE__ */ $constructor("$ZodReadonly", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "propValues", () => def.innerType._zod.propValues);
      defineLazy(inst._zod, "values", () => def.innerType._zod.values);
      defineLazy(inst._zod, "optin", () => def.innerType._zod.optin);
      defineLazy(inst._zod, "optout", () => def.innerType._zod.optout);
      inst._zod.parse = (payload, ctx) => {
        const result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) {
          return result.then(handleReadonlyResult);
        }
        return handleReadonlyResult(result);
      };
    });
    $ZodTemplateLiteral = /* @__PURE__ */ $constructor("$ZodTemplateLiteral", (inst, def) => {
      $ZodType.init(inst, def);
      const regexParts = [];
      for (const part of def.parts) {
        if (typeof part === "object" && part !== null) {
          if (!part._zod.pattern) {
            throw new Error(`Invalid template literal part, no pattern found: ${[...part._zod.traits].shift()}`);
          }
          const source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;
          if (!source)
            throw new Error(`Invalid template literal part: ${part._zod.traits}`);
          const start2 = source.startsWith("^") ? 1 : 0;
          const end = source.endsWith("$") ? source.length - 1 : source.length;
          regexParts.push(source.slice(start2, end));
        } else if (part === null || primitiveTypes.has(typeof part)) {
          regexParts.push(escapeRegex(`${part}`));
        } else {
          throw new Error(`Invalid template literal part: ${part}`);
        }
      }
      inst._zod.pattern = new RegExp(`^${regexParts.join("")}$`);
      inst._zod.parse = (payload, _ctx) => {
        if (typeof payload.value !== "string") {
          payload.issues.push({
            input: payload.value,
            inst,
            expected: "template_literal",
            code: "invalid_type"
          });
          return payload;
        }
        inst._zod.pattern.lastIndex = 0;
        if (!inst._zod.pattern.test(payload.value)) {
          payload.issues.push({
            input: payload.value,
            inst,
            code: "invalid_format",
            format: def.format ?? "template_literal",
            pattern: inst._zod.pattern.source
          });
          return payload;
        }
        return payload;
      };
    });
    $ZodPromise = /* @__PURE__ */ $constructor("$ZodPromise", (inst, def) => {
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, ctx) => {
        return Promise.resolve(payload.value).then((inner) => def.innerType._zod.run({ value: inner, issues: [] }, ctx));
      };
    });
    $ZodLazy = /* @__PURE__ */ $constructor("$ZodLazy", (inst, def) => {
      $ZodType.init(inst, def);
      defineLazy(inst._zod, "innerType", () => def.getter());
      defineLazy(inst._zod, "pattern", () => inst._zod.innerType._zod.pattern);
      defineLazy(inst._zod, "propValues", () => inst._zod.innerType._zod.propValues);
      defineLazy(inst._zod, "optin", () => inst._zod.innerType._zod.optin ?? void 0);
      defineLazy(inst._zod, "optout", () => inst._zod.innerType._zod.optout ?? void 0);
      inst._zod.parse = (payload, ctx) => {
        const inner = inst._zod.innerType;
        return inner._zod.run(payload, ctx);
      };
    });
    $ZodCustom = /* @__PURE__ */ $constructor("$ZodCustom", (inst, def) => {
      $ZodCheck.init(inst, def);
      $ZodType.init(inst, def);
      inst._zod.parse = (payload, _3) => {
        return payload;
      };
      inst._zod.check = (payload) => {
        const input = payload.value;
        const r3 = def.fn(input);
        if (r3 instanceof Promise) {
          return r3.then((r4) => handleRefineResult(r4, payload, input, inst));
        }
        handleRefineResult(r3, payload, input, inst);
        return;
      };
    });
  }
});

// node_modules/zod/v4/locales/ar.js
function ar_default() {
  return {
    localeError: error2()
  };
}
var error2;
var init_ar = __esm({
  "node_modules/zod/v4/locales/ar.js"() {
    init_util();
    error2 = () => {
      const Sizable = {
        string: { unit: "\u062D\u0631\u0641", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        file: { unit: "\u0628\u0627\u064A\u062A", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        array: { unit: "\u0639\u0646\u0635\u0631", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" },
        set: { unit: "\u0639\u0646\u0635\u0631", verb: "\u0623\u0646 \u064A\u062D\u0648\u064A" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0645\u062F\u062E\u0644",
        email: "\u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A",
        url: "\u0631\u0627\u0628\u0637",
        emoji: "\u0625\u064A\u0645\u0648\u062C\u064A",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u062A\u0627\u0631\u064A\u062E \u0648\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        date: "\u062A\u0627\u0631\u064A\u062E \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        time: "\u0648\u0642\u062A \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        duration: "\u0645\u062F\u0629 \u0628\u0645\u0639\u064A\u0627\u0631 ISO",
        ipv4: "\u0639\u0646\u0648\u0627\u0646 IPv4",
        ipv6: "\u0639\u0646\u0648\u0627\u0646 IPv6",
        cidrv4: "\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv4",
        cidrv6: "\u0645\u062F\u0649 \u0639\u0646\u0627\u0648\u064A\u0646 \u0628\u0635\u064A\u063A\u0629 IPv6",
        base64: "\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64-encoded",
        base64url: "\u0646\u064E\u0635 \u0628\u062A\u0631\u0645\u064A\u0632 base64url-encoded",
        json_string: "\u0646\u064E\u0635 \u0639\u0644\u0649 \u0647\u064A\u0626\u0629 JSON",
        e164: "\u0631\u0642\u0645 \u0647\u0627\u062A\u0641 \u0628\u0645\u0639\u064A\u0627\u0631 E.164",
        jwt: "JWT",
        template_literal: "\u0645\u062F\u062E\u0644"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${issue2.expected}\u060C \u0648\u0644\u0643\u0646 \u062A\u0645 \u0625\u062F\u062E\u0627\u0644 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0627\u062E\u062A\u064A\u0627\u0631 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062A\u0648\u0642\u0639 \u0627\u0646\u062A\u0642\u0627\u0621 \u0623\u062D\u062F \u0647\u0630\u0647 \u0627\u0644\u062E\u064A\u0627\u0631\u0627\u062A: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return ` \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${issue2.origin ?? "\u0627\u0644\u0642\u064A\u0645\u0629"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631"}`;
            return `\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ${issue2.origin ?? "\u0627\u0644\u0642\u064A\u0645\u0629"} ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${issue2.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ${issue2.origin} \u0623\u0646 \u064A\u0643\u0648\u0646 ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0628\u062F\u0623 \u0628\u0640 "${issue2.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0646\u062A\u0647\u064A \u0628\u0640 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u062A\u0636\u0645\u0651\u064E\u0646 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0637\u0627\u0628\u0642 \u0627\u0644\u0646\u0645\u0637 ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644`;
          }
          case "not_multiple_of":
            return `\u0631\u0642\u0645 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0645\u0646 \u0645\u0636\u0627\u0639\u0641\u0627\u062A ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u0645\u0639\u0631\u0641${issue2.keys.length > 1 ? "\u0627\u062A" : ""} \u063A\u0631\u064A\u0628${issue2.keys.length > 1 ? "\u0629" : ""}: ${joinValues(issue2.keys, "\u060C ")}`;
          case "invalid_key":
            return `\u0645\u0639\u0631\u0641 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${issue2.origin}`;
          case "invalid_union":
            return "\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";
          case "invalid_element":
            return `\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ${issue2.origin}`;
          default:
            return "\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644";
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/az.js
function az_default() {
  return {
    localeError: error3()
  };
}
var error3;
var init_az = __esm({
  "node_modules/zod/v4/locales/az.js"() {
    init_util();
    error3 = () => {
      const Sizable = {
        string: { unit: "simvol", verb: "olmal\u0131d\u0131r" },
        file: { unit: "bayt", verb: "olmal\u0131d\u0131r" },
        array: { unit: "element", verb: "olmal\u0131d\u0131r" },
        set: { unit: "element", verb: "olmal\u0131d\u0131r" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "email address",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datetime",
        date: "ISO date",
        time: "ISO time",
        duration: "ISO duration",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded string",
        base64url: "base64url-encoded string",
        json_string: "JSON string",
        e164: "E.164 number",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${issue2.expected}, daxil olan ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ${stringifyPrimitive(issue2.values[0])}`;
            return `Yanl\u0131\u015F se\xE7im: a\u015Fa\u011F\u0131dak\u0131lardan biri olmal\u0131d\u0131r: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${issue2.origin ?? "d\u0259y\u0259r"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
            return `\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ${issue2.origin ?? "d\u0259y\u0259r"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            return `\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.prefix}" il\u0259 ba\u015Flamal\u0131d\u0131r`;
            if (_issue.format === "ends_with")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.suffix}" il\u0259 bitm\u0259lidir`;
            if (_issue.format === "includes")
              return `Yanl\u0131\u015F m\u0259tn: "${_issue.includes}" daxil olmal\u0131d\u0131r`;
            if (_issue.format === "regex")
              return `Yanl\u0131\u015F m\u0259tn: ${_issue.pattern} \u015Fablonuna uy\u011Fun olmal\u0131d\u0131r`;
            return `Yanl\u0131\u015F ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Yanl\u0131\u015F \u0259d\u0259d: ${issue2.divisor} il\u0259 b\xF6l\xFCn\u0259 bil\u0259n olmal\u0131d\u0131r`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan a\xE7ar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} daxilind\u0259 yanl\u0131\u015F a\xE7ar`;
          case "invalid_union":
            return "Yanl\u0131\u015F d\u0259y\u0259r";
          case "invalid_element":
            return `${issue2.origin} daxilind\u0259 yanl\u0131\u015F d\u0259y\u0259r`;
          default:
            return `Yanl\u0131\u015F d\u0259y\u0259r`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/be.js
function getBelarusianPlural(count, one3, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one3;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
function be_default() {
  return {
    localeError: error4()
  };
}
var error4;
var init_be = __esm({
  "node_modules/zod/v4/locales/be.js"() {
    init_util();
    error4 = () => {
      const Sizable = {
        string: {
          unit: {
            one: "\u0441\u0456\u043C\u0432\u0430\u043B",
            few: "\u0441\u0456\u043C\u0432\u0430\u043B\u044B",
            many: "\u0441\u0456\u043C\u0432\u0430\u043B\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        array: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        set: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        },
        file: {
          unit: {
            one: "\u0431\u0430\u0439\u0442",
            few: "\u0431\u0430\u0439\u0442\u044B",
            many: "\u0431\u0430\u0439\u0442\u0430\u045E"
          },
          verb: "\u043C\u0435\u0446\u044C"
        }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u043B\u0456\u043A";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u043C\u0430\u0441\u0456\u045E";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0443\u0432\u043E\u0434",
        email: "email \u0430\u0434\u0440\u0430\u0441",
        url: "URL",
        emoji: "\u044D\u043C\u043E\u0434\u0437\u0456",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0430 \u0456 \u0447\u0430\u0441",
        date: "ISO \u0434\u0430\u0442\u0430",
        time: "ISO \u0447\u0430\u0441",
        duration: "ISO \u043F\u0440\u0430\u0446\u044F\u0433\u043B\u0430\u0441\u0446\u044C",
        ipv4: "IPv4 \u0430\u0434\u0440\u0430\u0441",
        ipv6: "IPv6 \u0430\u0434\u0440\u0430\u0441",
        cidrv4: "IPv4 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",
        cidrv6: "IPv6 \u0434\u044B\u044F\u043F\u0430\u0437\u043E\u043D",
        base64: "\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64",
        base64url: "\u0440\u0430\u0434\u043E\u043A \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 base64url",
        json_string: "JSON \u0440\u0430\u0434\u043E\u043A",
        e164: "\u043D\u0443\u043C\u0430\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0443\u0432\u043E\u0434"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u045E\u0441\u044F ${issue2.expected}, \u0430\u0442\u0440\u044B\u043C\u0430\u043D\u0430 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0432\u0430\u0440\u044B\u044F\u043D\u0442: \u0447\u0430\u043A\u0430\u045E\u0441\u044F \u0430\u0434\u0437\u0456\u043D \u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const maxValue = Number(issue2.maximum);
              const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${sizing.verb} ${adj}${issue2.maximum.toString()} ${unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435"} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const minValue = Number(issue2.minimum);
              const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ${sizing.verb} ${adj}${issue2.minimum.toString()} ${unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ${issue2.origin} \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u043F\u0430\u0447\u044B\u043D\u0430\u0446\u0446\u0430 \u0437 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0446\u0446\u0430 \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u043C\u044F\u0448\u0447\u0430\u0446\u044C "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0430\u0434\u043F\u0430\u0432\u044F\u0434\u0430\u0446\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043B\u0456\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0431\u044B\u0446\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u0430\u0441\u043F\u0430\u0437\u043D\u0430\u043D\u044B ${issue2.keys.length > 1 ? "\u043A\u043B\u044E\u0447\u044B" : "\u043A\u043B\u044E\u0447"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043A\u043B\u044E\u0447 \u0443 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434";
          case "invalid_element":
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u0430\u0435 \u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u045E ${issue2.origin}`;
          default:
            return `\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ca.js
function ca_default() {
  return {
    localeError: error5()
  };
}
var error5;
var init_ca = __esm({
  "node_modules/zod/v4/locales/ca.js"() {
    init_util();
    error5 = () => {
      const Sizable = {
        string: { unit: "car\xE0cters", verb: "contenir" },
        file: { unit: "bytes", verb: "contenir" },
        array: { unit: "elements", verb: "contenir" },
        set: { unit: "elements", verb: "contenir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "entrada",
        email: "adre\xE7a electr\xF2nica",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data i hora ISO",
        date: "data ISO",
        time: "hora ISO",
        duration: "durada ISO",
        ipv4: "adre\xE7a IPv4",
        ipv6: "adre\xE7a IPv6",
        cidrv4: "rang IPv4",
        cidrv6: "rang IPv6",
        base64: "cadena codificada en base64",
        base64url: "cadena codificada en base64url",
        json_string: "cadena JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Tipus inv\xE0lid: s'esperava ${issue2.expected}, s'ha rebut ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Valor inv\xE0lid: s'esperava ${stringifyPrimitive(issue2.values[0])}`;
            return `Opci\xF3 inv\xE0lida: s'esperava una de ${joinValues(issue2.values, " o ")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "com a m\xE0xim" : "menys de";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} contingu\xE9s ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `Massa gran: s'esperava que ${issue2.origin ?? "el valor"} fos ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "com a m\xEDnim" : "m\xE9s de";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Massa petit: s'esperava que ${issue2.origin} contingu\xE9s ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Massa petit: s'esperava que ${issue2.origin} fos ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Format inv\xE0lid: ha de comen\xE7ar amb "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Format inv\xE0lid: ha d'acabar amb "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Format inv\xE0lid: ha d'incloure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Format inv\xE0lid: ha de coincidir amb el patr\xF3 ${_issue.pattern}`;
            return `Format inv\xE0lid per a ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE0lid: ha de ser m\xFAltiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Clau${issue2.keys.length > 1 ? "s" : ""} no reconeguda${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Clau inv\xE0lida a ${issue2.origin}`;
          case "invalid_union":
            return "Entrada inv\xE0lida";
          case "invalid_element":
            return `Element inv\xE0lid a ${issue2.origin}`;
          default:
            return `Entrada inv\xE0lida`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/cs.js
function cs_default() {
  return {
    localeError: error6()
  };
}
var error6;
var init_cs = __esm({
  "node_modules/zod/v4/locales/cs.js"() {
    init_util();
    error6 = () => {
      const Sizable = {
        string: { unit: "znak\u016F", verb: "m\xEDt" },
        file: { unit: "bajt\u016F", verb: "m\xEDt" },
        array: { unit: "prvk\u016F", verb: "m\xEDt" },
        set: { unit: "prvk\u016F", verb: "m\xEDt" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u010D\xEDslo";
          }
          case "string": {
            return "\u0159et\u011Bzec";
          }
          case "boolean": {
            return "boolean";
          }
          case "bigint": {
            return "bigint";
          }
          case "function": {
            return "funkce";
          }
          case "symbol": {
            return "symbol";
          }
          case "undefined": {
            return "undefined";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "pole";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "regul\xE1rn\xED v\xFDraz",
        email: "e-mailov\xE1 adresa",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "datum a \u010Das ve form\xE1tu ISO",
        date: "datum ve form\xE1tu ISO",
        time: "\u010Das ve form\xE1tu ISO",
        duration: "doba trv\xE1n\xED ISO",
        ipv4: "IPv4 adresa",
        ipv6: "IPv6 adresa",
        cidrv4: "rozsah IPv4",
        cidrv6: "rozsah IPv6",
        base64: "\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64",
        base64url: "\u0159et\u011Bzec zak\xF3dovan\xFD ve form\xE1tu base64url",
        json_string: "\u0159et\u011Bzec ve form\xE1tu JSON",
        e164: "\u010D\xEDslo E.164",
        jwt: "JWT",
        template_literal: "vstup"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${issue2.expected}, obdr\u017Eeno ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ${stringifyPrimitive(issue2.values[0])}`;
            return `Neplatn\xE1 mo\u017Enost: o\u010Dek\xE1v\xE1na jedna z hodnot ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${issue2.origin ?? "hodnota"} mus\xED m\xEDt ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "prvk\u016F"}`;
            }
            return `Hodnota je p\u0159\xEDli\u0161 velk\xE1: ${issue2.origin ?? "hodnota"} mus\xED b\xFDt ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${issue2.origin ?? "hodnota"} mus\xED m\xEDt ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "prvk\u016F"}`;
            }
            return `Hodnota je p\u0159\xEDli\u0161 mal\xE1: ${issue2.origin ?? "hodnota"} mus\xED b\xFDt ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED za\u010D\xEDnat na "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED kon\u010Dit na "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED obsahovat "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Neplatn\xFD \u0159et\u011Bzec: mus\xED odpov\xEDdat vzoru ${_issue.pattern}`;
            return `Neplatn\xFD form\xE1t ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Neplatn\xE9 \u010D\xEDslo: mus\xED b\xFDt n\xE1sobkem ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nezn\xE1m\xE9 kl\xED\u010De: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Neplatn\xFD kl\xED\u010D v ${issue2.origin}`;
          case "invalid_union":
            return "Neplatn\xFD vstup";
          case "invalid_element":
            return `Neplatn\xE1 hodnota v ${issue2.origin}`;
          default:
            return `Neplatn\xFD vstup`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/da.js
function da_default() {
  return {
    localeError: error7()
  };
}
var error7;
var init_da = __esm({
  "node_modules/zod/v4/locales/da.js"() {
    init_util();
    error7 = () => {
      const Sizable = {
        string: { unit: "tegn", verb: "havde" },
        file: { unit: "bytes", verb: "havde" },
        array: { unit: "elementer", verb: "indeholdt" },
        set: { unit: "elementer", verb: "indeholdt" }
      };
      const TypeNames = {
        string: "streng",
        number: "tal",
        boolean: "boolean",
        array: "liste",
        object: "objekt",
        set: "s\xE6t",
        file: "fil"
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      function getTypeName(type) {
        return TypeNames[type] ?? type;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "tal";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "liste";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
            return "objekt";
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "e-mailadresse",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dato- og klokkesl\xE6t",
        date: "ISO-dato",
        time: "ISO-klokkesl\xE6t",
        duration: "ISO-varighed",
        ipv4: "IPv4-omr\xE5de",
        ipv6: "IPv6-omr\xE5de",
        cidrv4: "IPv4-spektrum",
        cidrv6: "IPv6-spektrum",
        base64: "base64-kodet streng",
        base64url: "base64url-kodet streng",
        json_string: "JSON-streng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ugyldigt input: forventede ${getTypeName(issue2.expected)}, fik ${getTypeName(parsedType5(issue2.input))}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ugyldig v\xE6rdi: forventede ${stringifyPrimitive(issue2.values[0])}`;
            return `Ugyldigt valg: forventede en af f\xF8lgende ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing)
              return `For stor: forventede ${origin ?? "value"} ${sizing.verb} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "elementer"}`;
            return `For stor: forventede ${origin ?? "value"} havde ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            const origin = getTypeName(issue2.origin);
            if (sizing) {
              return `For lille: forventede ${origin} ${sizing.verb} ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `For lille: forventede ${origin} havde ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ugyldig streng: skal starte med "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Ugyldig streng: skal ende med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ugyldig streng: skal indeholde "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ugyldig streng: skal matche m\xF8nsteret ${_issue.pattern}`;
            return `Ugyldig ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ugyldigt tal: skal v\xE6re deleligt med ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ukendte n\xF8gler" : "Ukendt n\xF8gle"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ugyldig n\xF8gle i ${issue2.origin}`;
          case "invalid_union":
            return "Ugyldigt input: matcher ingen af de tilladte typer";
          case "invalid_element":
            return `Ugyldig v\xE6rdi i ${issue2.origin}`;
          default:
            return `Ugyldigt input`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/de.js
function de_default() {
  return {
    localeError: error8()
  };
}
var error8;
var init_de = __esm({
  "node_modules/zod/v4/locales/de.js"() {
    init_util();
    error8 = () => {
      const Sizable = {
        string: { unit: "Zeichen", verb: "zu haben" },
        file: { unit: "Bytes", verb: "zu haben" },
        array: { unit: "Elemente", verb: "zu haben" },
        set: { unit: "Elemente", verb: "zu haben" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "Zahl";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "Array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "Eingabe",
        email: "E-Mail-Adresse",
        url: "URL",
        emoji: "Emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-Datum und -Uhrzeit",
        date: "ISO-Datum",
        time: "ISO-Uhrzeit",
        duration: "ISO-Dauer",
        ipv4: "IPv4-Adresse",
        ipv6: "IPv6-Adresse",
        cidrv4: "IPv4-Bereich",
        cidrv6: "IPv6-Bereich",
        base64: "Base64-codierter String",
        base64url: "Base64-URL-codierter String",
        json_string: "JSON-String",
        e164: "E.164-Nummer",
        jwt: "JWT",
        template_literal: "Eingabe"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ung\xFCltige Eingabe: erwartet ${issue2.expected}, erhalten ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ung\xFCltige Eingabe: erwartet ${stringifyPrimitive(issue2.values[0])}`;
            return `Ung\xFCltige Option: erwartet eine von ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Zu gro\xDF: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "Elemente"} hat`;
            return `Zu gro\xDF: erwartet, dass ${issue2.origin ?? "Wert"} ${adj}${issue2.maximum.toString()} ist`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} hat`;
            }
            return `Zu klein: erwartet, dass ${issue2.origin} ${adj}${issue2.minimum.toString()} ist`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ung\xFCltiger String: muss mit "${_issue.prefix}" beginnen`;
            if (_issue.format === "ends_with")
              return `Ung\xFCltiger String: muss mit "${_issue.suffix}" enden`;
            if (_issue.format === "includes")
              return `Ung\xFCltiger String: muss "${_issue.includes}" enthalten`;
            if (_issue.format === "regex")
              return `Ung\xFCltiger String: muss dem Muster ${_issue.pattern} entsprechen`;
            return `Ung\xFCltig: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ung\xFCltige Zahl: muss ein Vielfaches von ${issue2.divisor} sein`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Unbekannte Schl\xFCssel" : "Unbekannter Schl\xFCssel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ung\xFCltiger Schl\xFCssel in ${issue2.origin}`;
          case "invalid_union":
            return "Ung\xFCltige Eingabe";
          case "invalid_element":
            return `Ung\xFCltiger Wert in ${issue2.origin}`;
          default:
            return `Ung\xFCltige Eingabe`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/en.js
function en_default() {
  return {
    localeError: error9()
  };
}
var parsedType, error9;
var init_en = __esm({
  "node_modules/zod/v4/locales/en.js"() {
    init_util();
    parsedType = (data2) => {
      const t4 = typeof data2;
      switch (t4) {
        case "number": {
          return Number.isNaN(data2) ? "NaN" : "number";
        }
        case "object": {
          if (Array.isArray(data2)) {
            return "array";
          }
          if (data2 === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
            return data2.constructor.name;
          }
        }
      }
      return t4;
    };
    error9 = () => {
      const Sizable = {
        string: { unit: "characters", verb: "to have" },
        file: { unit: "bytes", verb: "to have" },
        array: { unit: "items", verb: "to have" },
        set: { unit: "items", verb: "to have" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const Nouns = {
        regex: "input",
        email: "email address",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datetime",
        date: "ISO date",
        time: "ISO time",
        duration: "ISO duration",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded string",
        base64url: "base64url-encoded string",
        json_string: "JSON string",
        e164: "E.164 number",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Invalid input: expected ${issue2.expected}, received ${parsedType(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
            return `Invalid option: expected one of ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Too big: expected ${issue2.origin ?? "value"} to have ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `Too big: expected ${issue2.origin ?? "value"} to be ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Too small: expected ${issue2.origin} to have ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Too small: expected ${issue2.origin} to be ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Invalid string: must start with "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Invalid string: must end with "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Invalid string: must include "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Invalid string: must match pattern ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Invalid number: must be a multiple of ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Unrecognized key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Invalid key in ${issue2.origin}`;
          case "invalid_union":
            return "Invalid input";
          case "invalid_element":
            return `Invalid value in ${issue2.origin}`;
          default:
            return `Invalid input`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/eo.js
function eo_default() {
  return {
    localeError: error10()
  };
}
var parsedType2, error10;
var init_eo = __esm({
  "node_modules/zod/v4/locales/eo.js"() {
    init_util();
    parsedType2 = (data2) => {
      const t4 = typeof data2;
      switch (t4) {
        case "number": {
          return Number.isNaN(data2) ? "NaN" : "nombro";
        }
        case "object": {
          if (Array.isArray(data2)) {
            return "tabelo";
          }
          if (data2 === null) {
            return "senvalora";
          }
          if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
            return data2.constructor.name;
          }
        }
      }
      return t4;
    };
    error10 = () => {
      const Sizable = {
        string: { unit: "karaktrojn", verb: "havi" },
        file: { unit: "bajtojn", verb: "havi" },
        array: { unit: "elementojn", verb: "havi" },
        set: { unit: "elementojn", verb: "havi" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const Nouns = {
        regex: "enigo",
        email: "retadreso",
        url: "URL",
        emoji: "emo\u011Dio",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-datotempo",
        date: "ISO-dato",
        time: "ISO-tempo",
        duration: "ISO-da\u016Dro",
        ipv4: "IPv4-adreso",
        ipv6: "IPv6-adreso",
        cidrv4: "IPv4-rango",
        cidrv6: "IPv6-rango",
        base64: "64-ume kodita karaktraro",
        base64url: "URL-64-ume kodita karaktraro",
        json_string: "JSON-karaktraro",
        e164: "E.164-nombro",
        jwt: "JWT",
        template_literal: "enigo"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Nevalida enigo: atendi\u011Dis ${issue2.expected}, ricevi\u011Dis ${parsedType2(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Nevalida enigo: atendi\u011Dis ${stringifyPrimitive(issue2.values[0])}`;
            return `Nevalida opcio: atendi\u011Dis unu el ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Tro granda: atendi\u011Dis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementojn"}`;
            return `Tro granda: atendi\u011Dis ke ${issue2.origin ?? "valoro"} havu ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Tro malgranda: atendi\u011Dis ke ${issue2.origin} havu ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Tro malgranda: atendi\u011Dis ke ${issue2.origin} estu ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Nevalida karaktraro: devas komenci\u011Di per "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Nevalida karaktraro: devas fini\u011Di per "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Nevalida karaktraro: devas inkluzivi "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Nevalida karaktraro: devas kongrui kun la modelo ${_issue.pattern}`;
            return `Nevalida ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Nevalida nombro: devas esti oblo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nekonata${issue2.keys.length > 1 ? "j" : ""} \u015Dlosilo${issue2.keys.length > 1 ? "j" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Nevalida \u015Dlosilo en ${issue2.origin}`;
          case "invalid_union":
            return "Nevalida enigo";
          case "invalid_element":
            return `Nevalida valoro en ${issue2.origin}`;
          default:
            return `Nevalida enigo`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/es.js
function es_default() {
  return {
    localeError: error11()
  };
}
var error11;
var init_es = __esm({
  "node_modules/zod/v4/locales/es.js"() {
    init_util();
    error11 = () => {
      const Sizable = {
        string: { unit: "caracteres", verb: "tener" },
        file: { unit: "bytes", verb: "tener" },
        array: { unit: "elementos", verb: "tener" },
        set: { unit: "elementos", verb: "tener" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "n\xFAmero";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "arreglo";
            }
            if (data2 === null) {
              return "nulo";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "entrada",
        email: "direcci\xF3n de correo electr\xF3nico",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "fecha y hora ISO",
        date: "fecha ISO",
        time: "hora ISO",
        duration: "duraci\xF3n ISO",
        ipv4: "direcci\xF3n IPv4",
        ipv6: "direcci\xF3n IPv6",
        cidrv4: "rango IPv4",
        cidrv6: "rango IPv6",
        base64: "cadena codificada en base64",
        base64url: "URL codificada en base64",
        json_string: "cadena JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entrada inv\xE1lida: se esperaba ${issue2.expected}, recibido ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entrada inv\xE1lida: se esperaba ${stringifyPrimitive(issue2.values[0])}`;
            return `Opci\xF3n inv\xE1lida: se esperaba una de ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Demasiado grande: se esperaba que ${issue2.origin ?? "valor"} tuviera ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
            return `Demasiado grande: se esperaba que ${issue2.origin ?? "valor"} fuera ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Demasiado peque\xF1o: se esperaba que ${issue2.origin} tuviera ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Demasiado peque\xF1o: se esperaba que ${issue2.origin} fuera ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Cadena inv\xE1lida: debe comenzar con "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Cadena inv\xE1lida: debe terminar en "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cadena inv\xE1lida: debe incluir "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cadena inv\xE1lida: debe coincidir con el patr\xF3n ${_issue.pattern}`;
            return `Inv\xE1lido ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE1lido: debe ser m\xFAltiplo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Llave${issue2.keys.length > 1 ? "s" : ""} desconocida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Llave inv\xE1lida en ${issue2.origin}`;
          case "invalid_union":
            return "Entrada inv\xE1lida";
          case "invalid_element":
            return `Valor inv\xE1lido en ${issue2.origin}`;
          default:
            return `Entrada inv\xE1lida`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/fa.js
function fa_default() {
  return {
    localeError: error12()
  };
}
var error12;
var init_fa = __esm({
  "node_modules/zod/v4/locales/fa.js"() {
    init_util();
    error12 = () => {
      const Sizable = {
        string: { unit: "\u06A9\u0627\u0631\u0627\u06A9\u062A\u0631", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        file: { unit: "\u0628\u0627\u06CC\u062A", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        array: { unit: "\u0622\u06CC\u062A\u0645", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" },
        set: { unit: "\u0622\u06CC\u062A\u0645", verb: "\u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0639\u062F\u062F";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u0622\u0631\u0627\u06CC\u0647";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0648\u0631\u0648\u062F\u06CC",
        email: "\u0622\u062F\u0631\u0633 \u0627\u06CC\u0645\u06CC\u0644",
        url: "URL",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u06CC",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u062A\u0627\u0631\u06CC\u062E \u0648 \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        date: "\u062A\u0627\u0631\u06CC\u062E \u0627\u06CC\u0632\u0648",
        time: "\u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        duration: "\u0645\u062F\u062A \u0632\u0645\u0627\u0646 \u0627\u06CC\u0632\u0648",
        ipv4: "IPv4 \u0622\u062F\u0631\u0633",
        ipv6: "IPv6 \u0622\u062F\u0631\u0633",
        cidrv4: "IPv4 \u062F\u0627\u0645\u0646\u0647",
        cidrv6: "IPv6 \u062F\u0627\u0645\u0646\u0647",
        base64: "base64-encoded \u0631\u0634\u062A\u0647",
        base64url: "base64url-encoded \u0631\u0634\u062A\u0647",
        json_string: "JSON \u0631\u0634\u062A\u0647",
        e164: "E.164 \u0639\u062F\u062F",
        jwt: "JWT",
        template_literal: "\u0648\u0631\u0648\u062F\u06CC"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${issue2.expected} \u0645\u06CC\u200C\u0628\u0648\u062F\u060C ${parsedType5(issue2.input)} \u062F\u0631\u06CC\u0627\u0641\u062A \u0634\u062F`;
          case "invalid_value":
            if (issue2.values.length === 1) {
              return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ${stringifyPrimitive(issue2.values[0])} \u0645\u06CC\u200C\u0628\u0648\u062F`;
            }
            return `\u06AF\u0632\u06CC\u0646\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A \u06CC\u06A9\u06CC \u0627\u0632 ${joinValues(issue2.values, "|")} \u0645\u06CC\u200C\u0628\u0648\u062F`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${issue2.origin ?? "\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631"} \u0628\u0627\u0634\u062F`;
            }
            return `\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ${issue2.origin ?? "\u0645\u0642\u062F\u0627\u0631"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} \u0628\u0627\u0634\u062F`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0628\u0627\u0634\u062F`;
            }
            return `\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} \u0628\u0627\u0634\u062F`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${_issue.prefix}" \u0634\u0631\u0648\u0639 \u0634\u0648\u062F`;
            }
            if (_issue.format === "ends_with") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 "${_issue.suffix}" \u062A\u0645\u0627\u0645 \u0634\u0648\u062F`;
            }
            if (_issue.format === "includes") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0634\u0627\u0645\u0644 "${_issue.includes}" \u0628\u0627\u0634\u062F`;
            }
            if (_issue.format === "regex") {
              return `\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \u0627\u0644\u06AF\u0648\u06CC ${_issue.pattern} \u0645\u0637\u0627\u0628\u0642\u062A \u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F`;
            }
            return `${Nouns[_issue.format] ?? issue2.format} \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
          }
          case "not_multiple_of":
            return `\u0639\u062F\u062F \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0645\u0636\u0631\u0628 ${issue2.divisor} \u0628\u0627\u0634\u062F`;
          case "unrecognized_keys":
            return `\u06A9\u0644\u06CC\u062F${issue2.keys.length > 1 ? "\u0647\u0627\u06CC" : ""} \u0646\u0627\u0634\u0646\u0627\u0633: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u06A9\u0644\u06CC\u062F \u0646\u0627\u0634\u0646\u0627\u0633 \u062F\u0631 ${issue2.origin}`;
          case "invalid_union":
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
          case "invalid_element":
            return `\u0645\u0642\u062F\u0627\u0631 \u0646\u0627\u0645\u0639\u062A\u0628\u0631 \u062F\u0631 ${issue2.origin}`;
          default:
            return `\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/fi.js
function fi_default() {
  return {
    localeError: error13()
  };
}
var error13;
var init_fi = __esm({
  "node_modules/zod/v4/locales/fi.js"() {
    init_util();
    error13 = () => {
      const Sizable = {
        string: { unit: "merkki\xE4", subject: "merkkijonon" },
        file: { unit: "tavua", subject: "tiedoston" },
        array: { unit: "alkiota", subject: "listan" },
        set: { unit: "alkiota", subject: "joukon" },
        number: { unit: "", subject: "luvun" },
        bigint: { unit: "", subject: "suuren kokonaisluvun" },
        int: { unit: "", subject: "kokonaisluvun" },
        date: { unit: "", subject: "p\xE4iv\xE4m\xE4\xE4r\xE4n" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "s\xE4\xE4nn\xF6llinen lauseke",
        email: "s\xE4hk\xF6postiosoite",
        url: "URL-osoite",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-aikaleima",
        date: "ISO-p\xE4iv\xE4m\xE4\xE4r\xE4",
        time: "ISO-aika",
        duration: "ISO-kesto",
        ipv4: "IPv4-osoite",
        ipv6: "IPv6-osoite",
        cidrv4: "IPv4-alue",
        cidrv6: "IPv6-alue",
        base64: "base64-koodattu merkkijono",
        base64url: "base64url-koodattu merkkijono",
        json_string: "JSON-merkkijono",
        e164: "E.164-luku",
        jwt: "JWT",
        template_literal: "templaattimerkkijono"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Virheellinen tyyppi: odotettiin ${issue2.expected}, oli ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Virheellinen sy\xF6te: t\xE4ytyy olla ${stringifyPrimitive(issue2.values[0])}`;
            return `Virheellinen valinta: t\xE4ytyy olla yksi seuraavista: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Liian suuri: ${sizing.subject} t\xE4ytyy olla ${adj}${issue2.maximum.toString()} ${sizing.unit}`.trim();
            }
            return `Liian suuri: arvon t\xE4ytyy olla ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Liian pieni: ${sizing.subject} t\xE4ytyy olla ${adj}${issue2.minimum.toString()} ${sizing.unit}`.trim();
            }
            return `Liian pieni: arvon t\xE4ytyy olla ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Virheellinen sy\xF6te: t\xE4ytyy alkaa "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Virheellinen sy\xF6te: t\xE4ytyy loppua "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Virheellinen sy\xF6te: t\xE4ytyy sis\xE4lt\xE4\xE4 "${_issue.includes}"`;
            if (_issue.format === "regex") {
              return `Virheellinen sy\xF6te: t\xE4ytyy vastata s\xE4\xE4nn\xF6llist\xE4 lauseketta ${_issue.pattern}`;
            }
            return `Virheellinen ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Virheellinen luku: t\xE4ytyy olla luvun ${issue2.divisor} monikerta`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Tuntemattomat avaimet" : "Tuntematon avain"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return "Virheellinen avain tietueessa";
          case "invalid_union":
            return "Virheellinen unioni";
          case "invalid_element":
            return "Virheellinen arvo joukossa";
          default:
            return `Virheellinen sy\xF6te`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/fr.js
function fr_default() {
  return {
    localeError: error14()
  };
}
var error14;
var init_fr = __esm({
  "node_modules/zod/v4/locales/fr.js"() {
    init_util();
    error14 = () => {
      const Sizable = {
        string: { unit: "caract\xE8res", verb: "avoir" },
        file: { unit: "octets", verb: "avoir" },
        array: { unit: "\xE9l\xE9ments", verb: "avoir" },
        set: { unit: "\xE9l\xE9ments", verb: "avoir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "nombre";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "tableau";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "entr\xE9e",
        email: "adresse e-mail",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "date et heure ISO",
        date: "date ISO",
        time: "heure ISO",
        duration: "dur\xE9e ISO",
        ipv4: "adresse IPv4",
        ipv6: "adresse IPv6",
        cidrv4: "plage IPv4",
        cidrv6: "plage IPv6",
        base64: "cha\xEEne encod\xE9e en base64",
        base64url: "cha\xEEne encod\xE9e en base64url",
        json_string: "cha\xEEne JSON",
        e164: "num\xE9ro E.164",
        jwt: "JWT",
        template_literal: "entr\xE9e"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entr\xE9e invalide : ${issue2.expected} attendu, ${parsedType5(issue2.input)} re\xE7u`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entr\xE9e invalide : ${stringifyPrimitive(issue2.values[0])} attendu`;
            return `Option invalide : une valeur parmi ${joinValues(issue2.values, "|")} attendue`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Trop grand : ${issue2.origin ?? "valeur"} doit ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\xE9l\xE9ment(s)"}`;
            return `Trop grand : ${issue2.origin ?? "valeur"} doit \xEAtre ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Trop petit : ${issue2.origin} doit ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Trop petit : ${issue2.origin} doit \xEAtre ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Cha\xEEne invalide : doit commencer par "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Cha\xEEne invalide : doit se terminer par "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cha\xEEne invalide : doit inclure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cha\xEEne invalide : doit correspondre au mod\xE8le ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} invalide`;
          }
          case "not_multiple_of":
            return `Nombre invalide : doit \xEAtre un multiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Cl\xE9${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Cl\xE9 invalide dans ${issue2.origin}`;
          case "invalid_union":
            return "Entr\xE9e invalide";
          case "invalid_element":
            return `Valeur invalide dans ${issue2.origin}`;
          default:
            return `Entr\xE9e invalide`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/fr-CA.js
function fr_CA_default() {
  return {
    localeError: error15()
  };
}
var error15;
var init_fr_CA = __esm({
  "node_modules/zod/v4/locales/fr-CA.js"() {
    init_util();
    error15 = () => {
      const Sizable = {
        string: { unit: "caract\xE8res", verb: "avoir" },
        file: { unit: "octets", verb: "avoir" },
        array: { unit: "\xE9l\xE9ments", verb: "avoir" },
        set: { unit: "\xE9l\xE9ments", verb: "avoir" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "entr\xE9e",
        email: "adresse courriel",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "date-heure ISO",
        date: "date ISO",
        time: "heure ISO",
        duration: "dur\xE9e ISO",
        ipv4: "adresse IPv4",
        ipv6: "adresse IPv6",
        cidrv4: "plage IPv4",
        cidrv6: "plage IPv6",
        base64: "cha\xEEne encod\xE9e en base64",
        base64url: "cha\xEEne encod\xE9e en base64url",
        json_string: "cha\xEEne JSON",
        e164: "num\xE9ro E.164",
        jwt: "JWT",
        template_literal: "entr\xE9e"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Entr\xE9e invalide : attendu ${issue2.expected}, re\xE7u ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entr\xE9e invalide : attendu ${stringifyPrimitive(issue2.values[0])}`;
            return `Option invalide : attendu l'une des valeurs suivantes ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u2264" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} ait ${adj}${issue2.maximum.toString()} ${sizing.unit}`;
            return `Trop grand : attendu que ${issue2.origin ?? "la valeur"} soit ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u2265" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Trop petit : attendu que ${issue2.origin} ait ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Trop petit : attendu que ${issue2.origin} soit ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Cha\xEEne invalide : doit commencer par "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Cha\xEEne invalide : doit se terminer par "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Cha\xEEne invalide : doit inclure "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Cha\xEEne invalide : doit correspondre au motif ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} invalide`;
          }
          case "not_multiple_of":
            return `Nombre invalide : doit \xEAtre un multiple de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Cl\xE9${issue2.keys.length > 1 ? "s" : ""} non reconnue${issue2.keys.length > 1 ? "s" : ""} : ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Cl\xE9 invalide dans ${issue2.origin}`;
          case "invalid_union":
            return "Entr\xE9e invalide";
          case "invalid_element":
            return `Valeur invalide dans ${issue2.origin}`;
          default:
            return `Entr\xE9e invalide`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/he.js
function he_default() {
  return {
    localeError: error16()
  };
}
var error16;
var init_he = __esm({
  "node_modules/zod/v4/locales/he.js"() {
    init_util();
    error16 = () => {
      const Sizable = {
        string: { unit: "\u05D0\u05D5\u05EA\u05D9\u05D5\u05EA", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        file: { unit: "\u05D1\u05D9\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        array: { unit: "\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" },
        set: { unit: "\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD", verb: "\u05DC\u05DB\u05DC\u05D5\u05DC" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u05E7\u05DC\u05D8",
        email: "\u05DB\u05EA\u05D5\u05D1\u05EA \u05D0\u05D9\u05DE\u05D9\u05D9\u05DC",
        url: "\u05DB\u05EA\u05D5\u05D1\u05EA \u05E8\u05E9\u05EA",
        emoji: "\u05D0\u05D9\u05DE\u05D5\u05D2'\u05D9",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u05EA\u05D0\u05E8\u05D9\u05DA \u05D5\u05D6\u05DE\u05DF ISO",
        date: "\u05EA\u05D0\u05E8\u05D9\u05DA ISO",
        time: "\u05D6\u05DE\u05DF ISO",
        duration: "\u05DE\u05E9\u05DA \u05D6\u05DE\u05DF ISO",
        ipv4: "\u05DB\u05EA\u05D5\u05D1\u05EA IPv4",
        ipv6: "\u05DB\u05EA\u05D5\u05D1\u05EA IPv6",
        cidrv4: "\u05D8\u05D5\u05D5\u05D7 IPv4",
        cidrv6: "\u05D8\u05D5\u05D5\u05D7 IPv6",
        base64: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64",
        base64url: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05D1\u05D1\u05E1\u05D9\u05E1 64 \u05DC\u05DB\u05EA\u05D5\u05D1\u05D5\u05EA \u05E8\u05E9\u05EA",
        json_string: "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA JSON",
        e164: "\u05DE\u05E1\u05E4\u05E8 E.164",
        jwt: "JWT",
        template_literal: "\u05E7\u05DC\u05D8"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${issue2.expected}, \u05D4\u05EA\u05E7\u05D1\u05DC ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ${stringifyPrimitive(issue2.values[0])}`;
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA \u05D0\u05D7\u05EA \u05DE\u05D4\u05D0\u05E4\u05E9\u05E8\u05D5\u05D9\u05D5\u05EA  ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${issue2.origin ?? "value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"}`;
            return `\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ${issue2.origin ?? "value"} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${issue2.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ${issue2.origin} \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D7\u05D9\u05DC \u05D1"${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05DB\u05DC\u05D5\u05DC "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D0\u05D9\u05DD \u05DC\u05EA\u05D1\u05E0\u05D9\u05EA ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`;
          }
          case "not_multiple_of":
            return `\u05DE\u05E1\u05E4\u05E8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05D7\u05D9\u05D9\u05D1 \u05DC\u05D4\u05D9\u05D5\u05EA \u05DE\u05DB\u05E4\u05DC\u05D4 \u05E9\u05DC ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u05DE\u05E4\u05EA\u05D7${issue2.keys.length > 1 ? "\u05D5\u05EA" : ""} \u05DC\u05D0 \u05DE\u05D6\u05D5\u05D4${issue2.keys.length > 1 ? "\u05D9\u05DD" : "\u05D4"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u05DE\u05E4\u05EA\u05D7 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${issue2.origin}`;
          case "invalid_union":
            return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF";
          case "invalid_element":
            return `\u05E2\u05E8\u05DA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1${issue2.origin}`;
          default:
            return `\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/hu.js
function hu_default() {
  return {
    localeError: error17()
  };
}
var error17;
var init_hu = __esm({
  "node_modules/zod/v4/locales/hu.js"() {
    init_util();
    error17 = () => {
      const Sizable = {
        string: { unit: "karakter", verb: "legyen" },
        file: { unit: "byte", verb: "legyen" },
        array: { unit: "elem", verb: "legyen" },
        set: { unit: "elem", verb: "legyen" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "sz\xE1m";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "t\xF6mb";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "bemenet",
        email: "email c\xEDm",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO id\u0151b\xE9lyeg",
        date: "ISO d\xE1tum",
        time: "ISO id\u0151",
        duration: "ISO id\u0151intervallum",
        ipv4: "IPv4 c\xEDm",
        ipv6: "IPv6 c\xEDm",
        cidrv4: "IPv4 tartom\xE1ny",
        cidrv6: "IPv6 tartom\xE1ny",
        base64: "base64-k\xF3dolt string",
        base64url: "base64url-k\xF3dolt string",
        json_string: "JSON string",
        e164: "E.164 sz\xE1m",
        jwt: "JWT",
        template_literal: "bemenet"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${issue2.expected}, a kapott \xE9rt\xE9k ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ${stringifyPrimitive(issue2.values[0])}`;
            return `\xC9rv\xE9nytelen opci\xF3: valamelyik \xE9rt\xE9k v\xE1rt ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `T\xFAl nagy: ${issue2.origin ?? "\xE9rt\xE9k"} m\xE9rete t\xFAl nagy ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elem"}`;
            return `T\xFAl nagy: a bemeneti \xE9rt\xE9k ${issue2.origin ?? "\xE9rt\xE9k"} t\xFAl nagy: ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${issue2.origin} m\xE9rete t\xFAl kicsi ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `T\xFAl kicsi: a bemeneti \xE9rt\xE9k ${issue2.origin} t\xFAl kicsi ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\xC9rv\xE9nytelen string: "${_issue.prefix}" \xE9rt\xE9kkel kell kezd\u0151dnie`;
            if (_issue.format === "ends_with")
              return `\xC9rv\xE9nytelen string: "${_issue.suffix}" \xE9rt\xE9kkel kell v\xE9gz\u0151dnie`;
            if (_issue.format === "includes")
              return `\xC9rv\xE9nytelen string: "${_issue.includes}" \xE9rt\xE9ket kell tartalmaznia`;
            if (_issue.format === "regex")
              return `\xC9rv\xE9nytelen string: ${_issue.pattern} mint\xE1nak kell megfelelnie`;
            return `\xC9rv\xE9nytelen ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\xC9rv\xE9nytelen sz\xE1m: ${issue2.divisor} t\xF6bbsz\xF6r\xF6s\xE9nek kell lennie`;
          case "unrecognized_keys":
            return `Ismeretlen kulcs${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\xC9rv\xE9nytelen kulcs ${issue2.origin}`;
          case "invalid_union":
            return "\xC9rv\xE9nytelen bemenet";
          case "invalid_element":
            return `\xC9rv\xE9nytelen \xE9rt\xE9k: ${issue2.origin}`;
          default:
            return `\xC9rv\xE9nytelen bemenet`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/id.js
function id_default() {
  return {
    localeError: error18()
  };
}
var error18;
var init_id = __esm({
  "node_modules/zod/v4/locales/id.js"() {
    init_util();
    error18 = () => {
      const Sizable = {
        string: { unit: "karakter", verb: "memiliki" },
        file: { unit: "byte", verb: "memiliki" },
        array: { unit: "item", verb: "memiliki" },
        set: { unit: "item", verb: "memiliki" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "alamat email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "tanggal dan waktu format ISO",
        date: "tanggal format ISO",
        time: "jam format ISO",
        duration: "durasi format ISO",
        ipv4: "alamat IPv4",
        ipv6: "alamat IPv6",
        cidrv4: "rentang alamat IPv4",
        cidrv6: "rentang alamat IPv6",
        base64: "string dengan enkode base64",
        base64url: "string dengan enkode base64url",
        json_string: "string JSON",
        e164: "angka E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input tidak valid: diharapkan ${issue2.expected}, diterima ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input tidak valid: diharapkan ${stringifyPrimitive(issue2.values[0])}`;
            return `Pilihan tidak valid: diharapkan salah satu dari ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} memiliki ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
            return `Terlalu besar: diharapkan ${issue2.origin ?? "value"} menjadi ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Terlalu kecil: diharapkan ${issue2.origin} memiliki ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Terlalu kecil: diharapkan ${issue2.origin} menjadi ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `String tidak valid: harus dimulai dengan "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `String tidak valid: harus berakhir dengan "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `String tidak valid: harus menyertakan "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `String tidak valid: harus sesuai pola ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} tidak valid`;
          }
          case "not_multiple_of":
            return `Angka tidak valid: harus kelipatan dari ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kunci tidak dikenali ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kunci tidak valid di ${issue2.origin}`;
          case "invalid_union":
            return "Input tidak valid";
          case "invalid_element":
            return `Nilai tidak valid di ${issue2.origin}`;
          default:
            return `Input tidak valid`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/is.js
function is_default() {
  return {
    localeError: error19()
  };
}
var parsedType3, error19;
var init_is = __esm({
  "node_modules/zod/v4/locales/is.js"() {
    init_util();
    parsedType3 = (data2) => {
      const t4 = typeof data2;
      switch (t4) {
        case "number": {
          return Number.isNaN(data2) ? "NaN" : "n\xFAmer";
        }
        case "object": {
          if (Array.isArray(data2)) {
            return "fylki";
          }
          if (data2 === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
            return data2.constructor.name;
          }
        }
      }
      return t4;
    };
    error19 = () => {
      const Sizable = {
        string: { unit: "stafi", verb: "a\xF0 hafa" },
        file: { unit: "b\xE6ti", verb: "a\xF0 hafa" },
        array: { unit: "hluti", verb: "a\xF0 hafa" },
        set: { unit: "hluti", verb: "a\xF0 hafa" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const Nouns = {
        regex: "gildi",
        email: "netfang",
        url: "vefsl\xF3\xF0",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dagsetning og t\xEDmi",
        date: "ISO dagsetning",
        time: "ISO t\xEDmi",
        duration: "ISO t\xEDmalengd",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded strengur",
        base64url: "base64url-encoded strengur",
        json_string: "JSON strengur",
        e164: "E.164 t\xF6lugildi",
        jwt: "JWT",
        template_literal: "gildi"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Rangt gildi: \xDE\xFA sl\xF3st inn ${parsedType3(issue2.input)} \xFEar sem \xE1 a\xF0 vera ${issue2.expected}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Rangt gildi: gert r\xE1\xF0 fyrir ${stringifyPrimitive(issue2.values[0])}`;
            return `\xD3gilt val: m\xE1 vera eitt af eftirfarandi ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin ?? "gildi"} hafi ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "hluti"}`;
            return `Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin ?? "gildi"} s\xE9 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin} hafi ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ${issue2.origin} s\xE9 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\xD3gildur strengur: ver\xF0ur a\xF0 byrja \xE1 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 enda \xE1 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 innihalda "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\xD3gildur strengur: ver\xF0ur a\xF0 fylgja mynstri ${_issue.pattern}`;
            return `Rangt ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `R\xF6ng tala: ver\xF0ur a\xF0 vera margfeldi af ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\xD3\xFEekkt ${issue2.keys.length > 1 ? "ir lyklar" : "ur lykill"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Rangur lykill \xED ${issue2.origin}`;
          case "invalid_union":
            return "Rangt gildi";
          case "invalid_element":
            return `Rangt gildi \xED ${issue2.origin}`;
          default:
            return `Rangt gildi`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/it.js
function it_default() {
  return {
    localeError: error20()
  };
}
var error20;
var init_it = __esm({
  "node_modules/zod/v4/locales/it.js"() {
    init_util();
    error20 = () => {
      const Sizable = {
        string: { unit: "caratteri", verb: "avere" },
        file: { unit: "byte", verb: "avere" },
        array: { unit: "elementi", verb: "avere" },
        set: { unit: "elementi", verb: "avere" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "numero";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "vettore";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "indirizzo email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data e ora ISO",
        date: "data ISO",
        time: "ora ISO",
        duration: "durata ISO",
        ipv4: "indirizzo IPv4",
        ipv6: "indirizzo IPv6",
        cidrv4: "intervallo IPv4",
        cidrv6: "intervallo IPv6",
        base64: "stringa codificata in base64",
        base64url: "URL codificata in base64",
        json_string: "stringa JSON",
        e164: "numero E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input non valido: atteso ${issue2.expected}, ricevuto ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input non valido: atteso ${stringifyPrimitive(issue2.values[0])}`;
            return `Opzione non valida: atteso uno tra ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Troppo grande: ${issue2.origin ?? "valore"} deve avere ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementi"}`;
            return `Troppo grande: ${issue2.origin ?? "valore"} deve essere ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Troppo piccolo: ${issue2.origin} deve avere ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Troppo piccolo: ${issue2.origin} deve essere ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Stringa non valida: deve iniziare con "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Stringa non valida: deve terminare con "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Stringa non valida: deve includere "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Stringa non valida: deve corrispondere al pattern ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Numero non valido: deve essere un multiplo di ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Chiav${issue2.keys.length > 1 ? "i" : "e"} non riconosciut${issue2.keys.length > 1 ? "e" : "a"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Chiave non valida in ${issue2.origin}`;
          case "invalid_union":
            return "Input non valido";
          case "invalid_element":
            return `Valore non valido in ${issue2.origin}`;
          default:
            return `Input non valido`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ja.js
function ja_default() {
  return {
    localeError: error21()
  };
}
var error21;
var init_ja = __esm({
  "node_modules/zod/v4/locales/ja.js"() {
    init_util();
    error21 = () => {
      const Sizable = {
        string: { unit: "\u6587\u5B57", verb: "\u3067\u3042\u308B" },
        file: { unit: "\u30D0\u30A4\u30C8", verb: "\u3067\u3042\u308B" },
        array: { unit: "\u8981\u7D20", verb: "\u3067\u3042\u308B" },
        set: { unit: "\u8981\u7D20", verb: "\u3067\u3042\u308B" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u6570\u5024";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u914D\u5217";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u5165\u529B\u5024",
        email: "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9",
        url: "URL",
        emoji: "\u7D75\u6587\u5B57",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO\u65E5\u6642",
        date: "ISO\u65E5\u4ED8",
        time: "ISO\u6642\u523B",
        duration: "ISO\u671F\u9593",
        ipv4: "IPv4\u30A2\u30C9\u30EC\u30B9",
        ipv6: "IPv6\u30A2\u30C9\u30EC\u30B9",
        cidrv4: "IPv4\u7BC4\u56F2",
        cidrv6: "IPv6\u7BC4\u56F2",
        base64: "base64\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",
        base64url: "base64url\u30A8\u30F3\u30B3\u30FC\u30C9\u6587\u5B57\u5217",
        json_string: "JSON\u6587\u5B57\u5217",
        e164: "E.164\u756A\u53F7",
        jwt: "JWT",
        template_literal: "\u5165\u529B\u5024"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u7121\u52B9\u306A\u5165\u529B: ${issue2.expected}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F\u304C\u3001${parsedType5(issue2.input)}\u304C\u5165\u529B\u3055\u308C\u307E\u3057\u305F`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u7121\u52B9\u306A\u5165\u529B: ${stringifyPrimitive(issue2.values[0])}\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F`;
            return `\u7121\u52B9\u306A\u9078\u629E: ${joinValues(issue2.values, "\u3001")}\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u4EE5\u4E0B\u3067\u3042\u308B" : "\u3088\u308A\u5C0F\u3055\u3044";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u5927\u304D\u3059\u304E\u308B\u5024: ${issue2.origin ?? "\u5024"}\u306F${issue2.maximum.toString()}${sizing.unit ?? "\u8981\u7D20"}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u5927\u304D\u3059\u304E\u308B\u5024: ${issue2.origin ?? "\u5024"}\u306F${issue2.maximum.toString()}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u4EE5\u4E0A\u3067\u3042\u308B" : "\u3088\u308A\u5927\u304D\u3044";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u5C0F\u3055\u3059\u304E\u308B\u5024: ${issue2.origin}\u306F${issue2.minimum.toString()}${sizing.unit}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u5C0F\u3055\u3059\u304E\u308B\u5024: ${issue2.origin}\u306F${issue2.minimum.toString()}${adj}\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.prefix}"\u3067\u59CB\u307E\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "ends_with")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.suffix}"\u3067\u7D42\u308F\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "includes")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: "${_issue.includes}"\u3092\u542B\u3080\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            if (_issue.format === "regex")
              return `\u7121\u52B9\u306A\u6587\u5B57\u5217: \u30D1\u30BF\u30FC\u30F3${_issue.pattern}\u306B\u4E00\u81F4\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
            return `\u7121\u52B9\u306A${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u7121\u52B9\u306A\u6570\u5024: ${issue2.divisor}\u306E\u500D\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059`;
          case "unrecognized_keys":
            return `\u8A8D\u8B58\u3055\u308C\u3066\u3044\u306A\u3044\u30AD\u30FC${issue2.keys.length > 1 ? "\u7FA4" : ""}: ${joinValues(issue2.keys, "\u3001")}`;
          case "invalid_key":
            return `${issue2.origin}\u5185\u306E\u7121\u52B9\u306A\u30AD\u30FC`;
          case "invalid_union":
            return "\u7121\u52B9\u306A\u5165\u529B";
          case "invalid_element":
            return `${issue2.origin}\u5185\u306E\u7121\u52B9\u306A\u5024`;
          default:
            return `\u7121\u52B9\u306A\u5165\u529B`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/kh.js
function kh_default() {
  return {
    localeError: error22()
  };
}
var error22;
var init_kh = __esm({
  "node_modules/zod/v4/locales/kh.js"() {
    init_util();
    error22 = () => {
      const Sizable = {
        string: { unit: "\u178F\u17BD\u17A2\u1780\u17D2\u179F\u179A", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        file: { unit: "\u1794\u17C3", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        array: { unit: "\u1792\u17B6\u178F\u17BB", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" },
        set: { unit: "\u1792\u17B6\u178F\u17BB", verb: "\u1782\u17BD\u179A\u1798\u17B6\u1793" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "\u1798\u17B7\u1793\u1798\u17C2\u1793\u1787\u17B6\u179B\u17C1\u1781 (NaN)" : "\u179B\u17C1\u1781";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u17A2\u17B6\u179A\u17C1 (Array)";
            }
            if (data2 === null) {
              return "\u1782\u17D2\u1798\u17B6\u1793\u178F\u1798\u17D2\u179B\u17C3 (null)";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B",
        email: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793\u17A2\u17CA\u17B8\u1798\u17C2\u179B",
        url: "URL",
        emoji: "\u179F\u1789\u17D2\u1789\u17B6\u17A2\u17B6\u179A\u1798\u17D2\u1798\u178E\u17CD",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 \u1793\u17B7\u1784\u1798\u17C9\u17C4\u1784 ISO",
        date: "\u1780\u17B6\u179B\u1794\u179A\u17B7\u1785\u17D2\u1786\u17C1\u1791 ISO",
        time: "\u1798\u17C9\u17C4\u1784 ISO",
        duration: "\u179A\u1799\u17C8\u1796\u17C1\u179B ISO",
        ipv4: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",
        ipv6: "\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",
        cidrv4: "\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv4",
        cidrv6: "\u178A\u17C2\u1793\u17A2\u17B6\u179F\u1799\u178A\u17D2\u178B\u17B6\u1793 IPv6",
        base64: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64",
        base64url: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u17A2\u17CA\u17B7\u1780\u17BC\u178A base64url",
        json_string: "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A JSON",
        e164: "\u179B\u17C1\u1781 E.164",
        jwt: "JWT",
        template_literal: "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.expected} \u1794\u17C9\u17BB\u1793\u17D2\u178F\u17C2\u1791\u1791\u17BD\u179B\u1794\u17B6\u1793 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${stringifyPrimitive(issue2.values[0])}`;
            return `\u1787\u1798\u17D2\u179A\u17BE\u179F\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1787\u17B6\u1798\u17BD\u1799\u1780\u17D2\u1793\u17BB\u1784\u1785\u17C6\u178E\u17C4\u1798 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin ?? "\u178F\u1798\u17D2\u179B\u17C3"} ${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u1792\u17B6\u178F\u17BB"}`;
            return `\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin ?? "\u178F\u1798\u17D2\u179B\u17C3"} ${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin} ${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ${issue2.origin} ${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1785\u17B6\u1794\u17CB\u1795\u17D2\u178F\u17BE\u1798\u178A\u17C4\u1799 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1794\u1789\u17D2\u1785\u1794\u17CB\u178A\u17C4\u1799 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1798\u17B6\u1793 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1795\u17D2\u1782\u17BC\u1795\u17D2\u1782\u1784\u1793\u17B9\u1784\u1791\u1798\u17D2\u179A\u1784\u17CB\u178A\u17C2\u179B\u1794\u17B6\u1793\u1780\u17C6\u178E\u178F\u17CB ${_issue.pattern}`;
            return `\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u179B\u17C1\u1781\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1787\u17B6\u1796\u17A0\u17BB\u1782\u17BB\u178E\u1793\u17C3 ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u179A\u1780\u1783\u17BE\u1789\u179F\u17C4\u1798\u17B7\u1793\u179F\u17D2\u1782\u17B6\u179B\u17CB\u17D6 ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u179F\u17C4\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${issue2.origin}`;
          case "invalid_union":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C`;
          case "invalid_element":
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ${issue2.origin}`;
          default:
            return `\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ko.js
function ko_default() {
  return {
    localeError: error23()
  };
}
var error23;
var init_ko = __esm({
  "node_modules/zod/v4/locales/ko.js"() {
    init_util();
    error23 = () => {
      const Sizable = {
        string: { unit: "\uBB38\uC790", verb: "to have" },
        file: { unit: "\uBC14\uC774\uD2B8", verb: "to have" },
        array: { unit: "\uAC1C", verb: "to have" },
        set: { unit: "\uAC1C", verb: "to have" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\uC785\uB825",
        email: "\uC774\uBA54\uC77C \uC8FC\uC18C",
        url: "URL",
        emoji: "\uC774\uBAA8\uC9C0",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \uB0A0\uC9DC\uC2DC\uAC04",
        date: "ISO \uB0A0\uC9DC",
        time: "ISO \uC2DC\uAC04",
        duration: "ISO \uAE30\uAC04",
        ipv4: "IPv4 \uC8FC\uC18C",
        ipv6: "IPv6 \uC8FC\uC18C",
        cidrv4: "IPv4 \uBC94\uC704",
        cidrv6: "IPv6 \uBC94\uC704",
        base64: "base64 \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",
        base64url: "base64url \uC778\uCF54\uB529 \uBB38\uC790\uC5F4",
        json_string: "JSON \uBB38\uC790\uC5F4",
        e164: "E.164 \uBC88\uD638",
        jwt: "JWT",
        template_literal: "\uC785\uB825"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\uC798\uBABB\uB41C \uC785\uB825: \uC608\uC0C1 \uD0C0\uC785\uC740 ${issue2.expected}, \uBC1B\uC740 \uD0C0\uC785\uC740 ${parsedType5(issue2.input)}\uC785\uB2C8\uB2E4`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\uC798\uBABB\uB41C \uC785\uB825: \uAC12\uC740 ${stringifyPrimitive(issue2.values[0])} \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4`;
            return `\uC798\uBABB\uB41C \uC635\uC158: ${joinValues(issue2.values, "\uB610\uB294 ")} \uC911 \uD558\uB098\uC5EC\uC57C \uD569\uB2C8\uB2E4`;
          case "too_big": {
            const adj = issue2.inclusive ? "\uC774\uD558" : "\uBBF8\uB9CC";
            const suffix = adj === "\uBBF8\uB9CC" ? "\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4" : "\uC5EC\uC57C \uD569\uB2C8\uB2E4";
            const sizing = getSizing(issue2.origin);
            const unit = sizing?.unit ?? "\uC694\uC18C";
            if (sizing)
              return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${issue2.maximum.toString()}${unit} ${adj}${suffix}`;
            return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ${issue2.maximum.toString()} ${adj}${suffix}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\uC774\uC0C1" : "\uCD08\uACFC";
            const suffix = adj === "\uC774\uC0C1" ? "\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4" : "\uC5EC\uC57C \uD569\uB2C8\uB2E4";
            const sizing = getSizing(issue2.origin);
            const unit = sizing?.unit ?? "\uC694\uC18C";
            if (sizing) {
              return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${issue2.minimum.toString()}${unit} ${adj}${suffix}`;
            }
            return `${issue2.origin ?? "\uAC12"}\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ${issue2.minimum.toString()} ${adj}${suffix}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.prefix}"(\uC73C)\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4`;
            }
            if (_issue.format === "ends_with")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.suffix}"(\uC73C)\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4`;
            if (_issue.format === "includes")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: "${_issue.includes}"\uC744(\uB97C) \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4`;
            if (_issue.format === "regex")
              return `\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \uC815\uADDC\uC2DD ${_issue.pattern} \uD328\uD134\uACFC \uC77C\uCE58\uD574\uC57C \uD569\uB2C8\uB2E4`;
            return `\uC798\uBABB\uB41C ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\uC798\uBABB\uB41C \uC22B\uC790: ${issue2.divisor}\uC758 \uBC30\uC218\uC5EC\uC57C \uD569\uB2C8\uB2E4`;
          case "unrecognized_keys":
            return `\uC778\uC2DD\uD560 \uC218 \uC5C6\uB294 \uD0A4: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\uC798\uBABB\uB41C \uD0A4: ${issue2.origin}`;
          case "invalid_union":
            return `\uC798\uBABB\uB41C \uC785\uB825`;
          case "invalid_element":
            return `\uC798\uBABB\uB41C \uAC12: ${issue2.origin}`;
          default:
            return `\uC798\uBABB\uB41C \uC785\uB825`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/mk.js
function mk_default() {
  return {
    localeError: error24()
  };
}
var error24;
var init_mk = __esm({
  "node_modules/zod/v4/locales/mk.js"() {
    init_util();
    error24 = () => {
      const Sizable = {
        string: { unit: "\u0437\u043D\u0430\u0446\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        file: { unit: "\u0431\u0430\u0458\u0442\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        array: { unit: "\u0441\u0442\u0430\u0432\u043A\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" },
        set: { unit: "\u0441\u0442\u0430\u0432\u043A\u0438", verb: "\u0434\u0430 \u0438\u043C\u0430\u0430\u0442" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0431\u0440\u043E\u0458";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u043D\u0438\u0437\u0430";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0432\u043D\u0435\u0441",
        email: "\u0430\u0434\u0440\u0435\u0441\u0430 \u043D\u0430 \u0435-\u043F\u043E\u0448\u0442\u0430",
        url: "URL",
        emoji: "\u0435\u043C\u043E\u045F\u0438",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0443\u043C \u0438 \u0432\u0440\u0435\u043C\u0435",
        date: "ISO \u0434\u0430\u0442\u0443\u043C",
        time: "ISO \u0432\u0440\u0435\u043C\u0435",
        duration: "ISO \u0432\u0440\u0435\u043C\u0435\u0442\u0440\u0430\u0435\u045A\u0435",
        ipv4: "IPv4 \u0430\u0434\u0440\u0435\u0441\u0430",
        ipv6: "IPv6 \u0430\u0434\u0440\u0435\u0441\u0430",
        cidrv4: "IPv4 \u043E\u043F\u0441\u0435\u0433",
        cidrv6: "IPv6 \u043E\u043F\u0441\u0435\u0433",
        base64: "base64-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",
        base64url: "base64url-\u0435\u043D\u043A\u043E\u0434\u0438\u0440\u0430\u043D\u0430 \u043D\u0438\u0437\u0430",
        json_string: "JSON \u043D\u0438\u0437\u0430",
        e164: "E.164 \u0431\u0440\u043E\u0458",
        jwt: "JWT",
        template_literal: "\u0432\u043D\u0435\u0441"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.expected}, \u043F\u0440\u0438\u043C\u0435\u043D\u043E ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Invalid input: expected ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0413\u0440\u0435\u0448\u0430\u043D\u0430 \u043E\u043F\u0446\u0438\u0458\u0430: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 \u0435\u0434\u043D\u0430 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin ?? "\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0438\u043C\u0430 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438"}`;
            return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin ?? "\u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442\u0430"} \u0434\u0430 \u0431\u0438\u0434\u0435 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin} \u0434\u0430 \u0438\u043C\u0430 ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ${issue2.origin} \u0434\u0430 \u0431\u0438\u0434\u0435 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0443\u0432\u0430 \u0441\u043E "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u0432\u0440\u0448\u0443\u0432\u0430 \u0441\u043E "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0432\u043A\u043B\u0443\u0447\u0443\u0432\u0430 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u043E\u0434\u0433\u043E\u0430\u0440\u0430 \u043D\u0430 \u043F\u0430\u0442\u0435\u0440\u043D\u043E\u0442 ${_issue.pattern}`;
            return `Invalid ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0431\u0440\u043E\u0458: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0434\u0435\u043B\u0438\u0432 \u0441\u043E ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D\u0438 \u043A\u043B\u0443\u0447\u0435\u0432\u0438" : "\u041D\u0435\u043F\u0440\u0435\u043F\u043E\u0437\u043D\u0430\u0435\u043D \u043A\u043B\u0443\u0447"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u043A\u043B\u0443\u0447 \u0432\u043E ${issue2.origin}`;
          case "invalid_union":
            return "\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441";
          case "invalid_element":
            return `\u0413\u0440\u0435\u0448\u043D\u0430 \u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442 \u0432\u043E ${issue2.origin}`;
          default:
            return `\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ms.js
function ms_default() {
  return {
    localeError: error25()
  };
}
var error25;
var init_ms = __esm({
  "node_modules/zod/v4/locales/ms.js"() {
    init_util();
    error25 = () => {
      const Sizable = {
        string: { unit: "aksara", verb: "mempunyai" },
        file: { unit: "bait", verb: "mempunyai" },
        array: { unit: "elemen", verb: "mempunyai" },
        set: { unit: "elemen", verb: "mempunyai" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "nombor";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "alamat e-mel",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "tarikh masa ISO",
        date: "tarikh ISO",
        time: "masa ISO",
        duration: "tempoh ISO",
        ipv4: "alamat IPv4",
        ipv6: "alamat IPv6",
        cidrv4: "julat IPv4",
        cidrv6: "julat IPv6",
        base64: "string dikodkan base64",
        base64url: "string dikodkan base64url",
        json_string: "string JSON",
        e164: "nombor E.164",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Input tidak sah: dijangka ${issue2.expected}, diterima ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Input tidak sah: dijangka ${stringifyPrimitive(issue2.values[0])}`;
            return `Pilihan tidak sah: dijangka salah satu daripada ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elemen"}`;
            return `Terlalu besar: dijangka ${issue2.origin ?? "nilai"} adalah ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Terlalu kecil: dijangka ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Terlalu kecil: dijangka ${issue2.origin} adalah ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `String tidak sah: mesti bermula dengan "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `String tidak sah: mesti berakhir dengan "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `String tidak sah: mesti mengandungi "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} tidak sah`;
          }
          case "not_multiple_of":
            return `Nombor tidak sah: perlu gandaan ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kunci tidak dikenali: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kunci tidak sah dalam ${issue2.origin}`;
          case "invalid_union":
            return "Input tidak sah";
          case "invalid_element":
            return `Nilai tidak sah dalam ${issue2.origin}`;
          default:
            return `Input tidak sah`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/nl.js
function nl_default() {
  return {
    localeError: error26()
  };
}
var error26;
var init_nl = __esm({
  "node_modules/zod/v4/locales/nl.js"() {
    init_util();
    error26 = () => {
      const Sizable = {
        string: { unit: "tekens" },
        file: { unit: "bytes" },
        array: { unit: "elementen" },
        set: { unit: "elementen" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "getal";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "invoer",
        email: "emailadres",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datum en tijd",
        date: "ISO datum",
        time: "ISO tijd",
        duration: "ISO duur",
        ipv4: "IPv4-adres",
        ipv6: "IPv6-adres",
        cidrv4: "IPv4-bereik",
        cidrv6: "IPv6-bereik",
        base64: "base64-gecodeerde tekst",
        base64url: "base64 URL-gecodeerde tekst",
        json_string: "JSON string",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "invoer"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ongeldige invoer: verwacht ${issue2.expected}, ontving ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ongeldige invoer: verwacht ${stringifyPrimitive(issue2.values[0])}`;
            return `Ongeldige optie: verwacht \xE9\xE9n van ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementen"} bevat`;
            return `Te lang: verwacht dat ${issue2.origin ?? "waarde"} ${adj}${issue2.maximum.toString()} is`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} bevat`;
            }
            return `Te kort: verwacht dat ${issue2.origin} ${adj}${issue2.minimum.toString()} is`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Ongeldige tekst: moet met "${_issue.prefix}" beginnen`;
            }
            if (_issue.format === "ends_with")
              return `Ongeldige tekst: moet op "${_issue.suffix}" eindigen`;
            if (_issue.format === "includes")
              return `Ongeldige tekst: moet "${_issue.includes}" bevatten`;
            if (_issue.format === "regex")
              return `Ongeldige tekst: moet overeenkomen met patroon ${_issue.pattern}`;
            return `Ongeldig: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ongeldig getal: moet een veelvoud van ${issue2.divisor} zijn`;
          case "unrecognized_keys":
            return `Onbekende key${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ongeldige key in ${issue2.origin}`;
          case "invalid_union":
            return "Ongeldige invoer";
          case "invalid_element":
            return `Ongeldige waarde in ${issue2.origin}`;
          default:
            return `Ongeldige invoer`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/no.js
function no_default() {
  return {
    localeError: error27()
  };
}
var error27;
var init_no = __esm({
  "node_modules/zod/v4/locales/no.js"() {
    init_util();
    error27 = () => {
      const Sizable = {
        string: { unit: "tegn", verb: "\xE5 ha" },
        file: { unit: "bytes", verb: "\xE5 ha" },
        array: { unit: "elementer", verb: "\xE5 inneholde" },
        set: { unit: "elementer", verb: "\xE5 inneholde" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "tall";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "liste";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "input",
        email: "e-postadresse",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO dato- og klokkeslett",
        date: "ISO-dato",
        time: "ISO-klokkeslett",
        duration: "ISO-varighet",
        ipv4: "IPv4-omr\xE5de",
        ipv6: "IPv6-omr\xE5de",
        cidrv4: "IPv4-spekter",
        cidrv6: "IPv6-spekter",
        base64: "base64-enkodet streng",
        base64url: "base64url-enkodet streng",
        json_string: "JSON-streng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ugyldig input: forventet ${issue2.expected}, fikk ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ugyldig verdi: forventet ${stringifyPrimitive(issue2.values[0])}`;
            return `Ugyldig valg: forventet en av ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `For stor(t): forventet ${issue2.origin ?? "value"} til \xE5 ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementer"}`;
            return `For stor(t): forventet ${issue2.origin ?? "value"} til \xE5 ha ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `For lite(n): forventet ${issue2.origin} til \xE5 ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `For lite(n): forventet ${issue2.origin} til \xE5 ha ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ugyldig streng: m\xE5 starte med "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Ugyldig streng: m\xE5 ende med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ugyldig streng: m\xE5 inneholde "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ugyldig streng: m\xE5 matche m\xF8nsteret ${_issue.pattern}`;
            return `Ugyldig ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ugyldig tall: m\xE5 v\xE6re et multiplum av ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ukjente n\xF8kler" : "Ukjent n\xF8kkel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ugyldig n\xF8kkel i ${issue2.origin}`;
          case "invalid_union":
            return "Ugyldig input";
          case "invalid_element":
            return `Ugyldig verdi i ${issue2.origin}`;
          default:
            return `Ugyldig input`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ota.js
function ota_default() {
  return {
    localeError: error28()
  };
}
var error28;
var init_ota = __esm({
  "node_modules/zod/v4/locales/ota.js"() {
    init_util();
    error28 = () => {
      const Sizable = {
        string: { unit: "harf", verb: "olmal\u0131d\u0131r" },
        file: { unit: "bayt", verb: "olmal\u0131d\u0131r" },
        array: { unit: "unsur", verb: "olmal\u0131d\u0131r" },
        set: { unit: "unsur", verb: "olmal\u0131d\u0131r" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "numara";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "saf";
            }
            if (data2 === null) {
              return "gayb";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "giren",
        email: "epostag\xE2h",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO heng\xE2m\u0131",
        date: "ISO tarihi",
        time: "ISO zaman\u0131",
        duration: "ISO m\xFCddeti",
        ipv4: "IPv4 ni\u015F\xE2n\u0131",
        ipv6: "IPv6 ni\u015F\xE2n\u0131",
        cidrv4: "IPv4 menzili",
        cidrv6: "IPv6 menzili",
        base64: "base64-\u015Fifreli metin",
        base64url: "base64url-\u015Fifreli metin",
        json_string: "JSON metin",
        e164: "E.164 say\u0131s\u0131",
        jwt: "JWT",
        template_literal: "giren"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `F\xE2sit giren: umulan ${issue2.expected}, al\u0131nan ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `F\xE2sit giren: umulan ${stringifyPrimitive(issue2.values[0])}`;
            return `F\xE2sit tercih: m\xFBteberler ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Fazla b\xFCy\xFCk: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elements"} sahip olmal\u0131yd\u0131.`;
            return `Fazla b\xFCy\xFCk: ${issue2.origin ?? "value"}, ${adj}${issue2.maximum.toString()} olmal\u0131yd\u0131.`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Fazla k\xFC\xE7\xFCk: ${issue2.origin}, ${adj}${issue2.minimum.toString()} ${sizing.unit} sahip olmal\u0131yd\u0131.`;
            }
            return `Fazla k\xFC\xE7\xFCk: ${issue2.origin}, ${adj}${issue2.minimum.toString()} olmal\u0131yd\u0131.`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `F\xE2sit metin: "${_issue.prefix}" ile ba\u015Flamal\u0131.`;
            if (_issue.format === "ends_with")
              return `F\xE2sit metin: "${_issue.suffix}" ile bitmeli.`;
            if (_issue.format === "includes")
              return `F\xE2sit metin: "${_issue.includes}" ihtiv\xE2 etmeli.`;
            if (_issue.format === "regex")
              return `F\xE2sit metin: ${_issue.pattern} nak\u015F\u0131na uymal\u0131.`;
            return `F\xE2sit ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `F\xE2sit say\u0131: ${issue2.divisor} kat\u0131 olmal\u0131yd\u0131.`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan anahtar ${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} i\xE7in tan\u0131nmayan anahtar var.`;
          case "invalid_union":
            return "Giren tan\u0131namad\u0131.";
          case "invalid_element":
            return `${issue2.origin} i\xE7in tan\u0131nmayan k\u0131ymet var.`;
          default:
            return `K\u0131ymet tan\u0131namad\u0131.`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ps.js
function ps_default() {
  return {
    localeError: error29()
  };
}
var error29;
var init_ps = __esm({
  "node_modules/zod/v4/locales/ps.js"() {
    init_util();
    error29 = () => {
      const Sizable = {
        string: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" },
        file: { unit: "\u0628\u0627\u06CC\u067C\u0633", verb: "\u0648\u0644\u0631\u064A" },
        array: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" },
        set: { unit: "\u062A\u0648\u06A9\u064A", verb: "\u0648\u0644\u0631\u064A" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0639\u062F\u062F";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u0627\u0631\u06D0";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0648\u0631\u0648\u062F\u064A",
        email: "\u0628\u0631\u06CC\u069A\u0646\u0627\u0644\u06CC\u06A9",
        url: "\u06CC\u0648 \u0622\u0631 \u0627\u0644",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u064A",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0646\u06CC\u067C\u0647 \u0627\u0648 \u0648\u062E\u062A",
        date: "\u0646\u06D0\u067C\u0647",
        time: "\u0648\u062E\u062A",
        duration: "\u0645\u0648\u062F\u0647",
        ipv4: "\u062F IPv4 \u067E\u062A\u0647",
        ipv6: "\u062F IPv6 \u067E\u062A\u0647",
        cidrv4: "\u062F IPv4 \u0633\u0627\u062D\u0647",
        cidrv6: "\u062F IPv6 \u0633\u0627\u062D\u0647",
        base64: "base64-encoded \u0645\u062A\u0646",
        base64url: "base64url-encoded \u0645\u062A\u0646",
        json_string: "JSON \u0645\u062A\u0646",
        e164: "\u062F E.164 \u0634\u0645\u06D0\u0631\u0647",
        jwt: "JWT",
        template_literal: "\u0648\u0631\u0648\u062F\u064A"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${issue2.expected} \u0648\u0627\u06CC, \u0645\u06AB\u0631 ${parsedType5(issue2.input)} \u062A\u0631\u0644\u0627\u0633\u0647 \u0634\u0648`;
          case "invalid_value":
            if (issue2.values.length === 1) {
              return `\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ${stringifyPrimitive(issue2.values[0])} \u0648\u0627\u06CC`;
            }
            return `\u0646\u0627\u0633\u0645 \u0627\u0646\u062A\u062E\u0627\u0628: \u0628\u0627\u06CC\u062F \u06CC\u0648 \u0644\u0647 ${joinValues(issue2.values, "|")} \u0685\u062E\u0647 \u0648\u0627\u06CC`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${issue2.origin ?? "\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0635\u0631\u0648\u0646\u0647"} \u0648\u0644\u0631\u064A`;
            }
            return `\u0689\u06CC\u0631 \u0644\u0648\u06CC: ${issue2.origin ?? "\u0627\u0631\u0632\u069A\u062A"} \u0628\u0627\u06CC\u062F ${adj}${issue2.maximum.toString()} \u0648\u064A`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0648\u0644\u0631\u064A`;
            }
            return `\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ${issue2.origin} \u0628\u0627\u06CC\u062F ${adj}${issue2.minimum.toString()} \u0648\u064A`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${_issue.prefix}" \u0633\u0631\u0647 \u067E\u06CC\u0644 \u0634\u064A`;
            }
            if (_issue.format === "ends_with") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F "${_issue.suffix}" \u0633\u0631\u0647 \u067E\u0627\u06CC \u062A\u0647 \u0648\u0631\u0633\u064A\u0696\u064A`;
            }
            if (_issue.format === "includes") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F "${_issue.includes}" \u0648\u0644\u0631\u064A`;
            }
            if (_issue.format === "regex") {
              return `\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F ${_issue.pattern} \u0633\u0631\u0647 \u0645\u0637\u0627\u0628\u0642\u062A \u0648\u0644\u0631\u064A`;
            }
            return `${Nouns[_issue.format] ?? issue2.format} \u0646\u0627\u0633\u0645 \u062F\u06CC`;
          }
          case "not_multiple_of":
            return `\u0646\u0627\u0633\u0645 \u0639\u062F\u062F: \u0628\u0627\u06CC\u062F \u062F ${issue2.divisor} \u0645\u0636\u0631\u0628 \u0648\u064A`;
          case "unrecognized_keys":
            return `\u0646\u0627\u0633\u0645 ${issue2.keys.length > 1 ? "\u06A9\u0644\u06CC\u0689\u0648\u0646\u0647" : "\u06A9\u0644\u06CC\u0689"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0646\u0627\u0633\u0645 \u06A9\u0644\u06CC\u0689 \u067E\u0647 ${issue2.origin} \u06A9\u06D0`;
          case "invalid_union":
            return `\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A`;
          case "invalid_element":
            return `\u0646\u0627\u0633\u0645 \u0639\u0646\u0635\u0631 \u067E\u0647 ${issue2.origin} \u06A9\u06D0`;
          default:
            return `\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/pl.js
function pl_default() {
  return {
    localeError: error30()
  };
}
var error30;
var init_pl = __esm({
  "node_modules/zod/v4/locales/pl.js"() {
    init_util();
    error30 = () => {
      const Sizable = {
        string: { unit: "znak\xF3w", verb: "mie\u0107" },
        file: { unit: "bajt\xF3w", verb: "mie\u0107" },
        array: { unit: "element\xF3w", verb: "mie\u0107" },
        set: { unit: "element\xF3w", verb: "mie\u0107" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "liczba";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "tablica";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "wyra\u017Cenie",
        email: "adres email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data i godzina w formacie ISO",
        date: "data w formacie ISO",
        time: "godzina w formacie ISO",
        duration: "czas trwania ISO",
        ipv4: "adres IPv4",
        ipv6: "adres IPv6",
        cidrv4: "zakres IPv4",
        cidrv6: "zakres IPv6",
        base64: "ci\u0105g znak\xF3w zakodowany w formacie base64",
        base64url: "ci\u0105g znak\xF3w zakodowany w formacie base64url",
        json_string: "ci\u0105g znak\xF3w w formacie JSON",
        e164: "liczba E.164",
        jwt: "JWT",
        template_literal: "wej\u015Bcie"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${issue2.expected}, otrzymano ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ${stringifyPrimitive(issue2.values[0])}`;
            return `Nieprawid\u0142owa opcja: oczekiwano jednej z warto\u015Bci ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Za du\u017Ca warto\u015B\u0107: oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie mie\u0107 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element\xF3w"}`;
            }
            return `Zbyt du\u017C(y/a/e): oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Za ma\u0142a warto\u015B\u0107: oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie mie\u0107 ${adj}${issue2.minimum.toString()} ${sizing.unit ?? "element\xF3w"}`;
            }
            return `Zbyt ma\u0142(y/a/e): oczekiwano, \u017Ce ${issue2.origin ?? "warto\u015B\u0107"} b\u0119dzie wynosi\u0107 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zaczyna\u0107 si\u0119 od "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi ko\u0144czy\u0107 si\u0119 na "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zawiera\u0107 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Nieprawid\u0142owy ci\u0105g znak\xF3w: musi odpowiada\u0107 wzorcowi ${_issue.pattern}`;
            return `Nieprawid\u0142ow(y/a/e) ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Nieprawid\u0142owa liczba: musi by\u0107 wielokrotno\u015Bci\u0105 ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Nierozpoznane klucze${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Nieprawid\u0142owy klucz w ${issue2.origin}`;
          case "invalid_union":
            return "Nieprawid\u0142owe dane wej\u015Bciowe";
          case "invalid_element":
            return `Nieprawid\u0142owa warto\u015B\u0107 w ${issue2.origin}`;
          default:
            return `Nieprawid\u0142owe dane wej\u015Bciowe`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/pt.js
function pt_default() {
  return {
    localeError: error31()
  };
}
var error31;
var init_pt = __esm({
  "node_modules/zod/v4/locales/pt.js"() {
    init_util();
    error31 = () => {
      const Sizable = {
        string: { unit: "caracteres", verb: "ter" },
        file: { unit: "bytes", verb: "ter" },
        array: { unit: "itens", verb: "ter" },
        set: { unit: "itens", verb: "ter" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "n\xFAmero";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "nulo";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "padr\xE3o",
        email: "endere\xE7o de e-mail",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data e hora ISO",
        date: "data ISO",
        time: "hora ISO",
        duration: "dura\xE7\xE3o ISO",
        ipv4: "endere\xE7o IPv4",
        ipv6: "endere\xE7o IPv6",
        cidrv4: "faixa de IPv4",
        cidrv6: "faixa de IPv6",
        base64: "texto codificado em base64",
        base64url: "URL codificada em base64",
        json_string: "texto JSON",
        e164: "n\xFAmero E.164",
        jwt: "JWT",
        template_literal: "entrada"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Tipo inv\xE1lido: esperado ${issue2.expected}, recebido ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Entrada inv\xE1lida: esperado ${stringifyPrimitive(issue2.values[0])}`;
            return `Op\xE7\xE3o inv\xE1lida: esperada uma das ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Muito grande: esperado que ${issue2.origin ?? "valor"} tivesse ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementos"}`;
            return `Muito grande: esperado que ${issue2.origin ?? "valor"} fosse ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Muito pequeno: esperado que ${issue2.origin} tivesse ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Muito pequeno: esperado que ${issue2.origin} fosse ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Texto inv\xE1lido: deve come\xE7ar com "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Texto inv\xE1lido: deve terminar com "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Texto inv\xE1lido: deve incluir "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Texto inv\xE1lido: deve corresponder ao padr\xE3o ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} inv\xE1lido`;
          }
          case "not_multiple_of":
            return `N\xFAmero inv\xE1lido: deve ser m\xFAltiplo de ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Chave${issue2.keys.length > 1 ? "s" : ""} desconhecida${issue2.keys.length > 1 ? "s" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Chave inv\xE1lida em ${issue2.origin}`;
          case "invalid_union":
            return "Entrada inv\xE1lida";
          case "invalid_element":
            return `Valor inv\xE1lido em ${issue2.origin}`;
          default:
            return `Campo inv\xE1lido`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ru.js
function getRussianPlural(count, one3, few, many) {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }
  if (lastDigit === 1) {
    return one3;
  }
  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }
  return many;
}
function ru_default() {
  return {
    localeError: error32()
  };
}
var error32;
var init_ru = __esm({
  "node_modules/zod/v4/locales/ru.js"() {
    init_util();
    error32 = () => {
      const Sizable = {
        string: {
          unit: {
            one: "\u0441\u0438\u043C\u0432\u043E\u043B",
            few: "\u0441\u0438\u043C\u0432\u043E\u043B\u0430",
            many: "\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        file: {
          unit: {
            one: "\u0431\u0430\u0439\u0442",
            few: "\u0431\u0430\u0439\u0442\u0430",
            many: "\u0431\u0430\u0439\u0442"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        array: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        },
        set: {
          unit: {
            one: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442",
            few: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",
            many: "\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432"
          },
          verb: "\u0438\u043C\u0435\u0442\u044C"
        }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0447\u0438\u0441\u043B\u043E";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u043C\u0430\u0441\u0441\u0438\u0432";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0432\u0432\u043E\u0434",
        email: "email \u0430\u0434\u0440\u0435\u0441",
        url: "URL",
        emoji: "\u044D\u043C\u043E\u0434\u0437\u0438",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043C\u044F",
        date: "ISO \u0434\u0430\u0442\u0430",
        time: "ISO \u0432\u0440\u0435\u043C\u044F",
        duration: "ISO \u0434\u043B\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C",
        ipv4: "IPv4 \u0430\u0434\u0440\u0435\u0441",
        ipv6: "IPv6 \u0430\u0434\u0440\u0435\u0441",
        cidrv4: "IPv4 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
        cidrv6: "IPv6 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D",
        base64: "\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64",
        base64url: "\u0441\u0442\u0440\u043E\u043A\u0430 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 base64url",
        json_string: "JSON \u0441\u0442\u0440\u043E\u043A\u0430",
        e164: "\u043D\u043E\u043C\u0435\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0432\u0432\u043E\u0434"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${issue2.expected}, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0434\u043D\u043E \u0438\u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const maxValue = Number(issue2.maximum);
              const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${adj}${issue2.maximum.toString()} ${unit}`;
            }
            return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435"} \u0431\u0443\u0434\u0435\u0442 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              const minValue = Number(issue2.minimum);
              const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin} \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ${adj}${issue2.minimum.toString()} ${unit}`;
            }
            return `\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ${issue2.origin} \u0431\u0443\u0434\u0435\u0442 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u0442\u044C\u0441\u044F \u0441 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043D\u043D${issue2.keys.length > 1 ? "\u044B\u0435" : "\u044B\u0439"} \u043A\u043B\u044E\u0447${issue2.keys.length > 1 ? "\u0438" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043A\u043B\u044E\u0447 \u0432 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435";
          case "invalid_element":
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 ${issue2.origin}`;
          default:
            return `\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/sl.js
function sl_default() {
  return {
    localeError: error33()
  };
}
var error33;
var init_sl = __esm({
  "node_modules/zod/v4/locales/sl.js"() {
    init_util();
    error33 = () => {
      const Sizable = {
        string: { unit: "znakov", verb: "imeti" },
        file: { unit: "bajtov", verb: "imeti" },
        array: { unit: "elementov", verb: "imeti" },
        set: { unit: "elementov", verb: "imeti" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0161tevilo";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "tabela";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "vnos",
        email: "e-po\u0161tni naslov",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datum in \u010Das",
        date: "ISO datum",
        time: "ISO \u010Das",
        duration: "ISO trajanje",
        ipv4: "IPv4 naslov",
        ipv6: "IPv6 naslov",
        cidrv4: "obseg IPv4",
        cidrv6: "obseg IPv6",
        base64: "base64 kodiran niz",
        base64url: "base64url kodiran niz",
        json_string: "JSON niz",
        e164: "E.164 \u0161tevilka",
        jwt: "JWT",
        template_literal: "vnos"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Neveljaven vnos: pri\u010Dakovano ${issue2.expected}, prejeto ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Neveljaven vnos: pri\u010Dakovano ${stringifyPrimitive(issue2.values[0])}`;
            return `Neveljavna mo\u017Enost: pri\u010Dakovano eno izmed ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Preveliko: pri\u010Dakovano, da bo ${issue2.origin ?? "vrednost"} imelo ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "elementov"}`;
            return `Preveliko: pri\u010Dakovano, da bo ${issue2.origin ?? "vrednost"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Premajhno: pri\u010Dakovano, da bo ${issue2.origin} imelo ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Premajhno: pri\u010Dakovano, da bo ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Neveljaven niz: mora se za\u010Deti z "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Neveljaven niz: mora se kon\u010Dati z "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Neveljaven niz: mora vsebovati "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;
            return `Neveljaven ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Neveljavno \u0161tevilo: mora biti ve\u010Dkratnik ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Neprepoznan${issue2.keys.length > 1 ? "i klju\u010Di" : " klju\u010D"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Neveljaven klju\u010D v ${issue2.origin}`;
          case "invalid_union":
            return "Neveljaven vnos";
          case "invalid_element":
            return `Neveljavna vrednost v ${issue2.origin}`;
          default:
            return "Neveljaven vnos";
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/sv.js
function sv_default() {
  return {
    localeError: error34()
  };
}
var error34;
var init_sv = __esm({
  "node_modules/zod/v4/locales/sv.js"() {
    init_util();
    error34 = () => {
      const Sizable = {
        string: { unit: "tecken", verb: "att ha" },
        file: { unit: "bytes", verb: "att ha" },
        array: { unit: "objekt", verb: "att inneh\xE5lla" },
        set: { unit: "objekt", verb: "att inneh\xE5lla" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "antal";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "lista";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "regulj\xE4rt uttryck",
        email: "e-postadress",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO-datum och tid",
        date: "ISO-datum",
        time: "ISO-tid",
        duration: "ISO-varaktighet",
        ipv4: "IPv4-intervall",
        ipv6: "IPv6-intervall",
        cidrv4: "IPv4-spektrum",
        cidrv6: "IPv6-spektrum",
        base64: "base64-kodad str\xE4ng",
        base64url: "base64url-kodad str\xE4ng",
        json_string: "JSON-str\xE4ng",
        e164: "E.164-nummer",
        jwt: "JWT",
        template_literal: "mall-literal"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ogiltig inmatning: f\xF6rv\xE4ntat ${issue2.expected}, fick ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ogiltig inmatning: f\xF6rv\xE4ntat ${stringifyPrimitive(issue2.values[0])}`;
            return `Ogiltigt val: f\xF6rv\xE4ntade en av ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `F\xF6r stor(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "element"}`;
            }
            return `F\xF6r stor(t): f\xF6rv\xE4ntat ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `F\xF6r lite(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `F\xF6r lite(t): f\xF6rv\xE4ntade ${issue2.origin ?? "v\xE4rdet"} att ha ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `Ogiltig str\xE4ng: m\xE5ste b\xF6rja med "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `Ogiltig str\xE4ng: m\xE5ste sluta med "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Ogiltig str\xE4ng: m\xE5ste inneh\xE5lla "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Ogiltig str\xE4ng: m\xE5ste matcha m\xF6nstret "${_issue.pattern}"`;
            return `Ogiltig(t) ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ogiltigt tal: m\xE5ste vara en multipel av ${issue2.divisor}`;
          case "unrecognized_keys":
            return `${issue2.keys.length > 1 ? "Ok\xE4nda nycklar" : "Ok\xE4nd nyckel"}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Ogiltig nyckel i ${issue2.origin ?? "v\xE4rdet"}`;
          case "invalid_union":
            return "Ogiltig input";
          case "invalid_element":
            return `Ogiltigt v\xE4rde i ${issue2.origin ?? "v\xE4rdet"}`;
          default:
            return `Ogiltig input`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ta.js
function ta_default() {
  return {
    localeError: error35()
  };
}
var error35;
var init_ta = __esm({
  "node_modules/zod/v4/locales/ta.js"() {
    init_util();
    error35 = () => {
      const Sizable = {
        string: { unit: "\u0B8E\u0BB4\u0BC1\u0BA4\u0BCD\u0BA4\u0BC1\u0B95\u0BCD\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        file: { unit: "\u0BAA\u0BC8\u0B9F\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        array: { unit: "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" },
        set: { unit: "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD", verb: "\u0B95\u0BCA\u0BA3\u0BCD\u0B9F\u0BBF\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "\u0B8E\u0BA3\u0BCD \u0B85\u0BB2\u0BCD\u0BB2\u0BBE\u0BA4\u0BA4\u0BC1" : "\u0B8E\u0BA3\u0BCD";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u0B85\u0BA3\u0BBF";
            }
            if (data2 === null) {
              return "\u0BB5\u0BC6\u0BB1\u0BC1\u0BAE\u0BC8";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1",
        email: "\u0BAE\u0BBF\u0BA9\u0BCD\u0BA9\u0B9E\u0BCD\u0B9A\u0BB2\u0BCD \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u0BA4\u0BC7\u0BA4\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
        date: "ISO \u0BA4\u0BC7\u0BA4\u0BBF",
        time: "ISO \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
        duration: "ISO \u0B95\u0BBE\u0BB2 \u0B85\u0BB3\u0BB5\u0BC1",
        ipv4: "IPv4 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        ipv6: "IPv6 \u0BAE\u0BC1\u0B95\u0BB5\u0BB0\u0BBF",
        cidrv4: "IPv4 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",
        cidrv6: "IPv6 \u0BB5\u0BB0\u0BAE\u0BCD\u0BAA\u0BC1",
        base64: "base64-encoded \u0B9A\u0BB0\u0BAE\u0BCD",
        base64url: "base64url-encoded \u0B9A\u0BB0\u0BAE\u0BCD",
        json_string: "JSON \u0B9A\u0BB0\u0BAE\u0BCD",
        e164: "E.164 \u0B8E\u0BA3\u0BCD",
        jwt: "JWT",
        template_literal: "input"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.expected}, \u0BAA\u0BC6\u0BB1\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0BB0\u0BC1\u0BAA\u0BCD\u0BAA\u0BAE\u0BCD: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${joinValues(issue2.values, "|")} \u0B87\u0BB2\u0BCD \u0B92\u0BA9\u0BCD\u0BB1\u0BC1`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin ?? "\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0B89\u0BB1\u0BC1\u0BAA\u0BCD\u0BAA\u0BC1\u0B95\u0BB3\u0BCD"} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            }
            return `\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin ?? "\u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1"} ${adj}${issue2.maximum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            }
            return `\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ${issue2.origin} ${adj}${issue2.minimum.toString()} \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.prefix}" \u0B87\u0BB2\u0BCD \u0BA4\u0BCA\u0B9F\u0B99\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "ends_with")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.suffix}" \u0B87\u0BB2\u0BCD \u0BAE\u0BC1\u0B9F\u0BBF\u0BB5\u0B9F\u0BC8\u0BAF \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "includes")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: "${_issue.includes}" \u0B90 \u0B89\u0BB3\u0BCD\u0BB3\u0B9F\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            if (_issue.format === "regex")
              return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: ${_issue.pattern} \u0BAE\u0BC1\u0BB1\u0BC8\u0BAA\u0BBE\u0B9F\u0BCD\u0B9F\u0BC1\u0B9F\u0BA9\u0BCD \u0BAA\u0BCA\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B8E\u0BA3\u0BCD: ${issue2.divisor} \u0B87\u0BA9\u0BCD \u0BAA\u0BB2\u0BAE\u0BBE\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD`;
          case "unrecognized_keys":
            return `\u0B85\u0B9F\u0BC8\u0BAF\u0BBE\u0BB3\u0BAE\u0BCD \u0BA4\u0BC6\u0BB0\u0BBF\u0BAF\u0BBE\u0BA4 \u0BB5\u0BBF\u0B9A\u0BC8${issue2.keys.length > 1 ? "\u0B95\u0BB3\u0BCD" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0B9A\u0BC8`;
          case "invalid_union":
            return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1";
          case "invalid_element":
            return `${issue2.origin} \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1`;
          default:
            return `\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/th.js
function th_default() {
  return {
    localeError: error36()
  };
}
var error36;
var init_th = __esm({
  "node_modules/zod/v4/locales/th.js"() {
    init_util();
    error36 = () => {
      const Sizable = {
        string: { unit: "\u0E15\u0E31\u0E27\u0E2D\u0E31\u0E01\u0E29\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        file: { unit: "\u0E44\u0E1A\u0E15\u0E4C", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        array: { unit: "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" },
        set: { unit: "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23", verb: "\u0E04\u0E27\u0E23\u0E21\u0E35" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "\u0E44\u0E21\u0E48\u0E43\u0E0A\u0E48\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02 (NaN)" : "\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E23\u0E22\u0E4C (Array)";
            }
            if (data2 === null) {
              return "\u0E44\u0E21\u0E48\u0E21\u0E35\u0E04\u0E48\u0E32 (null)";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19",
        email: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E2D\u0E35\u0E40\u0E21\u0E25",
        url: "URL",
        emoji: "\u0E2D\u0E34\u0E42\u0E21\u0E08\u0E34",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        date: "\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E41\u0E1A\u0E1A ISO",
        time: "\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        duration: "\u0E0A\u0E48\u0E27\u0E07\u0E40\u0E27\u0E25\u0E32\u0E41\u0E1A\u0E1A ISO",
        ipv4: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv4",
        ipv6: "\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48 IPv6",
        cidrv4: "\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv4",
        cidrv6: "\u0E0A\u0E48\u0E27\u0E07 IP \u0E41\u0E1A\u0E1A IPv6",
        base64: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64",
        base64url: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A Base64 \u0E2A\u0E33\u0E2B\u0E23\u0E31\u0E1A URL",
        json_string: "\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E41\u0E1A\u0E1A JSON",
        e164: "\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E42\u0E17\u0E23\u0E28\u0E31\u0E1E\u0E17\u0E4C\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28 (E.164)",
        jwt: "\u0E42\u0E17\u0E40\u0E04\u0E19 JWT",
        template_literal: "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E17\u0E35\u0E48\u0E1B\u0E49\u0E2D\u0E19"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${issue2.expected} \u0E41\u0E15\u0E48\u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0E04\u0E48\u0E32\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ${stringifyPrimitive(issue2.values[0])}`;
            return `\u0E15\u0E31\u0E27\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E43\u0E19 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "\u0E44\u0E21\u0E48\u0E40\u0E01\u0E34\u0E19" : "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin ?? "\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.maximum.toString()} ${sizing.unit ?? "\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23"}`;
            return `\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin ?? "\u0E04\u0E48\u0E32"} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? "\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E19\u0E49\u0E2D\u0E22" : "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ${issue2.origin} \u0E04\u0E27\u0E23\u0E21\u0E35${adj} ${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E02\u0E36\u0E49\u0E19\u0E15\u0E49\u0E19\u0E14\u0E49\u0E27\u0E22 "${_issue.prefix}"`;
            }
            if (_issue.format === "ends_with")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E25\u0E07\u0E17\u0E49\u0E32\u0E22\u0E14\u0E49\u0E27\u0E22 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E21\u0E35 "${_issue.includes}" \u0E2D\u0E22\u0E39\u0E48\u0E43\u0E19\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21`;
            if (_issue.format === "regex")
              return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14 ${_issue.pattern}`;
            return `\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E33\u0E19\u0E27\u0E19\u0E17\u0E35\u0E48\u0E2B\u0E32\u0E23\u0E14\u0E49\u0E27\u0E22 ${issue2.divisor} \u0E44\u0E14\u0E49\u0E25\u0E07\u0E15\u0E31\u0E27`;
          case "unrecognized_keys":
            return `\u0E1E\u0E1A\u0E04\u0E35\u0E22\u0E4C\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E23\u0E39\u0E49\u0E08\u0E31\u0E01: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u0E04\u0E35\u0E22\u0E4C\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${issue2.origin}`;
          case "invalid_union":
            return "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E44\u0E21\u0E48\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E22\u0E39\u0E40\u0E19\u0E35\u0E22\u0E19\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14\u0E44\u0E27\u0E49";
          case "invalid_element":
            return `\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ${issue2.origin}`;
          default:
            return `\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/tr.js
function tr_default() {
  return {
    localeError: error37()
  };
}
var parsedType4, error37;
var init_tr = __esm({
  "node_modules/zod/v4/locales/tr.js"() {
    init_util();
    parsedType4 = (data2) => {
      const t4 = typeof data2;
      switch (t4) {
        case "number": {
          return Number.isNaN(data2) ? "NaN" : "number";
        }
        case "object": {
          if (Array.isArray(data2)) {
            return "array";
          }
          if (data2 === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
            return data2.constructor.name;
          }
        }
      }
      return t4;
    };
    error37 = () => {
      const Sizable = {
        string: { unit: "karakter", verb: "olmal\u0131" },
        file: { unit: "bayt", verb: "olmal\u0131" },
        array: { unit: "\xF6\u011Fe", verb: "olmal\u0131" },
        set: { unit: "\xF6\u011Fe", verb: "olmal\u0131" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const Nouns = {
        regex: "girdi",
        email: "e-posta adresi",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO tarih ve saat",
        date: "ISO tarih",
        time: "ISO saat",
        duration: "ISO s\xFCre",
        ipv4: "IPv4 adresi",
        ipv6: "IPv6 adresi",
        cidrv4: "IPv4 aral\u0131\u011F\u0131",
        cidrv6: "IPv6 aral\u0131\u011F\u0131",
        base64: "base64 ile \u015Fifrelenmi\u015F metin",
        base64url: "base64url ile \u015Fifrelenmi\u015F metin",
        json_string: "JSON dizesi",
        e164: "E.164 say\u0131s\u0131",
        jwt: "JWT",
        template_literal: "\u015Eablon dizesi"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `Ge\xE7ersiz de\u011Fer: beklenen ${issue2.expected}, al\u0131nan ${parsedType4(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `Ge\xE7ersiz de\u011Fer: beklenen ${stringifyPrimitive(issue2.values[0])}`;
            return `Ge\xE7ersiz se\xE7enek: a\u015Fa\u011F\u0131dakilerden biri olmal\u0131: ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ok b\xFCy\xFCk: beklenen ${issue2.origin ?? "de\u011Fer"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\xF6\u011Fe"}`;
            return `\xC7ok b\xFCy\xFCk: beklenen ${issue2.origin ?? "de\u011Fer"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\xC7ok k\xFC\xE7\xFCk: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            return `\xC7ok k\xFC\xE7\xFCk: beklenen ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Ge\xE7ersiz metin: "${_issue.prefix}" ile ba\u015Flamal\u0131`;
            if (_issue.format === "ends_with")
              return `Ge\xE7ersiz metin: "${_issue.suffix}" ile bitmeli`;
            if (_issue.format === "includes")
              return `Ge\xE7ersiz metin: "${_issue.includes}" i\xE7ermeli`;
            if (_issue.format === "regex")
              return `Ge\xE7ersiz metin: ${_issue.pattern} desenine uymal\u0131`;
            return `Ge\xE7ersiz ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `Ge\xE7ersiz say\u0131: ${issue2.divisor} ile tam b\xF6l\xFCnebilmeli`;
          case "unrecognized_keys":
            return `Tan\u0131nmayan anahtar${issue2.keys.length > 1 ? "lar" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} i\xE7inde ge\xE7ersiz anahtar`;
          case "invalid_union":
            return "Ge\xE7ersiz de\u011Fer";
          case "invalid_element":
            return `${issue2.origin} i\xE7inde ge\xE7ersiz de\u011Fer`;
          default:
            return `Ge\xE7ersiz de\u011Fer`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ua.js
function ua_default() {
  return {
    localeError: error38()
  };
}
var error38;
var init_ua = __esm({
  "node_modules/zod/v4/locales/ua.js"() {
    init_util();
    error38 = () => {
      const Sizable = {
        string: { unit: "\u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        file: { unit: "\u0431\u0430\u0439\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        array: { unit: "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" },
        set: { unit: "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432", verb: "\u043C\u0430\u0442\u0438\u043C\u0435" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0447\u0438\u0441\u043B\u043E";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u043C\u0430\u0441\u0438\u0432";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456",
        email: "\u0430\u0434\u0440\u0435\u0441\u0430 \u0435\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0457 \u043F\u043E\u0448\u0442\u0438",
        url: "URL",
        emoji: "\u0435\u043C\u043E\u0434\u0437\u0456",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\u0434\u0430\u0442\u0430 \u0442\u0430 \u0447\u0430\u0441 ISO",
        date: "\u0434\u0430\u0442\u0430 ISO",
        time: "\u0447\u0430\u0441 ISO",
        duration: "\u0442\u0440\u0438\u0432\u0430\u043B\u0456\u0441\u0442\u044C ISO",
        ipv4: "\u0430\u0434\u0440\u0435\u0441\u0430 IPv4",
        ipv6: "\u0430\u0434\u0440\u0435\u0441\u0430 IPv6",
        cidrv4: "\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv4",
        cidrv6: "\u0434\u0456\u0430\u043F\u0430\u0437\u043E\u043D IPv6",
        base64: "\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64",
        base64url: "\u0440\u044F\u0434\u043E\u043A \u0443 \u043A\u043E\u0434\u0443\u0432\u0430\u043D\u043D\u0456 base64url",
        json_string: "\u0440\u044F\u0434\u043E\u043A JSON",
        e164: "\u043D\u043E\u043C\u0435\u0440 E.164",
        jwt: "JWT",
        template_literal: "\u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${issue2.expected}, \u043E\u0442\u0440\u0438\u043C\u0430\u043D\u043E ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ${stringifyPrimitive(issue2.values[0])}`;
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0430 \u043E\u043F\u0446\u0456\u044F: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F \u043E\u0434\u043D\u0435 \u0437 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432"}`;
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin ?? "\u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F"} \u0431\u0443\u0434\u0435 ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ${issue2.origin} \u0431\u0443\u0434\u0435 ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043F\u043E\u0447\u0438\u043D\u0430\u0442\u0438\u0441\u044F \u0437 "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0432\u0430\u0442\u0438\u0441\u044F \u043D\u0430 "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043C\u0456\u0441\u0442\u0438\u0442\u0438 "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0430\u0442\u0438 \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ${_issue.pattern}`;
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0447\u0438\u0441\u043B\u043E: \u043F\u043E\u0432\u0438\u043D\u043D\u043E \u0431\u0443\u0442\u0438 \u043A\u0440\u0430\u0442\u043D\u0438\u043C ${issue2.divisor}`;
          case "unrecognized_keys":
            return `\u041D\u0435\u0440\u043E\u0437\u043F\u0456\u0437\u043D\u0430\u043D\u0438\u0439 \u043A\u043B\u044E\u0447${issue2.keys.length > 1 ? "\u0456" : ""}: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u043A\u043B\u044E\u0447 \u0443 ${issue2.origin}`;
          case "invalid_union":
            return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456";
          case "invalid_element":
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0443 ${issue2.origin}`;
          default:
            return `\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/ur.js
function ur_default() {
  return {
    localeError: error39()
  };
}
var error39;
var init_ur = __esm({
  "node_modules/zod/v4/locales/ur.js"() {
    init_util();
    error39 = () => {
      const Sizable = {
        string: { unit: "\u062D\u0631\u0648\u0641", verb: "\u06C1\u0648\u0646\u0627" },
        file: { unit: "\u0628\u0627\u0626\u0679\u0633", verb: "\u06C1\u0648\u0646\u0627" },
        array: { unit: "\u0622\u0626\u0679\u0645\u0632", verb: "\u06C1\u0648\u0646\u0627" },
        set: { unit: "\u0622\u0626\u0679\u0645\u0632", verb: "\u06C1\u0648\u0646\u0627" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "\u0646\u0645\u0628\u0631";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u0622\u0631\u06D2";
            }
            if (data2 === null) {
              return "\u0646\u0644";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0627\u0646 \u067E\u0679",
        email: "\u0627\u06CC \u0645\u06CC\u0644 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        url: "\u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644",
        emoji: "\u0627\u06CC\u0645\u0648\u062C\u06CC",
        uuid: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        uuidv4: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 4",
        uuidv6: "\u06CC\u0648 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC \u0648\u06CC 6",
        nanoid: "\u0646\u06CC\u0646\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        guid: "\u062C\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        cuid: "\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        cuid2: "\u0633\u06CC \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC 2",
        ulid: "\u06CC\u0648 \u0627\u06CC\u0644 \u0622\u0626\u06CC \u0688\u06CC",
        xid: "\u0627\u06CC\u06A9\u0633 \u0622\u0626\u06CC \u0688\u06CC",
        ksuid: "\u06A9\u06D2 \u0627\u06CC\u0633 \u06CC\u0648 \u0622\u0626\u06CC \u0688\u06CC",
        datetime: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0688\u06CC\u0679 \u0679\u0627\u0626\u0645",
        date: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u062A\u0627\u0631\u06CC\u062E",
        time: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0648\u0642\u062A",
        duration: "\u0622\u0626\u06CC \u0627\u06CC\u0633 \u0627\u0648 \u0645\u062F\u062A",
        ipv4: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        ipv6: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0627\u06CC\u0688\u0631\u06CC\u0633",
        cidrv4: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 4 \u0631\u06CC\u0646\u062C",
        cidrv6: "\u0622\u0626\u06CC \u067E\u06CC \u0648\u06CC 6 \u0631\u06CC\u0646\u062C",
        base64: "\u0628\u06CC\u0633 64 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",
        base64url: "\u0628\u06CC\u0633 64 \u06CC\u0648 \u0622\u0631 \u0627\u06CC\u0644 \u0627\u0646 \u06A9\u0648\u0688\u0688 \u0633\u0679\u0631\u0646\u06AF",
        json_string: "\u062C\u06D2 \u0627\u06CC\u0633 \u0627\u0648 \u0627\u06CC\u0646 \u0633\u0679\u0631\u0646\u06AF",
        e164: "\u0627\u06CC 164 \u0646\u0645\u0628\u0631",
        jwt: "\u062C\u06D2 \u0688\u0628\u0644\u06CC\u0648 \u0679\u06CC",
        template_literal: "\u0627\u0646 \u067E\u0679"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${issue2.expected} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627\u060C ${parsedType5(issue2.input)} \u0645\u0648\u0635\u0648\u0644 \u06C1\u0648\u0627`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ${stringifyPrimitive(issue2.values[0])} \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
            return `\u063A\u0644\u0637 \u0622\u067E\u0634\u0646: ${joinValues(issue2.values, "|")} \u0645\u06CC\u06BA \u0633\u06D2 \u0627\u06CC\u06A9 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u0628\u06C1\u062A \u0628\u0691\u0627: ${issue2.origin ?? "\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u06D2 ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u0639\u0646\u0627\u0635\u0631"} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`;
            return `\u0628\u06C1\u062A \u0628\u0691\u0627: ${issue2.origin ?? "\u0648\u06CC\u0644\u06CC\u0648"} \u06A9\u0627 ${adj}${issue2.maximum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${issue2.origin} \u06A9\u06D2 ${adj}${issue2.minimum.toString()} ${sizing.unit} \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2`;
            }
            return `\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ${issue2.origin} \u06A9\u0627 ${adj}${issue2.minimum.toString()} \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.prefix}" \u0633\u06D2 \u0634\u0631\u0648\u0639 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            }
            if (_issue.format === "ends_with")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.suffix}" \u067E\u0631 \u062E\u062A\u0645 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            if (_issue.format === "includes")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: "${_issue.includes}" \u0634\u0627\u0645\u0644 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            if (_issue.format === "regex")
              return `\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \u067E\u06CC\u0679\u0631\u0646 ${_issue.pattern} \u0633\u06D2 \u0645\u06CC\u0686 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
            return `\u063A\u0644\u0637 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u063A\u0644\u0637 \u0646\u0645\u0628\u0631: ${issue2.divisor} \u06A9\u0627 \u0645\u0636\u0627\u0639\u0641 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2`;
          case "unrecognized_keys":
            return `\u063A\u06CC\u0631 \u062A\u0633\u0644\u06CC\u0645 \u0634\u062F\u06C1 \u06A9\u06CC${issue2.keys.length > 1 ? "\u0632" : ""}: ${joinValues(issue2.keys, "\u060C ")}`;
          case "invalid_key":
            return `${issue2.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u06A9\u06CC`;
          case "invalid_union":
            return "\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679";
          case "invalid_element":
            return `${issue2.origin} \u0645\u06CC\u06BA \u063A\u0644\u0637 \u0648\u06CC\u0644\u06CC\u0648`;
          default:
            return `\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/vi.js
function vi_default() {
  return {
    localeError: error40()
  };
}
var error40;
var init_vi = __esm({
  "node_modules/zod/v4/locales/vi.js"() {
    init_util();
    error40 = () => {
      const Sizable = {
        string: { unit: "k\xFD t\u1EF1", verb: "c\xF3" },
        file: { unit: "byte", verb: "c\xF3" },
        array: { unit: "ph\u1EA7n t\u1EED", verb: "c\xF3" },
        set: { unit: "ph\u1EA7n t\u1EED", verb: "c\xF3" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "s\u1ED1";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "m\u1EA3ng";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u0111\u1EA7u v\xE0o",
        email: "\u0111\u1ECBa ch\u1EC9 email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ng\xE0y gi\u1EDD ISO",
        date: "ng\xE0y ISO",
        time: "gi\u1EDD ISO",
        duration: "kho\u1EA3ng th\u1EDDi gian ISO",
        ipv4: "\u0111\u1ECBa ch\u1EC9 IPv4",
        ipv6: "\u0111\u1ECBa ch\u1EC9 IPv6",
        cidrv4: "d\u1EA3i IPv4",
        cidrv6: "d\u1EA3i IPv6",
        base64: "chu\u1ED7i m\xE3 h\xF3a base64",
        base64url: "chu\u1ED7i m\xE3 h\xF3a base64url",
        json_string: "chu\u1ED7i JSON",
        e164: "s\u1ED1 E.164",
        jwt: "JWT",
        template_literal: "\u0111\u1EA7u v\xE0o"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${issue2.expected}, nh\u1EADn \u0111\u01B0\u1EE3c ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ${stringifyPrimitive(issue2.values[0])}`;
            return `T\xF9y ch\u1ECDn kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i m\u1ED9t trong c\xE1c gi\xE1 tr\u1ECB ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${issue2.origin ?? "gi\xE1 tr\u1ECB"} ${sizing.verb} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "ph\u1EA7n t\u1EED"}`;
            return `Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ${issue2.origin ?? "gi\xE1 tr\u1ECB"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i b\u1EAFt \u0111\u1EA7u b\u1EB1ng "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i k\u1EBFt th\xFAc b\u1EB1ng "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i bao g\u1ED3m "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i kh\u1EDBp v\u1EDBi m\u1EABu ${_issue.pattern}`;
            return `${Nouns[_issue.format] ?? issue2.format} kh\xF4ng h\u1EE3p l\u1EC7`;
          }
          case "not_multiple_of":
            return `S\u1ED1 kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a ${issue2.divisor}`;
          case "unrecognized_keys":
            return `Kh\xF3a kh\xF4ng \u0111\u01B0\u1EE3c nh\u1EADn d\u1EA1ng: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `Kh\xF3a kh\xF4ng h\u1EE3p l\u1EC7 trong ${issue2.origin}`;
          case "invalid_union":
            return "\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7";
          case "invalid_element":
            return `Gi\xE1 tr\u1ECB kh\xF4ng h\u1EE3p l\u1EC7 trong ${issue2.origin}`;
          default:
            return `\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/zh-CN.js
function zh_CN_default() {
  return {
    localeError: error41()
  };
}
var error41;
var init_zh_CN = __esm({
  "node_modules/zod/v4/locales/zh-CN.js"() {
    init_util();
    error41 = () => {
      const Sizable = {
        string: { unit: "\u5B57\u7B26", verb: "\u5305\u542B" },
        file: { unit: "\u5B57\u8282", verb: "\u5305\u542B" },
        array: { unit: "\u9879", verb: "\u5305\u542B" },
        set: { unit: "\u9879", verb: "\u5305\u542B" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "\u975E\u6570\u5B57(NaN)" : "\u6570\u5B57";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "\u6570\u7EC4";
            }
            if (data2 === null) {
              return "\u7A7A\u503C(null)";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u8F93\u5165",
        email: "\u7535\u5B50\u90AE\u4EF6",
        url: "URL",
        emoji: "\u8868\u60C5\u7B26\u53F7",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO\u65E5\u671F\u65F6\u95F4",
        date: "ISO\u65E5\u671F",
        time: "ISO\u65F6\u95F4",
        duration: "ISO\u65F6\u957F",
        ipv4: "IPv4\u5730\u5740",
        ipv6: "IPv6\u5730\u5740",
        cidrv4: "IPv4\u7F51\u6BB5",
        cidrv6: "IPv6\u7F51\u6BB5",
        base64: "base64\u7F16\u7801\u5B57\u7B26\u4E32",
        base64url: "base64url\u7F16\u7801\u5B57\u7B26\u4E32",
        json_string: "JSON\u5B57\u7B26\u4E32",
        e164: "E.164\u53F7\u7801",
        jwt: "JWT",
        template_literal: "\u8F93\u5165"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${issue2.expected}\uFF0C\u5B9E\u9645\u63A5\u6536 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ${stringifyPrimitive(issue2.values[0])}`;
            return `\u65E0\u6548\u9009\u9879\uFF1A\u671F\u671B\u4EE5\u4E0B\u4E4B\u4E00 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${issue2.origin ?? "\u503C"} ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u4E2A\u5143\u7D20"}`;
            return `\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ${issue2.origin ?? "\u503C"} ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${issue2.origin} ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ${issue2.origin} ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${_issue.prefix}" \u5F00\u5934`;
            if (_issue.format === "ends_with")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 "${_issue.suffix}" \u7ED3\u5C3E`;
            if (_issue.format === "includes")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u5305\u542B "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F ${_issue.pattern}`;
            return `\u65E0\u6548${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u65E0\u6548\u6570\u5B57\uFF1A\u5FC5\u987B\u662F ${issue2.divisor} \u7684\u500D\u6570`;
          case "unrecognized_keys":
            return `\u51FA\u73B0\u672A\u77E5\u7684\u952E(key): ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `${issue2.origin} \u4E2D\u7684\u952E(key)\u65E0\u6548`;
          case "invalid_union":
            return "\u65E0\u6548\u8F93\u5165";
          case "invalid_element":
            return `${issue2.origin} \u4E2D\u5305\u542B\u65E0\u6548\u503C(value)`;
          default:
            return `\u65E0\u6548\u8F93\u5165`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/zh-TW.js
function zh_TW_default() {
  return {
    localeError: error42()
  };
}
var error42;
var init_zh_TW = __esm({
  "node_modules/zod/v4/locales/zh-TW.js"() {
    init_util();
    error42 = () => {
      const Sizable = {
        string: { unit: "\u5B57\u5143", verb: "\u64C1\u6709" },
        file: { unit: "\u4F4D\u5143\u7D44", verb: "\u64C1\u6709" },
        array: { unit: "\u9805\u76EE", verb: "\u64C1\u6709" },
        set: { unit: "\u9805\u76EE", verb: "\u64C1\u6709" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "number";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "array";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u8F38\u5165",
        email: "\u90F5\u4EF6\u5730\u5740",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO \u65E5\u671F\u6642\u9593",
        date: "ISO \u65E5\u671F",
        time: "ISO \u6642\u9593",
        duration: "ISO \u671F\u9593",
        ipv4: "IPv4 \u4F4D\u5740",
        ipv6: "IPv6 \u4F4D\u5740",
        cidrv4: "IPv4 \u7BC4\u570D",
        cidrv6: "IPv6 \u7BC4\u570D",
        base64: "base64 \u7DE8\u78BC\u5B57\u4E32",
        base64url: "base64url \u7DE8\u78BC\u5B57\u4E32",
        json_string: "JSON \u5B57\u4E32",
        e164: "E.164 \u6578\u503C",
        jwt: "JWT",
        template_literal: "\u8F38\u5165"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${issue2.expected}\uFF0C\u4F46\u6536\u5230 ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ${stringifyPrimitive(issue2.values[0])}`;
            return `\u7121\u6548\u7684\u9078\u9805\uFF1A\u9810\u671F\u70BA\u4EE5\u4E0B\u5176\u4E2D\u4E4B\u4E00 ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${issue2.origin ?? "\u503C"} \u61C9\u70BA ${adj}${issue2.maximum.toString()} ${sizing.unit ?? "\u500B\u5143\u7D20"}`;
            return `\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ${issue2.origin ?? "\u503C"} \u61C9\u70BA ${adj}${issue2.maximum.toString()}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing) {
              return `\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${issue2.origin} \u61C9\u70BA ${adj}${issue2.minimum.toString()} ${sizing.unit}`;
            }
            return `\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ${issue2.origin} \u61C9\u70BA ${adj}${issue2.minimum.toString()}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with") {
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${_issue.prefix}" \u958B\u982D`;
            }
            if (_issue.format === "ends_with")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 "${_issue.suffix}" \u7D50\u5C3E`;
            if (_issue.format === "includes")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u5305\u542B "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u7B26\u5408\u683C\u5F0F ${_issue.pattern}`;
            return `\u7121\u6548\u7684 ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `\u7121\u6548\u7684\u6578\u5B57\uFF1A\u5FC5\u9808\u70BA ${issue2.divisor} \u7684\u500D\u6578`;
          case "unrecognized_keys":
            return `\u7121\u6CD5\u8B58\u5225\u7684\u9375\u503C${issue2.keys.length > 1 ? "\u5011" : ""}\uFF1A${joinValues(issue2.keys, "\u3001")}`;
          case "invalid_key":
            return `${issue2.origin} \u4E2D\u6709\u7121\u6548\u7684\u9375\u503C`;
          case "invalid_union":
            return "\u7121\u6548\u7684\u8F38\u5165\u503C";
          case "invalid_element":
            return `${issue2.origin} \u4E2D\u6709\u7121\u6548\u7684\u503C`;
          default:
            return `\u7121\u6548\u7684\u8F38\u5165\u503C`;
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/yo.js
function yo_default() {
  return {
    localeError: error43()
  };
}
var error43;
var init_yo = __esm({
  "node_modules/zod/v4/locales/yo.js"() {
    init_util();
    error43 = () => {
      const Sizable = {
        string: { unit: "\xE0mi", verb: "n\xED" },
        file: { unit: "bytes", verb: "n\xED" },
        array: { unit: "nkan", verb: "n\xED" },
        set: { unit: "nkan", verb: "n\xED" }
      };
      function getSizing(origin) {
        return Sizable[origin] ?? null;
      }
      const parsedType5 = (data2) => {
        const t4 = typeof data2;
        switch (t4) {
          case "number": {
            return Number.isNaN(data2) ? "NaN" : "n\u1ECD\u0301mb\xE0";
          }
          case "object": {
            if (Array.isArray(data2)) {
              return "akop\u1ECD";
            }
            if (data2 === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data2) !== Object.prototype && data2.constructor) {
              return data2.constructor.name;
            }
          }
        }
        return t4;
      };
      const Nouns = {
        regex: "\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9",
        email: "\xE0d\xEDr\u1EB9\u0301s\xEC \xECm\u1EB9\u0301l\xEC",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "\xE0k\xF3k\xF2 ISO",
        date: "\u1ECDj\u1ECD\u0301 ISO",
        time: "\xE0k\xF3k\xF2 ISO",
        duration: "\xE0k\xF3k\xF2 t\xF3 p\xE9 ISO",
        ipv4: "\xE0d\xEDr\u1EB9\u0301s\xEC IPv4",
        ipv6: "\xE0d\xEDr\u1EB9\u0301s\xEC IPv6",
        cidrv4: "\xE0gb\xE8gb\xE8 IPv4",
        cidrv6: "\xE0gb\xE8gb\xE8 IPv6",
        base64: "\u1ECD\u0300r\u1ECD\u0300 t\xED a k\u1ECD\u0301 n\xED base64",
        base64url: "\u1ECD\u0300r\u1ECD\u0300 base64url",
        json_string: "\u1ECD\u0300r\u1ECD\u0300 JSON",
        e164: "n\u1ECD\u0301mb\xE0 E.164",
        jwt: "JWT",
        template_literal: "\u1EB9\u0300r\u1ECD \xECb\xE1w\u1ECDl\xE9"
      };
      return (issue2) => {
        switch (issue2.code) {
          case "invalid_type":
            return `\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${issue2.expected}, \xE0m\u1ECD\u0300 a r\xED ${parsedType5(issue2.input)}`;
          case "invalid_value":
            if (issue2.values.length === 1)
              return `\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ${stringifyPrimitive(issue2.values[0])}`;
            return `\xC0\u1E63\xE0y\xE0n a\u1E63\xEC\u1E63e: yan \u1ECD\u0300kan l\xE1ra ${joinValues(issue2.values, "|")}`;
          case "too_big": {
            const adj = issue2.inclusive ? "<=" : "<";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${issue2.origin ?? "iye"} ${sizing.verb} ${adj}${issue2.maximum} ${sizing.unit}`;
            return `T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 ${adj}${issue2.maximum}`;
          }
          case "too_small": {
            const adj = issue2.inclusive ? ">=" : ">";
            const sizing = getSizing(issue2.origin);
            if (sizing)
              return `K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ${issue2.origin} ${sizing.verb} ${adj}${issue2.minimum} ${sizing.unit}`;
            return `K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 ${adj}${issue2.minimum}`;
          }
          case "invalid_format": {
            const _issue = issue2;
            if (_issue.format === "starts_with")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\u1EB9\u0300r\u1EB9\u0300 p\u1EB9\u0300l\xFA "${_issue.prefix}"`;
            if (_issue.format === "ends_with")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 par\xED p\u1EB9\u0300l\xFA "${_issue.suffix}"`;
            if (_issue.format === "includes")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 n\xED "${_issue.includes}"`;
            if (_issue.format === "regex")
              return `\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\xE1 \xE0p\u1EB9\u1EB9r\u1EB9 mu ${_issue.pattern}`;
            return `A\u1E63\xEC\u1E63e: ${Nouns[_issue.format] ?? issue2.format}`;
          }
          case "not_multiple_of":
            return `N\u1ECD\u0301mb\xE0 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 j\u1EB9\u0301 \xE8y\xE0 p\xEDp\xEDn ti ${issue2.divisor}`;
          case "unrecognized_keys":
            return `B\u1ECDt\xECn\xEC \xE0\xECm\u1ECD\u0300: ${joinValues(issue2.keys, ", ")}`;
          case "invalid_key":
            return `B\u1ECDt\xECn\xEC a\u1E63\xEC\u1E63e n\xEDn\xFA ${issue2.origin}`;
          case "invalid_union":
            return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";
          case "invalid_element":
            return `Iye a\u1E63\xEC\u1E63e n\xEDn\xFA ${issue2.origin}`;
          default:
            return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e";
        }
      };
    };
  }
});

// node_modules/zod/v4/locales/index.js
var locales_exports = {};
__export(locales_exports, {
  ar: () => ar_default,
  az: () => az_default,
  be: () => be_default,
  ca: () => ca_default,
  cs: () => cs_default,
  da: () => da_default,
  de: () => de_default,
  en: () => en_default,
  eo: () => eo_default,
  es: () => es_default,
  fa: () => fa_default,
  fi: () => fi_default,
  fr: () => fr_default,
  frCA: () => fr_CA_default,
  he: () => he_default,
  hu: () => hu_default,
  id: () => id_default,
  is: () => is_default,
  it: () => it_default,
  ja: () => ja_default,
  kh: () => kh_default,
  ko: () => ko_default,
  mk: () => mk_default,
  ms: () => ms_default,
  nl: () => nl_default,
  no: () => no_default,
  ota: () => ota_default,
  pl: () => pl_default,
  ps: () => ps_default,
  pt: () => pt_default,
  ru: () => ru_default,
  sl: () => sl_default,
  sv: () => sv_default,
  ta: () => ta_default,
  th: () => th_default,
  tr: () => tr_default,
  ua: () => ua_default,
  ur: () => ur_default,
  vi: () => vi_default,
  yo: () => yo_default,
  zhCN: () => zh_CN_default,
  zhTW: () => zh_TW_default
});
var init_locales = __esm({
  "node_modules/zod/v4/locales/index.js"() {
    init_ar();
    init_az();
    init_be();
    init_ca();
    init_cs();
    init_da();
    init_de();
    init_en();
    init_eo();
    init_es();
    init_fa();
    init_fi();
    init_fr();
    init_fr_CA();
    init_he();
    init_hu();
    init_id();
    init_is();
    init_it();
    init_ja();
    init_kh();
    init_ko();
    init_mk();
    init_ms();
    init_nl();
    init_no();
    init_ota();
    init_ps();
    init_pl();
    init_pt();
    init_ru();
    init_sl();
    init_sv();
    init_ta();
    init_th();
    init_tr();
    init_ua();
    init_ur();
    init_vi();
    init_zh_CN();
    init_zh_TW();
    init_yo();
  }
});

// node_modules/zod/v4/core/registries.js
function registry() {
  return new $ZodRegistry();
}
var $output, $input, $ZodRegistry, globalRegistry;
var init_registries = __esm({
  "node_modules/zod/v4/core/registries.js"() {
    $output = Symbol("ZodOutput");
    $input = Symbol("ZodInput");
    $ZodRegistry = class {
      constructor() {
        this._map = /* @__PURE__ */ new Map();
        this._idmap = /* @__PURE__ */ new Map();
      }
      add(schema, ..._meta) {
        const meta = _meta[0];
        this._map.set(schema, meta);
        if (meta && typeof meta === "object" && "id" in meta) {
          if (this._idmap.has(meta.id)) {
            throw new Error(`ID ${meta.id} already exists in the registry`);
          }
          this._idmap.set(meta.id, schema);
        }
        return this;
      }
      clear() {
        this._map = /* @__PURE__ */ new Map();
        this._idmap = /* @__PURE__ */ new Map();
        return this;
      }
      remove(schema) {
        const meta = this._map.get(schema);
        if (meta && typeof meta === "object" && "id" in meta) {
          this._idmap.delete(meta.id);
        }
        this._map.delete(schema);
        return this;
      }
      get(schema) {
        const p3 = schema._zod.parent;
        if (p3) {
          const pm = { ...this.get(p3) ?? {} };
          delete pm.id;
          const f3 = { ...pm, ...this._map.get(schema) };
          return Object.keys(f3).length ? f3 : void 0;
        }
        return this._map.get(schema);
      }
      has(schema) {
        return this._map.has(schema);
      }
    };
    globalRegistry = /* @__PURE__ */ registry();
  }
});

// node_modules/zod/v4/core/api.js
function _string(Class2, params) {
  return new Class2({
    type: "string",
    ...normalizeParams(params)
  });
}
function _coercedString(Class2, params) {
  return new Class2({
    type: "string",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _email(Class2, params) {
  return new Class2({
    type: "string",
    format: "email",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _guid(Class2, params) {
  return new Class2({
    type: "string",
    format: "guid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _uuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _uuidv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v4",
    ...normalizeParams(params)
  });
}
function _uuidv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v6",
    ...normalizeParams(params)
  });
}
function _uuidv7(Class2, params) {
  return new Class2({
    type: "string",
    format: "uuid",
    check: "string_format",
    abort: false,
    version: "v7",
    ...normalizeParams(params)
  });
}
function _url(Class2, params) {
  return new Class2({
    type: "string",
    format: "url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _emoji2(Class2, params) {
  return new Class2({
    type: "string",
    format: "emoji",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _nanoid(Class2, params) {
  return new Class2({
    type: "string",
    format: "nanoid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cuid2(Class2, params) {
  return new Class2({
    type: "string",
    format: "cuid2",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ulid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ulid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _xid(Class2, params) {
  return new Class2({
    type: "string",
    format: "xid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ksuid(Class2, params) {
  return new Class2({
    type: "string",
    format: "ksuid",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ipv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _ipv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "ipv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cidrv4(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv4",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _cidrv6(Class2, params) {
  return new Class2({
    type: "string",
    format: "cidrv6",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _base64(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _base64url(Class2, params) {
  return new Class2({
    type: "string",
    format: "base64url",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _e164(Class2, params) {
  return new Class2({
    type: "string",
    format: "e164",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _jwt(Class2, params) {
  return new Class2({
    type: "string",
    format: "jwt",
    check: "string_format",
    abort: false,
    ...normalizeParams(params)
  });
}
function _isoDateTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "datetime",
    check: "string_format",
    offset: false,
    local: false,
    precision: null,
    ...normalizeParams(params)
  });
}
function _isoDate(Class2, params) {
  return new Class2({
    type: "string",
    format: "date",
    check: "string_format",
    ...normalizeParams(params)
  });
}
function _isoTime(Class2, params) {
  return new Class2({
    type: "string",
    format: "time",
    check: "string_format",
    precision: null,
    ...normalizeParams(params)
  });
}
function _isoDuration(Class2, params) {
  return new Class2({
    type: "string",
    format: "duration",
    check: "string_format",
    ...normalizeParams(params)
  });
}
function _number(Class2, params) {
  return new Class2({
    type: "number",
    checks: [],
    ...normalizeParams(params)
  });
}
function _coercedNumber(Class2, params) {
  return new Class2({
    type: "number",
    coerce: true,
    checks: [],
    ...normalizeParams(params)
  });
}
function _int(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "safeint",
    ...normalizeParams(params)
  });
}
function _float32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float32",
    ...normalizeParams(params)
  });
}
function _float64(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "float64",
    ...normalizeParams(params)
  });
}
function _int32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "int32",
    ...normalizeParams(params)
  });
}
function _uint32(Class2, params) {
  return new Class2({
    type: "number",
    check: "number_format",
    abort: false,
    format: "uint32",
    ...normalizeParams(params)
  });
}
function _boolean(Class2, params) {
  return new Class2({
    type: "boolean",
    ...normalizeParams(params)
  });
}
function _coercedBoolean(Class2, params) {
  return new Class2({
    type: "boolean",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _bigint(Class2, params) {
  return new Class2({
    type: "bigint",
    ...normalizeParams(params)
  });
}
function _coercedBigint(Class2, params) {
  return new Class2({
    type: "bigint",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _int64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "int64",
    ...normalizeParams(params)
  });
}
function _uint64(Class2, params) {
  return new Class2({
    type: "bigint",
    check: "bigint_format",
    abort: false,
    format: "uint64",
    ...normalizeParams(params)
  });
}
function _symbol(Class2, params) {
  return new Class2({
    type: "symbol",
    ...normalizeParams(params)
  });
}
function _undefined2(Class2, params) {
  return new Class2({
    type: "undefined",
    ...normalizeParams(params)
  });
}
function _null2(Class2, params) {
  return new Class2({
    type: "null",
    ...normalizeParams(params)
  });
}
function _any(Class2) {
  return new Class2({
    type: "any"
  });
}
function _unknown(Class2) {
  return new Class2({
    type: "unknown"
  });
}
function _never(Class2, params) {
  return new Class2({
    type: "never",
    ...normalizeParams(params)
  });
}
function _void(Class2, params) {
  return new Class2({
    type: "void",
    ...normalizeParams(params)
  });
}
function _date(Class2, params) {
  return new Class2({
    type: "date",
    ...normalizeParams(params)
  });
}
function _coercedDate(Class2, params) {
  return new Class2({
    type: "date",
    coerce: true,
    ...normalizeParams(params)
  });
}
function _nan(Class2, params) {
  return new Class2({
    type: "nan",
    ...normalizeParams(params)
  });
}
function _lt(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
function _lte(value, params) {
  return new $ZodCheckLessThan({
    check: "less_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
function _gt(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: false
  });
}
function _gte(value, params) {
  return new $ZodCheckGreaterThan({
    check: "greater_than",
    ...normalizeParams(params),
    value,
    inclusive: true
  });
}
function _positive(params) {
  return _gt(0, params);
}
function _negative(params) {
  return _lt(0, params);
}
function _nonpositive(params) {
  return _lte(0, params);
}
function _nonnegative(params) {
  return _gte(0, params);
}
function _multipleOf(value, params) {
  return new $ZodCheckMultipleOf({
    check: "multiple_of",
    ...normalizeParams(params),
    value
  });
}
function _maxSize(maximum, params) {
  return new $ZodCheckMaxSize({
    check: "max_size",
    ...normalizeParams(params),
    maximum
  });
}
function _minSize(minimum, params) {
  return new $ZodCheckMinSize({
    check: "min_size",
    ...normalizeParams(params),
    minimum
  });
}
function _size(size, params) {
  return new $ZodCheckSizeEquals({
    check: "size_equals",
    ...normalizeParams(params),
    size
  });
}
function _maxLength(maximum, params) {
  const ch = new $ZodCheckMaxLength({
    check: "max_length",
    ...normalizeParams(params),
    maximum
  });
  return ch;
}
function _minLength(minimum, params) {
  return new $ZodCheckMinLength({
    check: "min_length",
    ...normalizeParams(params),
    minimum
  });
}
function _length(length, params) {
  return new $ZodCheckLengthEquals({
    check: "length_equals",
    ...normalizeParams(params),
    length
  });
}
function _regex(pattern, params) {
  return new $ZodCheckRegex({
    check: "string_format",
    format: "regex",
    ...normalizeParams(params),
    pattern
  });
}
function _lowercase(params) {
  return new $ZodCheckLowerCase({
    check: "string_format",
    format: "lowercase",
    ...normalizeParams(params)
  });
}
function _uppercase(params) {
  return new $ZodCheckUpperCase({
    check: "string_format",
    format: "uppercase",
    ...normalizeParams(params)
  });
}
function _includes(includes, params) {
  return new $ZodCheckIncludes({
    check: "string_format",
    format: "includes",
    ...normalizeParams(params),
    includes
  });
}
function _startsWith(prefix, params) {
  return new $ZodCheckStartsWith({
    check: "string_format",
    format: "starts_with",
    ...normalizeParams(params),
    prefix
  });
}
function _endsWith(suffix, params) {
  return new $ZodCheckEndsWith({
    check: "string_format",
    format: "ends_with",
    ...normalizeParams(params),
    suffix
  });
}
function _property(property, schema, params) {
  return new $ZodCheckProperty({
    check: "property",
    property,
    schema,
    ...normalizeParams(params)
  });
}
function _mime(types, params) {
  return new $ZodCheckMimeType({
    check: "mime_type",
    mime: types,
    ...normalizeParams(params)
  });
}
function _overwrite(tx) {
  return new $ZodCheckOverwrite({
    check: "overwrite",
    tx
  });
}
function _normalize(form) {
  return _overwrite((input) => input.normalize(form));
}
function _trim() {
  return _overwrite((input) => input.trim());
}
function _toLowerCase() {
  return _overwrite((input) => input.toLowerCase());
}
function _toUpperCase() {
  return _overwrite((input) => input.toUpperCase());
}
function _array(Class2, element3, params) {
  return new Class2({
    type: "array",
    element: element3,
    // get element() {
    //   return element;
    // },
    ...normalizeParams(params)
  });
}
function _union(Class2, options2, params) {
  return new Class2({
    type: "union",
    options: options2,
    ...normalizeParams(params)
  });
}
function _discriminatedUnion(Class2, discriminator, options2, params) {
  return new Class2({
    type: "union",
    options: options2,
    discriminator,
    ...normalizeParams(params)
  });
}
function _intersection(Class2, left, right) {
  return new Class2({
    type: "intersection",
    left,
    right
  });
}
function _tuple(Class2, items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new Class2({
    type: "tuple",
    items,
    rest,
    ...normalizeParams(params)
  });
}
function _record(Class2, keyType, valueType, params) {
  return new Class2({
    type: "record",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
function _map2(Class2, keyType, valueType, params) {
  return new Class2({
    type: "map",
    keyType,
    valueType,
    ...normalizeParams(params)
  });
}
function _set(Class2, valueType, params) {
  return new Class2({
    type: "set",
    valueType,
    ...normalizeParams(params)
  });
}
function _enum(Class2, values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v3) => [v3, v3])) : values;
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
function _nativeEnum(Class2, entries, params) {
  return new Class2({
    type: "enum",
    entries,
    ...normalizeParams(params)
  });
}
function _literal(Class2, value, params) {
  return new Class2({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...normalizeParams(params)
  });
}
function _file(Class2, params) {
  return new Class2({
    type: "file",
    ...normalizeParams(params)
  });
}
function _transform(Class2, fn) {
  return new Class2({
    type: "transform",
    transform: fn
  });
}
function _optional(Class2, innerType) {
  return new Class2({
    type: "optional",
    innerType
  });
}
function _nullable(Class2, innerType) {
  return new Class2({
    type: "nullable",
    innerType
  });
}
function _default(Class2, innerType, defaultValue) {
  return new Class2({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : shallowClone(defaultValue);
    }
  });
}
function _nonoptional(Class2, innerType, params) {
  return new Class2({
    type: "nonoptional",
    innerType,
    ...normalizeParams(params)
  });
}
function _success(Class2, innerType) {
  return new Class2({
    type: "success",
    innerType
  });
}
function _catch(Class2, innerType, catchValue) {
  return new Class2({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
function _pipe(Class2, in_, out) {
  return new Class2({
    type: "pipe",
    in: in_,
    out
  });
}
function _readonly(Class2, innerType) {
  return new Class2({
    type: "readonly",
    innerType
  });
}
function _templateLiteral(Class2, parts, params) {
  return new Class2({
    type: "template_literal",
    parts,
    ...normalizeParams(params)
  });
}
function _lazy(Class2, getter) {
  return new Class2({
    type: "lazy",
    getter
  });
}
function _promise(Class2, innerType) {
  return new Class2({
    type: "promise",
    innerType
  });
}
function _custom(Class2, fn, _params) {
  const norm = normalizeParams(_params);
  norm.abort ?? (norm.abort = true);
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...norm
  });
  return schema;
}
function _refine(Class2, fn, _params) {
  const schema = new Class2({
    type: "custom",
    check: "custom",
    fn,
    ...normalizeParams(_params)
  });
  return schema;
}
function _superRefine(fn) {
  const ch = _check((payload) => {
    payload.addIssue = (issue2) => {
      if (typeof issue2 === "string") {
        payload.issues.push(issue(issue2, payload.value, ch._zod.def));
      } else {
        const _issue = issue2;
        if (_issue.fatal)
          _issue.continue = false;
        _issue.code ?? (_issue.code = "custom");
        _issue.input ?? (_issue.input = payload.value);
        _issue.inst ?? (_issue.inst = ch);
        _issue.continue ?? (_issue.continue = !ch._zod.def.abort);
        payload.issues.push(issue(_issue));
      }
    };
    return fn(payload.value, payload);
  });
  return ch;
}
function _check(fn, params) {
  const ch = new $ZodCheck({
    check: "custom",
    ...normalizeParams(params)
  });
  ch._zod.check = fn;
  return ch;
}
function _stringbool(Classes, _params) {
  const params = normalizeParams(_params);
  let truthyArray = params.truthy ?? ["true", "1", "yes", "on", "y", "enabled"];
  let falsyArray = params.falsy ?? ["false", "0", "no", "off", "n", "disabled"];
  if (params.case !== "sensitive") {
    truthyArray = truthyArray.map((v3) => typeof v3 === "string" ? v3.toLowerCase() : v3);
    falsyArray = falsyArray.map((v3) => typeof v3 === "string" ? v3.toLowerCase() : v3);
  }
  const truthySet = new Set(truthyArray);
  const falsySet = new Set(falsyArray);
  const _Pipe = Classes.Pipe ?? $ZodPipe;
  const _Boolean = Classes.Boolean ?? $ZodBoolean;
  const _String = Classes.String ?? $ZodString;
  const _Transform = Classes.Transform ?? $ZodTransform;
  const tx = new _Transform({
    type: "transform",
    transform: (input, payload) => {
      let data2 = input;
      if (params.case !== "sensitive")
        data2 = data2.toLowerCase();
      if (truthySet.has(data2)) {
        return true;
      } else if (falsySet.has(data2)) {
        return false;
      } else {
        payload.issues.push({
          code: "invalid_value",
          expected: "stringbool",
          values: [...truthySet, ...falsySet],
          input: payload.value,
          inst: tx,
          continue: false
        });
        return {};
      }
    },
    error: params.error
  });
  const innerPipe = new _Pipe({
    type: "pipe",
    in: new _String({ type: "string", error: params.error }),
    out: tx,
    error: params.error
  });
  const outerPipe = new _Pipe({
    type: "pipe",
    in: innerPipe,
    out: new _Boolean({
      type: "boolean",
      error: params.error
    }),
    error: params.error
  });
  return outerPipe;
}
function _stringFormat(Class2, format, fnOrRegex, _params = {}) {
  const params = normalizeParams(_params);
  const def = {
    ...normalizeParams(_params),
    check: "string_format",
    type: "string",
    format,
    fn: typeof fnOrRegex === "function" ? fnOrRegex : (val) => fnOrRegex.test(val),
    ...params
  };
  if (fnOrRegex instanceof RegExp) {
    def.pattern = fnOrRegex;
  }
  const inst = new Class2(def);
  return inst;
}
var TimePrecision;
var init_api = __esm({
  "node_modules/zod/v4/core/api.js"() {
    init_checks();
    init_schemas();
    init_util();
    TimePrecision = {
      Any: null,
      Minute: -1,
      Second: 0,
      Millisecond: 3,
      Microsecond: 6
    };
  }
});

// node_modules/zod/v4/core/function.js
function _function(params) {
  return new $ZodFunction({
    type: "function",
    input: Array.isArray(params?.input) ? _tuple($ZodTuple, params?.input) : params?.input ?? _array($ZodArray, _unknown($ZodUnknown)),
    output: params?.output ?? _unknown($ZodUnknown)
  });
}
var $ZodFunction;
var init_function = __esm({
  "node_modules/zod/v4/core/function.js"() {
    init_api();
    init_parse();
    init_schemas();
    init_schemas();
    $ZodFunction = class {
      constructor(def) {
        this._def = def;
        this.def = def;
      }
      implement(func) {
        if (typeof func !== "function") {
          throw new Error("implement() must be called with a function");
        }
        const impl = (...args) => {
          const parsedArgs = this._def.input ? parse(this._def.input, args, void 0, { callee: impl }) : args;
          if (!Array.isArray(parsedArgs)) {
            throw new Error("Invalid arguments schema: not an array or tuple schema.");
          }
          const output = func(...parsedArgs);
          return this._def.output ? parse(this._def.output, output, void 0, { callee: impl }) : output;
        };
        return impl;
      }
      implementAsync(func) {
        if (typeof func !== "function") {
          throw new Error("implement() must be called with a function");
        }
        const impl = async (...args) => {
          const parsedArgs = this._def.input ? await parseAsync(this._def.input, args, void 0, { callee: impl }) : args;
          if (!Array.isArray(parsedArgs)) {
            throw new Error("Invalid arguments schema: not an array or tuple schema.");
          }
          const output = await func(...parsedArgs);
          return this._def.output ? parseAsync(this._def.output, output, void 0, { callee: impl }) : output;
        };
        return impl;
      }
      input(...args) {
        const F3 = this.constructor;
        if (Array.isArray(args[0])) {
          return new F3({
            type: "function",
            input: new $ZodTuple({
              type: "tuple",
              items: args[0],
              rest: args[1]
            }),
            output: this._def.output
          });
        }
        return new F3({
          type: "function",
          input: args[0],
          output: this._def.output
        });
      }
      output(output) {
        const F3 = this.constructor;
        return new F3({
          type: "function",
          input: this._def.input,
          output
        });
      }
    };
  }
});

// node_modules/zod/v4/core/to-json-schema.js
function toJSONSchema(input, _params) {
  if (input instanceof $ZodRegistry) {
    const gen2 = new JSONSchemaGenerator(_params);
    const defs = {};
    for (const entry of input._idmap.entries()) {
      const [_3, schema] = entry;
      gen2.process(schema);
    }
    const schemas = {};
    const external = {
      registry: input,
      uri: _params?.uri,
      defs
    };
    for (const entry of input._idmap.entries()) {
      const [key, schema] = entry;
      schemas[key] = gen2.emit(schema, {
        ..._params,
        external
      });
    }
    if (Object.keys(defs).length > 0) {
      const defsSegment = gen2.target === "draft-2020-12" ? "$defs" : "definitions";
      schemas.__shared = {
        [defsSegment]: defs
      };
    }
    return { schemas };
  }
  const gen = new JSONSchemaGenerator(_params);
  gen.process(input);
  return gen.emit(input, _params);
}
function isTransforming(_schema, _ctx) {
  const ctx = _ctx ?? { seen: /* @__PURE__ */ new Set() };
  if (ctx.seen.has(_schema))
    return false;
  ctx.seen.add(_schema);
  const schema = _schema;
  const def = schema._zod.def;
  switch (def.type) {
    case "string":
    case "number":
    case "bigint":
    case "boolean":
    case "date":
    case "symbol":
    case "undefined":
    case "null":
    case "any":
    case "unknown":
    case "never":
    case "void":
    case "literal":
    case "enum":
    case "nan":
    case "file":
    case "template_literal":
      return false;
    case "array": {
      return isTransforming(def.element, ctx);
    }
    case "object": {
      for (const key in def.shape) {
        if (isTransforming(def.shape[key], ctx))
          return true;
      }
      return false;
    }
    case "union": {
      for (const option of def.options) {
        if (isTransforming(option, ctx))
          return true;
      }
      return false;
    }
    case "intersection": {
      return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);
    }
    case "tuple": {
      for (const item of def.items) {
        if (isTransforming(item, ctx))
          return true;
      }
      if (def.rest && isTransforming(def.rest, ctx))
        return true;
      return false;
    }
    case "record": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "map": {
      return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
    }
    case "set": {
      return isTransforming(def.valueType, ctx);
    }
    case "promise":
    case "optional":
    case "nonoptional":
    case "nullable":
    case "readonly":
      return isTransforming(def.innerType, ctx);
    case "lazy":
      return isTransforming(def.getter(), ctx);
    case "default": {
      return isTransforming(def.innerType, ctx);
    }
    case "prefault": {
      return isTransforming(def.innerType, ctx);
    }
    case "custom": {
      return false;
    }
    case "transform": {
      return true;
    }
    case "pipe": {
      return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);
    }
    case "success": {
      return false;
    }
    case "catch": {
      return false;
    }
    default:
      def;
  }
  throw new Error(`Unknown schema type: ${def.type}`);
}
var JSONSchemaGenerator;
var init_to_json_schema = __esm({
  "node_modules/zod/v4/core/to-json-schema.js"() {
    init_registries();
    init_util();
    JSONSchemaGenerator = class {
      constructor(params) {
        this.counter = 0;
        this.metadataRegistry = params?.metadata ?? globalRegistry;
        this.target = params?.target ?? "draft-2020-12";
        this.unrepresentable = params?.unrepresentable ?? "throw";
        this.override = params?.override ?? (() => {
        });
        this.io = params?.io ?? "output";
        this.seen = /* @__PURE__ */ new Map();
      }
      process(schema, _params = { path: [], schemaPath: [] }) {
        var _a;
        const def = schema._zod.def;
        const formatMap = {
          guid: "uuid",
          url: "uri",
          datetime: "date-time",
          json_string: "json-string",
          regex: ""
          // do not set
        };
        const seen = this.seen.get(schema);
        if (seen) {
          seen.count++;
          const isCycle = _params.schemaPath.includes(schema);
          if (isCycle) {
            seen.cycle = _params.path;
          }
          return seen.schema;
        }
        const result = { schema: {}, count: 1, cycle: void 0, path: _params.path };
        this.seen.set(schema, result);
        const overrideSchema = schema._zod.toJSONSchema?.();
        if (overrideSchema) {
          result.schema = overrideSchema;
        } else {
          const params = {
            ..._params,
            schemaPath: [..._params.schemaPath, schema],
            path: _params.path
          };
          const parent = schema._zod.parent;
          if (parent) {
            result.ref = parent;
            this.process(parent, params);
            this.seen.get(parent).isParent = true;
          } else {
            const _json = result.schema;
            switch (def.type) {
              case "string": {
                const json2 = _json;
                json2.type = "string";
                const { minimum, maximum, format, patterns, contentEncoding } = schema._zod.bag;
                if (typeof minimum === "number")
                  json2.minLength = minimum;
                if (typeof maximum === "number")
                  json2.maxLength = maximum;
                if (format) {
                  json2.format = formatMap[format] ?? format;
                  if (json2.format === "")
                    delete json2.format;
                }
                if (contentEncoding)
                  json2.contentEncoding = contentEncoding;
                if (patterns && patterns.size > 0) {
                  const regexes = [...patterns];
                  if (regexes.length === 1)
                    json2.pattern = regexes[0].source;
                  else if (regexes.length > 1) {
                    result.schema.allOf = [
                      ...regexes.map((regex) => ({
                        ...this.target === "draft-7" || this.target === "draft-4" ? { type: "string" } : {},
                        pattern: regex.source
                      }))
                    ];
                  }
                }
                break;
              }
              case "number": {
                const json2 = _json;
                const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;
                if (typeof format === "string" && format.includes("int"))
                  json2.type = "integer";
                else
                  json2.type = "number";
                if (typeof exclusiveMinimum === "number") {
                  if (this.target === "draft-4") {
                    json2.minimum = exclusiveMinimum;
                    json2.exclusiveMinimum = true;
                  } else {
                    json2.exclusiveMinimum = exclusiveMinimum;
                  }
                }
                if (typeof minimum === "number") {
                  json2.minimum = minimum;
                  if (typeof exclusiveMinimum === "number" && this.target !== "draft-4") {
                    if (exclusiveMinimum >= minimum)
                      delete json2.minimum;
                    else
                      delete json2.exclusiveMinimum;
                  }
                }
                if (typeof exclusiveMaximum === "number") {
                  if (this.target === "draft-4") {
                    json2.maximum = exclusiveMaximum;
                    json2.exclusiveMaximum = true;
                  } else {
                    json2.exclusiveMaximum = exclusiveMaximum;
                  }
                }
                if (typeof maximum === "number") {
                  json2.maximum = maximum;
                  if (typeof exclusiveMaximum === "number" && this.target !== "draft-4") {
                    if (exclusiveMaximum <= maximum)
                      delete json2.maximum;
                    else
                      delete json2.exclusiveMaximum;
                  }
                }
                if (typeof multipleOf === "number")
                  json2.multipleOf = multipleOf;
                break;
              }
              case "boolean": {
                const json2 = _json;
                json2.type = "boolean";
                break;
              }
              case "bigint": {
                if (this.unrepresentable === "throw") {
                  throw new Error("BigInt cannot be represented in JSON Schema");
                }
                break;
              }
              case "symbol": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Symbols cannot be represented in JSON Schema");
                }
                break;
              }
              case "null": {
                _json.type = "null";
                break;
              }
              case "any": {
                break;
              }
              case "unknown": {
                break;
              }
              case "undefined": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Undefined cannot be represented in JSON Schema");
                }
                break;
              }
              case "void": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Void cannot be represented in JSON Schema");
                }
                break;
              }
              case "never": {
                _json.not = {};
                break;
              }
              case "date": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Date cannot be represented in JSON Schema");
                }
                break;
              }
              case "array": {
                const json2 = _json;
                const { minimum, maximum } = schema._zod.bag;
                if (typeof minimum === "number")
                  json2.minItems = minimum;
                if (typeof maximum === "number")
                  json2.maxItems = maximum;
                json2.type = "array";
                json2.items = this.process(def.element, { ...params, path: [...params.path, "items"] });
                break;
              }
              case "object": {
                const json2 = _json;
                json2.type = "object";
                json2.properties = {};
                const shape = def.shape;
                for (const key in shape) {
                  json2.properties[key] = this.process(shape[key], {
                    ...params,
                    path: [...params.path, "properties", key]
                  });
                }
                const allKeys = new Set(Object.keys(shape));
                const requiredKeys = new Set([...allKeys].filter((key) => {
                  const v3 = def.shape[key]._zod;
                  if (this.io === "input") {
                    return v3.optin === void 0;
                  } else {
                    return v3.optout === void 0;
                  }
                }));
                if (requiredKeys.size > 0) {
                  json2.required = Array.from(requiredKeys);
                }
                if (def.catchall?._zod.def.type === "never") {
                  json2.additionalProperties = false;
                } else if (!def.catchall) {
                  if (this.io === "output")
                    json2.additionalProperties = false;
                } else if (def.catchall) {
                  json2.additionalProperties = this.process(def.catchall, {
                    ...params,
                    path: [...params.path, "additionalProperties"]
                  });
                }
                break;
              }
              case "union": {
                const json2 = _json;
                json2.anyOf = def.options.map((x3, i3) => this.process(x3, {
                  ...params,
                  path: [...params.path, "anyOf", i3]
                }));
                break;
              }
              case "intersection": {
                const json2 = _json;
                const a3 = this.process(def.left, {
                  ...params,
                  path: [...params.path, "allOf", 0]
                });
                const b3 = this.process(def.right, {
                  ...params,
                  path: [...params.path, "allOf", 1]
                });
                const isSimpleIntersection = (val) => "allOf" in val && Object.keys(val).length === 1;
                const allOf = [
                  ...isSimpleIntersection(a3) ? a3.allOf : [a3],
                  ...isSimpleIntersection(b3) ? b3.allOf : [b3]
                ];
                json2.allOf = allOf;
                break;
              }
              case "tuple": {
                const json2 = _json;
                json2.type = "array";
                const prefixItems = def.items.map((x3, i3) => this.process(x3, { ...params, path: [...params.path, "prefixItems", i3] }));
                if (this.target === "draft-2020-12") {
                  json2.prefixItems = prefixItems;
                } else {
                  json2.items = prefixItems;
                }
                if (def.rest) {
                  const rest = this.process(def.rest, {
                    ...params,
                    path: [...params.path, "items"]
                  });
                  if (this.target === "draft-2020-12") {
                    json2.items = rest;
                  } else {
                    json2.additionalItems = rest;
                  }
                }
                if (def.rest) {
                  json2.items = this.process(def.rest, {
                    ...params,
                    path: [...params.path, "items"]
                  });
                }
                const { minimum, maximum } = schema._zod.bag;
                if (typeof minimum === "number")
                  json2.minItems = minimum;
                if (typeof maximum === "number")
                  json2.maxItems = maximum;
                break;
              }
              case "record": {
                const json2 = _json;
                json2.type = "object";
                if (this.target !== "draft-4") {
                  json2.propertyNames = this.process(def.keyType, {
                    ...params,
                    path: [...params.path, "propertyNames"]
                  });
                }
                json2.additionalProperties = this.process(def.valueType, {
                  ...params,
                  path: [...params.path, "additionalProperties"]
                });
                break;
              }
              case "map": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Map cannot be represented in JSON Schema");
                }
                break;
              }
              case "set": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Set cannot be represented in JSON Schema");
                }
                break;
              }
              case "enum": {
                const json2 = _json;
                const values = getEnumValues(def.entries);
                if (values.every((v3) => typeof v3 === "number"))
                  json2.type = "number";
                if (values.every((v3) => typeof v3 === "string"))
                  json2.type = "string";
                json2.enum = values;
                break;
              }
              case "literal": {
                const json2 = _json;
                const vals = [];
                for (const val of def.values) {
                  if (val === void 0) {
                    if (this.unrepresentable === "throw") {
                      throw new Error("Literal `undefined` cannot be represented in JSON Schema");
                    } else {
                    }
                  } else if (typeof val === "bigint") {
                    if (this.unrepresentable === "throw") {
                      throw new Error("BigInt literals cannot be represented in JSON Schema");
                    } else {
                      vals.push(Number(val));
                    }
                  } else {
                    vals.push(val);
                  }
                }
                if (vals.length === 0) {
                } else if (vals.length === 1) {
                  const val = vals[0];
                  json2.type = val === null ? "null" : typeof val;
                  if (this.target === "draft-4") {
                    json2.enum = [val];
                  } else {
                    json2.const = val;
                  }
                } else {
                  if (vals.every((v3) => typeof v3 === "number"))
                    json2.type = "number";
                  if (vals.every((v3) => typeof v3 === "string"))
                    json2.type = "string";
                  if (vals.every((v3) => typeof v3 === "boolean"))
                    json2.type = "string";
                  if (vals.every((v3) => v3 === null))
                    json2.type = "null";
                  json2.enum = vals;
                }
                break;
              }
              case "file": {
                const json2 = _json;
                const file2 = {
                  type: "string",
                  format: "binary",
                  contentEncoding: "binary"
                };
                const { minimum, maximum, mime } = schema._zod.bag;
                if (minimum !== void 0)
                  file2.minLength = minimum;
                if (maximum !== void 0)
                  file2.maxLength = maximum;
                if (mime) {
                  if (mime.length === 1) {
                    file2.contentMediaType = mime[0];
                    Object.assign(json2, file2);
                  } else {
                    json2.anyOf = mime.map((m3) => {
                      const mFile = { ...file2, contentMediaType: m3 };
                      return mFile;
                    });
                  }
                } else {
                  Object.assign(json2, file2);
                }
                break;
              }
              case "transform": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Transforms cannot be represented in JSON Schema");
                }
                break;
              }
              case "nullable": {
                const inner = this.process(def.innerType, params);
                _json.anyOf = [inner, { type: "null" }];
                break;
              }
              case "nonoptional": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "success": {
                const json2 = _json;
                json2.type = "boolean";
                break;
              }
              case "default": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                _json.default = JSON.parse(JSON.stringify(def.defaultValue));
                break;
              }
              case "prefault": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                if (this.io === "input")
                  _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));
                break;
              }
              case "catch": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                let catchValue;
                try {
                  catchValue = def.catchValue(void 0);
                } catch {
                  throw new Error("Dynamic catch values are not supported in JSON Schema");
                }
                _json.default = catchValue;
                break;
              }
              case "nan": {
                if (this.unrepresentable === "throw") {
                  throw new Error("NaN cannot be represented in JSON Schema");
                }
                break;
              }
              case "template_literal": {
                const json2 = _json;
                const pattern = schema._zod.pattern;
                if (!pattern)
                  throw new Error("Pattern not found in template literal");
                json2.type = "string";
                json2.pattern = pattern.source;
                break;
              }
              case "pipe": {
                const innerType = this.io === "input" ? def.in._zod.def.type === "transform" ? def.out : def.in : def.out;
                this.process(innerType, params);
                result.ref = innerType;
                break;
              }
              case "readonly": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                _json.readOnly = true;
                break;
              }
              case "promise": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "optional": {
                this.process(def.innerType, params);
                result.ref = def.innerType;
                break;
              }
              case "lazy": {
                const innerType = schema._zod.innerType;
                this.process(innerType, params);
                result.ref = innerType;
                break;
              }
              case "custom": {
                if (this.unrepresentable === "throw") {
                  throw new Error("Custom types cannot be represented in JSON Schema");
                }
                break;
              }
              default: {
                def;
              }
            }
          }
        }
        const meta = this.metadataRegistry.get(schema);
        if (meta)
          Object.assign(result.schema, meta);
        if (this.io === "input" && isTransforming(schema)) {
          delete result.schema.examples;
          delete result.schema.default;
        }
        if (this.io === "input" && result.schema._prefault)
          (_a = result.schema).default ?? (_a.default = result.schema._prefault);
        delete result.schema._prefault;
        const _result = this.seen.get(schema);
        return _result.schema;
      }
      emit(schema, _params) {
        const params = {
          cycles: _params?.cycles ?? "ref",
          reused: _params?.reused ?? "inline",
          // unrepresentable: _params?.unrepresentable ?? "throw",
          // uri: _params?.uri ?? ((id) => `${id}`),
          external: _params?.external ?? void 0
        };
        const root4 = this.seen.get(schema);
        if (!root4)
          throw new Error("Unprocessed schema. This is a bug in Zod.");
        const makeURI = (entry) => {
          const defsSegment = this.target === "draft-2020-12" ? "$defs" : "definitions";
          if (params.external) {
            const externalId = params.external.registry.get(entry[0])?.id;
            const uriGenerator = params.external.uri ?? ((id2) => id2);
            if (externalId) {
              return { ref: uriGenerator(externalId) };
            }
            const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;
            entry[1].defId = id;
            return { defId: id, ref: `${uriGenerator("__shared")}#/${defsSegment}/${id}` };
          }
          if (entry[1] === root4) {
            return { ref: "#" };
          }
          const uriPrefix = `#`;
          const defUriPrefix = `${uriPrefix}/${defsSegment}/`;
          const defId = entry[1].schema.id ?? `__schema${this.counter++}`;
          return { defId, ref: defUriPrefix + defId };
        };
        const extractToDef = (entry) => {
          if (entry[1].schema.$ref) {
            return;
          }
          const seen = entry[1];
          const { ref, defId } = makeURI(entry);
          seen.def = { ...seen.schema };
          if (defId)
            seen.defId = defId;
          const schema2 = seen.schema;
          for (const key in schema2) {
            delete schema2[key];
          }
          schema2.$ref = ref;
        };
        if (params.cycles === "throw") {
          for (const entry of this.seen.entries()) {
            const seen = entry[1];
            if (seen.cycle) {
              throw new Error(`Cycle detected: #/${seen.cycle?.join("/")}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`);
            }
          }
        }
        for (const entry of this.seen.entries()) {
          const seen = entry[1];
          if (schema === entry[0]) {
            extractToDef(entry);
            continue;
          }
          if (params.external) {
            const ext = params.external.registry.get(entry[0])?.id;
            if (schema !== entry[0] && ext) {
              extractToDef(entry);
              continue;
            }
          }
          const id = this.metadataRegistry.get(entry[0])?.id;
          if (id) {
            extractToDef(entry);
            continue;
          }
          if (seen.cycle) {
            extractToDef(entry);
            continue;
          }
          if (seen.count > 1) {
            if (params.reused === "ref") {
              extractToDef(entry);
              continue;
            }
          }
        }
        const flattenRef = (zodSchema, params2) => {
          const seen = this.seen.get(zodSchema);
          const schema2 = seen.def ?? seen.schema;
          const _cached = { ...schema2 };
          if (seen.ref === null) {
            return;
          }
          const ref = seen.ref;
          seen.ref = null;
          if (ref) {
            flattenRef(ref, params2);
            const refSchema = this.seen.get(ref).schema;
            if (refSchema.$ref && (params2.target === "draft-7" || params2.target === "draft-4")) {
              schema2.allOf = schema2.allOf ?? [];
              schema2.allOf.push(refSchema);
            } else {
              Object.assign(schema2, refSchema);
              Object.assign(schema2, _cached);
            }
          }
          if (!seen.isParent)
            this.override({
              zodSchema,
              jsonSchema: schema2,
              path: seen.path ?? []
            });
        };
        for (const entry of [...this.seen.entries()].reverse()) {
          flattenRef(entry[0], { target: this.target });
        }
        const result = {};
        if (this.target === "draft-2020-12") {
          result.$schema = "https://json-schema.org/draft/2020-12/schema";
        } else if (this.target === "draft-7") {
          result.$schema = "http://json-schema.org/draft-07/schema#";
        } else if (this.target === "draft-4") {
          result.$schema = "http://json-schema.org/draft-04/schema#";
        } else {
          console.warn(`Invalid target: ${this.target}`);
        }
        if (params.external?.uri) {
          const id = params.external.registry.get(schema)?.id;
          if (!id)
            throw new Error("Schema is missing an `id` property");
          result.$id = params.external.uri(id);
        }
        Object.assign(result, root4.def);
        const defs = params.external?.defs ?? {};
        for (const entry of this.seen.entries()) {
          const seen = entry[1];
          if (seen.def && seen.defId) {
            defs[seen.defId] = seen.def;
          }
        }
        if (params.external) {
        } else {
          if (Object.keys(defs).length > 0) {
            if (this.target === "draft-2020-12") {
              result.$defs = defs;
            } else {
              result.definitions = defs;
            }
          }
        }
        try {
          return JSON.parse(JSON.stringify(result));
        } catch (_err) {
          throw new Error("Error converting schema to JSON.");
        }
      }
    };
  }
});

// node_modules/zod/v4/core/json-schema.js
var json_schema_exports = {};
var init_json_schema = __esm({
  "node_modules/zod/v4/core/json-schema.js"() {
  }
});

// node_modules/zod/v4/core/index.js
var core_exports2 = {};
__export(core_exports2, {
  $ZodAny: () => $ZodAny,
  $ZodArray: () => $ZodArray,
  $ZodAsyncError: () => $ZodAsyncError,
  $ZodBase64: () => $ZodBase64,
  $ZodBase64URL: () => $ZodBase64URL,
  $ZodBigInt: () => $ZodBigInt,
  $ZodBigIntFormat: () => $ZodBigIntFormat,
  $ZodBoolean: () => $ZodBoolean,
  $ZodCIDRv4: () => $ZodCIDRv4,
  $ZodCIDRv6: () => $ZodCIDRv6,
  $ZodCUID: () => $ZodCUID,
  $ZodCUID2: () => $ZodCUID2,
  $ZodCatch: () => $ZodCatch,
  $ZodCheck: () => $ZodCheck,
  $ZodCheckBigIntFormat: () => $ZodCheckBigIntFormat,
  $ZodCheckEndsWith: () => $ZodCheckEndsWith,
  $ZodCheckGreaterThan: () => $ZodCheckGreaterThan,
  $ZodCheckIncludes: () => $ZodCheckIncludes,
  $ZodCheckLengthEquals: () => $ZodCheckLengthEquals,
  $ZodCheckLessThan: () => $ZodCheckLessThan,
  $ZodCheckLowerCase: () => $ZodCheckLowerCase,
  $ZodCheckMaxLength: () => $ZodCheckMaxLength,
  $ZodCheckMaxSize: () => $ZodCheckMaxSize,
  $ZodCheckMimeType: () => $ZodCheckMimeType,
  $ZodCheckMinLength: () => $ZodCheckMinLength,
  $ZodCheckMinSize: () => $ZodCheckMinSize,
  $ZodCheckMultipleOf: () => $ZodCheckMultipleOf,
  $ZodCheckNumberFormat: () => $ZodCheckNumberFormat,
  $ZodCheckOverwrite: () => $ZodCheckOverwrite,
  $ZodCheckProperty: () => $ZodCheckProperty,
  $ZodCheckRegex: () => $ZodCheckRegex,
  $ZodCheckSizeEquals: () => $ZodCheckSizeEquals,
  $ZodCheckStartsWith: () => $ZodCheckStartsWith,
  $ZodCheckStringFormat: () => $ZodCheckStringFormat,
  $ZodCheckUpperCase: () => $ZodCheckUpperCase,
  $ZodCustom: () => $ZodCustom,
  $ZodCustomStringFormat: () => $ZodCustomStringFormat,
  $ZodDate: () => $ZodDate,
  $ZodDefault: () => $ZodDefault,
  $ZodDiscriminatedUnion: () => $ZodDiscriminatedUnion,
  $ZodE164: () => $ZodE164,
  $ZodEmail: () => $ZodEmail,
  $ZodEmoji: () => $ZodEmoji,
  $ZodEnum: () => $ZodEnum,
  $ZodError: () => $ZodError,
  $ZodFile: () => $ZodFile,
  $ZodFunction: () => $ZodFunction,
  $ZodGUID: () => $ZodGUID,
  $ZodIPv4: () => $ZodIPv4,
  $ZodIPv6: () => $ZodIPv6,
  $ZodISODate: () => $ZodISODate,
  $ZodISODateTime: () => $ZodISODateTime,
  $ZodISODuration: () => $ZodISODuration,
  $ZodISOTime: () => $ZodISOTime,
  $ZodIntersection: () => $ZodIntersection,
  $ZodJWT: () => $ZodJWT,
  $ZodKSUID: () => $ZodKSUID,
  $ZodLazy: () => $ZodLazy,
  $ZodLiteral: () => $ZodLiteral,
  $ZodMap: () => $ZodMap,
  $ZodNaN: () => $ZodNaN,
  $ZodNanoID: () => $ZodNanoID,
  $ZodNever: () => $ZodNever,
  $ZodNonOptional: () => $ZodNonOptional,
  $ZodNull: () => $ZodNull,
  $ZodNullable: () => $ZodNullable,
  $ZodNumber: () => $ZodNumber,
  $ZodNumberFormat: () => $ZodNumberFormat,
  $ZodObject: () => $ZodObject,
  $ZodOptional: () => $ZodOptional,
  $ZodPipe: () => $ZodPipe,
  $ZodPrefault: () => $ZodPrefault,
  $ZodPromise: () => $ZodPromise,
  $ZodReadonly: () => $ZodReadonly,
  $ZodRealError: () => $ZodRealError,
  $ZodRecord: () => $ZodRecord,
  $ZodRegistry: () => $ZodRegistry,
  $ZodSet: () => $ZodSet,
  $ZodString: () => $ZodString,
  $ZodStringFormat: () => $ZodStringFormat,
  $ZodSuccess: () => $ZodSuccess,
  $ZodSymbol: () => $ZodSymbol,
  $ZodTemplateLiteral: () => $ZodTemplateLiteral,
  $ZodTransform: () => $ZodTransform,
  $ZodTuple: () => $ZodTuple,
  $ZodType: () => $ZodType,
  $ZodULID: () => $ZodULID,
  $ZodURL: () => $ZodURL,
  $ZodUUID: () => $ZodUUID,
  $ZodUndefined: () => $ZodUndefined,
  $ZodUnion: () => $ZodUnion,
  $ZodUnknown: () => $ZodUnknown,
  $ZodVoid: () => $ZodVoid,
  $ZodXID: () => $ZodXID,
  $brand: () => $brand,
  $constructor: () => $constructor,
  $input: () => $input,
  $output: () => $output,
  Doc: () => Doc,
  JSONSchema: () => json_schema_exports,
  JSONSchemaGenerator: () => JSONSchemaGenerator,
  NEVER: () => NEVER,
  TimePrecision: () => TimePrecision,
  _any: () => _any,
  _array: () => _array,
  _base64: () => _base64,
  _base64url: () => _base64url,
  _bigint: () => _bigint,
  _boolean: () => _boolean,
  _catch: () => _catch,
  _check: () => _check,
  _cidrv4: () => _cidrv4,
  _cidrv6: () => _cidrv6,
  _coercedBigint: () => _coercedBigint,
  _coercedBoolean: () => _coercedBoolean,
  _coercedDate: () => _coercedDate,
  _coercedNumber: () => _coercedNumber,
  _coercedString: () => _coercedString,
  _cuid: () => _cuid,
  _cuid2: () => _cuid2,
  _custom: () => _custom,
  _date: () => _date,
  _default: () => _default,
  _discriminatedUnion: () => _discriminatedUnion,
  _e164: () => _e164,
  _email: () => _email,
  _emoji: () => _emoji2,
  _endsWith: () => _endsWith,
  _enum: () => _enum,
  _file: () => _file,
  _float32: () => _float32,
  _float64: () => _float64,
  _gt: () => _gt,
  _gte: () => _gte,
  _guid: () => _guid,
  _includes: () => _includes,
  _int: () => _int,
  _int32: () => _int32,
  _int64: () => _int64,
  _intersection: () => _intersection,
  _ipv4: () => _ipv4,
  _ipv6: () => _ipv6,
  _isoDate: () => _isoDate,
  _isoDateTime: () => _isoDateTime,
  _isoDuration: () => _isoDuration,
  _isoTime: () => _isoTime,
  _jwt: () => _jwt,
  _ksuid: () => _ksuid,
  _lazy: () => _lazy,
  _length: () => _length,
  _literal: () => _literal,
  _lowercase: () => _lowercase,
  _lt: () => _lt,
  _lte: () => _lte,
  _map: () => _map2,
  _max: () => _lte,
  _maxLength: () => _maxLength,
  _maxSize: () => _maxSize,
  _mime: () => _mime,
  _min: () => _gte,
  _minLength: () => _minLength,
  _minSize: () => _minSize,
  _multipleOf: () => _multipleOf,
  _nan: () => _nan,
  _nanoid: () => _nanoid,
  _nativeEnum: () => _nativeEnum,
  _negative: () => _negative,
  _never: () => _never,
  _nonnegative: () => _nonnegative,
  _nonoptional: () => _nonoptional,
  _nonpositive: () => _nonpositive,
  _normalize: () => _normalize,
  _null: () => _null2,
  _nullable: () => _nullable,
  _number: () => _number,
  _optional: () => _optional,
  _overwrite: () => _overwrite,
  _parse: () => _parse,
  _parseAsync: () => _parseAsync,
  _pipe: () => _pipe,
  _positive: () => _positive,
  _promise: () => _promise,
  _property: () => _property,
  _readonly: () => _readonly,
  _record: () => _record,
  _refine: () => _refine,
  _regex: () => _regex,
  _safeParse: () => _safeParse,
  _safeParseAsync: () => _safeParseAsync,
  _set: () => _set,
  _size: () => _size,
  _startsWith: () => _startsWith,
  _string: () => _string,
  _stringFormat: () => _stringFormat,
  _stringbool: () => _stringbool,
  _success: () => _success,
  _superRefine: () => _superRefine,
  _symbol: () => _symbol,
  _templateLiteral: () => _templateLiteral,
  _toLowerCase: () => _toLowerCase,
  _toUpperCase: () => _toUpperCase,
  _transform: () => _transform,
  _trim: () => _trim,
  _tuple: () => _tuple,
  _uint32: () => _uint32,
  _uint64: () => _uint64,
  _ulid: () => _ulid,
  _undefined: () => _undefined2,
  _union: () => _union,
  _unknown: () => _unknown,
  _uppercase: () => _uppercase,
  _url: () => _url,
  _uuid: () => _uuid,
  _uuidv4: () => _uuidv4,
  _uuidv6: () => _uuidv6,
  _uuidv7: () => _uuidv7,
  _void: () => _void,
  _xid: () => _xid,
  clone: () => clone,
  config: () => config,
  flattenError: () => flattenError,
  formatError: () => formatError,
  function: () => _function,
  globalConfig: () => globalConfig,
  globalRegistry: () => globalRegistry,
  isValidBase64: () => isValidBase64,
  isValidBase64URL: () => isValidBase64URL,
  isValidJWT: () => isValidJWT,
  locales: () => locales_exports,
  parse: () => parse,
  parseAsync: () => parseAsync,
  prettifyError: () => prettifyError,
  regexes: () => regexes_exports,
  registry: () => registry,
  safeParse: () => safeParse,
  safeParseAsync: () => safeParseAsync,
  toDotPath: () => toDotPath,
  toJSONSchema: () => toJSONSchema,
  treeifyError: () => treeifyError,
  util: () => util_exports,
  version: () => version3
});
var init_core2 = __esm({
  "node_modules/zod/v4/core/index.js"() {
    init_core();
    init_parse();
    init_errors();
    init_schemas();
    init_checks();
    init_versions();
    init_util();
    init_regexes();
    init_locales();
    init_registries();
    init_doc();
    init_function();
    init_api();
    init_to_json_schema();
    init_json_schema();
  }
});

// node_modules/zod/v4/classic/checks.js
var init_checks2 = __esm({
  "node_modules/zod/v4/classic/checks.js"() {
    init_core2();
  }
});

// node_modules/zod/v4/classic/iso.js
var iso_exports = {};
__export(iso_exports, {
  ZodISODate: () => ZodISODate,
  ZodISODateTime: () => ZodISODateTime,
  ZodISODuration: () => ZodISODuration,
  ZodISOTime: () => ZodISOTime,
  date: () => date2,
  datetime: () => datetime2,
  duration: () => duration2,
  time: () => time2
});
function datetime2(params) {
  return _isoDateTime(ZodISODateTime, params);
}
function date2(params) {
  return _isoDate(ZodISODate, params);
}
function time2(params) {
  return _isoTime(ZodISOTime, params);
}
function duration2(params) {
  return _isoDuration(ZodISODuration, params);
}
var ZodISODateTime, ZodISODate, ZodISOTime, ZodISODuration;
var init_iso = __esm({
  "node_modules/zod/v4/classic/iso.js"() {
    init_core2();
    init_schemas2();
    ZodISODateTime = /* @__PURE__ */ $constructor("ZodISODateTime", (inst, def) => {
      $ZodISODateTime.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodISODate = /* @__PURE__ */ $constructor("ZodISODate", (inst, def) => {
      $ZodISODate.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodISOTime = /* @__PURE__ */ $constructor("ZodISOTime", (inst, def) => {
      $ZodISOTime.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodISODuration = /* @__PURE__ */ $constructor("ZodISODuration", (inst, def) => {
      $ZodISODuration.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
  }
});

// node_modules/zod/v4/classic/errors.js
var initializer2, ZodError, ZodRealError;
var init_errors2 = __esm({
  "node_modules/zod/v4/classic/errors.js"() {
    init_core2();
    init_core2();
    init_util();
    initializer2 = (inst, issues) => {
      $ZodError.init(inst, issues);
      inst.name = "ZodError";
      Object.defineProperties(inst, {
        format: {
          value: (mapper) => formatError(inst, mapper)
          // enumerable: false,
        },
        flatten: {
          value: (mapper) => flattenError(inst, mapper)
          // enumerable: false,
        },
        addIssue: {
          value: (issue2) => {
            inst.issues.push(issue2);
            inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
          }
          // enumerable: false,
        },
        addIssues: {
          value: (issues2) => {
            inst.issues.push(...issues2);
            inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
          }
          // enumerable: false,
        },
        isEmpty: {
          get() {
            return inst.issues.length === 0;
          }
          // enumerable: false,
        }
      });
    };
    ZodError = $constructor("ZodError", initializer2);
    ZodRealError = $constructor("ZodError", initializer2, {
      Parent: Error
    });
  }
});

// node_modules/zod/v4/classic/parse.js
var parse2, parseAsync2, safeParse2, safeParseAsync2;
var init_parse2 = __esm({
  "node_modules/zod/v4/classic/parse.js"() {
    init_core2();
    init_errors2();
    parse2 = /* @__PURE__ */ _parse(ZodRealError);
    parseAsync2 = /* @__PURE__ */ _parseAsync(ZodRealError);
    safeParse2 = /* @__PURE__ */ _safeParse(ZodRealError);
    safeParseAsync2 = /* @__PURE__ */ _safeParseAsync(ZodRealError);
  }
});

// node_modules/zod/v4/classic/schemas.js
function string2(params) {
  return _string(ZodString, params);
}
function email2(params) {
  return _email(ZodEmail, params);
}
function guid2(params) {
  return _guid(ZodGUID, params);
}
function uuid2(params) {
  return _uuid(ZodUUID, params);
}
function uuidv4(params) {
  return _uuidv4(ZodUUID, params);
}
function uuidv6(params) {
  return _uuidv6(ZodUUID, params);
}
function uuidv7(params) {
  return _uuidv7(ZodUUID, params);
}
function url(params) {
  return _url(ZodURL, params);
}
function emoji2(params) {
  return _emoji2(ZodEmoji, params);
}
function nanoid2(params) {
  return _nanoid(ZodNanoID, params);
}
function cuid3(params) {
  return _cuid(ZodCUID, params);
}
function cuid22(params) {
  return _cuid2(ZodCUID2, params);
}
function ulid2(params) {
  return _ulid(ZodULID, params);
}
function xid2(params) {
  return _xid(ZodXID, params);
}
function ksuid2(params) {
  return _ksuid(ZodKSUID, params);
}
function ipv42(params) {
  return _ipv4(ZodIPv4, params);
}
function ipv62(params) {
  return _ipv6(ZodIPv6, params);
}
function cidrv42(params) {
  return _cidrv4(ZodCIDRv4, params);
}
function cidrv62(params) {
  return _cidrv6(ZodCIDRv6, params);
}
function base642(params) {
  return _base64(ZodBase64, params);
}
function base64url2(params) {
  return _base64url(ZodBase64URL, params);
}
function e1642(params) {
  return _e164(ZodE164, params);
}
function jwt(params) {
  return _jwt(ZodJWT, params);
}
function stringFormat(format, fnOrRegex, _params = {}) {
  return _stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);
}
function hostname2(_params) {
  return _stringFormat(ZodCustomStringFormat, "hostname", regexes_exports.hostname, _params);
}
function number2(params) {
  return _number(ZodNumber, params);
}
function int(params) {
  return _int(ZodNumberFormat, params);
}
function float32(params) {
  return _float32(ZodNumberFormat, params);
}
function float64(params) {
  return _float64(ZodNumberFormat, params);
}
function int32(params) {
  return _int32(ZodNumberFormat, params);
}
function uint32(params) {
  return _uint32(ZodNumberFormat, params);
}
function boolean2(params) {
  return _boolean(ZodBoolean, params);
}
function bigint2(params) {
  return _bigint(ZodBigInt, params);
}
function int64(params) {
  return _int64(ZodBigIntFormat, params);
}
function uint64(params) {
  return _uint64(ZodBigIntFormat, params);
}
function symbol(params) {
  return _symbol(ZodSymbol, params);
}
function _undefined3(params) {
  return _undefined2(ZodUndefined, params);
}
function _null3(params) {
  return _null2(ZodNull, params);
}
function any() {
  return _any(ZodAny);
}
function unknown() {
  return _unknown(ZodUnknown);
}
function never(params) {
  return _never(ZodNever, params);
}
function _void2(params) {
  return _void(ZodVoid, params);
}
function date3(params) {
  return _date(ZodDate, params);
}
function array(element3, params) {
  return _array(ZodArray, element3, params);
}
function keyof(schema) {
  const shape = schema._zod.def.shape;
  return _enum2(Object.keys(shape));
}
function object(shape, params) {
  const def = {
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", shape ? util_exports.objectClone(shape) : {});
      return this.shape;
    },
    ...util_exports.normalizeParams(params)
  };
  return new ZodObject(def);
}
function strictObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", util_exports.objectClone(shape));
      return this.shape;
    },
    catchall: never(),
    ...util_exports.normalizeParams(params)
  });
}
function looseObject(shape, params) {
  return new ZodObject({
    type: "object",
    get shape() {
      util_exports.assignProp(this, "shape", util_exports.objectClone(shape));
      return this.shape;
    },
    catchall: unknown(),
    ...util_exports.normalizeParams(params)
  });
}
function union(options2, params) {
  return new ZodUnion({
    type: "union",
    options: options2,
    ...util_exports.normalizeParams(params)
  });
}
function discriminatedUnion(discriminator, options2, params) {
  return new ZodDiscriminatedUnion({
    type: "union",
    options: options2,
    discriminator,
    ...util_exports.normalizeParams(params)
  });
}
function intersection(left, right) {
  return new ZodIntersection({
    type: "intersection",
    left,
    right
  });
}
function tuple(items, _paramsOrRest, _params) {
  const hasRest = _paramsOrRest instanceof $ZodType;
  const params = hasRest ? _params : _paramsOrRest;
  const rest = hasRest ? _paramsOrRest : null;
  return new ZodTuple({
    type: "tuple",
    items,
    rest,
    ...util_exports.normalizeParams(params)
  });
}
function record(keyType, valueType, params) {
  return new ZodRecord({
    type: "record",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
function partialRecord(keyType, valueType, params) {
  const k3 = clone(keyType);
  k3._zod.values = void 0;
  return new ZodRecord({
    type: "record",
    keyType: k3,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
function map(keyType, valueType, params) {
  return new ZodMap({
    type: "map",
    keyType,
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
function set(valueType, params) {
  return new ZodSet({
    type: "set",
    valueType,
    ...util_exports.normalizeParams(params)
  });
}
function _enum2(values, params) {
  const entries = Array.isArray(values) ? Object.fromEntries(values.map((v3) => [v3, v3])) : values;
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
function nativeEnum(entries, params) {
  return new ZodEnum({
    type: "enum",
    entries,
    ...util_exports.normalizeParams(params)
  });
}
function literal(value, params) {
  return new ZodLiteral({
    type: "literal",
    values: Array.isArray(value) ? value : [value],
    ...util_exports.normalizeParams(params)
  });
}
function file(params) {
  return _file(ZodFile, params);
}
function transform(fn) {
  return new ZodTransform({
    type: "transform",
    transform: fn
  });
}
function optional(innerType) {
  return new ZodOptional({
    type: "optional",
    innerType
  });
}
function nullable(innerType) {
  return new ZodNullable({
    type: "nullable",
    innerType
  });
}
function nullish2(innerType) {
  return optional(nullable(innerType));
}
function _default2(innerType, defaultValue) {
  return new ZodDefault({
    type: "default",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : util_exports.shallowClone(defaultValue);
    }
  });
}
function prefault(innerType, defaultValue) {
  return new ZodPrefault({
    type: "prefault",
    innerType,
    get defaultValue() {
      return typeof defaultValue === "function" ? defaultValue() : util_exports.shallowClone(defaultValue);
    }
  });
}
function nonoptional(innerType, params) {
  return new ZodNonOptional({
    type: "nonoptional",
    innerType,
    ...util_exports.normalizeParams(params)
  });
}
function success(innerType) {
  return new ZodSuccess({
    type: "success",
    innerType
  });
}
function _catch2(innerType, catchValue) {
  return new ZodCatch({
    type: "catch",
    innerType,
    catchValue: typeof catchValue === "function" ? catchValue : () => catchValue
  });
}
function nan(params) {
  return _nan(ZodNaN, params);
}
function pipe(in_, out) {
  return new ZodPipe({
    type: "pipe",
    in: in_,
    out
    // ...util.normalizeParams(params),
  });
}
function readonly(innerType) {
  return new ZodReadonly({
    type: "readonly",
    innerType
  });
}
function templateLiteral(parts, params) {
  return new ZodTemplateLiteral({
    type: "template_literal",
    parts,
    ...util_exports.normalizeParams(params)
  });
}
function lazy(getter) {
  return new ZodLazy({
    type: "lazy",
    getter
  });
}
function promise(innerType) {
  return new ZodPromise({
    type: "promise",
    innerType
  });
}
function check(fn) {
  const ch = new $ZodCheck({
    check: "custom"
    // ...util.normalizeParams(params),
  });
  ch._zod.check = fn;
  return ch;
}
function custom(fn, _params) {
  return _custom(ZodCustom, fn ?? (() => true), _params);
}
function refine(fn, _params = {}) {
  return _refine(ZodCustom, fn, _params);
}
function superRefine(fn) {
  return _superRefine(fn);
}
function _instanceof(cls, params = {
  error: `Input not instance of ${cls.name}`
}) {
  const inst = new ZodCustom({
    type: "custom",
    check: "custom",
    fn: (data2) => data2 instanceof cls,
    abort: true,
    ...util_exports.normalizeParams(params)
  });
  inst._zod.bag.Class = cls;
  return inst;
}
function json(params) {
  const jsonSchema = lazy(() => {
    return union([string2(params), number2(), boolean2(), _null3(), array(jsonSchema), record(string2(), jsonSchema)]);
  });
  return jsonSchema;
}
function preprocess(fn, schema) {
  return pipe(transform(fn), schema);
}
var ZodType, _ZodString, ZodString, ZodStringFormat, ZodEmail, ZodGUID, ZodUUID, ZodURL, ZodEmoji, ZodNanoID, ZodCUID, ZodCUID2, ZodULID, ZodXID, ZodKSUID, ZodIPv4, ZodIPv6, ZodCIDRv4, ZodCIDRv6, ZodBase64, ZodBase64URL, ZodE164, ZodJWT, ZodCustomStringFormat, ZodNumber, ZodNumberFormat, ZodBoolean, ZodBigInt, ZodBigIntFormat, ZodSymbol, ZodUndefined, ZodNull, ZodAny, ZodUnknown, ZodNever, ZodVoid, ZodDate, ZodArray, ZodObject, ZodUnion, ZodDiscriminatedUnion, ZodIntersection, ZodTuple, ZodRecord, ZodMap, ZodSet, ZodEnum, ZodLiteral, ZodFile, ZodTransform, ZodOptional, ZodNullable, ZodDefault, ZodPrefault, ZodNonOptional, ZodSuccess, ZodCatch, ZodNaN, ZodPipe, ZodReadonly, ZodTemplateLiteral, ZodLazy, ZodPromise, ZodCustom, stringbool;
var init_schemas2 = __esm({
  "node_modules/zod/v4/classic/schemas.js"() {
    init_core2();
    init_core2();
    init_checks2();
    init_iso();
    init_parse2();
    ZodType = /* @__PURE__ */ $constructor("ZodType", (inst, def) => {
      $ZodType.init(inst, def);
      inst.def = def;
      Object.defineProperty(inst, "_def", { value: def });
      inst.check = (...checks2) => {
        return inst.clone(
          {
            ...def,
            checks: [
              ...def.checks ?? [],
              ...checks2.map((ch) => typeof ch === "function" ? { _zod: { check: ch, def: { check: "custom" }, onattach: [] } } : ch)
            ]
          }
          // { parent: true }
        );
      };
      inst.clone = (def2, params) => clone(inst, def2, params);
      inst.brand = () => inst;
      inst.register = (reg, meta) => {
        reg.add(inst, meta);
        return inst;
      };
      inst.parse = (data2, params) => parse2(inst, data2, params, { callee: inst.parse });
      inst.safeParse = (data2, params) => safeParse2(inst, data2, params);
      inst.parseAsync = async (data2, params) => parseAsync2(inst, data2, params, { callee: inst.parseAsync });
      inst.safeParseAsync = async (data2, params) => safeParseAsync2(inst, data2, params);
      inst.spa = inst.safeParseAsync;
      inst.refine = (check2, params) => inst.check(refine(check2, params));
      inst.superRefine = (refinement) => inst.check(superRefine(refinement));
      inst.overwrite = (fn) => inst.check(_overwrite(fn));
      inst.optional = () => optional(inst);
      inst.nullable = () => nullable(inst);
      inst.nullish = () => optional(nullable(inst));
      inst.nonoptional = (params) => nonoptional(inst, params);
      inst.array = () => array(inst);
      inst.or = (arg) => union([inst, arg]);
      inst.and = (arg) => intersection(inst, arg);
      inst.transform = (tx) => pipe(inst, transform(tx));
      inst.default = (def2) => _default2(inst, def2);
      inst.prefault = (def2) => prefault(inst, def2);
      inst.catch = (params) => _catch2(inst, params);
      inst.pipe = (target) => pipe(inst, target);
      inst.readonly = () => readonly(inst);
      inst.describe = (description) => {
        const cl = inst.clone();
        globalRegistry.add(cl, { description });
        return cl;
      };
      Object.defineProperty(inst, "description", {
        get() {
          return globalRegistry.get(inst)?.description;
        },
        configurable: true
      });
      inst.meta = (...args) => {
        if (args.length === 0) {
          return globalRegistry.get(inst);
        }
        const cl = inst.clone();
        globalRegistry.add(cl, args[0]);
        return cl;
      };
      inst.isOptional = () => inst.safeParse(void 0).success;
      inst.isNullable = () => inst.safeParse(null).success;
      return inst;
    });
    _ZodString = /* @__PURE__ */ $constructor("_ZodString", (inst, def) => {
      $ZodString.init(inst, def);
      ZodType.init(inst, def);
      const bag = inst._zod.bag;
      inst.format = bag.format ?? null;
      inst.minLength = bag.minimum ?? null;
      inst.maxLength = bag.maximum ?? null;
      inst.regex = (...args) => inst.check(_regex(...args));
      inst.includes = (...args) => inst.check(_includes(...args));
      inst.startsWith = (...args) => inst.check(_startsWith(...args));
      inst.endsWith = (...args) => inst.check(_endsWith(...args));
      inst.min = (...args) => inst.check(_minLength(...args));
      inst.max = (...args) => inst.check(_maxLength(...args));
      inst.length = (...args) => inst.check(_length(...args));
      inst.nonempty = (...args) => inst.check(_minLength(1, ...args));
      inst.lowercase = (params) => inst.check(_lowercase(params));
      inst.uppercase = (params) => inst.check(_uppercase(params));
      inst.trim = () => inst.check(_trim());
      inst.normalize = (...args) => inst.check(_normalize(...args));
      inst.toLowerCase = () => inst.check(_toLowerCase());
      inst.toUpperCase = () => inst.check(_toUpperCase());
    });
    ZodString = /* @__PURE__ */ $constructor("ZodString", (inst, def) => {
      $ZodString.init(inst, def);
      _ZodString.init(inst, def);
      inst.email = (params) => inst.check(_email(ZodEmail, params));
      inst.url = (params) => inst.check(_url(ZodURL, params));
      inst.jwt = (params) => inst.check(_jwt(ZodJWT, params));
      inst.emoji = (params) => inst.check(_emoji2(ZodEmoji, params));
      inst.guid = (params) => inst.check(_guid(ZodGUID, params));
      inst.uuid = (params) => inst.check(_uuid(ZodUUID, params));
      inst.uuidv4 = (params) => inst.check(_uuidv4(ZodUUID, params));
      inst.uuidv6 = (params) => inst.check(_uuidv6(ZodUUID, params));
      inst.uuidv7 = (params) => inst.check(_uuidv7(ZodUUID, params));
      inst.nanoid = (params) => inst.check(_nanoid(ZodNanoID, params));
      inst.guid = (params) => inst.check(_guid(ZodGUID, params));
      inst.cuid = (params) => inst.check(_cuid(ZodCUID, params));
      inst.cuid2 = (params) => inst.check(_cuid2(ZodCUID2, params));
      inst.ulid = (params) => inst.check(_ulid(ZodULID, params));
      inst.base64 = (params) => inst.check(_base64(ZodBase64, params));
      inst.base64url = (params) => inst.check(_base64url(ZodBase64URL, params));
      inst.xid = (params) => inst.check(_xid(ZodXID, params));
      inst.ksuid = (params) => inst.check(_ksuid(ZodKSUID, params));
      inst.ipv4 = (params) => inst.check(_ipv4(ZodIPv4, params));
      inst.ipv6 = (params) => inst.check(_ipv6(ZodIPv6, params));
      inst.cidrv4 = (params) => inst.check(_cidrv4(ZodCIDRv4, params));
      inst.cidrv6 = (params) => inst.check(_cidrv6(ZodCIDRv6, params));
      inst.e164 = (params) => inst.check(_e164(ZodE164, params));
      inst.datetime = (params) => inst.check(datetime2(params));
      inst.date = (params) => inst.check(date2(params));
      inst.time = (params) => inst.check(time2(params));
      inst.duration = (params) => inst.check(duration2(params));
    });
    ZodStringFormat = /* @__PURE__ */ $constructor("ZodStringFormat", (inst, def) => {
      $ZodStringFormat.init(inst, def);
      _ZodString.init(inst, def);
    });
    ZodEmail = /* @__PURE__ */ $constructor("ZodEmail", (inst, def) => {
      $ZodEmail.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodGUID = /* @__PURE__ */ $constructor("ZodGUID", (inst, def) => {
      $ZodGUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodUUID = /* @__PURE__ */ $constructor("ZodUUID", (inst, def) => {
      $ZodUUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodURL = /* @__PURE__ */ $constructor("ZodURL", (inst, def) => {
      $ZodURL.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodEmoji = /* @__PURE__ */ $constructor("ZodEmoji", (inst, def) => {
      $ZodEmoji.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodNanoID = /* @__PURE__ */ $constructor("ZodNanoID", (inst, def) => {
      $ZodNanoID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodCUID = /* @__PURE__ */ $constructor("ZodCUID", (inst, def) => {
      $ZodCUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodCUID2 = /* @__PURE__ */ $constructor("ZodCUID2", (inst, def) => {
      $ZodCUID2.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodULID = /* @__PURE__ */ $constructor("ZodULID", (inst, def) => {
      $ZodULID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodXID = /* @__PURE__ */ $constructor("ZodXID", (inst, def) => {
      $ZodXID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodKSUID = /* @__PURE__ */ $constructor("ZodKSUID", (inst, def) => {
      $ZodKSUID.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodIPv4 = /* @__PURE__ */ $constructor("ZodIPv4", (inst, def) => {
      $ZodIPv4.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodIPv6 = /* @__PURE__ */ $constructor("ZodIPv6", (inst, def) => {
      $ZodIPv6.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodCIDRv4 = /* @__PURE__ */ $constructor("ZodCIDRv4", (inst, def) => {
      $ZodCIDRv4.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodCIDRv6 = /* @__PURE__ */ $constructor("ZodCIDRv6", (inst, def) => {
      $ZodCIDRv6.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodBase64 = /* @__PURE__ */ $constructor("ZodBase64", (inst, def) => {
      $ZodBase64.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodBase64URL = /* @__PURE__ */ $constructor("ZodBase64URL", (inst, def) => {
      $ZodBase64URL.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodE164 = /* @__PURE__ */ $constructor("ZodE164", (inst, def) => {
      $ZodE164.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodJWT = /* @__PURE__ */ $constructor("ZodJWT", (inst, def) => {
      $ZodJWT.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodCustomStringFormat = /* @__PURE__ */ $constructor("ZodCustomStringFormat", (inst, def) => {
      $ZodCustomStringFormat.init(inst, def);
      ZodStringFormat.init(inst, def);
    });
    ZodNumber = /* @__PURE__ */ $constructor("ZodNumber", (inst, def) => {
      $ZodNumber.init(inst, def);
      ZodType.init(inst, def);
      inst.gt = (value, params) => inst.check(_gt(value, params));
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.lt = (value, params) => inst.check(_lt(value, params));
      inst.lte = (value, params) => inst.check(_lte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      inst.int = (params) => inst.check(int(params));
      inst.safe = (params) => inst.check(int(params));
      inst.positive = (params) => inst.check(_gt(0, params));
      inst.nonnegative = (params) => inst.check(_gte(0, params));
      inst.negative = (params) => inst.check(_lt(0, params));
      inst.nonpositive = (params) => inst.check(_lte(0, params));
      inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
      inst.step = (value, params) => inst.check(_multipleOf(value, params));
      inst.finite = () => inst;
      const bag = inst._zod.bag;
      inst.minValue = Math.max(bag.minimum ?? Number.NEGATIVE_INFINITY, bag.exclusiveMinimum ?? Number.NEGATIVE_INFINITY) ?? null;
      inst.maxValue = Math.min(bag.maximum ?? Number.POSITIVE_INFINITY, bag.exclusiveMaximum ?? Number.POSITIVE_INFINITY) ?? null;
      inst.isInt = (bag.format ?? "").includes("int") || Number.isSafeInteger(bag.multipleOf ?? 0.5);
      inst.isFinite = true;
      inst.format = bag.format ?? null;
    });
    ZodNumberFormat = /* @__PURE__ */ $constructor("ZodNumberFormat", (inst, def) => {
      $ZodNumberFormat.init(inst, def);
      ZodNumber.init(inst, def);
    });
    ZodBoolean = /* @__PURE__ */ $constructor("ZodBoolean", (inst, def) => {
      $ZodBoolean.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodBigInt = /* @__PURE__ */ $constructor("ZodBigInt", (inst, def) => {
      $ZodBigInt.init(inst, def);
      ZodType.init(inst, def);
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.gt = (value, params) => inst.check(_gt(value, params));
      inst.gte = (value, params) => inst.check(_gte(value, params));
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.lt = (value, params) => inst.check(_lt(value, params));
      inst.lte = (value, params) => inst.check(_lte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      inst.positive = (params) => inst.check(_gt(BigInt(0), params));
      inst.negative = (params) => inst.check(_lt(BigInt(0), params));
      inst.nonpositive = (params) => inst.check(_lte(BigInt(0), params));
      inst.nonnegative = (params) => inst.check(_gte(BigInt(0), params));
      inst.multipleOf = (value, params) => inst.check(_multipleOf(value, params));
      const bag = inst._zod.bag;
      inst.minValue = bag.minimum ?? null;
      inst.maxValue = bag.maximum ?? null;
      inst.format = bag.format ?? null;
    });
    ZodBigIntFormat = /* @__PURE__ */ $constructor("ZodBigIntFormat", (inst, def) => {
      $ZodBigIntFormat.init(inst, def);
      ZodBigInt.init(inst, def);
    });
    ZodSymbol = /* @__PURE__ */ $constructor("ZodSymbol", (inst, def) => {
      $ZodSymbol.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodUndefined = /* @__PURE__ */ $constructor("ZodUndefined", (inst, def) => {
      $ZodUndefined.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodNull = /* @__PURE__ */ $constructor("ZodNull", (inst, def) => {
      $ZodNull.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodAny = /* @__PURE__ */ $constructor("ZodAny", (inst, def) => {
      $ZodAny.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodUnknown = /* @__PURE__ */ $constructor("ZodUnknown", (inst, def) => {
      $ZodUnknown.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodNever = /* @__PURE__ */ $constructor("ZodNever", (inst, def) => {
      $ZodNever.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodVoid = /* @__PURE__ */ $constructor("ZodVoid", (inst, def) => {
      $ZodVoid.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodDate = /* @__PURE__ */ $constructor("ZodDate", (inst, def) => {
      $ZodDate.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (value, params) => inst.check(_gte(value, params));
      inst.max = (value, params) => inst.check(_lte(value, params));
      const c3 = inst._zod.bag;
      inst.minDate = c3.minimum ? new Date(c3.minimum) : null;
      inst.maxDate = c3.maximum ? new Date(c3.maximum) : null;
    });
    ZodArray = /* @__PURE__ */ $constructor("ZodArray", (inst, def) => {
      $ZodArray.init(inst, def);
      ZodType.init(inst, def);
      inst.element = def.element;
      inst.min = (minLength, params) => inst.check(_minLength(minLength, params));
      inst.nonempty = (params) => inst.check(_minLength(1, params));
      inst.max = (maxLength, params) => inst.check(_maxLength(maxLength, params));
      inst.length = (len, params) => inst.check(_length(len, params));
      inst.unwrap = () => inst.element;
    });
    ZodObject = /* @__PURE__ */ $constructor("ZodObject", (inst, def) => {
      $ZodObject.init(inst, def);
      ZodType.init(inst, def);
      util_exports.defineLazy(inst, "shape", () => def.shape);
      inst.keyof = () => _enum2(Object.keys(inst._zod.def.shape));
      inst.catchall = (catchall) => inst.clone({ ...inst._zod.def, catchall });
      inst.passthrough = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
      inst.loose = () => inst.clone({ ...inst._zod.def, catchall: unknown() });
      inst.strict = () => inst.clone({ ...inst._zod.def, catchall: never() });
      inst.strip = () => inst.clone({ ...inst._zod.def, catchall: void 0 });
      inst.extend = (incoming) => {
        return util_exports.extend(inst, incoming);
      };
      inst.merge = (other) => util_exports.merge(inst, other);
      inst.pick = (mask) => util_exports.pick(inst, mask);
      inst.omit = (mask) => util_exports.omit(inst, mask);
      inst.partial = (...args) => util_exports.partial(ZodOptional, inst, args[0]);
      inst.required = (...args) => util_exports.required(ZodNonOptional, inst, args[0]);
    });
    ZodUnion = /* @__PURE__ */ $constructor("ZodUnion", (inst, def) => {
      $ZodUnion.init(inst, def);
      ZodType.init(inst, def);
      inst.options = def.options;
    });
    ZodDiscriminatedUnion = /* @__PURE__ */ $constructor("ZodDiscriminatedUnion", (inst, def) => {
      ZodUnion.init(inst, def);
      $ZodDiscriminatedUnion.init(inst, def);
    });
    ZodIntersection = /* @__PURE__ */ $constructor("ZodIntersection", (inst, def) => {
      $ZodIntersection.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodTuple = /* @__PURE__ */ $constructor("ZodTuple", (inst, def) => {
      $ZodTuple.init(inst, def);
      ZodType.init(inst, def);
      inst.rest = (rest) => inst.clone({
        ...inst._zod.def,
        rest
      });
    });
    ZodRecord = /* @__PURE__ */ $constructor("ZodRecord", (inst, def) => {
      $ZodRecord.init(inst, def);
      ZodType.init(inst, def);
      inst.keyType = def.keyType;
      inst.valueType = def.valueType;
    });
    ZodMap = /* @__PURE__ */ $constructor("ZodMap", (inst, def) => {
      $ZodMap.init(inst, def);
      ZodType.init(inst, def);
      inst.keyType = def.keyType;
      inst.valueType = def.valueType;
    });
    ZodSet = /* @__PURE__ */ $constructor("ZodSet", (inst, def) => {
      $ZodSet.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (...args) => inst.check(_minSize(...args));
      inst.nonempty = (params) => inst.check(_minSize(1, params));
      inst.max = (...args) => inst.check(_maxSize(...args));
      inst.size = (...args) => inst.check(_size(...args));
    });
    ZodEnum = /* @__PURE__ */ $constructor("ZodEnum", (inst, def) => {
      $ZodEnum.init(inst, def);
      ZodType.init(inst, def);
      inst.enum = def.entries;
      inst.options = Object.values(def.entries);
      const keys2 = new Set(Object.keys(def.entries));
      inst.extract = (values, params) => {
        const newEntries = {};
        for (const value of values) {
          if (keys2.has(value)) {
            newEntries[value] = def.entries[value];
          } else
            throw new Error(`Key ${value} not found in enum`);
        }
        return new ZodEnum({
          ...def,
          checks: [],
          ...util_exports.normalizeParams(params),
          entries: newEntries
        });
      };
      inst.exclude = (values, params) => {
        const newEntries = { ...def.entries };
        for (const value of values) {
          if (keys2.has(value)) {
            delete newEntries[value];
          } else
            throw new Error(`Key ${value} not found in enum`);
        }
        return new ZodEnum({
          ...def,
          checks: [],
          ...util_exports.normalizeParams(params),
          entries: newEntries
        });
      };
    });
    ZodLiteral = /* @__PURE__ */ $constructor("ZodLiteral", (inst, def) => {
      $ZodLiteral.init(inst, def);
      ZodType.init(inst, def);
      inst.values = new Set(def.values);
      Object.defineProperty(inst, "value", {
        get() {
          if (def.values.length > 1) {
            throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");
          }
          return def.values[0];
        }
      });
    });
    ZodFile = /* @__PURE__ */ $constructor("ZodFile", (inst, def) => {
      $ZodFile.init(inst, def);
      ZodType.init(inst, def);
      inst.min = (size, params) => inst.check(_minSize(size, params));
      inst.max = (size, params) => inst.check(_maxSize(size, params));
      inst.mime = (types, params) => inst.check(_mime(Array.isArray(types) ? types : [types], params));
    });
    ZodTransform = /* @__PURE__ */ $constructor("ZodTransform", (inst, def) => {
      $ZodTransform.init(inst, def);
      ZodType.init(inst, def);
      inst._zod.parse = (payload, _ctx) => {
        payload.addIssue = (issue2) => {
          if (typeof issue2 === "string") {
            payload.issues.push(util_exports.issue(issue2, payload.value, def));
          } else {
            const _issue = issue2;
            if (_issue.fatal)
              _issue.continue = false;
            _issue.code ?? (_issue.code = "custom");
            _issue.input ?? (_issue.input = payload.value);
            _issue.inst ?? (_issue.inst = inst);
            payload.issues.push(util_exports.issue(_issue));
          }
        };
        const output = def.transform(payload.value, payload);
        if (output instanceof Promise) {
          return output.then((output2) => {
            payload.value = output2;
            return payload;
          });
        }
        payload.value = output;
        return payload;
      };
    });
    ZodOptional = /* @__PURE__ */ $constructor("ZodOptional", (inst, def) => {
      $ZodOptional.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodNullable = /* @__PURE__ */ $constructor("ZodNullable", (inst, def) => {
      $ZodNullable.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodDefault = /* @__PURE__ */ $constructor("ZodDefault", (inst, def) => {
      $ZodDefault.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
      inst.removeDefault = inst.unwrap;
    });
    ZodPrefault = /* @__PURE__ */ $constructor("ZodPrefault", (inst, def) => {
      $ZodPrefault.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodNonOptional = /* @__PURE__ */ $constructor("ZodNonOptional", (inst, def) => {
      $ZodNonOptional.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodSuccess = /* @__PURE__ */ $constructor("ZodSuccess", (inst, def) => {
      $ZodSuccess.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodCatch = /* @__PURE__ */ $constructor("ZodCatch", (inst, def) => {
      $ZodCatch.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
      inst.removeCatch = inst.unwrap;
    });
    ZodNaN = /* @__PURE__ */ $constructor("ZodNaN", (inst, def) => {
      $ZodNaN.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodPipe = /* @__PURE__ */ $constructor("ZodPipe", (inst, def) => {
      $ZodPipe.init(inst, def);
      ZodType.init(inst, def);
      inst.in = def.in;
      inst.out = def.out;
    });
    ZodReadonly = /* @__PURE__ */ $constructor("ZodReadonly", (inst, def) => {
      $ZodReadonly.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodTemplateLiteral = /* @__PURE__ */ $constructor("ZodTemplateLiteral", (inst, def) => {
      $ZodTemplateLiteral.init(inst, def);
      ZodType.init(inst, def);
    });
    ZodLazy = /* @__PURE__ */ $constructor("ZodLazy", (inst, def) => {
      $ZodLazy.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.getter();
    });
    ZodPromise = /* @__PURE__ */ $constructor("ZodPromise", (inst, def) => {
      $ZodPromise.init(inst, def);
      ZodType.init(inst, def);
      inst.unwrap = () => inst._zod.def.innerType;
    });
    ZodCustom = /* @__PURE__ */ $constructor("ZodCustom", (inst, def) => {
      $ZodCustom.init(inst, def);
      ZodType.init(inst, def);
    });
    stringbool = (...args) => _stringbool({
      Pipe: ZodPipe,
      Boolean: ZodBoolean,
      String: ZodString,
      Transform: ZodTransform
    }, ...args);
  }
});

// node_modules/zod/v4/classic/compat.js
function setErrorMap(map2) {
  config({
    customError: map2
  });
}
function getErrorMap() {
  return config().customError;
}
var ZodIssueCode, ZodFirstPartyTypeKind;
var init_compat = __esm({
  "node_modules/zod/v4/classic/compat.js"() {
    init_core2();
    ZodIssueCode = {
      invalid_type: "invalid_type",
      too_big: "too_big",
      too_small: "too_small",
      invalid_format: "invalid_format",
      not_multiple_of: "not_multiple_of",
      unrecognized_keys: "unrecognized_keys",
      invalid_union: "invalid_union",
      invalid_key: "invalid_key",
      invalid_element: "invalid_element",
      invalid_value: "invalid_value",
      custom: "custom"
    };
    /* @__PURE__ */ (function(ZodFirstPartyTypeKind2) {
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  }
});

// node_modules/zod/v4/classic/coerce.js
var coerce_exports = {};
__export(coerce_exports, {
  bigint: () => bigint3,
  boolean: () => boolean3,
  date: () => date4,
  number: () => number3,
  string: () => string3
});
function string3(params) {
  return _coercedString(ZodString, params);
}
function number3(params) {
  return _coercedNumber(ZodNumber, params);
}
function boolean3(params) {
  return _coercedBoolean(ZodBoolean, params);
}
function bigint3(params) {
  return _coercedBigint(ZodBigInt, params);
}
function date4(params) {
  return _coercedDate(ZodDate, params);
}
var init_coerce = __esm({
  "node_modules/zod/v4/classic/coerce.js"() {
    init_core2();
    init_schemas2();
  }
});

// node_modules/zod/v4/classic/external.js
var external_exports = {};
__export(external_exports, {
  $brand: () => $brand,
  $input: () => $input,
  $output: () => $output,
  NEVER: () => NEVER,
  TimePrecision: () => TimePrecision,
  ZodAny: () => ZodAny,
  ZodArray: () => ZodArray,
  ZodBase64: () => ZodBase64,
  ZodBase64URL: () => ZodBase64URL,
  ZodBigInt: () => ZodBigInt,
  ZodBigIntFormat: () => ZodBigIntFormat,
  ZodBoolean: () => ZodBoolean,
  ZodCIDRv4: () => ZodCIDRv4,
  ZodCIDRv6: () => ZodCIDRv6,
  ZodCUID: () => ZodCUID,
  ZodCUID2: () => ZodCUID2,
  ZodCatch: () => ZodCatch,
  ZodCustom: () => ZodCustom,
  ZodCustomStringFormat: () => ZodCustomStringFormat,
  ZodDate: () => ZodDate,
  ZodDefault: () => ZodDefault,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodE164: () => ZodE164,
  ZodEmail: () => ZodEmail,
  ZodEmoji: () => ZodEmoji,
  ZodEnum: () => ZodEnum,
  ZodError: () => ZodError,
  ZodFile: () => ZodFile,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodGUID: () => ZodGUID,
  ZodIPv4: () => ZodIPv4,
  ZodIPv6: () => ZodIPv6,
  ZodISODate: () => ZodISODate,
  ZodISODateTime: () => ZodISODateTime,
  ZodISODuration: () => ZodISODuration,
  ZodISOTime: () => ZodISOTime,
  ZodIntersection: () => ZodIntersection,
  ZodIssueCode: () => ZodIssueCode,
  ZodJWT: () => ZodJWT,
  ZodKSUID: () => ZodKSUID,
  ZodLazy: () => ZodLazy,
  ZodLiteral: () => ZodLiteral,
  ZodMap: () => ZodMap,
  ZodNaN: () => ZodNaN,
  ZodNanoID: () => ZodNanoID,
  ZodNever: () => ZodNever,
  ZodNonOptional: () => ZodNonOptional,
  ZodNull: () => ZodNull,
  ZodNullable: () => ZodNullable,
  ZodNumber: () => ZodNumber,
  ZodNumberFormat: () => ZodNumberFormat,
  ZodObject: () => ZodObject,
  ZodOptional: () => ZodOptional,
  ZodPipe: () => ZodPipe,
  ZodPrefault: () => ZodPrefault,
  ZodPromise: () => ZodPromise,
  ZodReadonly: () => ZodReadonly,
  ZodRealError: () => ZodRealError,
  ZodRecord: () => ZodRecord,
  ZodSet: () => ZodSet,
  ZodString: () => ZodString,
  ZodStringFormat: () => ZodStringFormat,
  ZodSuccess: () => ZodSuccess,
  ZodSymbol: () => ZodSymbol,
  ZodTemplateLiteral: () => ZodTemplateLiteral,
  ZodTransform: () => ZodTransform,
  ZodTuple: () => ZodTuple,
  ZodType: () => ZodType,
  ZodULID: () => ZodULID,
  ZodURL: () => ZodURL,
  ZodUUID: () => ZodUUID,
  ZodUndefined: () => ZodUndefined,
  ZodUnion: () => ZodUnion,
  ZodUnknown: () => ZodUnknown,
  ZodVoid: () => ZodVoid,
  ZodXID: () => ZodXID,
  _ZodString: () => _ZodString,
  _default: () => _default2,
  any: () => any,
  array: () => array,
  base64: () => base642,
  base64url: () => base64url2,
  bigint: () => bigint2,
  boolean: () => boolean2,
  catch: () => _catch2,
  check: () => check,
  cidrv4: () => cidrv42,
  cidrv6: () => cidrv62,
  clone: () => clone,
  coerce: () => coerce_exports,
  config: () => config,
  core: () => core_exports2,
  cuid: () => cuid3,
  cuid2: () => cuid22,
  custom: () => custom,
  date: () => date3,
  discriminatedUnion: () => discriminatedUnion,
  e164: () => e1642,
  email: () => email2,
  emoji: () => emoji2,
  endsWith: () => _endsWith,
  enum: () => _enum2,
  file: () => file,
  flattenError: () => flattenError,
  float32: () => float32,
  float64: () => float64,
  formatError: () => formatError,
  function: () => _function,
  getErrorMap: () => getErrorMap,
  globalRegistry: () => globalRegistry,
  gt: () => _gt,
  gte: () => _gte,
  guid: () => guid2,
  hostname: () => hostname2,
  includes: () => _includes,
  instanceof: () => _instanceof,
  int: () => int,
  int32: () => int32,
  int64: () => int64,
  intersection: () => intersection,
  ipv4: () => ipv42,
  ipv6: () => ipv62,
  iso: () => iso_exports,
  json: () => json,
  jwt: () => jwt,
  keyof: () => keyof,
  ksuid: () => ksuid2,
  lazy: () => lazy,
  length: () => _length,
  literal: () => literal,
  locales: () => locales_exports,
  looseObject: () => looseObject,
  lowercase: () => _lowercase,
  lt: () => _lt,
  lte: () => _lte,
  map: () => map,
  maxLength: () => _maxLength,
  maxSize: () => _maxSize,
  mime: () => _mime,
  minLength: () => _minLength,
  minSize: () => _minSize,
  multipleOf: () => _multipleOf,
  nan: () => nan,
  nanoid: () => nanoid2,
  nativeEnum: () => nativeEnum,
  negative: () => _negative,
  never: () => never,
  nonnegative: () => _nonnegative,
  nonoptional: () => nonoptional,
  nonpositive: () => _nonpositive,
  normalize: () => _normalize,
  null: () => _null3,
  nullable: () => nullable,
  nullish: () => nullish2,
  number: () => number2,
  object: () => object,
  optional: () => optional,
  overwrite: () => _overwrite,
  parse: () => parse2,
  parseAsync: () => parseAsync2,
  partialRecord: () => partialRecord,
  pipe: () => pipe,
  positive: () => _positive,
  prefault: () => prefault,
  preprocess: () => preprocess,
  prettifyError: () => prettifyError,
  promise: () => promise,
  property: () => _property,
  readonly: () => readonly,
  record: () => record,
  refine: () => refine,
  regex: () => _regex,
  regexes: () => regexes_exports,
  registry: () => registry,
  safeParse: () => safeParse2,
  safeParseAsync: () => safeParseAsync2,
  set: () => set,
  setErrorMap: () => setErrorMap,
  size: () => _size,
  startsWith: () => _startsWith,
  strictObject: () => strictObject,
  string: () => string2,
  stringFormat: () => stringFormat,
  stringbool: () => stringbool,
  success: () => success,
  superRefine: () => superRefine,
  symbol: () => symbol,
  templateLiteral: () => templateLiteral,
  toJSONSchema: () => toJSONSchema,
  toLowerCase: () => _toLowerCase,
  toUpperCase: () => _toUpperCase,
  transform: () => transform,
  treeifyError: () => treeifyError,
  trim: () => _trim,
  tuple: () => tuple,
  uint32: () => uint32,
  uint64: () => uint64,
  ulid: () => ulid2,
  undefined: () => _undefined3,
  union: () => union,
  unknown: () => unknown,
  uppercase: () => _uppercase,
  url: () => url,
  uuid: () => uuid2,
  uuidv4: () => uuidv4,
  uuidv6: () => uuidv6,
  uuidv7: () => uuidv7,
  void: () => _void2,
  xid: () => xid2
});
var init_external = __esm({
  "node_modules/zod/v4/classic/external.js"() {
    init_core2();
    init_schemas2();
    init_checks2();
    init_errors2();
    init_parse2();
    init_compat();
    init_core2();
    init_en();
    init_core2();
    init_locales();
    init_iso();
    init_iso();
    init_coerce();
    config(en_default());
  }
});

// node_modules/zod/index.js
var init_zod = __esm({
  "node_modules/zod/index.js"() {
    init_external();
    init_external();
  }
});

// src/utils/envValidator.ts
function validateEnvironment(env2 = process.env) {
  const result = {
    valid: true,
    errors: [],
    warnings: [],
    missing: [],
    security: []
  };
  const environment = env2.NODE_ENV || "development";
  const required2 = requiredByEnvironment[environment] || [];
  required2.forEach((key) => {
    if (!env2[key]) {
      result.missing.push(key);
      result.valid = false;
    }
  });
  try {
    envSchema.parse(env2);
  } catch (error44) {
    if (error44 instanceof external_exports.ZodError) {
      error44.issues.forEach((err) => {
        if (err.message.includes("Required")) {
          result.missing.push(err.path.join("."));
        } else {
          result.errors.push(`${err.path.join(".")}: ${err.message}`);
        }
        result.valid = false;
      });
    }
  }
  Object.entries(securityRules).forEach(([key, validator]) => {
    const value = env2[key];
    if (value) {
      try {
        validator(value);
      } catch (error44) {
        result.security.push(error44.message);
        if (environment === "production") {
          result.valid = false;
        }
      }
    }
  });
  if (environment === "production") {
    if (env2.VITE_DEBUG_MODE === "true") {
      result.warnings.push("Debug mode is enabled in production");
    }
    if (env2.VITE_SHOW_DEV_TOOLS === "true") {
      result.warnings.push("Dev tools are enabled in production");
    }
    if (env2.CSP_REPORT_ONLY === "true") {
      result.warnings.push("CSP is in report-only mode in production");
    }
    if (!env2.VITE_ENABLE_TWO_FACTOR || env2.VITE_ENABLE_TWO_FACTOR !== "true") {
      result.warnings.push("Two-factor authentication is not enabled in production");
    }
    if (!env2.DATABASE_SSL || env2.DATABASE_SSL !== "true") {
      result.warnings.push("Database SSL is not enabled in production");
    }
  }
  const publicVars = Object.keys(env2).filter((key) => key.startsWith("VITE_"));
  publicVars.forEach((key) => {
    const value = env2[key] || "";
    if (value.includes("secret") || value.includes("password") || value.includes("private")) {
      result.security.push(`${key} may contain sensitive data that will be exposed to the client`);
    }
  });
  return result;
}
function loadAndValidateEnv() {
  const result = validateEnvironment();
  if (!result.valid) {
    console.error("\u274C Environment validation failed:");
    if (result.missing.length > 0) {
      console.error("\n\u{1F4CB} Missing required variables:");
      result.missing.forEach((key) => console.error(`  - ${key}`));
    }
    if (result.errors.length > 0) {
      console.error("\n\u274C Validation errors:");
      result.errors.forEach((error44) => console.error(`  - ${error44}`));
    }
    if (result.security.length > 0) {
      console.error("\n\u{1F512} Security issues:");
      result.security.forEach((issue2) => console.error(`  - ${issue2}`));
    }
    if (true) {
      throw new Error("Environment validation failed in production");
    }
  }
  if (result.warnings.length > 0) {
    console.warn("\n\u26A0\uFE0F Environment warnings:");
    result.warnings.forEach((warning2) => console.warn(`  - ${warning2}`));
  }
  console.log("\u2705 Environment validation passed");
}
function getEnvironment() {
  return "production";
}
function isProduction() {
  return getEnvironment() === "production";
}
var envSchema, requiredByEnvironment, securityRules;
var init_envValidator = __esm({
  "src/utils/envValidator.ts"() {
    "use strict";
    init_zod();
    envSchema = external_exports.object({
      // Environment
      NODE_ENV: external_exports.enum(["development", "staging", "production"]),
      // Server Configuration
      VITE_API_BASE_URL: external_exports.string().url(),
      VITE_WEBSOCKET_URL: external_exports.string().regex(/^wss?:\/\/.+/),
      PORT: external_exports.string().regex(/^\d+$/).optional(),
      HOST: external_exports.string().optional(),
      // Auth0 Configuration
      VITE_AUTH0_DOMAIN: external_exports.string().min(1),
      VITE_AUTH0_CLIENT_ID: external_exports.string().min(1),
      VITE_AUTH0_CLIENT_SECRET: external_exports.string().min(1).optional(),
      // Optional for SPA
      VITE_AUTH0_CALLBACK_URL: external_exports.string().url(),
      VITE_AUTH0_AUDIENCE: external_exports.string().optional(),
      // Security - JWT & Session
      JWT_SECRET: external_exports.string().min(32).optional(),
      // Backend only
      JWT_ALGORITHM: external_exports.enum(["HS256", "HS384", "HS512", "RS256", "RS384", "RS512"]).optional(),
      JWT_EXPIRES_IN: external_exports.string().optional(),
      JWT_REFRESH_EXPIRES_IN: external_exports.string().optional(),
      SESSION_SECRET: external_exports.string().min(32).optional(),
      // Backend only
      SESSION_NAME: external_exports.string().optional(),
      SESSION_MAX_AGE: external_exports.string().regex(/^\d+$/).optional(),
      // Database Configuration (Backend)
      DATABASE_URL: external_exports.string().optional(),
      DATABASE_SSL: external_exports.enum(["true", "false"]).optional(),
      DATABASE_POOL_SIZE: external_exports.string().regex(/^\d+$/).optional(),
      // Redis Configuration (Backend)
      REDIS_URL: external_exports.string().optional(),
      REDIS_PASSWORD: external_exports.string().optional(),
      REDIS_DB: external_exports.string().regex(/^\d+$/).optional(),
      // Crisis Resources
      VITE_CRISIS_HOTLINE: external_exports.string().default("988"),
      VITE_CRISIS_TEXT_LINE: external_exports.string().default("741741"),
      // Feature Flags
      VITE_ENABLE_AI_CHAT: external_exports.enum(["true", "false"]).default("true"),
      VITE_ENABLE_VIDEO_CHAT: external_exports.enum(["true", "false"]).default("true"),
      VITE_ENABLE_PUSH_NOTIFICATIONS: external_exports.enum(["true", "false"]).default("true"),
      VITE_ENABLE_OFFLINE_MODE: external_exports.enum(["true", "false"]).default("true"),
      VITE_ENABLE_TWO_FACTOR: external_exports.enum(["true", "false"]).default("false"),
      VITE_ENABLE_DEVICE_FINGERPRINTING: external_exports.enum(["true", "false"]).default("false"),
      // Development Settings
      VITE_DEBUG_MODE: external_exports.enum(["true", "false"]).default("false"),
      VITE_SHOW_DEV_TOOLS: external_exports.enum(["true", "false"]).default("false"),
      // Push Notifications
      VITE_VAPID_PUBLIC_KEY: external_exports.string().optional(),
      VITE_VAPID_PRIVATE_KEY: external_exports.string().optional(),
      // Analytics
      VITE_SENTRY_DSN: external_exports.string().optional(),
      VITE_GA_TRACKING_ID: external_exports.string().optional(),
      // PWA Configuration
      VITE_PWA_NAME: external_exports.string().default("CoreV2 - Mental Health Support"),
      VITE_PWA_SHORT_NAME: external_exports.string().default("CoreV2"),
      VITE_PWA_THEME_COLOR: external_exports.string().regex(/^#[0-9A-Fa-f]{6}$/).default("#667eea"),
      VITE_PWA_BACKGROUND_COLOR: external_exports.string().regex(/^#[0-9A-Fa-f]{6}$/).default("#ffffff"),
      VITE_PWA_DISPLAY: external_exports.enum(["fullscreen", "standalone", "minimal-ui", "browser"]).default("standalone"),
      VITE_PWA_ORIENTATION: external_exports.enum(["any", "natural", "landscape", "portrait"]).default("portrait"),
      // Service Worker
      VITE_SW_UPDATE_INTERVAL: external_exports.string().regex(/^\d+$/).default("60000"),
      VITE_SW_CACHE_NAME: external_exports.string().default("corev2"),
      VITE_SW_ENABLE_BACKGROUND_SYNC: external_exports.enum(["true", "false"]).default("true"),
      VITE_SW_ENABLE_PUSH_SYNC: external_exports.enum(["true", "false"]).default("true"),
      // Security Settings
      CSP_REPORT_ONLY: external_exports.enum(["true", "false"]).optional(),
      CSP_REPORT_URI: external_exports.string().optional(),
      HSTS_ENABLED: external_exports.enum(["true", "false"]).optional(),
      HSTS_MAX_AGE: external_exports.string().regex(/^\d+$/).optional(),
      // Rate Limiting
      RATE_LIMIT_WINDOW_MS: external_exports.string().regex(/^\d+$/).optional(),
      RATE_LIMIT_MAX_REQUESTS: external_exports.string().regex(/^\d+$/).optional(),
      RATE_LIMIT_AUTH_MAX: external_exports.string().regex(/^\d+$/).optional(),
      RATE_LIMIT_CRISIS_MAX: external_exports.string().regex(/^\d+$/).optional(),
      // Logging
      LOG_LEVEL: external_exports.enum(["error", "warn", "info", "debug", "trace"]).optional(),
      LOG_FORMAT: external_exports.enum(["json", "dev", "combined", "common"]).optional(),
      LOG_ALL_REQUESTS: external_exports.enum(["true", "false"]).optional(),
      LOG_AUTH_EVENTS: external_exports.enum(["true", "false"]).optional(),
      LOG_DATA_ACCESS: external_exports.enum(["true", "false"]).optional(),
      LOG_SECURITY_EVENTS: external_exports.enum(["true", "false"]).optional(),
      // Email Configuration
      SMTP_HOST: external_exports.string().optional(),
      SMTP_PORT: external_exports.string().regex(/^\d+$/).optional(),
      SMTP_SECURE: external_exports.enum(["true", "false"]).optional(),
      SMTP_USER: external_exports.string().optional(),
      SMTP_PASS: external_exports.string().optional(),
      EMAIL_FROM: external_exports.string().email().optional(),
      // File Upload
      MAX_FILE_SIZE: external_exports.string().regex(/^\d+$/).optional(),
      ALLOWED_FILE_TYPES: external_exports.string().optional(),
      UPLOAD_PATH: external_exports.string().optional()
    });
    requiredByEnvironment = {
      development: [
        "NODE_ENV",
        "VITE_API_BASE_URL",
        "VITE_AUTH0_DOMAIN",
        "VITE_AUTH0_CLIENT_ID",
        "VITE_AUTH0_CALLBACK_URL"
      ],
      staging: [
        "NODE_ENV",
        "VITE_API_BASE_URL",
        "VITE_WEBSOCKET_URL",
        "VITE_AUTH0_DOMAIN",
        "VITE_AUTH0_CLIENT_ID",
        "VITE_AUTH0_CALLBACK_URL",
        "JWT_SECRET",
        "SESSION_SECRET",
        "DATABASE_URL"
      ],
      production: [
        "NODE_ENV",
        "VITE_API_BASE_URL",
        "VITE_WEBSOCKET_URL",
        "VITE_AUTH0_DOMAIN",
        "VITE_AUTH0_CLIENT_ID",
        "VITE_AUTH0_CLIENT_SECRET",
        "VITE_AUTH0_CALLBACK_URL",
        "VITE_AUTH0_AUDIENCE",
        "JWT_SECRET",
        "SESSION_SECRET",
        "DATABASE_URL",
        "REDIS_URL",
        "VITE_VAPID_PUBLIC_KEY",
        "VITE_VAPID_PRIVATE_KEY",
        "SMTP_HOST",
        "SMTP_USER",
        "SMTP_PASS",
        "EMAIL_FROM"
      ]
    };
    securityRules = {
      JWT_SECRET: (value) => {
        if (value && (value.includes("dev-") || value.includes("change-this") || value.length < 32)) {
          throw new Error("JWT_SECRET must be at least 32 characters and not contain default values");
        }
      },
      SESSION_SECRET: (value) => {
        if (value && (value.includes("dev-") || value.includes("change-this") || value.length < 32)) {
          throw new Error("SESSION_SECRET must be at least 32 characters and not contain default values");
        }
      },
      DATABASE_URL: (value) => {
        if (value && value.includes("password") && !value.includes("@")) {
          throw new Error("DATABASE_URL appears to be malformed");
        }
      },
      VITE_AUTH0_CLIENT_SECRET: (value) => {
        if (value && value.length < 32) {
          throw new Error("AUTH0_CLIENT_SECRET appears to be too short");
        }
      }
    };
  }
});

// src/utils/envConfig.ts
function getEnvVar(key, defaultValue = "") {
  if (typeof process !== "undefined" && process.env?.[key]) {
    return process.env[key];
  }
  if (typeof window !== "undefined") {
    const globalEnv = window.__VITE_ENV__ || {};
    if (globalEnv[key]) {
      return globalEnv[key];
    }
  }
  return defaultValue;
}
function isDev() {
  if (typeof process !== "undefined" && false) {
    return true;
  }
  if (typeof window !== "undefined") {
    return window.__VITE_ENV__?.DEV === true;
  }
  return false;
}
function isProd() {
  if (typeof process !== "undefined" && true) {
    return true;
  }
  if (typeof window !== "undefined") {
    return window.__VITE_ENV__?.PROD === true;
  }
  return false;
}
var ENV;
var init_envConfig = __esm({
  "src/utils/envConfig.ts"() {
    "use strict";
    if (typeof window !== "undefined" && !window.__VITE_ENV__) {
      try {
        window.__VITE_ENV__ = import.meta.env;
      } catch (e4) {
        window.__VITE_ENV__ = {};
      }
    }
    ENV = {
      // API Configuration
      API_BASE_URL: getEnvVar("VITE_API_BASE_URL", "http://localhost:3847/api"),
      // Auth0 Configuration
      AUTH0_DOMAIN: getEnvVar("VITE_AUTH0_DOMAIN", "dev-placeholder.auth0.com"),
      AUTH0_CLIENT_ID: getEnvVar("VITE_AUTH0_CLIENT_ID", "placeholder-client-id"),
      AUTH0_CALLBACK_URL: getEnvVar("VITE_AUTH0_CALLBACK_URL", typeof window !== "undefined" ? window.location.origin + "/callback" : ""),
      AUTH0_AUDIENCE: getEnvVar("VITE_AUTH0_AUDIENCE", "http://localhost:3847/api"),
      AUTH0_CLIENT_SECRET: getEnvVar("VITE_AUTH0_CLIENT_SECRET", "placeholder-secret"),
      // Push Notifications
      VAPID_PUBLIC_KEY: getEnvVar("VITE_VAPID_PUBLIC_KEY", isDev() ? "BPrE3_xJcGZo5xOiKh_1G5VhbGxqr4K7SLkJtNhE9f2sQcDvRwXfOhY3zP8mKnN1wRtYuCvBmNzLkDhElLLr-I" : ""),
      // WebSocket
      WS_URL: getEnvVar("VITE_WS_URL", isDev() ? "ws://localhost:3001" : "wss://api.astralcore.app"),
      // Sentry
      SENTRY_DSN: getEnvVar("VITE_SENTRY_DSN", ""),
      SENTRY_DEV_ENABLED: getEnvVar("VITE_SENTRY_DEV_ENABLED", "false") === "true",
      // App Info
      APP_VERSION: getEnvVar("VITE_APP_VERSION", "unknown"),
      ENV: getEnvVar("VITE_ENV", "production"),
      // Flags
      IS_DEV: isDev(),
      IS_PROD: isProd()
    };
  }
});

// src/services/auth0Service.ts
var auth0Config, TOKEN_STORAGE_KEY, REFRESH_TOKEN_KEY, USER_STORAGE_KEY, Auth0Service, auth0Service;
var init_auth0Service = __esm({
  "src/services/auth0Service.ts"() {
    "use strict";
    init_auth0_spa_js_production_esm();
    init_envValidator();
    init_envConfig();
    auth0Config = {
      domain: ENV.AUTH0_DOMAIN,
      clientId: ENV.AUTH0_CLIENT_ID,
      redirectUri: ENV.AUTH0_CALLBACK_URL,
      audience: ENV.AUTH0_AUDIENCE,
      scope: "openid profile email offline_access",
      useRefreshTokens: true,
      cacheLocation: "localstorage",
      ...isProduction() && {
        cacheLocation: "memory"
        // More secure in production
      }
    };
    TOKEN_STORAGE_KEY = "corev2_auth_token";
    REFRESH_TOKEN_KEY = "corev2_refresh_token";
    USER_STORAGE_KEY = "corev2_user";
    Auth0Service = class {
      auth0Client = null;
      currentUser = null;
      tokenRefreshTimer = null;
      isInitialized = false;
      /**
       * Initialize Auth0 client
       */
      async initialize() {
        if (this.isInitialized) return;
        try {
          this.auth0Client = new te(auth0Config);
          const isAuthenticated = await this.auth0Client.isAuthenticated();
          if (isAuthenticated) {
            await this.handleAuthentication();
          }
          this.isInitialized = true;
        } catch (error44) {
          console.error("Failed to initialize Auth0:", error44);
          throw new Error("Authentication service initialization failed");
        }
      }
      /**
       * Login with redirect
       */
      async login(options2) {
        if (!this.auth0Client) {
          throw new Error("Auth0 client not initialized");
        }
        await this.auth0Client.loginWithRedirect({
          ...options2,
          appState: {
            returnTo: window.location.pathname
          }
        });
      }
      /**
       * Login with popup
       */
      async loginWithPopup(options2) {
        if (!this.auth0Client) {
          throw new Error("Auth0 client not initialized");
        }
        try {
          await this.auth0Client.loginWithPopup(options2);
          await this.handleAuthentication();
        } catch (error44) {
          console.error("Popup login failed:", error44);
          throw error44;
        }
      }
      /**
       * Handle authentication callback
       */
      async handleCallback() {
        if (!this.auth0Client) {
          throw new Error("Auth0 client not initialized");
        }
        const result = await this.auth0Client.handleRedirectCallback();
        await this.handleAuthentication();
        const returnTo = result.appState?.returnTo || "/";
        window.history.replaceState({}, document.title, returnTo);
      }
      /**
       * Handle post-authentication tasks
       */
      async handleAuthentication() {
        if (!this.auth0Client) return;
        try {
          const user = await this.auth0Client.getUser();
          if (!user) return;
          const token = await this.auth0Client.getTokenSilently();
          this.currentUser = this.transformAuth0User(user);
          this.storeAuthData(token, this.currentUser);
          this.setupTokenRefresh();
          this.emitAuthEvent("authenticated", this.currentUser);
        } catch (error44) {
          console.error("Authentication handling failed:", error44);
          throw error44;
        }
      }
      /**
       * Transform Auth0 user to app user format
       */
      transformAuth0User(auth0User) {
        return {
          id: auth0User.sub,
          email: auth0User.email,
          name: auth0User.name || auth0User.nickname,
          picture: auth0User.picture,
          roles: this.extractUserRoles(auth0User),
          isEmailVerified: auth0User.email_verified,
          createdAt: auth0User.created_at,
          updatedAt: auth0User.updated_at
        };
      }
      /**
       * Extract user roles from Auth0 user
       */
      extractUserRoles(auth0User) {
        const namespace = "https://corev2.com/";
        const roles = auth0User[`${namespace}roles`] || auth0User.app_metadata?.roles || ["user" /* USER */];
        return Array.isArray(roles) ? roles : [roles];
      }
      /**
       * Store authentication data securely
       */
      storeAuthData(token, user) {
        if (isProduction()) {
          sessionStorage.setItem(TOKEN_STORAGE_KEY, token);
          sessionStorage.setItem(USER_STORAGE_KEY, JSON.stringify(user));
        } else {
          localStorage.setItem(TOKEN_STORAGE_KEY, token);
          localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(user));
        }
      }
      /**
       * Clear authentication data
       */
      clearAuthData() {
        localStorage.removeItem(TOKEN_STORAGE_KEY);
        localStorage.removeItem(REFRESH_TOKEN_KEY);
        localStorage.removeItem(USER_STORAGE_KEY);
        sessionStorage.removeItem(TOKEN_STORAGE_KEY);
        sessionStorage.removeItem(USER_STORAGE_KEY);
        if (this.tokenRefreshTimer) {
          clearInterval(this.tokenRefreshTimer);
          this.tokenRefreshTimer = null;
        }
      }
      /**
       * Setup automatic token refresh
       */
      setupTokenRefresh() {
        if (this.tokenRefreshTimer) {
          clearInterval(this.tokenRefreshTimer);
        }
        this.tokenRefreshTimer = setInterval(async () => {
          try {
            await this.refreshToken();
          } catch (error44) {
            console.error("Token refresh failed:", error44);
            await this.logout();
          }
        }, 10 * 60 * 1e3);
      }
      /**
       * Refresh access token
       */
      async refreshToken() {
        if (!this.auth0Client) {
          throw new Error("Auth0 client not initialized");
        }
        try {
          const token = await this.auth0Client.getTokenSilently();
          this.storeAuthData(token, this.currentUser);
          return token;
        } catch (error44) {
          console.error("Token refresh failed:", error44);
          throw error44;
        }
      }
      /**
       * Get current access token
       */
      async getAccessToken() {
        if (!this.auth0Client) {
          return null;
        }
        try {
          return await this.auth0Client.getTokenSilently();
        } catch (error44) {
          console.error("Failed to get access token:", error44);
          return null;
        }
      }
      /**
       * Get current user
       */
      async getCurrentUser() {
        if (this.currentUser) {
          return this.currentUser;
        }
        const storage = isProduction() ? sessionStorage : localStorage;
        const storedUser = storage.getItem(USER_STORAGE_KEY);
        if (storedUser) {
          this.currentUser = JSON.parse(storedUser);
          return this.currentUser;
        }
        if (this.auth0Client && await this.auth0Client.isAuthenticated()) {
          const auth0User = await this.auth0Client.getUser();
          if (auth0User) {
            this.currentUser = this.transformAuth0User(auth0User);
            return this.currentUser;
          }
        }
        return null;
      }
      /**
       * Check if user is authenticated
       */
      async isAuthenticated() {
        if (!this.auth0Client) {
          return false;
        }
        return await this.auth0Client.isAuthenticated();
      }
      /**
       * Check if user has specific role
       */
      async hasRole(role) {
        const user = await this.getCurrentUser();
        if (!user) return false;
        return user.roles?.includes(role) || false;
      }
      /**
       * Check if user has any of the specified roles
       */
      async hasAnyRole(roles) {
        const user = await this.getCurrentUser();
        if (!user?.roles) return false;
        return roles.some((role) => user.roles.includes(role));
      }
      /**
       * Check if user has all specified roles
       */
      async hasAllRoles(roles) {
        const user = await this.getCurrentUser();
        if (!user?.roles) return false;
        return roles.every((role) => user.roles.includes(role));
      }
      /**
       * Update user profile
       */
      async updateProfile(updates) {
        if (!this.auth0Client || !this.currentUser) {
          throw new Error("User not authenticated");
        }
        const token = await this.getAccessToken();
        if (!token) throw new Error("No access token");
        const response = await fetch(`https://${auth0Config.domain}/api/v2/users/${this.currentUser.id}`, {
          method: "PATCH",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            name: updates.name,
            picture: updates.picture
          })
        });
        if (!response.ok) {
          throw new Error("Failed to update profile");
        }
        this.currentUser = { ...this.currentUser, ...updates };
        this.storeAuthData(token, this.currentUser);
        this.emitAuthEvent("profileUpdated", this.currentUser);
      }
      /**
       * Logout
       */
      async logout(options2) {
        if (!this.auth0Client) {
          this.clearAuthData();
          return;
        }
        this.clearAuthData();
        this.currentUser = null;
        await this.auth0Client.logout({
          logoutParams: {
            returnTo: options2?.returnTo || window.location.origin
          }
        });
        this.emitAuthEvent("logout", null);
      }
      /**
       * Request password reset
       */
      async requestPasswordReset(email3) {
        const response = await fetch(`https://${auth0Config.domain}/dbconnections/change_password`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            client_id: auth0Config.clientId,
            email: email3,
            connection: "Username-Password-Authentication"
          })
        });
        if (!response.ok) {
          throw new Error("Failed to request password reset");
        }
      }
      /**
       * Enable two-factor authentication
       */
      async enableTwoFactor() {
        const token = await this.getAccessToken();
        if (!token) throw new Error("No access token");
        const response = await fetch(`https://${auth0Config.domain}/api/v2/users/${this.currentUser?.id}/multifactor/guardian`, {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            enabled: true
          })
        });
        if (!response.ok) {
          throw new Error("Failed to enable 2FA");
        }
      }
      /**
       * Emit authentication events
       */
      emitAuthEvent(type, data2) {
        window.dispatchEvent(new CustomEvent(`auth:${type}`, { detail: data2 }));
      }
      /**
       * Subscribe to authentication events
       */
      onAuthStateChange(callback) {
        const handleAuth = (event) => callback(event.detail);
        const handleLogout = () => callback(null);
        window.addEventListener("auth:authenticated", handleAuth);
        window.addEventListener("auth:profileUpdated", handleAuth);
        window.addEventListener("auth:logout", handleLogout);
        return () => {
          window.removeEventListener("auth:authenticated", handleAuth);
          window.removeEventListener("auth:profileUpdated", handleAuth);
          window.removeEventListener("auth:logout", handleLogout);
        };
      }
      /**
       * Get Auth0 management API token (admin only)
       */
      async getManagementToken() {
        if (!await this.hasRole("admin" /* ADMIN */)) {
          throw new Error("Admin access required");
        }
        const token = await this.getAccessToken();
        if (!token) return null;
        const response = await fetch(`https://${auth0Config.domain}/oauth/token`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            client_id: auth0Config.clientId,
            client_secret: ENV.AUTH0_CLIENT_SECRET,
            audience: `https://${auth0Config.domain}/api/v2/`,
            grant_type: "client_credentials"
          })
        });
        if (!response.ok) {
          throw new Error("Failed to get management token");
        }
        const data2 = await response.json();
        return data2.access_token;
      }
    };
    auth0Service = new Auth0Service();
  }
});

// src/services/apiService.ts
var ApiService, apiService, crisisApiService, apiService_default;
var init_apiService = __esm({
  "src/services/apiService.ts"() {
    "use strict";
    init_auth0Service();
    init_envConfig();
    ApiService = class {
      config;
      cache = /* @__PURE__ */ new Map();
      pendingRequests = /* @__PURE__ */ new Map();
      interceptors = {
        request: [],
        response: [],
        error: []
      };
      constructor(config2) {
        this.config = {
          timeout: 3e4,
          retries: 3,
          retryDelay: 1e3,
          cache: true,
          cacheTTL: 3e5,
          // 5 minutes
          ...config2
        };
        this.setupDefaultInterceptors();
      }
      /**
       * Setup default interceptors for auth and error handling
       */
      setupDefaultInterceptors() {
        this.addRequestInterceptor(async (config2) => {
          if (!config2.skipAuth) {
            const token = await auth0Service.getAccessToken();
            if (token) {
              config2.headers = {
                ...config2.headers,
                "Authorization": `Bearer ${token}`
              };
            }
          }
          return config2;
        });
        this.addErrorInterceptor(async (error44) => {
          if (error44.status === 401) {
            try {
              await auth0Service.refreshToken();
              return error44;
            } catch (refreshError) {
              await auth0Service.logout();
            }
          }
          return error44;
        });
      }
      /**
       * Add request interceptor
       */
      addRequestInterceptor(interceptor) {
        this.interceptors.request.push(interceptor);
      }
      /**
       * Add response interceptor
       */
      addResponseInterceptor(interceptor) {
        this.interceptors.response.push(interceptor);
      }
      /**
       * Add error interceptor
       */
      addErrorInterceptor(interceptor) {
        this.interceptors.error.push(interceptor);
      }
      /**
       * Make HTTP request with retry logic and caching
       */
      async request(url2, config2 = {}) {
        let finalConfig = { ...config2 };
        for (const interceptor of this.interceptors.request) {
          finalConfig = await interceptor(finalConfig);
        }
        const cacheKey = this.getCacheKey(url2, finalConfig);
        if (finalConfig.method === "GET" || !finalConfig.method) {
          const cached2 = this.getFromCache(cacheKey);
          if (cached2) {
            return { data: cached2, status: 200, headers: new Headers(), ok: true };
          }
          const pending = this.pendingRequests.get(cacheKey);
          if (pending) {
            return pending;
          }
        }
        const requestPromise = this.executeRequest(url2, finalConfig);
        if (finalConfig.method === "GET" || !finalConfig.method) {
          this.pendingRequests.set(cacheKey, requestPromise);
        }
        try {
          const response = await requestPromise;
          let finalResponse = response;
          for (const interceptor of this.interceptors.response) {
            finalResponse = await interceptor(finalResponse);
          }
          if ((finalConfig.method === "GET" || !finalConfig.method) && finalResponse.ok) {
            this.setCache(cacheKey, finalResponse.data, finalConfig.cacheTTL);
          }
          return finalResponse;
        } finally {
          this.pendingRequests.delete(cacheKey);
        }
      }
      /**
       * Execute HTTP request with retry logic
       */
      async executeRequest(url2, config2) {
        const fullUrl = this.buildUrl(url2, config2.params);
        const retries = config2.retries ?? this.config.retries ?? 3;
        const retryDelay = this.config.retryDelay ?? 1e3;
        let lastError = null;
        for (let attempt = 0; attempt <= retries; attempt++) {
          try {
            const controller = new AbortController();
            const timeout = config2.timeout ?? this.config.timeout ?? 3e4;
            const timeoutId = setTimeout(() => controller.abort(), timeout);
            const response = await fetch(fullUrl, {
              method: config2.method || "GET",
              headers: {
                "Content-Type": "application/json",
                ...config2.headers
              },
              body: config2.body ? JSON.stringify(config2.body) : void 0,
              signal: controller.signal
            });
            clearTimeout(timeoutId);
            let data2;
            const contentType = response.headers.get("content-type");
            if (contentType && contentType.includes("application/json")) {
              data2 = await response.json();
            } else {
              data2 = await response.text();
            }
            if (!response.ok) {
              const error44 = {
                message: `HTTP ${response.status}: ${response.statusText}`,
                status: response.status,
                details: data2
              };
              let finalError = error44;
              for (const interceptor of this.interceptors.error) {
                finalError = await interceptor(finalError);
              }
              if (response.status >= 500 && attempt < retries) {
                lastError = finalError;
                await this.delay(retryDelay * Math.pow(2, attempt));
                continue;
              }
              throw finalError;
            }
            return {
              data: data2,
              status: response.status,
              headers: response.headers,
              ok: response.ok
            };
          } catch (error44) {
            if (error44.name === "AbortError") {
              lastError = {
                message: "Request timeout",
                code: "TIMEOUT"
              };
            } else if (error44 instanceof TypeError && error44.message === "Failed to fetch") {
              lastError = {
                message: "Network error",
                code: "NETWORK_ERROR"
              };
            } else {
              lastError = error44;
            }
            if (attempt < retries) {
              await this.delay(retryDelay * Math.pow(2, attempt));
              continue;
            }
            let finalError = lastError;
            if (finalError) {
              for (const interceptor of this.interceptors.error) {
                finalError = await interceptor(finalError);
              }
              throw finalError;
            } else {
              throw new Error("Request failed");
            }
          }
        }
        throw lastError || new Error("Request failed after retries");
      }
      /**
       * Build full URL with query parameters
       */
      buildUrl(path2, params) {
        const url2 = path2.startsWith("http") ? path2 : `${this.config.baseURL}${path2}`;
        if (!params || Object.keys(params).length === 0) {
          return url2;
        }
        const queryString = Object.entries(params).filter(([_3, value]) => value !== void 0 && value !== null).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`).join("&");
        return `${url2}${url2.includes("?") ? "&" : "?"}${queryString}`;
      }
      /**
       * Generate cache key
       */
      getCacheKey(url2, config2) {
        return `${config2.method || "GET"}:${url2}:${JSON.stringify(config2.params || {})}`;
      }
      /**
       * Get data from cache
       */
      getFromCache(key) {
        if (!this.config.cache) return null;
        const cached2 = this.cache.get(key);
        if (!cached2) return null;
        const ttl = this.config.cacheTTL ?? 3e5;
        if (Date.now() - cached2.timestamp > ttl) {
          this.cache.delete(key);
          return null;
        }
        return cached2.data;
      }
      /**
       * Set data in cache
       */
      setCache(key, data2, ttl) {
        if (!this.config.cache) return;
        this.cache.set(key, {
          data: data2,
          timestamp: Date.now()
        });
        if (this.cache.size > 100) {
          const entries = Array.from(this.cache.entries());
          const now = Date.now();
          const effectiveTTL = ttl ?? this.config.cacheTTL ?? 3e5;
          entries.forEach(([key2, value]) => {
            if (now - value.timestamp > effectiveTTL) {
              this.cache.delete(key2);
            }
          });
        }
      }
      /**
       * Clear cache
       */
      clearCache(pattern) {
        if (pattern) {
          const keys2 = Array.from(this.cache.keys());
          keys2.forEach((key) => {
            if (key.includes(pattern)) {
              this.cache.delete(key);
            }
          });
        } else {
          this.cache.clear();
        }
      }
      /**
       * Delay helper for retry logic
       */
      delay(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }
      // Convenience methods
      async get(url2, params, config2) {
        const response = await this.request(url2, { ...config2, method: "GET", params });
        return response.data;
      }
      async post(url2, body, config2) {
        const response = await this.request(url2, { ...config2, method: "POST", body });
        return response.data;
      }
      async put(url2, body, config2) {
        const response = await this.request(url2, { ...config2, method: "PUT", body });
        return response.data;
      }
      async patch(url2, body, config2) {
        const response = await this.request(url2, { ...config2, method: "PATCH", body });
        return response.data;
      }
      async delete(url2, config2) {
        const response = await this.request(url2, { ...config2, method: "DELETE" });
        return response.data;
      }
    };
    apiService = new ApiService({
      baseURL: ENV.API_BASE_URL,
      timeout: 3e4,
      retries: 3,
      cache: true,
      cacheTTL: 5 * 60 * 1e3
      // 5 minutes
    });
    crisisApiService = new ApiService({
      baseURL: ENV.API_BASE_URL,
      timeout: 6e4,
      // Longer timeout for crisis
      retries: 5,
      // More retries for crisis
      cache: true,
      cacheTTL: 60 * 60 * 1e3
      // 1 hour cache for crisis resources
    });
    apiService_default = apiService;
  }
});

// src/services/notificationService.ts
var NotificationService, notificationService, notificationService_default;
var init_notificationService = __esm({
  "src/services/notificationService.ts"() {
    "use strict";
    init_envConfig();
    init_apiService();
    NotificationService = class {
      serviceWorkerRegistration = null;
      notificationQueue = [];
      scheduledNotifications = /* @__PURE__ */ new Map();
      preferences = {
        enabled: true,
        sound: true,
        vibration: true,
        crisisAlerts: true,
        messages: true,
        reminders: true,
        achievements: true,
        systemUpdates: false,
        quietHours: {
          enabled: false,
          start: "22:00",
          end: "08:00"
        },
        frequency: "all"
      };
      isOnline = navigator.onLine;
      vapidPublicKey = ENV.VAPID_PUBLIC_KEY || "";
      _addToast = null;
      constructor() {
        this.init();
        this.setupEventListeners();
        this.loadPreferences();
      }
      /**
       * Initialize the notification service
       */
      async init() {
        if (!("Notification" in window)) {
          console.warn("This browser does not support notifications");
          return;
        }
        if (!("serviceWorker" in navigator)) {
          console.warn("Service workers are not supported");
          return;
        }
        try {
          this.serviceWorkerRegistration = await navigator.serviceWorker.ready;
          console.log("Notification service initialized");
        } catch (error44) {
          console.error("Failed to initialize notification service:", error44);
        }
      }
      /**
       * Setup event listeners
       */
      setupEventListeners() {
        window.addEventListener("online", () => {
          this.isOnline = true;
          this.flushNotificationQueue();
        });
        window.addEventListener("offline", () => {
          this.isOnline = false;
        });
        if ("serviceWorker" in navigator) {
          navigator.serviceWorker.addEventListener("message", (event) => {
            if (event.data.type === "notification-click") {
              this.handleNotificationClick(event.data);
            }
          });
        }
        document.addEventListener("visibilitychange", () => {
          if (!document.hidden) {
            this.checkMissedNotifications();
          }
        });
      }
      /**
       * Load notification preferences from localStorage
       */
      loadPreferences() {
        const stored = localStorage.getItem("notification_preferences");
        if (stored) {
          this.preferences = { ...this.preferences, ...JSON.parse(stored) };
        }
      }
      /**
       * Save notification preferences
       */
      savePreferences() {
        localStorage.setItem("notification_preferences", JSON.stringify(this.preferences));
      }
      /**
       * Request notification permission
       */
      async requestPermission() {
        if (!("Notification" in window)) {
          return "denied";
        }
        if (Notification.permission === "granted") {
          return "granted";
        }
        const permission = await Notification.requestPermission();
        if (permission === "granted") {
          await this.subscribeToPushNotifications();
        }
        return permission;
      }
      /**
       * Subscribe to push notifications
       */
      async subscribeToPushNotifications() {
        if (!this.serviceWorkerRegistration || !this.vapidPublicKey) {
          return;
        }
        try {
          const convertedVapidKey = this.urlBase64ToUint8Array(this.vapidPublicKey);
          const subscription = await this.serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: convertedVapidKey
          });
          await apiService_default.post("/notifications/subscribe", {
            subscription: subscription.toJSON(),
            preferences: this.preferences
          });
          console.log("Successfully subscribed to push notifications");
        } catch (error44) {
          console.error("Failed to subscribe to push notifications:", error44);
        }
      }
      /**
       * Convert VAPID key from base64 to Uint8Array
       */
      urlBase64ToUint8Array(base64String) {
        const padding = "=".repeat((4 - base64String.length % 4) % 4);
        const base643 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
        const rawData = window.atob(base643);
        const outputArray = new Uint8Array(rawData.length);
        for (let i3 = 0; i3 < rawData.length; ++i3) {
          outputArray[i3] = rawData.charCodeAt(i3);
        }
        return outputArray.buffer;
      }
      /**
       * Show a notification
       */
      async show(options2) {
        if (!this.preferences.enabled) {
          return;
        }
        if (Notification.permission !== "granted") {
          const permission = await this.requestPermission();
          if (permission !== "granted") {
            return;
          }
        }
        if (this.isInQuietHours() && options2.urgency !== "crisis") {
          this.queueNotification(options2);
          return;
        }
        if (!this.shouldShowNotification(options2)) {
          return;
        }
        if (!options2.icon) {
          options2.icon = "/icon-192.png";
        }
        if (options2.urgency === "crisis" && this.preferences.vibration) {
          options2.vibrate = [200, 100, 200, 100, 200];
          options2.requireInteraction = true;
        }
        try {
          if (this.serviceWorkerRegistration) {
            await this.serviceWorkerRegistration.showNotification(options2.title, {
              body: options2.body,
              icon: options2.icon,
              badge: options2.badge,
              tag: options2.tag || `notification-${Date.now()}`,
              data: options2.data,
              requireInteraction: options2.requireInteraction,
              silent: options2.silent || !this.preferences.sound
              // vibrate: this.preferences.vibration ? options.vibrate : undefined,
              // actions: options.actions
            });
          } else {
            new Notification(options2.title, {
              body: options2.body,
              icon: options2.icon,
              badge: options2.badge,
              tag: options2.tag,
              data: options2.data,
              requireInteraction: options2.requireInteraction,
              silent: options2.silent || !this.preferences.sound
              // vibrate: this.preferences.vibration ? options.vibrate : undefined
            });
          }
          this.trackNotification("shown", options2);
        } catch (error44) {
          console.error("Failed to show notification:", error44);
          if (!this.isOnline) {
            this.queueNotification(options2);
          }
        }
      }
      /**
       * Check if in quiet hours
       */
      isInQuietHours() {
        if (!this.preferences.quietHours.enabled) {
          return false;
        }
        const now = /* @__PURE__ */ new Date();
        const currentTime = now.getHours() * 60 + now.getMinutes();
        const [startHour, startMin] = this.preferences.quietHours.start.split(":").map(Number);
        const [endHour, endMin] = this.preferences.quietHours.end.split(":").map(Number);
        const startTime = startHour * 60 + startMin;
        const endTime = endHour * 60 + endMin;
        if (startTime <= endTime) {
          return currentTime >= startTime && currentTime < endTime;
        } else {
          return currentTime >= startTime || currentTime < endTime;
        }
      }
      /**
       * Check if notification should be shown based on preferences
       */
      shouldShowNotification(options2) {
        const { frequency } = this.preferences;
        if (frequency === "crisis-only" && options2.urgency !== "crisis") {
          return false;
        }
        if (frequency === "important" && options2.urgency === "low") {
          return false;
        }
        switch (options2.category) {
          case "crisis":
            return this.preferences.crisisAlerts;
          case "message":
            return this.preferences.messages;
          case "reminder":
            return this.preferences.reminders;
          case "achievement":
            return this.preferences.achievements;
          case "system":
            return this.preferences.systemUpdates;
          default:
            return true;
        }
      }
      /**
       * Queue notification for later
       */
      queueNotification(options2) {
        this.notificationQueue.push(options2);
        localStorage.setItem("notification_queue", JSON.stringify(this.notificationQueue));
      }
      /**
       * Flush notification queue
       */
      async flushNotificationQueue() {
        const stored = localStorage.getItem("notification_queue");
        if (stored) {
          this.notificationQueue = JSON.parse(stored);
        }
        for (const notification of this.notificationQueue) {
          await this.show(notification);
        }
        this.notificationQueue = [];
        localStorage.removeItem("notification_queue");
      }
      /**
       * Schedule a notification
       */
      scheduleNotification(notification, scheduledTime, recurring) {
        const id = `scheduled-${Date.now()}-${Math.random()}`;
        const schedule = () => {
          const now = /* @__PURE__ */ new Date();
          const delay = scheduledTime.getTime() - now.getTime();
          if (delay <= 0) {
            this.show(notification);
            if (recurring) {
              this.scheduleNextOccurrence(id, notification, scheduledTime, recurring);
            }
          } else {
            const timeout = setTimeout(() => {
              this.show(notification);
              if (recurring) {
                this.scheduleNextOccurrence(id, notification, scheduledTime, recurring);
              } else {
                this.scheduledNotifications.delete(id);
              }
            }, delay);
            this.scheduledNotifications.set(id, timeout);
          }
        };
        schedule();
        this.storeScheduledNotification({ id, notification, scheduledTime, recurring });
        return id;
      }
      /**
       * Schedule next occurrence of recurring notification
       */
      scheduleNextOccurrence(_id, notification, lastTime, recurring) {
        let nextTime = new Date(lastTime);
        if (!recurring) {
          return;
        }
        switch (recurring.type) {
          case "daily":
            nextTime.setDate(nextTime.getDate() + 1);
            break;
          case "weekly":
            if (recurring.daysOfWeek && recurring.daysOfWeek.length > 0) {
              let daysToAdd = 1;
              const currentDay = nextTime.getDay();
              for (let i3 = 1; i3 <= 7; i3++) {
                const checkDay = (currentDay + i3) % 7;
                if (recurring.daysOfWeek.includes(checkDay)) {
                  daysToAdd = i3;
                  break;
                }
              }
              nextTime.setDate(nextTime.getDate() + daysToAdd);
            } else {
              nextTime.setDate(nextTime.getDate() + 7);
            }
            break;
          case "monthly":
            if (recurring.dayOfMonth) {
              nextTime.setMonth(nextTime.getMonth() + 1);
              nextTime.setDate(recurring.dayOfMonth);
            } else {
              nextTime.setMonth(nextTime.getMonth() + 1);
            }
            break;
        }
        this.scheduleNotification(notification, nextTime, recurring);
      }
      /**
       * Cancel scheduled notification
       */
      cancelScheduledNotification(id) {
        const timeout = this.scheduledNotifications.get(id);
        if (timeout) {
          clearTimeout(timeout);
          this.scheduledNotifications.delete(id);
        }
        this.removeScheduledNotification(id);
      }
      /**
       * Store scheduled notification
       */
      storeScheduledNotification(scheduled) {
        const stored = localStorage.getItem("scheduled_notifications");
        const notifications = stored ? JSON.parse(stored) : [];
        notifications.push(scheduled);
        localStorage.setItem("scheduled_notifications", JSON.stringify(notifications));
      }
      /**
       * Remove scheduled notification from storage
       */
      removeScheduledNotification(id) {
        const stored = localStorage.getItem("scheduled_notifications");
        if (stored) {
          const notifications = JSON.parse(stored);
          const filtered = notifications.filter((n3) => n3.id !== id);
          localStorage.setItem("scheduled_notifications", JSON.stringify(filtered));
        }
      }
      /**
       * Load and reschedule stored notifications
       */
      loadScheduledNotifications() {
        const stored = localStorage.getItem("scheduled_notifications");
        if (stored) {
          const notifications = JSON.parse(stored);
          for (const scheduled of notifications) {
            this.scheduleNotification(
              scheduled.notification,
              new Date(scheduled.scheduledTime),
              scheduled.recurring
            );
          }
        }
      }
      /**
       * Handle notification click
       */
      handleNotificationClick(data2) {
        this.trackNotification("clicked", data2);
        if (data2.action) {
          switch (data2.action) {
            case "view":
              if (data2.url) {
                window.location.href = data2.url;
              }
              break;
            case "dismiss":
              break;
            case "snooze":
              const snoozeTime = new Date(Date.now() + 10 * 60 * 1e3);
              this.scheduleNotification(data2.notification, snoozeTime);
              break;
            default:
              window.dispatchEvent(new CustomEvent("notification-action", { detail: data2 }));
          }
        } else if (data2.url) {
          window.location.href = data2.url;
        }
      }
      /**
       * Check for missed notifications
       */
      async checkMissedNotifications() {
        try {
          const missed = await apiService_default.get("/notifications/missed");
          for (const notification of missed) {
            await this.show(notification);
          }
        } catch (error44) {
          console.error("Failed to check missed notifications:", error44);
        }
      }
      /**
       * Track notification events
       */
      trackNotification(event, options2) {
        apiService_default.post("/notifications/track", {
          event,
          category: options2.category,
          urgency: options2.urgency,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        }).catch(console.error);
      }
      /**
       * Update notification preferences
       */
      updatePreferences(preferences) {
        this.preferences = { ...this.preferences, ...preferences };
        this.savePreferences();
        apiService_default.post("/notifications/preferences", this.preferences).catch(console.error);
      }
      /**
       * Get notification preferences
       */
      getPreferences() {
        return { ...this.preferences };
      }
      /**
       * Show crisis notification
       */
      async showCrisisNotification(title, body, data2) {
        await this.show({
          title,
          body,
          urgency: "crisis",
          category: "crisis",
          requireInteraction: true,
          actions: [
            { action: "view", title: "Get Help Now" },
            { action: "dismiss", title: "Dismiss" }
          ],
          data: {
            ...data2,
            url: "/crisis-support"
          }
        });
      }
      /**
       * Show message notification
       */
      async showMessageNotification(from, message, conversationId) {
        await this.show({
          title: `New message from ${from}`,
          body: message,
          category: "message",
          urgency: "normal",
          tag: `message-${conversationId}`,
          actions: [
            { action: "view", title: "Reply" },
            { action: "dismiss", title: "Later" }
          ],
          data: {
            url: `/chat/${conversationId}`
          }
        });
      }
      /**
       * Show reminder notification
       */
      async showReminderNotification(title, body, reminderId) {
        await this.show({
          title,
          body,
          category: "reminder",
          urgency: "normal",
          tag: `reminder-${reminderId}`,
          actions: [
            { action: "view", title: "Open" },
            { action: "snooze", title: "Snooze" },
            { action: "dismiss", title: "Dismiss" }
          ]
        });
      }
      /**
       * Show achievement notification
       */
      async showAchievementNotification(achievement, description) {
        await this.show({
          title: `Achievement Unlocked: ${achievement}`,
          body: description,
          category: "achievement",
          urgency: "low",
          icon: "/achievements-icon.png"
        });
      }
      /**
       * Clear all notifications
       */
      async clearAll() {
        if (this.serviceWorkerRegistration) {
          const notifications = await this.serviceWorkerRegistration.getNotifications();
          notifications.forEach((n3) => n3.close());
        }
      }
      /**
       * Clear notifications by tag
       */
      async clearByTag(tag) {
        if (this.serviceWorkerRegistration) {
          const notifications = await this.serviceWorkerRegistration.getNotifications({ tag });
          notifications.forEach((n3) => n3.close());
        }
      }
      /**
       * Check if notifications are supported
       */
      isSupported() {
        return "Notification" in window && "serviceWorker" in navigator;
      }
      /**
       * Get permission status
       */
      getPermissionStatus() {
        return Notification.permission;
      }
      /**
       * Test notification
       */
      async testNotification() {
        await this.show({
          title: "Test Notification",
          body: "This is a test notification from Astral Core",
          category: "system",
          urgency: "low"
        });
      }
      // Legacy toast support
      setToastFunction(addToastFn) {
        this._addToast = addToastFn;
      }
      addToast(message, type = "success") {
        if (this._addToast) {
          this._addToast(message, type);
        } else {
          console.warn("Toast function not set, falling back to alert");
          alert(message);
        }
      }
    };
    notificationService = new NotificationService();
    if (typeof window !== "undefined") {
      window.addEventListener("load", () => {
        notificationService.loadScheduledNotifications();
      });
    }
    notificationService_default = notificationService;
  }
});

// src/components/LoadingSpinner.tsx
var import_jsx_runtime4, LoadingSpinner, LoadingSpinner_default;
var init_LoadingSpinner = __esm({
  "src/components/LoadingSpinner.tsx"() {
    "use strict";
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    LoadingSpinner = ({
      size = "medium",
      message,
      className = ""
    }) => {
      const sizeClasses = {
        small: "w-4 h-4",
        medium: "w-8 h-8",
        large: "w-12 h-12"
      };
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("output", { className: `loading-spinner-container ${className}`, "aria-live": "polite", children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "div",
          {
            className: `loading-spinner ${sizeClasses[size]}`,
            "aria-hidden": "true",
            children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "loading-spinner-inner" })
          }
        ),
        message && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("p", { className: "loading-message", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "sr-only", children: "Loading: " }),
          message,
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "loading-dots", "aria-hidden": "true" })
        ] })
      ] });
    };
    LoadingSpinner_default = LoadingSpinner;
  }
});

// src/components/icon-paths/book.ts
var book_exports = {};
__export(book_exports, {
  default: () => book_default
});
var book_default;
var init_book = __esm({
  "src/components/icon-paths/book.ts"() {
    "use strict";
    book_default = "M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z";
  }
});

// src/components/icon-paths/bookmark.ts
var bookmark_exports = {};
__export(bookmark_exports, {
  default: () => bookmark_default
});
var bookmark_default;
var init_bookmark = __esm({
  "src/components/icon-paths/bookmark.ts"() {
    "use strict";
    bookmark_default = "M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z";
  }
});

// src/components/icon-paths/clipboard-check.ts
var clipboard_check_exports = {};
__export(clipboard_check_exports, {
  default: () => clipboard_check_default
});
var clipboard_check_default;
var init_clipboard_check = __esm({
  "src/components/icon-paths/clipboard-check.ts"() {
    "use strict";
    clipboard_check_default = "M19,3H14.82C14.4,1.84 13.3,1 12,1S9.6,1.84 9.18,3H5C3.9,3 3,3.9 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.9 20.1,3 19,3M12,3C12.55,3 13,3.45 13,4C13,4.55 12.55,5 12,5C11.45,5 11,4.55 11,4C11,3.45 11.45,3 12,3M10.41,16.59L6,12.17L7.41,10.76L10.41,13.76L16.59,7.58L18,9L10.41,16.59Z";
  }
});

// src/components/icon-paths/copy.ts
var copy_exports = {};
__export(copy_exports, {
  default: () => copy_default
});
var copy_default;
var init_copy = __esm({
  "src/components/icon-paths/copy.ts"() {
    "use strict";
    copy_default = "M16,1H4C2.9,1 2,1.9 2,3V17H4V3H16V1M19,5H8C6.9,5 6,5.9 6,7V21C6,22.1 6.9,23 8,23H19C20.1,23 21,22.1 21,21V7C21,5.9 20.1,5 19,5M19,21H8V7H19V21Z";
  }
});

// src/components/icon-paths/dashboard.ts
var dashboard_exports = {};
__export(dashboard_exports, {
  default: () => dashboard_default
});
var dashboard_default;
var init_dashboard = __esm({
  "src/components/icon-paths/dashboard.ts"() {
    "use strict";
    dashboard_default = "M13 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V9l-6-6zM5 19V5h7v5h5v9H5z";
  }
});

// src/components/icon-paths/feed.ts
var feed_exports = {};
__export(feed_exports, {
  default: () => feed_default
});
var feed_default;
var init_feed = __esm({
  "src/components/icon-paths/feed.ts"() {
    "use strict";
    feed_default = "M3 18h12v-2H3v2zm0-5h18v-2H3v2zm0-5h18V6H3v2z";
  }
});

// src/components/icon-paths/google.ts
var google_exports = {};
__export(google_exports, {
  default: () => google_default
});
var google_default;
var init_google = __esm({
  "src/components/icon-paths/google.ts"() {
    "use strict";
    google_default = "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z";
  }
});

// src/components/icon-paths/apple.ts
var apple_exports = {};
__export(apple_exports, {
  default: () => apple_default
});
var apple_default;
var init_apple = __esm({
  "src/components/icon-paths/apple.ts"() {
    "use strict";
    apple_default = "M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z";
  }
});

// src/components/icons.dynamic.tsx
var import_react9, import_jsx_runtime6, Icon, createIcon, createLazyIcon, HeartIcon2, CloseIcon, BackIcon, SendIcon, CheckIcon, AlertIcon, PhoneIcon2, Clock, ClockIcon, X2, XCircleIcon, CheckCircleIcon, AlertCircleIcon2, ActivityIcon, LinkIcon, Phone, MessageCircle, ExternalLink, AlertTriangle, LogoutIcon, CertifiedIcon, PostsIcon, GuidelinesIcon, LegalIcon, HelperIcon, MyPostsIcon, QuietSpaceIcon, LockIcon, SearchIcon, BellIcon, ThumbsUpIcon, KudosIcon, AchievementsIcon, MessageCircleIcon, StarIcon, PlayIcon, PauseIcon, MicOnIcon, MicOffIcon, VideoOnIcon, VideoOffIcon, HangUpIcon, VolumeIcon, CommentIcon, PlusIcon, MusicIcon, MenuIcon, UsersIcon, SettingsIcon, ChatIcon, VideoIcon, ShareIcon, AICompanionIcon, SparkleIcon, WellnessIcon, CrisisIcon, SafetyPlanIcon, ShieldIcon, TrendingUpIcon, RefreshIcon2, DownloadIcon, UploadIcon, SunIcon, TagIcon, UserIcon, HomeIcon2, BookIcon, BookmarkIcon, ClipboardCheckIcon, CopyIcon, DashboardIcon, FeedIcon, GoogleIcon, AppleIcon;
var init_icons_dynamic = __esm({
  "src/components/icons.dynamic.tsx"() {
    "use strict";
    import_react9 = __toESM(require_react());
    import_jsx_runtime6 = __toESM(require_jsx_runtime());
    Icon = (0, import_react9.memo)(({ path: path2, className, size = 24, style }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      "svg",
      {
        className,
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        style,
        "aria-hidden": "true",
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("path", { d: path2 })
      }
    ));
    Icon.displayName = "Icon";
    createIcon = (path2, displayName) => {
      const IconComponent = (0, import_react9.memo)((props) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Icon, { path: path2, ...props }));
      IconComponent.displayName = displayName;
      return IconComponent;
    };
    createLazyIcon = (importFn, displayName) => {
      const LazyIcon = (0, import_react9.lazy)(async () => {
        const { default: path2 } = await importFn();
        return { default: (props) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Icon, { path: path2, ...props }) };
      });
      const WrappedIcon = (0, import_react9.memo)((props) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_react9.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { style: { width: props.size || 24, height: props.size || 24 } }), children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(LazyIcon, { ...props }) }));
      WrappedIcon.displayName = displayName;
      return WrappedIcon;
    };
    HeartIcon2 = createIcon("M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z", "HeartIcon");
    CloseIcon = createIcon("M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z", "CloseIcon");
    BackIcon = createIcon("M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z", "BackIcon");
    SendIcon = createIcon("M24 2l-4 14.5-7.5-3.5L8 20l-6-8 14.5-4L24 2z", "SendIcon");
    CheckIcon = createIcon("M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z", "CheckIcon");
    AlertIcon = createIcon("M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z", "AlertIcon");
    PhoneIcon2 = createIcon("M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z", "PhoneIcon");
    Clock = createIcon("M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M16.2,16.2L11,13V7H12.5V12.2L17,14.7L16.2,16.2Z", "Clock");
    ClockIcon = Clock;
    X2 = createIcon("M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z", "X");
    XCircleIcon = createIcon("M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z", "XCircleIcon");
    CheckCircleIcon = createIcon("M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z", "CheckCircleIcon");
    AlertCircleIcon2 = createIcon("M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z", "AlertCircleIcon");
    ActivityIcon = createIcon("M22 12h-4l-3 9L9 3l-3 9H2", "ActivityIcon");
    LinkIcon = createIcon("M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71", "LinkIcon");
    Phone = createIcon("M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z", "Phone");
    MessageCircle = createIcon("M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z", "MessageCircle");
    ExternalLink = createIcon("M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6m4-3h6v6m-11 5L18 3", "ExternalLink");
    AlertTriangle = createIcon("M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z", "AlertTriangle");
    LogoutIcon = createIcon("M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5z", "LogoutIcon");
    CertifiedIcon = createIcon("M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z", "CertifiedIcon");
    PostsIcon = createIcon("M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z", "PostsIcon");
    GuidelinesIcon = createIcon("M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z", "GuidelinesIcon");
    LegalIcon = createIcon("M12 3l1.09 3.26L16 9l-2.91 2.74L14.18 15 12 13.27 9.82 15l1.09-3.26L8 9l2.91-2.74L12 3z", "LegalIcon");
    HelperIcon = createIcon("M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z", "HelperIcon");
    MyPostsIcon = createIcon("M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z", "MyPostsIcon");
    QuietSpaceIcon = createIcon("M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z", "QuietSpaceIcon");
    LockIcon = createIcon("M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z", "LockIcon");
    SearchIcon = createIcon("M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z", "SearchIcon");
    BellIcon = createIcon("M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z", "BellIcon");
    ThumbsUpIcon = createIcon("M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z", "ThumbsUpIcon");
    KudosIcon = createIcon("M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z", "KudosIcon");
    AchievementsIcon = createIcon("M5 16L3 5l5.5 4L12 4l3.5 5L21 5l-2 11H5zm2.7-2h8.6l.9-5.4-2.1 1.7L12 8l-3.1 2.3-2.1-1.7L7.7 14z", "AchievementsIcon");
    MessageCircleIcon = createIcon("M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z", "MessageCircleIcon");
    StarIcon = createIcon("M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z", "StarIcon");
    PlayIcon = createIcon("M8 5v14l11-7z", "PlayIcon");
    PauseIcon = createIcon("M6 19h4V5H6v14zm8-14v14h4V5h-4z", "PauseIcon");
    MicOnIcon = createIcon("M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z", "MicOnIcon");
    MicOffIcon = createIcon("M19 11h-1.7c0 .74-.16 1.43-.43 2.05l1.23 1.23c.56-.98.9-2.09.9-3.28zm-4.02.17c0-.06.02-.11.02-.17V5c0-1.66-1.34-3-3-3S9 3.34 9 5v.18l5.98 5.99zM4.27 3L3 4.27l6.01 6.01V11c0 1.66 1.33 3 2.99 3 .22 0 .44-.03.65-.08l1.66 1.66c-.71.33-1.5.52-2.31.52-2.76 0-5.3-2.1-5.3-5.1H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c.91-.13 1.77-.45 2.54-.9L19.73 21 21 19.73 4.27 3z", "MicOffIcon");
    VideoOnIcon = createIcon("M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z", "VideoOnIcon");
    VideoOffIcon = createIcon("M21 6.5l-4 4V7c0-.55-.45-1-1-1H9.82l-2-2H16c.55 0 1 .45 1 1v.5l4-4v11l-2.61-2.61L21 6.5zM3.27 2L2 3.27 4.73 6H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.21 0 .39-.08.55-.18L19.73 21 21 19.73 3.27 2zM15 16H5V8h1.73l8 8H15z", "VideoOffIcon");
    HangUpIcon = createIcon("M12 9c-1.6 0-3.15.25-4.6.72v3.1c0 .39-.23.74-.56.9-.98.49-1.87 1.12-2.66 1.85-.18.18-.43.28-.68.28-.53 0-.96-.43-.96-.96V9.72C2.21 6.27 6.82 3.5 12 3.5s9.79 2.77 10.46 6.22v5.17c0 .53-.43.96-.96.96-.25 0-.5-.09-.68-.28-.79-.73-1.68-1.36-2.66-1.85-.33-.16-.56-.5-.56-.9v-3.1C15.15 9.25 13.6 9 12 9z", "HangUpIcon");
    VolumeIcon = createIcon("M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z", "VolumeIcon");
    CommentIcon = createIcon("M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z", "CommentIcon");
    PlusIcon = createIcon("M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z", "PlusIcon");
    MusicIcon = createIcon("M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z", "MusicIcon");
    MenuIcon = createIcon("M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z", "MenuIcon");
    UsersIcon = createIcon("M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z", "UsersIcon");
    SettingsIcon = createIcon("M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.44,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z", "SettingsIcon");
    ChatIcon = createIcon("M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 9h12v2H6V9zm8 5H6v-2h8v2zm4-6H6V6h12v2z", "ChatIcon");
    VideoIcon = createIcon("M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z", "VideoIcon");
    ShareIcon = createIcon("M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z", "ShareIcon");
    AICompanionIcon = createIcon("M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm3.41 14.59L12 13.17l-3.41 3.42-1.41-1.41L10.59 12 7.17 8.59l1.41-1.41L12 10.83l3.41-3.42 1.41 1.41L13.41 12l3.42 3.41-1.42 1.18z", "AICompanionIcon");
    SparkleIcon = createIcon("M9 11H7v3h2v-3zm4 0h-2v3h2v-3zm4 0h-2v3h2v-3zm-4-1V7h-2v3h2zm4 0V7h-2v3h2zm-8 0V7H7v3h2z", "SparkleIcon");
    WellnessIcon = createIcon("M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z", "WellnessIcon");
    CrisisIcon = createIcon("M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z", "CrisisIcon");
    SafetyPlanIcon = createIcon("M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M10,17L6,13L7.41,11.59L10,14.17L16.59,7.58L18,9L10,17Z", "SafetyPlanIcon");
    ShieldIcon = createIcon("M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1Z", "ShieldIcon");
    TrendingUpIcon = createIcon("M2 12l2-2v5h4l2-2V8l3 3v4h3l2-2V8l2 2", "TrendingUpIcon");
    RefreshIcon2 = createIcon("M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z", "RefreshIcon");
    DownloadIcon = createIcon("M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z", "DownloadIcon");
    UploadIcon = createIcon("M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z", "UploadIcon");
    SunIcon = createIcon("M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z", "SunIcon");
    TagIcon = createIcon("M7.5 5.6L10 7 8.6 4.5C8.2 3.9 7.5 3.9 7.1 4.5L5.5 7l2.5-1.4zm4.5 5.9L8.6 12l2.4-2.4c.6-.6.6-1.5 0-2.1-.6-.6-1.5-.6-2.1 0L6.5 10 9 7.6l3.4 3.4z", "TagIcon");
    UserIcon = createIcon("M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z", "UserIcon");
    HomeIcon2 = createIcon("M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z", "HomeIcon");
    BookIcon = createLazyIcon(() => Promise.resolve().then(() => (init_book(), book_exports)), "BookIcon");
    BookmarkIcon = createLazyIcon(() => Promise.resolve().then(() => (init_bookmark(), bookmark_exports)), "BookmarkIcon");
    ClipboardCheckIcon = createLazyIcon(() => Promise.resolve().then(() => (init_clipboard_check(), clipboard_check_exports)), "ClipboardCheckIcon");
    CopyIcon = createLazyIcon(() => Promise.resolve().then(() => (init_copy(), copy_exports)), "CopyIcon");
    DashboardIcon = createLazyIcon(() => Promise.resolve().then(() => (init_dashboard(), dashboard_exports)), "DashboardIcon");
    FeedIcon = createLazyIcon(() => Promise.resolve().then(() => (init_feed(), feed_exports)), "FeedIcon");
    GoogleIcon = createLazyIcon(() => Promise.resolve().then(() => (init_google(), google_exports)), "GoogleIcon");
    AppleIcon = createLazyIcon(() => Promise.resolve().then(() => (init_apple(), apple_exports)), "AppleIcon");
  }
});

// src/views/DashboardView.tsx
var DashboardView_exports = {};
__export(DashboardView_exports, {
  default: () => DashboardView_default
});
var import_react10, import_jsx_runtime7, DashboardView, DashboardView_default;
var init_DashboardView = __esm({
  "src/views/DashboardView.tsx"() {
    "use strict";
    import_react10 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime7 = __toESM(require_jsx_runtime());
    DashboardView = () => {
      const [userName, setUserName] = (0, import_react10.useState)("");
      const [timeOfDay, setTimeOfDay] = (0, import_react10.useState)("");
      (0, import_react10.useEffect)(() => {
        const hour = (/* @__PURE__ */ new Date()).getHours();
        if (hour < 12) setTimeOfDay("Good morning");
        else if (hour < 17) setTimeOfDay("Good afternoon");
        else setTimeOfDay("Good evening");
        setUserName("Friend");
      }, []);
      const dashboardCards = [
        {
          id: "crisis-support",
          title: "Crisis Support",
          description: "Immediate help and resources",
          icon: ShieldIcon,
          color: "red",
          href: "/crisis",
          stats: {
            label: "24/7 Available",
            value: "Always"
          }
        },
        {
          id: "peer-support",
          title: "Peer Support",
          description: "Connect with others",
          icon: UsersIcon,
          color: "blue",
          href: "/peer-support",
          stats: {
            label: "Active Helpers",
            value: "200+"
          }
        },
        {
          id: "wellness-tracking",
          title: "Wellness Tracking",
          description: "Monitor your mental health",
          icon: HeartIcon2,
          color: "pink",
          href: "/wellness",
          stats: {
            label: "Current Streak",
            value: "5 days"
          }
        },
        {
          id: "ai-assistant",
          title: "AI Assistant",
          description: "Talk to our AI companion",
          icon: SparkleIcon,
          color: "purple",
          href: "/ai-assistant",
          stats: {
            label: "Conversations",
            value: "12"
          }
        },
        {
          id: "reflections",
          title: "Reflections",
          description: "Daily journaling and insights",
          icon: BookIcon,
          color: "green",
          href: "/reflections",
          stats: {
            label: "This Week",
            value: "3 entries"
          }
        },
        {
          id: "progress",
          title: "Progress Insights",
          description: "View your wellness trends",
          icon: TrendingUpIcon,
          color: "indigo",
          href: "/analytics",
          stats: {
            label: "Overall Trend",
            value: "\u2197 Improving"
          }
        }
      ];
      const getColorClasses = (color2) => {
        const colorMap = {
          red: "border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400",
          blue: "border-blue-200 dark:border-blue-800 bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400",
          pink: "border-pink-200 dark:border-pink-800 bg-pink-50 dark:bg-pink-900/20 text-pink-600 dark:text-pink-400",
          purple: "border-purple-200 dark:border-purple-800 bg-purple-50 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400",
          green: "border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400",
          indigo: "border-indigo-200 dark:border-indigo-800 bg-indigo-50 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400"
        };
        return colorMap[color2] || colorMap.blue;
      };
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2", children: [
            timeOfDay,
            ", ",
            userName,
            "!"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-lg", children: "Welcome to your mental wellness dashboard. How are you feeling today?" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid gap-4 md:grid-cols-3 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-sm font-medium text-gray-600 dark:text-gray-400 mb-2", children: "Check-ins This Week" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "5" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm text-green-600 dark:text-green-400", children: "+2 from last week" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-sm font-medium text-gray-600 dark:text-gray-400 mb-2", children: "Mood Average" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "7.2/10" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm text-blue-600 dark:text-blue-400", children: "Stable trend" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-sm font-medium text-gray-600 dark:text-gray-400 mb-2", children: "Support Connections" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "18" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm text-purple-600 dark:text-purple-400", children: "Active helpers" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "grid gap-6 md:grid-cols-2 lg:grid-cols-3", children: dashboardCards.map((card) => {
          const IconComponent = card.icon;
          return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
            "button",
            {
              className: `border rounded-lg p-6 cursor-pointer hover:shadow-lg transition-all duration-200 transform hover:scale-105 text-left ${getColorClasses(card.color)}`,
              onClick: () => {
                console.log(`Navigate to ${card.href}`);
              },
              onKeyDown: (e4) => {
                if (e4.key === "Enter" || e4.key === " ") {
                  e4.preventDefault();
                  console.log(`Navigate to ${card.href}`);
                }
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-start justify-between mb-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(IconComponent, { className: "w-8 h-8" }),
                  card.stats && /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-right", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xs opacity-75", children: card.stats.label }),
                    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm font-semibold", children: card.stats.value })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-lg font-semibold mb-2 text-gray-900 dark:text-gray-100", children: card.title }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm opacity-80", children: card.description })
              ]
            },
            card.id
          );
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mt-8 bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4", children: "Recent Activity" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(HeartIcon2, { className: "w-5 h-5 text-pink-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "Wellness check-in completed" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "2 hours ago" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SparkleIcon, { className: "w-5 h-5 text-purple-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "AI conversation: Stress management tips" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Yesterday" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(UsersIcon, { className: "w-5 h-5 text-blue-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "Connected with new peer support helper" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "2 days ago" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "mt-8 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-lg font-semibold text-red-800 dark:text-red-200 mb-2", children: "Need Immediate Help?" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-red-700 dark:text-red-300", children: "Crisis support is available 24/7. You're not alone." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "button",
            {
              className: "bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors",
              onClick: () => console.log("Navigate to /crisis"),
              children: "Get Help Now"
            }
          )
        ] }) })
      ] }) });
    };
    DashboardView_default = DashboardView;
  }
});

// src/components/ViewHeader.tsx
var import_jsx_runtime8, ViewHeader;
var init_ViewHeader = __esm({
  "src/components/ViewHeader.tsx"() {
    "use strict";
    import_jsx_runtime8 = __toESM(require_jsx_runtime());
    ViewHeader = ({ title, subtitle, children }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "view-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("h1", { children: title }),
          subtitle && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "view-subheader", children: subtitle })
        ] }),
        children && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "view-header-actions", children })
      ] });
    };
  }
});

// src/components/Card.tsx
var import_jsx_runtime9, Card;
var init_Card = __esm({
  "src/components/Card.tsx"() {
    "use strict";
    import_jsx_runtime9 = __toESM(require_jsx_runtime());
    Card = ({
      children,
      className = "",
      style,
      onClick,
      role,
      tabIndex,
      enhanced = true,
      variant = "default",
      "aria-label": ariaLabel
    }) => {
      const baseClass = enhanced ? "card-enhanced" : "card";
      const variantClass = enhanced && variant !== "default" ? variant : "";
      const touchClasses = !enhanced && onClick ? "touch-optimized touch-feedback" : "";
      const isInteractive = !!onClick;
      const classes = [
        baseClass,
        variantClass,
        touchClasses,
        className
      ].filter(Boolean).join(" ");
      const handleKeyDown = (event) => {
        if (onClick && (event.key === "Enter" || event.key === " ")) {
          event.preventDefault();
          onClick(event);
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "div",
        {
          className: classes,
          style,
          onClick,
          onKeyDown: isInteractive ? handleKeyDown : void 0,
          role: role || (isInteractive ? "button" : "region"),
          tabIndex: isInteractive ? tabIndex ?? 0 : void 0,
          "aria-label": ariaLabel,
          ...isInteractive && { "aria-pressed": "false" },
          children
        }
      );
    };
  }
});

// src/components/AppButton.tsx
var import_jsx_runtime10, AppButton;
var init_AppButton = __esm({
  "src/components/AppButton.tsx"() {
    "use strict";
    import_jsx_runtime10 = __toESM(require_jsx_runtime());
    AppButton = ({
      children,
      onClick,
      variant = "primary",
      size = "md",
      isLoading = false,
      disabled = false,
      className = "",
      type = "button",
      style,
      icon,
      enhanced = true,
      iconOnly = false,
      "aria-label": ariaLabel
    }) => {
      const baseClass = enhanced ? "btn-enhanced" : "btn";
      const variantClass = enhanced ? variant : `btn-${variant}`;
      let sizeClass = "";
      if (enhanced) {
        sizeClass = size !== "md" ? size : "";
      } else {
        sizeClass = size !== "md" ? `btn-${size}` : "";
      }
      const iconOnlyClass = iconOnly ? "btn-icon-only" : "";
      const touchClasses = !enhanced ? "touch-optimized touch-feedback touch-ripple" : "";
      const classes = [
        baseClass,
        variantClass,
        sizeClass,
        iconOnlyClass,
        touchClasses,
        className
      ].filter(Boolean).join(" ");
      const touchTargetStyle = {
        minHeight: "44px",
        // WCAG 2.1 AA touch target requirement
        minWidth: iconOnly ? "44px" : "auto",
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        touchAction: "manipulation",
        // Improve touch responsiveness
        ...style
      };
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "button",
        {
          type,
          className: classes,
          onClick,
          disabled: disabled || isLoading,
          style: touchTargetStyle,
          "aria-label": ariaLabel || (iconOnly && typeof children === "string" ? children : void 0),
          children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: `loading-spinner${size !== "md" ? ` ${size}` : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "loading-spinner-inner" }) }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
            icon,
            !iconOnly && children
          ] })
        }
      );
    };
  }
});

// src/components/AppInput.tsx
var import_react11, import_jsx_runtime11, AppInput, AppTextArea;
var init_AppInput = __esm({
  "src/components/AppInput.tsx"() {
    "use strict";
    import_react11 = __toESM(require_react());
    import_jsx_runtime11 = __toESM(require_jsx_runtime());
    AppInput = ({
      label,
      id,
      className = "",
      containerStyle,
      enhanced = true,
      floatingLabel = false,
      error: error44,
      helpText,
      mobileOptimized = true,
      ...rest
    }) => {
      const inputRef = (0, import_react11.useRef)(null);
      const formGroupClass = enhanced ? "form-group-enhanced" : "form-group";
      const inputClass = enhanced ? "form-control-enhanced" : "form-control";
      const containerClass = enhanced && floatingLabel ? "form-floating-enhanced" : "";
      const inputId = id || `input-${Math.random().toString(36).substring(2, 11)}`;
      const handleTouchStart = (0, import_react11.useCallback)((e4) => {
        if (!mobileOptimized) return;
        const target = e4.currentTarget;
        if (target && target !== document.activeElement) {
          e4.preventDefault();
          target.focus();
          setTimeout(() => {
            target.scrollIntoView({
              behavior: "smooth",
              block: "center",
              inline: "nearest"
            });
          }, 100);
        }
      }, [mobileOptimized]);
      const handleFocus = (0, import_react11.useCallback)((e4) => {
        if (mobileOptimized) {
          e4.currentTarget.classList.add("mobile-focused");
        }
        if (rest.onFocus) {
          rest.onFocus(e4);
        }
      }, [mobileOptimized, rest.onFocus]);
      const handleBlur = (0, import_react11.useCallback)((e4) => {
        if (mobileOptimized) {
          e4.currentTarget.classList.remove("mobile-focused");
        }
        if (rest.onBlur) {
          rest.onBlur(e4);
        }
      }, [mobileOptimized, rest.onBlur]);
      const inputProps = {
        ...rest,
        id: inputId,
        ref: inputRef,
        className: `${inputClass} ${className} ${error44 ? "is-invalid" : ""} ${mobileOptimized ? "mobile-optimized" : ""}`,
        "aria-invalid": error44 ? "true" : "false",
        "aria-describedby": [
          error44 ? `${inputId}-error` : "",
          helpText ? `${inputId}-help` : ""
        ].filter(Boolean).join(" ") || void 0,
        style: {
          minHeight: "44px",
          // WCAG 2.1 AA touch target requirement
          ...rest.style
        },
        onFocus: handleFocus,
        onBlur: handleBlur,
        ...mobileOptimized && {
          onTouchStart: handleTouchStart,
          style: {
            fontSize: rest.type === "email" || rest.type === "text" || rest.type === "password" ? "16px" : void 0,
            // Prevent iOS zoom
            minHeight: "44px",
            // WCAG 2.1 AA touch target requirement  
            ...rest.style
          },
          autoComplete: rest.autoComplete || "off",
          autoCorrect: "off",
          autoCapitalize: rest.autoCapitalize || "none",
          spellCheck: rest.spellCheck !== void 0 ? rest.spellCheck : false
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: `${formGroupClass} ${containerClass}`, style: containerStyle, children: [
        !floatingLabel && label && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: inputId, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("input", { ...inputProps }),
        floatingLabel && label && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: inputId, children: label }),
        error44 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { id: `${inputId}-error`, className: "invalid-feedback", role: "alert", children: error44 }),
        helpText && !error44 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { id: `${inputId}-help`, className: "form-text", children: helpText })
      ] });
    };
    AppTextArea = ({
      label,
      id,
      className = "",
      containerStyle,
      footer: footer2,
      enhanced = true,
      error: error44,
      helpText,
      mobileOptimized = true,
      ...rest
    }) => {
      const textareaRef = (0, import_react11.useRef)(null);
      const formGroupClass = enhanced ? "form-group-enhanced" : "form-group";
      const textareaClass = enhanced ? "form-control-enhanced" : "form-control";
      const textareaId = id || `textarea-${Math.random().toString(36).substring(2, 11)}`;
      const handleTouchStart = (0, import_react11.useCallback)((e4) => {
        if (!mobileOptimized) return;
        const target = e4.currentTarget;
        if (target && target !== document.activeElement) {
          e4.preventDefault();
          target.focus();
          setTimeout(() => {
            target.scrollIntoView({
              behavior: "smooth",
              block: "center",
              inline: "nearest"
            });
          }, 100);
        }
      }, [mobileOptimized]);
      const handleFocus = (0, import_react11.useCallback)((e4) => {
        if (mobileOptimized) {
          e4.currentTarget.classList.add("mobile-focused");
        }
        if (rest.onFocus) {
          rest.onFocus(e4);
        }
      }, [mobileOptimized, rest.onFocus]);
      const handleBlur = (0, import_react11.useCallback)((e4) => {
        if (mobileOptimized) {
          e4.currentTarget.classList.remove("mobile-focused");
        }
        if (rest.onBlur) {
          rest.onBlur(e4);
        }
      }, [mobileOptimized, rest.onBlur]);
      const textareaProps = {
        ...rest,
        id: textareaId,
        ref: textareaRef,
        className: `${textareaClass} ${className} ${error44 ? "is-invalid" : ""} ${mobileOptimized ? "mobile-optimized" : ""}`,
        "aria-invalid": error44 ? "true" : "false",
        "aria-describedby": [
          error44 ? `${textareaId}-error` : "",
          helpText ? `${textareaId}-help` : ""
        ].filter(Boolean).join(" ") || void 0,
        style: {
          minHeight: "44px",
          // WCAG 2.1 AA touch target requirement
          ...rest.style
        },
        onFocus: handleFocus,
        onBlur: handleBlur,
        ...mobileOptimized && {
          onTouchStart: handleTouchStart,
          style: {
            fontSize: "16px",
            // Prevent iOS zoom
            minHeight: "44px",
            // WCAG 2.1 AA touch target requirement
            ...rest.style
          },
          autoCorrect: "off",
          spellCheck: rest.spellCheck !== void 0 ? rest.spellCheck : true
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: formGroupClass, style: containerStyle, children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { htmlFor: textareaId, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("textarea", { ...textareaProps }),
        error44 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { id: `${textareaId}-error`, className: "invalid-feedback", role: "alert", children: error44 }),
        helpText && !error44 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { id: `${textareaId}-help`, className: "form-text", children: helpText }),
        footer2 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "form-group-footer", children: footer2 })
      ] });
    };
  }
});

// src/utils/chartUtils.ts
var groupCheckInsByDay;
var init_chartUtils = __esm({
  "src/utils/chartUtils.ts"() {
    "use strict";
    groupCheckInsByDay = (checkIns, days) => {
      const dataByDay = {};
      const today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      const relevantCheckIns = checkIns.filter((c3) => {
        const checkInDate = new Date(c3.timestamp);
        const diffDays = (today.getTime() - checkInDate.getTime()) / (1e3 * 3600 * 24);
        return diffDays < days;
      });
      for (const checkIn of relevantCheckIns) {
        const dateKey = new Date(checkIn.timestamp).toISOString().split("T")[0];
        if (!dataByDay[dateKey]) {
          dataByDay[dateKey] = { total: 0, count: 0 };
        }
        dataByDay[dateKey].total += checkIn.moodScore;
        dataByDay[dateKey].count++;
      }
      const chartData = [];
      for (let i3 = days - 1; i3 >= 0; i3--) {
        const date5 = new Date(today);
        date5.setDate(today.getDate() - i3);
        const dateKey = date5.toISOString().split("T")[0];
        const dayData = dataByDay[dateKey];
        chartData.push({
          label: date5.toLocaleDateString("en-US", { weekday: "short" }),
          value: dayData ? dayData.total / dayData.count : 0,
          // 0 if no data for that day
          date: date5
        });
      }
      return chartData;
    };
  }
});

// node_modules/zustand/esm/vanilla.mjs
var createStoreImpl, createStore;
var init_vanilla = __esm({
  "node_modules/zustand/esm/vanilla.mjs"() {
    createStoreImpl = (createState2) => {
      let state;
      const listeners = /* @__PURE__ */ new Set();
      const setState = (partial2, replace2) => {
        const nextState = typeof partial2 === "function" ? partial2(state) : partial2;
        if (!Object.is(nextState, state)) {
          const previousState = state;
          state = (replace2 != null ? replace2 : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
          listeners.forEach((listener) => listener(state, previousState));
        }
      };
      const getState = () => state;
      const getInitialState = () => initialState;
      const subscribe = (listener) => {
        listeners.add(listener);
        return () => listeners.delete(listener);
      };
      const destroy = () => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
          console.warn(
            "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
          );
        }
        listeners.clear();
      };
      const api = { setState, getState, getInitialState, subscribe, destroy };
      const initialState = state = createState2(setState, getState, api);
      return api;
    };
    createStore = (createState2) => createState2 ? createStoreImpl(createState2) : createStoreImpl;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js
var require_use_sync_external_store_shim_production = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js"(exports) {
    "use strict";
    var React77 = require_react();
    function is2(x3, y3) {
      return x3 === y3 && (0 !== x3 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is2;
    var useState62 = React77.useState;
    var useEffect55 = React77.useEffect;
    var useLayoutEffect4 = React77.useLayoutEffect;
    var useDebugValue2 = React77.useDebugValue;
    function useSyncExternalStore$2(subscribe, getSnapshot) {
      var value = getSnapshot(), _useState = useState62({ inst: { value, getSnapshot } }), inst = _useState[0].inst, forceUpdate = _useState[1];
      useLayoutEffect4(
        function() {
          inst.value = value;
          inst.getSnapshot = getSnapshot;
          checkIfSnapshotChanged(inst) && forceUpdate({ inst });
        },
        [subscribe, value, getSnapshot]
      );
      useEffect55(
        function() {
          checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          return subscribe(function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          });
        },
        [subscribe]
      );
      useDebugValue2(value);
      return value;
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error44) {
        return true;
      }
    }
    function useSyncExternalStore$1(subscribe, getSnapshot) {
      return getSnapshot();
    }
    var shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
    exports.useSyncExternalStore = void 0 !== React77.useSyncExternalStore ? React77.useSyncExternalStore : shim;
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_use_sync_external_store_shim_production();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js
var require_with_selector_production = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js"(exports) {
    "use strict";
    var React77 = require_react();
    var shim = require_shim();
    function is2(x3, y3) {
      return x3 === y3 && (0 !== x3 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is2;
    var useSyncExternalStore = shim.useSyncExternalStore;
    var useRef22 = React77.useRef;
    var useEffect55 = React77.useEffect;
    var useMemo14 = React77.useMemo;
    var useDebugValue2 = React77.useDebugValue;
    exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
      var instRef = useRef22(null);
      if (null === instRef.current) {
        var inst = { hasValue: false, value: null };
        instRef.current = inst;
      } else inst = instRef.current;
      instRef = useMemo14(
        function() {
          function memoizedSelector(nextSnapshot) {
            if (!hasMemo) {
              hasMemo = true;
              memoizedSnapshot = nextSnapshot;
              nextSnapshot = selector(nextSnapshot);
              if (void 0 !== isEqual && inst.hasValue) {
                var currentSelection = inst.value;
                if (isEqual(currentSelection, nextSnapshot))
                  return memoizedSelection = currentSelection;
              }
              return memoizedSelection = nextSnapshot;
            }
            currentSelection = memoizedSelection;
            if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
            var nextSelection = selector(nextSnapshot);
            if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
              return memoizedSnapshot = nextSnapshot, currentSelection;
            memoizedSnapshot = nextSnapshot;
            return memoizedSelection = nextSelection;
          }
          var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
          return [
            function() {
              return memoizedSelector(getSnapshot());
            },
            null === maybeGetServerSnapshot ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            }
          ];
        },
        [getSnapshot, getServerSnapshot, selector, isEqual]
      );
      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
      useEffect55(
        function() {
          inst.hasValue = true;
          inst.value = value;
        },
        [value]
      );
      useDebugValue2(value);
      return value;
    };
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_with_selector_production();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/zustand/esm/index.mjs
function useStore(api, selector = identity, equalityFn) {
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice2 = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getInitialState,
    selector,
    equalityFn
  );
  useDebugValue(slice2);
  return slice2;
}
var import_react12, import_with_selector, useDebugValue, useSyncExternalStoreWithSelector, didWarnAboutEqualityFn, identity, createImpl, create;
var init_esm = __esm({
  "node_modules/zustand/esm/index.mjs"() {
    init_vanilla();
    init_vanilla();
    import_react12 = __toESM(require_react(), 1);
    import_with_selector = __toESM(require_with_selector(), 1);
    ({ useDebugValue } = import_react12.default);
    ({ useSyncExternalStoreWithSelector } = import_with_selector.default);
    didWarnAboutEqualityFn = false;
    identity = (arg) => arg;
    createImpl = (createState2) => {
      if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && typeof createState2 !== "function") {
        console.warn(
          "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
        );
      }
      const api = typeof createState2 === "function" ? createStore(createState2) : createState2;
      const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
      Object.assign(useBoundStore, api);
      return useBoundStore;
    };
    create = (createState2) => createState2 ? createImpl(createState2) : createImpl;
  }
});

// src/utils/habitUtils.ts
var isSameDay, calculateStreaks;
var init_habitUtils = __esm({
  "src/utils/habitUtils.ts"() {
    "use strict";
    isSameDay = (date1, date22) => {
      return date1.getFullYear() === date22.getFullYear() && date1.getMonth() === date22.getMonth() && date1.getDate() === date22.getDate();
    };
    calculateStreaks = (trackedHabits, completions, userId) => {
      const today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      const yesterday = new Date(today);
      yesterday.setDate(today.getDate() - 1);
      return trackedHabits.map((habit) => {
        const habitCompletions = completions.filter((c3) => c3.habitId === habit.id).map((c3) => {
          const date5 = new Date(c3.completedAt);
          date5.setHours(0, 0, 0, 0);
          return date5;
        });
        const uniqueDates = Array.from(new Set(habitCompletions.map((d3) => d3.getTime()))).map((time3) => new Date(time3)).sort((a3, b3) => b3.getTime() - a3.getTime());
        if (uniqueDates.length === 0) {
          return {
            userId,
            habitId: habit.id,
            trackedAt: "",
            currentStreak: 0,
            longestStreak: 0,
            isCompletedToday: false
          };
        }
        const isCompletedToday = isSameDay(uniqueDates[0], today);
        let currentStreak = 0;
        let longestStreak = 0;
        let tempStreak = 0;
        const mostRecent = uniqueDates[0];
        if (isSameDay(mostRecent, today) || isSameDay(mostRecent, yesterday)) {
          let expectedDate = new Date(today);
          if (!isSameDay(mostRecent, today)) {
            expectedDate = new Date(yesterday);
          }
          for (const completionDate of uniqueDates) {
            if (isSameDay(completionDate, expectedDate)) {
              currentStreak++;
              expectedDate.setDate(expectedDate.getDate() - 1);
            } else {
              break;
            }
          }
        }
        for (let i3 = 0; i3 < uniqueDates.length; i3++) {
          if (i3 === 0) {
            tempStreak = 1;
          } else {
            const current = uniqueDates[i3];
            const previous2 = uniqueDates[i3 - 1];
            const daysBetween = Math.round((previous2.getTime() - current.getTime()) / (1e3 * 60 * 60 * 24));
            if (daysBetween === 1) {
              tempStreak++;
            } else {
              longestStreak = Math.max(longestStreak, tempStreak);
              tempStreak = 1;
            }
          }
        }
        longestStreak = Math.max(longestStreak, tempStreak);
        return {
          userId,
          habitId: habit.id,
          trackedAt: "",
          currentStreak,
          longestStreak,
          isCompletedToday
        };
      });
    };
  }
});

// src/stores/wellnessStore.ts
var useWellnessStore;
var init_wellnessStore = __esm({
  "src/stores/wellnessStore.ts"() {
    "use strict";
    init_esm();
    init_ApiClient();
    init_AuthContext();
    init_habitUtils();
    useWellnessStore = create((set2, get2) => ({
      history: [],
      journalEntries: [],
      isLoading: true,
      predefinedHabits: [],
      trackedHabits: [],
      isLoadingHabits: true,
      completions: [],
      fetchHistory: async () => {
        const userToken = authState.userToken;
        if (!userToken) {
          set2({ history: [], isLoading: false });
          return;
        }
        set2({ isLoading: true });
        try {
          const data2 = await ApiClient.mood.getHistory(userToken);
          set2({ history: data2 });
        } catch (error44) {
          if (error44.message?.includes("Demo mode") || error44.isDevelopmentError || true) {
            const demoHistory = [];
            for (let i3 = 0; i3 < 14; i3++) {
              const daysAgo = i3;
              const mood = Math.floor(Math.random() * 2) + 3;
              const anxiety = Math.floor(Math.random() * 3) + 1;
              demoHistory.push({
                id: `demo-${i3}`,
                userToken,
                timestamp: new Date(Date.now() - daysAgo * 864e5).toISOString(),
                moodScore: mood,
                anxietyLevel: anxiety,
                sleepQuality: Math.floor(Math.random() * 2) + 3,
                energyLevel: Math.floor(Math.random() * 3) + 2,
                tags: [
                  ["Grateful", "Calm", "Hopeful"][Math.floor(Math.random() * 3)],
                  ["Productive", "Tired", "Anxious"][Math.floor(Math.random() * 3)]
                ],
                notes: [
                  "Had a good therapy session today",
                  "Practiced meditation this morning",
                  "Went for a walk in nature",
                  "Connected with a friend",
                  "Accomplished my daily goals",
                  "Feeling more balanced",
                  "Working through some challenges"
                ][Math.floor(Math.random() * 7)]
              });
            }
            set2({ history: demoHistory });
          } else {
            console.error("Failed to fetch wellness history:", error44);
            set2({ history: [] });
          }
        } finally {
          set2({ isLoading: false });
        }
      },
      postCheckIn: async (checkInData) => {
        const userToken = authState.userToken;
        if (!userToken) throw new Error("User token is not available.");
        await ApiClient.mood.postCheckIn(checkInData, userToken);
        await get2().fetchHistory();
      },
      fetchJournalEntries: async () => {
        const userToken = authState.userToken;
        if (!userToken) {
          set2({ journalEntries: [] });
          return;
        }
        try {
          const data2 = await ApiClient.journal.getEntries(userToken);
          set2({ journalEntries: data2.sort((a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime()) });
        } catch (error44) {
          if (error44.message?.includes("Demo mode") || error44.isDevelopmentError || true) {
            set2({
              journalEntries: [
                {
                  id: "demo-journal-1",
                  userToken,
                  content: `Today was a breakthrough day in therapy. We talked about setting boundaries with family, and I finally understood why it's been so hard for me. It's not about not caring - it's about caring for myself too. I'm going to practice saying "no" to one small thing this week.`,
                  timestamp: new Date(Date.now() - 864e5).toISOString()
                },
                {
                  id: "demo-journal-2",
                  userToken,
                  content: "Anxiety was high this morning, but I used the 5-4-3-2-1 grounding technique and it actually worked! 5 things I could see, 4 I could touch, 3 I could hear, 2 I could smell, 1 I could taste. By the end, I felt present again. Small victories matter.",
                  timestamp: new Date(Date.now() - 1728e5).toISOString()
                },
                {
                  id: "demo-journal-3",
                  userToken,
                  content: "Grateful for: 1) Morning coffee with no rush, 2) My cat purring next to me, 3) A text from an old friend, 4) The sunset I caught on my walk, 5) This safe space to express myself. Some days gratitude is easier than others, but today it feels genuine.",
                  timestamp: new Date(Date.now() - 2592e5).toISOString()
                },
                {
                  id: "demo-journal-4",
                  userToken,
                  content: "Had a panic attack at the grocery store today. But instead of beating myself up, I'm proud that I: recognized it happening, found a quiet spot, used my breathing exercises, and finished my shopping afterward. Recovery isn't linear, and that's okay.",
                  timestamp: new Date(Date.now() - 3456e5).toISOString()
                },
                {
                  id: "demo-journal-5",
                  userToken,
                  content: "Sleep has been better this week. I think the new bedtime routine is helping - no screens after 10pm, chamomile tea, and 10 minutes of stretching. It's amazing how small changes can make such a difference. Tonight I'll try adding some meditation.",
                  timestamp: new Date(Date.now() - 432e6).toISOString()
                }
              ]
            });
          } else {
            console.error("Failed to fetch journal entries:", error44);
            set2({ journalEntries: [] });
          }
        }
      },
      postJournalEntry: async (content3) => {
        const userToken = authState.userToken;
        if (!userToken) throw new Error("User token is not available.");
        await ApiClient.journal.postEntry(content3, userToken);
        await get2().fetchJournalEntries();
      },
      fetchHabits: async () => {
        const userToken = authState.userToken;
        if (!userToken) {
          set2({ predefinedHabits: [], trackedHabits: [], completions: [], isLoadingHabits: false });
          return;
        }
        set2({ isLoadingHabits: true });
        try {
          const [predefined, trackedIds, comps] = await Promise.all([
            ApiClient.habits.getPredefinedHabits(),
            ApiClient.habits.getTrackedHabitIds(userToken),
            ApiClient.habits.getCompletions(userToken)
          ]);
          const trackedWithStreaks = calculateStreaks(predefined.filter((h3) => trackedIds.includes(h3.id)), comps, userToken);
          set2({
            predefinedHabits: predefined,
            completions: comps,
            trackedHabits: trackedWithStreaks
          });
        } catch (error44) {
          if (error44.message?.includes("Demo mode") || error44.isDevelopmentError) {
            const demoPredefined = [
              { id: "habit-1", name: "Daily Meditation", description: "Practice mindfulness for 10 minutes", category: "Mindfulness", icon: "\u{1F9D8}" },
              { id: "habit-2", name: "Gratitude Journal", description: "Write 3 things you're grateful for", category: "Self-Care", icon: "\u{1F4DD}" },
              { id: "habit-3", name: "Morning Walk", description: "Take a 20-minute walk outdoors", category: "Physical", icon: "\u{1F6B6}" },
              { id: "habit-4", name: "Deep Breathing", description: "Practice deep breathing exercises", category: "Mindfulness", icon: "\u{1F4A8}" },
              { id: "habit-5", name: "Hydration", description: "Drink 8 glasses of water", category: "Physical", icon: "\u{1F4A7}" }
            ];
            const demoTracked = [
              {
                userId: "demo-user",
                habitId: "habit-1",
                trackedAt: new Date(Date.now() - 7 * 864e5).toISOString(),
                currentStreak: 7,
                longestStreak: 14,
                isCompletedToday: false
              },
              {
                userId: "demo-user",
                habitId: "habit-3",
                trackedAt: new Date(Date.now() - 3 * 864e5).toISOString(),
                currentStreak: 3,
                longestStreak: 10,
                isCompletedToday: true
              }
            ];
            set2({
              predefinedHabits: demoPredefined,
              trackedHabits: demoTracked,
              completions: []
            });
          } else {
            console.error("Failed to fetch habits data:", error44);
          }
        } finally {
          set2({ isLoadingHabits: false });
        }
      },
      trackHabit: async (habitId) => {
        const userToken = authState.userToken;
        if (!userToken) return;
        await ApiClient.habits.trackHabit(userToken, habitId);
        await get2().fetchHabits();
      },
      untrackHabit: async (habitId) => {
        const userToken = authState.userToken;
        if (!userToken) return;
        await ApiClient.habits.untrackHabit(userToken, habitId);
        await get2().fetchHabits();
      },
      logCompletion: async (habitId) => {
        const userToken = authState.userToken;
        if (!userToken) return;
        const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
        await ApiClient.habits.logCompletion(userToken, habitId, today);
        await get2().fetchHabits();
      }
    }));
  }
});

// src/services/enhancedAiCrisisDetectionService.ts
var EnhancedAICrisisDetectionService, enhancedAICrisisDetectionService;
var init_enhancedAiCrisisDetectionService = __esm({
  "src/services/enhancedAiCrisisDetectionService.ts"() {
    "use strict";
    EnhancedAICrisisDetectionService = class {
      async analyzeCrisisWithML(text5, context) {
        const crisisKeywords = ["suicide", "kill myself", "end it all", "can't go on", "hopeless", "worthless"];
        const lowerText = text5.toLowerCase();
        const matchedKeywords = crisisKeywords.filter((keyword) => lowerText.includes(keyword));
        const crisisLevel = matchedKeywords.length > 0 ? Math.min(matchedKeywords.length * 0.3, 1) : 0;
        return {
          crisisLevel,
          confidence: crisisLevel > 0 ? 0.7 : 0.3,
          riskFactors: matchedKeywords,
          immediateAction: crisisLevel > 0.5,
          recommendations: crisisLevel > 0.5 ? ["Contact crisis helpline", "Seek immediate support"] : [],
          culturalContext: context,
          // Enhanced properties with default values
          hasCrisisIndicators: crisisLevel > 0.3,
          mlConfidence: crisisLevel > 0 ? 0.7 : 0.3,
          psychologicalAssessment: {
            depressionIndicators: crisisLevel * 0.8,
            anxietyIndicators: crisisLevel * 0.6,
            suicidalIdeation: crisisLevel * 0.9
          },
          behavioralPattern: {
            communicationStyle: crisisLevel > 0.5 ? "distressed" : "normal",
            helpSeekingBehavior: crisisLevel > 0.3 ? "active" : "passive",
            escalationTriggers: matchedKeywords
          },
          realTimeRisk: {
            immediateRisk: crisisLevel,
            interventionUrgency: crisisLevel * 10,
            recommendedInterventions: [
              { priority: 1, description: "Immediate crisis support" },
              { priority: 2, description: "Follow-up care" }
            ]
          },
          biasAdjustments: [],
          emotionalState: {
            primary: crisisLevel > 0.5 ? "distress" : "neutral",
            intensity: crisisLevel
          }
        };
      }
      async detectCrisis(text5) {
        const analysis = await this.analyzeCrisisWithML(text5);
        return {
          isCrisis: analysis.crisisLevel > 0.3,
          severity: analysis.crisisLevel
        };
      }
    };
    enhancedAICrisisDetectionService = new EnhancedAICrisisDetectionService();
  }
});

// src/services/culturalContextService.ts
var CulturalContextService, culturalContextService;
var init_culturalContextService = __esm({
  "src/services/culturalContextService.ts"() {
    "use strict";
    CulturalContextService = class {
      culturalContexts = {
        "en": {
          region: "Western",
          mentalHealthStigma: "medium",
          familyInvolvement: "individual",
          crisisEscalation: "direct",
          communicationStyle: "direct"
        },
        "es": {
          region: "Hispanic/Latino",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "gradual",
          communicationStyle: "contextual"
        },
        "pt-BR": {
          region: "Brazilian",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "gradual",
          communicationStyle: "contextual"
        },
        "pt": {
          region: "Portuguese",
          mentalHealthStigma: "medium",
          familyInvolvement: "family-centered",
          crisisEscalation: "gradual",
          communicationStyle: "contextual"
        },
        "ar": {
          region: "Arabic",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "authority-based",
          communicationStyle: "indirect"
        },
        "zh": {
          region: "Chinese",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "gradual",
          communicationStyle: "indirect"
        },
        "vi": {
          region: "Vietnamese",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "authority-based",
          communicationStyle: "indirect"
        },
        "tl": {
          region: "Filipino",
          mentalHealthStigma: "high",
          familyInvolvement: "family-centered",
          crisisEscalation: "gradual",
          communicationStyle: "contextual"
        }
      };
      /**
       * Get cultural context for a language
       */
      getCulturalContext(language) {
        return this.culturalContexts[language] || this.culturalContexts["en"];
      }
      /**
       * Get all supported cultural contexts
       */
      getAllCulturalContexts() {
        return { ...this.culturalContexts };
      }
      /**
       * Get cultural regions list
       */
      getCulturalRegions() {
        return [...new Set(Object.values(this.culturalContexts).map((c3) => c3.region))];
      }
    };
    culturalContextService = new CulturalContextService();
  }
});

// src/services/privacyPreservingAnalyticsService.ts
var PrivacyPreservingAnalyticsService, privacyPreservingAnalyticsService;
var init_privacyPreservingAnalyticsService = __esm({
  "src/services/privacyPreservingAnalyticsService.ts"() {
    "use strict";
    init_culturalContextService();
    PrivacyPreservingAnalyticsService = class {
      EPSILON = 1;
      // Differential privacy parameter
      MAX_RETENTION_DAYS = 90;
      // HIPAA-compliant retention
      MIN_COHORT_SIZE = 10;
      // Minimum for statistical significance
      analyticsData = [];
      privacyBudgetUsed = 0;
      constructor() {
        this.initializeEncryption();
        this.setupPeriodicCleanup();
      }
      /**
       * Initialize homomorphic encryption for secure computations
       */
      async initializeEncryption() {
        try {
          await crypto.subtle.generateKey(
            {
              name: "AES-GCM",
              length: 256
            },
            false,
            ["encrypt", "decrypt"]
          );
          console.log("[Privacy Analytics] Encryption initialized");
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to initialize encryption:", error44);
        }
      }
      /**
       * Set up periodic cleanup of expired data
       */
      setupPeriodicCleanup() {
        setInterval(() => {
          this.cleanupExpiredData();
        }, 24 * 60 * 60 * 1e3);
      }
      /**
       * Clean up data older than retention period
       */
      cleanupExpiredData() {
        const cutoffTime = Date.now() - this.MAX_RETENTION_DAYS * 24 * 60 * 60 * 1e3;
        const initialCount = this.analyticsData.length;
        this.analyticsData = this.analyticsData.filter(
          (outcome) => outcome.timestamp > cutoffTime
        );
        const removedCount = initialCount - this.analyticsData.length;
        if (removedCount > 0) {
          console.log(`[Privacy Analytics] Cleaned up ${removedCount} expired records`);
        }
      }
      /**
       * Generate anonymized hash for user session
       */
      generateAnonymizedHash(userToken, sessionId) {
        const salt = "astralcore-privacy-salt-2025";
        const data2 = `${userToken}-${sessionId}-${salt}`;
        let hash2 = 0;
        for (let i3 = 0; i3 < data2.length; i3++) {
          const char = data2.charCodeAt(i3);
          hash2 = (hash2 << 5) - hash2 + char;
          hash2 = hash2 & hash2;
        }
        return Math.abs(hash2).toString(36);
      }
      /**
       * Add differential privacy noise to numeric value
       */
      addDifferentialPrivacyNoise(value, sensitivity = 1) {
        const scale = sensitivity / this.EPSILON;
        const noise = this.sampleLaplace(0, scale);
        return Math.max(0, value + noise);
      }
      /**
       * Sample from Laplace distribution for differential privacy
       */
      sampleLaplace(location, scale) {
        const u3 = Math.random() - 0.5;
        return location - scale * Math.sign(u3) * Math.log(1 - 2 * Math.abs(u3));
      }
      /**
       * Record intervention outcome with privacy preservation
       */
      async recordInterventionOutcome(outcomeData) {
        try {
          const { sessionId, userToken, language, interventionType, initialRiskLevel, finalRiskLevel, sessionDuration, feedback } = outcomeData;
          if (this.privacyBudgetUsed >= 10) {
            console.warn("[Privacy Analytics] Privacy budget exhausted, skipping recording");
            return;
          }
          const culturalContext = culturalContextService.getCulturalContext(language);
          const anonymizedHash = this.generateAnonymizedHash(userToken, sessionId);
          const noisyInitialRisk = this.addDifferentialPrivacyNoise(initialRiskLevel, 0.1);
          const noisyFinalRisk = this.addDifferentialPrivacyNoise(finalRiskLevel, 0.1);
          const noisyFeedback = feedback ? this.addDifferentialPrivacyNoise(feedback, 0.5) : 0;
          const budgetConsumed = 0.1;
          this.privacyBudgetUsed += budgetConsumed;
          const outcome = {
            sessionId: anonymizedHash,
            // Use anonymized hash instead of real session ID
            anonymizedHash,
            timestamp: Date.now(),
            language,
            culturalContext: culturalContext.region,
            interventionType,
            initialRiskLevel: noisyInitialRisk,
            finalRiskLevel: noisyFinalRisk,
            sessionDuration,
            followUpEngagement: false,
            // Will be updated if user returns
            anonymizedFeedback: noisyFeedback,
            privacyBudget: budgetConsumed
          };
          this.analyticsData.push(outcome);
          console.log(`[Privacy Analytics] Recorded intervention outcome for ${language} culture`);
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to record intervention outcome:", error44);
        }
      }
      /**
       * Update follow-up engagement status
       */
      async recordFollowUpEngagement(userToken, sessionId) {
        try {
          const anonymizedHash = this.generateAnonymizedHash(userToken, sessionId);
          const outcome = this.analyticsData.find(
            (o3) => o3.anonymizedHash === anonymizedHash
          );
          if (outcome) {
            outcome.followUpEngagement = true;
            console.log("[Privacy Analytics] Updated follow-up engagement");
          }
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to record follow-up engagement:", error44);
        }
      }
      /**
       * Calculate cultural effectiveness metrics with privacy preservation
       */
      calculateCulturalMetrics(language, culturalGroup) {
        const culturalData = this.analyticsData.filter(
          (outcome) => outcome.language === language && outcome.culturalContext === culturalGroup
        );
        if (culturalData.length < this.MIN_COHORT_SIZE) {
          return null;
        }
        const riskReductions = culturalData.map(
          (o3) => Math.max(0, o3.initialRiskLevel - o3.finalRiskLevel)
        );
        const averageRiskReduction = this.addDifferentialPrivacyNoise(
          riskReductions.reduce((sum, r3) => sum + r3, 0) / riskReductions.length,
          0.1
        );
        const successCount = culturalData.filter((o3) => o3.finalRiskLevel < o3.initialRiskLevel).length;
        const successRate = this.addDifferentialPrivacyNoise(
          successCount / culturalData.length * 100,
          1
        );
        const averageSessionDuration = this.addDifferentialPrivacyNoise(
          culturalData.reduce((sum, o3) => sum + o3.sessionDuration, 0) / culturalData.length,
          5
        );
        const followUpRate = this.addDifferentialPrivacyNoise(
          culturalData.filter((o3) => o3.followUpEngagement).length / culturalData.length * 100,
          1
        );
        const satisfactionScores = culturalData.filter((o3) => o3.anonymizedFeedback > 0).map((o3) => o3.anonymizedFeedback);
        const satisfactionScore = satisfactionScores.length > 0 ? this.addDifferentialPrivacyNoise(
          satisfactionScores.reduce((sum, s3) => sum + s3, 0) / satisfactionScores.length,
          0.2
        ) : 0;
        const margin = 1.96 * Math.sqrt(successRate * (100 - successRate) / culturalData.length);
        return {
          language,
          culturalGroup,
          totalInterventions: culturalData.length,
          averageRiskReduction,
          successRate,
          averageSessionDuration,
          followUpRate,
          satisfactionScore,
          confidenceInterval: [
            Math.max(0, successRate - margin),
            Math.min(100, successRate + margin)
          ],
          privacyNoise: this.EPSILON
        };
      }
      /**
       * Generate global metrics with privacy preservation
       */
      generateGlobalMetrics() {
        const totalInterventions = this.addDifferentialPrivacyNoise(
          this.analyticsData.length,
          1
        );
        const globalEffectiveness = this.analyticsData.length > 0 ? this.addDifferentialPrivacyNoise(
          this.analyticsData.reduce(
            (sum, o3) => sum + Math.max(0, o3.initialRiskLevel - o3.finalRiskLevel),
            0
          ) / this.analyticsData.length,
          0.1
        ) : 0;
        const languageDistribution = {};
        const languages = [...new Set(this.analyticsData.map((o3) => o3.language))];
        for (const language of languages) {
          const count = this.analyticsData.filter((o3) => o3.language === language).length;
          languageDistribution[language] = this.addDifferentialPrivacyNoise(count, 1);
        }
        const culturalDistribution = {};
        const cultures = [...new Set(this.analyticsData.map((o3) => o3.culturalContext))];
        for (const culture of cultures) {
          const count = this.analyticsData.filter((o3) => o3.culturalContext === culture).length;
          culturalDistribution[culture] = this.addDifferentialPrivacyNoise(count, 1);
        }
        return {
          totalInterventions,
          averageEffectiveness: globalEffectiveness,
          languageDistribution,
          culturalDistribution
        };
      }
      /**
       * Generate cultural comparisons
       */
      generateCulturalComparisons() {
        const culturalComparisons = [];
        const languages = [...new Set(this.analyticsData.map((o3) => o3.language))];
        for (const language of languages) {
          const culturesForLanguage = [...new Set(
            this.analyticsData.filter((o3) => o3.language === language).map((o3) => o3.culturalContext)
          )];
          for (const culture of culturesForLanguage) {
            const metrics = this.calculateCulturalMetrics(language, culture);
            if (metrics) {
              culturalComparisons.push(metrics);
            }
          }
        }
        return culturalComparisons;
      }
      /**
       * Generate intervention type effectiveness metrics
       */
      generateInterventionTypeEffectiveness() {
        const interventionTypes = [...new Set(this.analyticsData.map((o3) => o3.interventionType))];
        const interventionTypeEffectiveness = {};
        for (const type of interventionTypes) {
          const typeData = this.analyticsData.filter((o3) => o3.interventionType === type);
          if (typeData.length >= this.MIN_COHORT_SIZE) {
            const effectiveness = typeData.reduce(
              (sum, o3) => sum + Math.max(0, o3.initialRiskLevel - o3.finalRiskLevel),
              0
            ) / typeData.length;
            interventionTypeEffectiveness[type] = this.addDifferentialPrivacyNoise(
              effectiveness,
              0.1
            );
          }
        }
        return interventionTypeEffectiveness;
      }
      /**
       * Generate temporal trends (last 7 weeks)
       */
      generateTemporalTrends() {
        const temporalTrends = [];
        const now = Date.now();
        for (let i3 = 6; i3 >= 0; i3--) {
          const periodStart = now - (i3 + 1) * 7 * 24 * 60 * 60 * 1e3;
          const periodEnd = now - i3 * 7 * 24 * 60 * 60 * 1e3;
          const periodData = this.analyticsData.filter(
            (o3) => o3.timestamp >= periodStart && o3.timestamp < periodEnd
          );
          if (periodData.length > 0) {
            const effectiveness = periodData.reduce(
              (sum, o3) => sum + Math.max(0, o3.initialRiskLevel - o3.finalRiskLevel),
              0
            ) / periodData.length;
            temporalTrends.push({
              period: new Date(periodStart).toISOString().split("T")[0],
              effectiveness: this.addDifferentialPrivacyNoise(effectiveness, 0.1),
              volume: this.addDifferentialPrivacyNoise(periodData.length, 1)
            });
          }
        }
        return temporalTrends;
      }
      /**
       * Generate comprehensive analytics insights
       */
      async generateAnalyticsInsights() {
        try {
          const globalMetrics = this.generateGlobalMetrics();
          const culturalComparisons = this.generateCulturalComparisons();
          const interventionTypeEffectiveness = this.generateInterventionTypeEffectiveness();
          const temporalTrends = this.generateTemporalTrends();
          return {
            globalMetrics,
            culturalComparisons,
            interventionTypeEffectiveness,
            temporalTrends,
            privacyMetrics: {
              totalBudgetConsumed: this.privacyBudgetUsed,
              averageNoiseLevel: this.EPSILON,
              dataRetentionCompliance: true
            }
          };
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to generate insights:", error44);
          throw error44;
        }
      }
      /**
       * Export anonymized analytics for research (with additional privacy measures)
       */
      async exportAnonymizedData() {
        try {
          const insights = await this.generateAnalyticsInsights();
          return {
            culturalEffectiveness: insights.culturalComparisons,
            aggregatedInsights: insights,
            privacyCompliance: {
              differentialPrivacyApplied: true,
              dataAnonymized: true,
              retentionCompliant: true,
              minimumCohortSizeEnforced: true
            }
          };
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to export anonymized data:", error44);
          throw error44;
        }
      }
      /**
       * Generate privacy-preserving effectiveness report
       */
      async generateEffectivenessReport() {
        try {
          const insights = await this.generateAnalyticsInsights();
          const totalInterventions = Math.round(insights.globalMetrics.totalInterventions);
          const avgEffectiveness = (insights.globalMetrics.averageEffectiveness * 100).toFixed(1);
          const summary = `Analysis of ${totalInterventions} anonymized crisis interventions shows an average risk reduction of ${avgEffectiveness}%. Data spans ${Object.keys(insights.globalMetrics.languageDistribution).length} languages and ${Object.keys(insights.globalMetrics.culturalDistribution).length} cultural contexts.`;
          const culturalInsights = [];
          const topCultures = insights.culturalComparisons.sort((a3, b3) => b3.successRate - a3.successRate).slice(0, 3);
          for (const culture of topCultures) {
            culturalInsights.push(
              `${culture.language} speakers in ${culture.culturalGroup} show ${culture.successRate.toFixed(1)}% intervention success rate with ${culture.averageRiskReduction.toFixed(2)} average risk reduction.`
            );
          }
          const recommendations = [
            "Consider culturally-adapted interventions for communities with lower effectiveness scores",
            "Expand successful intervention types to underperforming cultural contexts",
            "Investigate factors contributing to high-performing cultural interventions",
            "Develop targeted training for cultural sensitivity in crisis intervention"
          ];
          const limitations = [
            `Differential privacy noise (\u03B5=${this.EPSILON}) added to all metrics for privacy protection`,
            `Minimum cohort size of ${this.MIN_COHORT_SIZE} enforced to prevent re-identification`,
            "Individual outcomes cannot be traced to specific users",
            `Data automatically deleted after ${this.MAX_RETENTION_DAYS} days for HIPAA compliance`
          ];
          return {
            summary,
            culturalInsights,
            recommendations,
            limitations
          };
        } catch (error44) {
          console.error("[Privacy Analytics] Failed to generate effectiveness report:", error44);
          throw error44;
        }
      }
      /**
       * Get current privacy metrics
       */
      getPrivacyMetrics() {
        return {
          budgetUsed: this.privacyBudgetUsed,
          budgetRemaining: Math.max(0, 10 - this.privacyBudgetUsed),
          dataPoints: this.analyticsData.length,
          retentionCompliance: true
        };
      }
      /**
       * Reset privacy budget (should be done periodically)
       */
      resetPrivacyBudget() {
        this.privacyBudgetUsed = 0;
        console.log("[Privacy Analytics] Privacy budget reset");
      }
    };
    privacyPreservingAnalyticsService = new PrivacyPreservingAnalyticsService();
  }
});

// src/services/culturalCrisisDetectionService.ts
var CulturalCrisisDetectionService, culturalCrisisDetectionService;
var init_culturalCrisisDetectionService = __esm({
  "src/services/culturalCrisisDetectionService.ts"() {
    "use strict";
    init_enhancedAiCrisisDetectionService();
    init_culturalContextService();
    init_privacyPreservingAnalyticsService();
    CulturalCrisisDetectionService = class {
      CULTURAL_BIAS_REDUCTION_FACTOR = 0.2;
      // 20% bias reduction
      MIN_CULTURAL_CONFIDENCE = 0.6;
      // Minimum confidence for cultural adjustments
      // Cultural crisis expression patterns by region
      culturalCrisisPatterns = {
        "Western": [
          {
            indicator: "I am depressed",
            weight: 0.7,
            culturalRegions: ["Western"],
            communicationStyle: "direct",
            expressionType: "verbal",
            culturalSignificance: 0.8
          },
          {
            indicator: "I need help",
            weight: 0.8,
            culturalRegions: ["Western"],
            communicationStyle: "direct",
            expressionType: "verbal",
            culturalSignificance: 0.9
          },
          {
            indicator: "feeling overwhelmed",
            weight: 0.6,
            culturalRegions: ["Western"],
            communicationStyle: "direct",
            expressionType: "verbal",
            culturalSignificance: 0.7
          }
        ],
        "Hispanic/Latino": [
          {
            indicator: "me siento mal",
            weight: 0.8,
            culturalRegions: ["Hispanic/Latino", "Brazilian"],
            communicationStyle: "contextual",
            expressionType: "somatic",
            culturalSignificance: 0.9
          },
          {
            indicator: "no puedo m\xE1s",
            weight: 0.9,
            culturalRegions: ["Hispanic/Latino"],
            communicationStyle: "contextual",
            expressionType: "verbal",
            culturalSignificance: 0.9
          },
          {
            indicator: "dolor en el coraz\xF3n",
            weight: 0.7,
            culturalRegions: ["Hispanic/Latino"],
            communicationStyle: "metaphorical",
            expressionType: "somatic",
            culturalSignificance: 0.8
          },
          {
            indicator: "estoy en las manos de Dios",
            weight: 0.6,
            culturalRegions: ["Hispanic/Latino"],
            communicationStyle: "indirect",
            expressionType: "metaphorical",
            culturalSignificance: 0.7
          }
        ],
        "Arabic": [
          {
            indicator: "\u0627\u0644\u0644\u0647 \u064A\u0633\u0627\u0639\u062F\u0646\u064A",
            weight: 0.8,
            culturalRegions: ["Arabic"],
            communicationStyle: "indirect",
            expressionType: "verbal",
            culturalSignificance: 0.9
          },
          {
            indicator: "\u0642\u0644\u0628\u064A \u0645\u0643\u0633\u0648\u0631",
            weight: 0.7,
            culturalRegions: ["Arabic"],
            communicationStyle: "metaphorical",
            expressionType: "somatic",
            culturalSignificance: 0.8
          },
          {
            indicator: "\u062A\u0639\u0628\u0627\u0646 \u0646\u0641\u0633\u064A\u0627\u064B",
            weight: 0.9,
            culturalRegions: ["Arabic"],
            communicationStyle: "indirect",
            expressionType: "somatic",
            culturalSignificance: 0.9
          },
          {
            indicator: "\u0645\u0634 \u0642\u0627\u062F\u0631 \u0623\u0643\u0645\u0644",
            weight: 0.8,
            culturalRegions: ["Arabic"],
            communicationStyle: "indirect",
            expressionType: "verbal",
            culturalSignificance: 0.8
          }
        ],
        "Chinese": [
          {
            indicator: "\u5FC3\u91CC\u4E0D\u8212\u670D",
            weight: 0.8,
            culturalRegions: ["Chinese"],
            communicationStyle: "indirect",
            expressionType: "somatic",
            culturalSignificance: 0.9
          },
          {
            indicator: "\u538B\u529B\u5F88\u5927",
            weight: 0.7,
            culturalRegions: ["Chinese"],
            communicationStyle: "indirect",
            expressionType: "somatic",
            culturalSignificance: 0.8
          },
          {
            indicator: "\u60F3\u4E0D\u5F00",
            weight: 0.9,
            culturalRegions: ["Chinese"],
            communicationStyle: "indirect",
            expressionType: "metaphorical",
            culturalSignificance: 0.9
          },
          {
            indicator: "\u6D3B\u7740\u6CA1\u610F\u601D",
            weight: 0.9,
            culturalRegions: ["Chinese"],
            communicationStyle: "indirect",
            expressionType: "verbal",
            culturalSignificance: 0.8
          }
        ],
        "Vietnamese": [
          {
            indicator: "t\xF4i bu\u1ED3n l\u1EAFm",
            weight: 0.7,
            culturalRegions: ["Vietnamese"],
            communicationStyle: "indirect",
            expressionType: "verbal",
            culturalSignificance: 0.8
          },
          {
            indicator: "kh\xF4ng c\xF3 hy v\u1ECDng",
            weight: 0.9,
            culturalRegions: ["Vietnamese"],
            communicationStyle: "indirect",
            expressionType: "verbal",
            culturalSignificance: 0.9
          },
          {
            indicator: "\u0111au l\xF2ng qu\xE1",
            weight: 0.8,
            culturalRegions: ["Vietnamese"],
            communicationStyle: "indirect",
            expressionType: "somatic",
            culturalSignificance: 0.8
          }
        ],
        "Filipino": [
          {
            indicator: "napakahirap",
            weight: 0.8,
            culturalRegions: ["Filipino"],
            communicationStyle: "contextual",
            expressionType: "verbal",
            culturalSignificance: 0.8
          },
          {
            indicator: "walang pag-asa",
            weight: 0.9,
            culturalRegions: ["Filipino"],
            communicationStyle: "contextual",
            expressionType: "verbal",
            culturalSignificance: 0.9
          },
          {
            indicator: "sakit sa puso",
            weight: 0.7,
            culturalRegions: ["Filipino"],
            communicationStyle: "metaphorical",
            expressionType: "somatic",
            culturalSignificance: 0.8
          }
        ]
      };
      // Communication patterns for crisis expression
      crisisCommunicationPatterns = [
        // Western patterns
        {
          pattern: "I am thinking about suicide",
          culturalContext: ["Western"],
          implicitness: 0.1,
          stigmaLevel: "medium",
          familyInvolvementImplied: false,
          helpSeekingStyle: "direct"
        },
        // Hispanic/Latino patterns
        {
          pattern: "La familia no puede saber",
          culturalContext: ["Hispanic/Latino"],
          implicitness: 0.7,
          stigmaLevel: "high",
          familyInvolvementImplied: true,
          helpSeekingStyle: "indirect"
        },
        {
          pattern: "Dios me ayudar\xE1",
          culturalContext: ["Hispanic/Latino", "Filipino"],
          implicitness: 0.8,
          stigmaLevel: "high",
          familyInvolvementImplied: false,
          helpSeekingStyle: "religious"
        },
        // Arabic patterns
        {
          pattern: "\u0625\u0646 \u0634\u0627\u0621 \u0627\u0644\u0644\u0647 \u0633\u064A\u0643\u0648\u0646 \u0623\u0641\u0636\u0644",
          culturalContext: ["Arabic"],
          implicitness: 0.9,
          stigmaLevel: "high",
          familyInvolvementImplied: false,
          helpSeekingStyle: "religious"
        },
        {
          pattern: "\u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0644\u0627 \u062A\u0641\u0647\u0645",
          culturalContext: ["Arabic"],
          implicitness: 0.6,
          stigmaLevel: "high",
          familyInvolvementImplied: true,
          helpSeekingStyle: "indirect"
        },
        // Chinese patterns
        {
          pattern: "\u5BB6\u4EBA\u4F1A\u62C5\u5FC3",
          culturalContext: ["Chinese"],
          implicitness: 0.8,
          stigmaLevel: "high",
          familyInvolvementImplied: true,
          helpSeekingStyle: "indirect"
        },
        {
          pattern: "\u4E0D\u597D\u610F\u601D\u8BF4",
          culturalContext: ["Chinese", "Vietnamese"],
          implicitness: 0.9,
          stigmaLevel: "high",
          familyInvolvementImplied: false,
          helpSeekingStyle: "indirect"
        },
        // Vietnamese patterns
        {
          pattern: "gia \u0111\xECnh s\u1EBD x\u1EA5u h\u1ED5",
          culturalContext: ["Vietnamese"],
          implicitness: 0.8,
          stigmaLevel: "high",
          familyInvolvementImplied: true,
          helpSeekingStyle: "indirect"
        },
        // Filipino patterns
        {
          pattern: "nakakahiya sa pamilya",
          culturalContext: ["Filipino"],
          implicitness: 0.7,
          stigmaLevel: "high",
          familyInvolvementImplied: true,
          helpSeekingStyle: "community"
        }
      ];
      /**
       * Analyze crisis with cultural context awareness and bias mitigation
       */
      async analyzeCrisisWithCulturalContext(text5, userId, languageCode = "en", culturalContext) {
        const baseAnalysis = await enhancedAICrisisDetectionService.analyzeCrisisWithML(
          text5,
          { userId, languageCode, culturalContext }
        );
        const cultureInfo = culturalContextService.getCulturalContext(languageCode);
        const culturalRegion = culturalContext || cultureInfo.region;
        const culturalIndicators = this.detectCulturalCrisisIndicators(text5, culturalRegion);
        const communicationPatterns = this.analyzeCommunicationPatterns(text5, culturalRegion);
        const culturalBiasAdjustments = this.calculateCulturalBiasAdjustments(
          baseAnalysis,
          cultureInfo,
          culturalIndicators,
          communicationPatterns
        );
        const culturallyAdjustedRisk = this.calculateCulturallyAdjustedRisk(
          baseAnalysis.realTimeRisk?.immediateRisk || 0,
          culturalBiasAdjustments,
          cultureInfo
        );
        const culturalInterventions = this.generateCulturalInterventions(
          baseAnalysis,
          cultureInfo,
          culturalIndicators,
          languageCode
        );
        const culturalResult = {
          ...baseAnalysis,
          culturalIndicators,
          communicationPatterns,
          culturalBiasAdjustments,
          culturallyAdjustedRisk,
          culturalInterventions,
          // Override confidence with cultural adjustments
          confidence: Math.max(
            baseAnalysis.confidence,
            culturallyAdjustedRisk.culturalConfidence
          ),
          // Update bias adjustments to include cultural factors
          biasAdjustments: [
            ...baseAnalysis.biasAdjustments || [],
            ...culturalBiasAdjustments.map((adj) => ({
              type: adj.factor,
              description: adj.explanation,
              severity: adj.adjustment
            }))
          ]
        };
        await this.logCulturalAnalytics(culturalResult, userId);
        return culturalResult;
      }
      /**
       * Detect cultural crisis indicators in text
       */
      detectCulturalCrisisIndicators(text5, culturalRegion) {
        const detectedIndicators = [];
        const lowerText = text5.toLowerCase();
        const patterns = this.culturalCrisisPatterns[culturalRegion] || this.culturalCrisisPatterns["Western"];
        for (const pattern of patterns) {
          if (lowerText.includes(pattern.indicator.toLowerCase())) {
            detectedIndicators.push(pattern);
          }
        }
        for (const [region, patterns2] of Object.entries(this.culturalCrisisPatterns)) {
          if (region !== culturalRegion) {
            for (const pattern of patterns2) {
              if (lowerText.includes(pattern.indicator.toLowerCase())) {
                detectedIndicators.push({
                  ...pattern,
                  weight: pattern.weight * 0.6,
                  culturalSignificance: pattern.culturalSignificance * 0.7
                });
              }
            }
          }
        }
        return detectedIndicators;
      }
      /**
       * Analyze communication patterns for cultural context
       */
      analyzeCommunicationPatterns(text5, culturalRegion) {
        const detectedPatterns = [];
        const lowerText = text5.toLowerCase();
        for (const pattern of this.crisisCommunicationPatterns) {
          if (pattern.culturalContext.includes(culturalRegion)) {
            if (lowerText.includes(pattern.pattern.toLowerCase())) {
              detectedPatterns.push(pattern);
            }
          }
        }
        return detectedPatterns;
      }
      /**
       * Calculate cultural bias adjustments
       */
      calculateCulturalBiasAdjustments(_baseAnalysis, cultureInfo, culturalIndicators, communicationPatterns) {
        const adjustments = [];
        if (cultureInfo.mentalHealthStigma === "high") {
          adjustments.push({
            factor: "Mental Health Stigma",
            adjustment: 0.25,
            // Increase risk detection sensitivity
            confidence: 0.8,
            culturalRelevance: [cultureInfo.region],
            explanation: "Adjusted for high mental health stigma - implicit help-seeking behaviors weighted higher"
          });
        }
        if (cultureInfo.communicationStyle === "indirect") {
          adjustments.push({
            factor: "Indirect Communication Style",
            adjustment: 0.2,
            // Increase sensitivity for indirect expressions
            confidence: 0.7,
            culturalRelevance: [cultureInfo.region],
            explanation: "Adjusted for indirect communication style - metaphorical and implicit expressions weighted higher"
          });
        }
        if (cultureInfo.familyInvolvement === "family-centered") {
          const familyRelatedPatterns = communicationPatterns.filter((p3) => p3.familyInvolvementImplied);
          if (familyRelatedPatterns.length > 0) {
            adjustments.push({
              factor: "Family-Centered Culture",
              adjustment: 0.15,
              confidence: 0.9,
              culturalRelevance: [cultureInfo.region],
              explanation: "Adjusted for family-centered culture - family-related crisis expressions detected"
            });
          }
        }
        const somaticIndicators = culturalIndicators.filter((i3) => i3.expressionType === "somatic");
        if (somaticIndicators.length > 0) {
          adjustments.push({
            factor: "Somatic Expression",
            adjustment: 0.18,
            confidence: 0.8,
            culturalRelevance: [cultureInfo.region],
            explanation: "Adjusted for somatic expression of mental health symptoms - physical symptom descriptions weighted appropriately"
          });
        }
        const religiousPatterns = communicationPatterns.filter((p3) => p3.helpSeekingStyle === "religious");
        if (religiousPatterns.length > 0) {
          adjustments.push({
            factor: "Religious Coping",
            adjustment: -0.1,
            // May indicate coping mechanism
            confidence: 0.6,
            culturalRelevance: [cultureInfo.region],
            explanation: "Adjusted for religious coping expressions - spiritual references may indicate resilience factors"
          });
        }
        return adjustments;
      }
      /**
       * Calculate culturally-adjusted risk score
       */
      calculateCulturallyAdjustedRisk(originalRisk, adjustments, _cultureInfo) {
        let adjustedRisk = originalRisk;
        const adjustmentFactors = [];
        for (const adjustment of adjustments) {
          const weightedAdjustment = adjustment.adjustment * adjustment.confidence;
          adjustedRisk = Math.max(0, Math.min(100, adjustedRisk + weightedAdjustment * 100));
          adjustmentFactors.push(adjustment.factor);
        }
        adjustedRisk = adjustedRisk * (1 - this.CULTURAL_BIAS_REDUCTION_FACTOR);
        const culturalConfidence = Math.min(
          1,
          adjustments.reduce((sum, adj) => sum + adj.confidence, 0) / Math.max(1, adjustments.length)
        );
        return {
          originalRisk,
          adjustedRisk: Math.round(adjustedRisk),
          culturalConfidence: Math.max(this.MIN_CULTURAL_CONFIDENCE, culturalConfidence),
          adjustmentFactors
        };
      }
      /**
       * Generate culturally-appropriate interventions
       */
      generateCulturalInterventions(_analysis, cultureInfo, culturalIndicators, languageCode) {
        let familyInvolvement;
        if (cultureInfo.familyInvolvement === "family-centered") {
          familyInvolvement = "high";
        } else if (cultureInfo.familyInvolvement === "community-based") {
          familyInvolvement = "medium";
        } else {
          familyInvolvement = "low";
        }
        const communityApproach = cultureInfo.familyInvolvement === "community-based" || cultureInfo.region === "Filipino";
        const religiousIndicators = culturalIndicators.filter(
          (i3) => i3.indicator.includes("Dios") || i3.indicator.includes("\u0627\u0644\u0644\u0647") || i3.indicator.includes("God") || i3.indicator.includes("prayer")
        );
        const religiousConsideration = religiousIndicators.length > 0 || ["Arabic", "Hispanic/Latino", "Filipino"].includes(cultureInfo.region);
        const culturalResources = this.getCulturalResources(cultureInfo.region);
        const languageSpecificResources = this.getLanguageSpecificResources(languageCode);
        return {
          familyInvolvement,
          communityApproach,
          religiousConsideration,
          culturalResources,
          languageSpecificResources
        };
      }
      /**
       * Get cultural resources for specific region
       */
      getCulturalResources(region) {
        const resources = {
          "Western": [
            "Crisis Text Line: Text HOME to 741741",
            "National Suicide Prevention Lifeline: 988",
            "Psychology Today therapist finder"
          ],
          "Hispanic/Latino": [
            "L\xEDnea Nacional de Prevenci\xF3n del Suicidio: 988",
            "Crisis Text Line: Env\xEDa HOLA al 741741",
            "National Alliance on Mental Illness (NAMI) en Espa\xF1ol",
            "Therapy for Latinx community resources"
          ],
          "Arabic": [
            "Muslim Mental Health resources",
            "Arab American Family Services",
            "Culturally competent Arabic-speaking therapists",
            "Islamic counseling services"
          ],
          "Chinese": [
            "Chinese Mental Health Association",
            "Asian Mental Health Collective",
            "Mandarin/Cantonese speaking crisis counselors",
            "Traditional Chinese Medicine integration resources"
          ],
          "Vietnamese": [
            "Vietnamese Community Health Promotion Project",
            "Asian Mental Health resources",
            "Vietnamese-speaking crisis support",
            "Community-based mental health services"
          ],
          "Filipino": [
            "Filipino Mental Health resources",
            "Kapamilya support networks",
            "Filipino-American community mental health",
            "Cultural counseling services"
          ]
        };
        return resources[region] || resources["Western"];
      }
      /**
       * Get language-specific resources
       */
      getLanguageSpecificResources(languageCode) {
        const resources = {
          "es": [
            "Crisis chat en espa\xF1ol disponible 24/7",
            "Consejeros biling\xFCes especializados",
            "Recursos de salud mental en espa\xF1ol"
          ],
          "ar": [
            "\u062E\u062F\u0645\u0627\u062A \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0628\u0627\u0644\u0644\u063A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
            "\u0645\u0633\u062A\u0634\u0627\u0631\u0648\u0646 \u064A\u062A\u062D\u062F\u062B\u0648\u0646 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
            "\u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629 \u0627\u0644\u062B\u0642\u0627\u0641\u064A\u0629"
          ],
          "zh": [
            "\u4E2D\u6587\u5371\u673A\u5E72\u9884\u670D\u52A1",
            "\u8BF4\u4E2D\u6587\u7684\u5FC3\u7406\u5065\u5EB7\u4E13\u5BB6",
            "\u6587\u5316\u654F\u611F\u7684\u5FC3\u7406\u5065\u5EB7\u8D44\u6E90"
          ],
          "vi": [
            "D\u1ECBch v\u1EE5 can thi\u1EC7p kh\u1EE7ng ho\u1EA3ng ti\u1EBFng Vi\u1EC7t",
            "Chuy\xEAn gia t\xE2m l\xFD n\xF3i ti\u1EBFng Vi\u1EC7t",
            "T\xE0i nguy\xEAn s\u1EE9c kh\u1ECFe t\xE2m th\u1EA7n ph\xF9 h\u1EE3p v\u0103n h\xF3a"
          ],
          "tl": [
            "Crisis intervention sa Filipino",
            "Filipino-speaking mental health professionals",
            "Kultura-sensitibong mental health resources"
          ]
        };
        return resources[languageCode] || [];
      }
      /**
       * Log cultural analytics (privacy-preserving)
       */
      async logCulturalAnalytics(result, userId) {
        try {
          await privacyPreservingAnalyticsService.recordInterventionOutcome({
            sessionId: `cultural-crisis-${Date.now()}`,
            userToken: userId || "anonymous",
            language: result.culturalInterventions.languageSpecificResources[0] || "en",
            interventionType: "crisis-resources",
            initialRiskLevel: result.culturallyAdjustedRisk.originalRisk / 100,
            finalRiskLevel: result.culturallyAdjustedRisk.adjustedRisk / 100,
            sessionDuration: 1,
            // Analysis duration
            feedback: void 0
          });
          console.log("[Cultural Crisis Detection] Analytics logged for cultural context:", result.culturalContext);
        } catch (error44) {
          console.error("[Cultural Crisis Detection] Failed to log analytics:", error44);
        }
      }
      /**
       * Get cultural crisis detection metrics
       */
      async getCulturalMetrics(_culturalRegion) {
        try {
          const effectiveness = await privacyPreservingAnalyticsService.generateEffectivenessReport();
          return {
            totalAnalyses: effectiveness.culturalInsights.length,
            culturalAdaptations: effectiveness.culturalInsights.length,
            biasReductionRate: this.CULTURAL_BIAS_REDUCTION_FACTOR,
            culturalAccuracy: 0.85,
            // Estimated based on cultural adaptations
            regionSpecificMetrics: {
              summary: effectiveness.summary,
              insights: effectiveness.culturalInsights.length,
              recommendations: effectiveness.recommendations.length
            }
          };
        } catch (error44) {
          console.error("[Cultural Crisis Detection] Failed to get metrics:", error44);
          return {
            totalAnalyses: 0,
            culturalAdaptations: 0,
            biasReductionRate: this.CULTURAL_BIAS_REDUCTION_FACTOR,
            culturalAccuracy: 0,
            regionSpecificMetrics: {}
          };
        }
      }
      /**
       * Train cultural patterns from user feedback (privacy-preserving)
       */
      async updateCulturalPatterns(feedback) {
        console.log("[Cultural Crisis Detection] Cultural pattern update requested for region:", feedback.culturalRegion);
        const patternData = {
          textLength: feedback.text.length,
          culturalRegion: feedback.culturalRegion,
          accuracyGap: Math.abs(feedback.actualRisk - feedback.predictedRisk),
          culturalAppropriateness: feedback.culturallyAppropriate,
          timestamp: Date.now()
        };
        const existingPatterns = JSON.parse(localStorage.getItem("cultural_patterns_learning") || "[]");
        existingPatterns.push(patternData);
        if (existingPatterns.length > 500) {
          existingPatterns.splice(0, existingPatterns.length - 500);
        }
        localStorage.setItem("cultural_patterns_learning", JSON.stringify(existingPatterns));
      }
    };
    culturalCrisisDetectionService = new CulturalCrisisDetectionService();
  }
});

// src/hooks/useCulturalCrisisDetection.ts
function useCulturalCrisisDetection(options2 = {}) {
  const {
    autoAnalyze = true,
    minAnalysisLength = 10,
    maxHistorySize = 50,
    debounceMs = 1e3,
    languageCode = "en",
    culturalContext,
    userId,
    onCrisisDetected,
    onCulturalBiasDetected,
    onCulturalInterventionRecommended
  } = options2;
  const [state, setState] = (0, import_react13.useState)({
    isAnalyzing: false,
    lastAnalysis: null,
    culturallyAdjustedRisk: 0,
    biasAdjustments: [],
    culturalInterventions: null,
    analysisHistory: [],
    culturalMetrics: {
      totalAnalyses: 0,
      biasReductionRate: 0.2,
      culturalAccuracy: 0.85
    }
  });
  const [culturalAlert, setCulturalAlert] = (0, import_react13.useState)({
    show: false,
    severity: "none",
    message: "",
    culturallyAdapted: false,
    culturalFactors: [],
    interventions: {
      immediate: [],
      cultural: [],
      familyBased: [],
      communityBased: []
    },
    emergencyMode: false
  });
  const debounceRef = (0, import_react13.useRef)(null);
  const lastAnalysisRef = (0, import_react13.useRef)("");
  const analyzeCulturalCrisis = (0, import_react13.useCallback)(async (text5, options3 = {}) => {
    if (!text5 || text5.length < minAnalysisLength) {
      return null;
    }
    if (!options3.immediate && lastAnalysisRef.current === text5) {
      return state.lastAnalysis;
    }
    setState((prev) => ({ ...prev, isAnalyzing: true }));
    try {
      const analysis = await culturalCrisisDetectionService.analyzeCrisisWithCulturalContext(
        text5,
        userId,
        languageCode,
        options3.culturalOverride || culturalContext
      );
      setState((prev) => {
        const newHistory = options3.trackHistory ? [...prev.analysisHistory, analysis].slice(-maxHistorySize) : prev.analysisHistory;
        return {
          ...prev,
          lastAnalysis: analysis,
          culturallyAdjustedRisk: analysis.culturallyAdjustedRisk?.adjustedRisk || 0,
          biasAdjustments: analysis.culturalBiasAdjustments?.map((adj) => adj.factor) || [],
          culturalInterventions: analysis.culturalInterventions || {},
          analysisHistory: newHistory,
          culturalMetrics: {
            ...prev.culturalMetrics,
            totalAnalyses: prev.culturalMetrics.totalAnalyses + 1
          }
        };
      });
      updateCulturalAlert(analysis);
      if (analysis.hasCrisisIndicators && onCrisisDetected) {
        onCrisisDetected(analysis);
      }
      if (analysis.culturalBiasAdjustments?.length > 0 && onCulturalBiasDetected) {
        onCulturalBiasDetected(analysis.culturalBiasAdjustments.map((adj) => adj.factor));
      }
      if (analysis.culturalInterventions && onCulturalInterventionRecommended) {
        onCulturalInterventionRecommended(analysis.culturalInterventions);
      }
      lastAnalysisRef.current = text5;
      return analysis;
    } catch (error44) {
      console.error("[Cultural Crisis Detection Hook] Analysis failed:", error44);
      return null;
    } finally {
      setState((prev) => ({ ...prev, isAnalyzing: false }));
    }
  }, [
    minAnalysisLength,
    userId,
    languageCode,
    culturalContext,
    maxHistorySize,
    onCrisisDetected,
    onCulturalBiasDetected,
    onCulturalInterventionRecommended
  ]);
  const analyzeWithDebounce = (0, import_react13.useCallback)((text5) => {
    if (debounceRef.current) {
      clearTimeout(debounceRef.current);
    }
    debounceRef.current = setTimeout(() => {
      if (autoAnalyze) {
        analyzeCulturalCrisis(text5, { trackHistory: true });
      }
    }, debounceMs);
  }, [analyzeCulturalCrisis, autoAnalyze, debounceMs]);
  const updateCulturalAlert = (0, import_react13.useCallback)((analysis) => {
    const riskLevel = analysis.culturallyAdjustedRisk?.adjustedRisk || 0;
    let severity = "none";
    let message = "";
    let emergencyMode = false;
    if (riskLevel >= 80) {
      severity = "critical";
      message = "Critical crisis indicators detected with cultural adaptations applied";
      emergencyMode = true;
    } else if (riskLevel >= 60) {
      severity = "high";
      message = "High-risk crisis patterns identified across cultural contexts";
    } else if (riskLevel >= 40) {
      severity = "medium";
      message = "Moderate crisis indicators with cultural considerations";
    } else if (riskLevel >= 20) {
      severity = "low";
      message = "Low-level concern detected with cultural sensitivity";
    }
    const culturalFactors = [
      ...analysis.culturalBiasAdjustments.map((adj) => adj.factor),
      ...analysis.culturalIndicators.map((ind) => `${ind.culturalRegions.join(", ")} expression pattern`)
    ];
    const interventions = {
      immediate: analysis.realTimeRisk?.recommendedInterventions?.filter((i3) => i3.priority <= 2)?.map((i3) => i3.description) || [],
      cultural: analysis.culturalInterventions.culturalResources,
      familyBased: analysis.culturalInterventions.familyInvolvement !== "none" ? ["Consider family involvement based on cultural preferences"] : [],
      communityBased: analysis.culturalInterventions.communityApproach ? ["Engage community-based support systems"] : []
    };
    setCulturalAlert({
      show: severity !== "none",
      severity,
      message,
      culturallyAdapted: analysis.culturalBiasAdjustments.length > 0,
      culturalFactors,
      interventions,
      emergencyMode
    });
  }, []);
  const getCulturalInterventions = (0, import_react13.useCallback)((_culturalRegion) => {
    if (!state.lastAnalysis) return [];
    const interventions = state.lastAnalysis.culturalInterventions;
    if (!interventions) return [];
    let culturalSupport = [];
    if (interventions.familyInvolvement === "high") {
      culturalSupport.push("Family-centered crisis intervention approach recommended");
    }
    if (interventions.communityApproach) {
      culturalSupport.push("Community-based support systems available");
    }
    if (interventions.religiousConsideration) {
      culturalSupport.push("Faith-based counseling and spiritual support options");
    }
    if (interventions.culturalResources) {
      culturalSupport.push(...interventions.culturalResources);
    }
    if (interventions.languageSpecificResources) {
      culturalSupport.push(...interventions.languageSpecificResources);
    }
    return culturalSupport;
  }, [state.lastAnalysis]);
  const provideCulturalFeedback = (0, import_react13.useCallback)(async (text5, actualRisk, culturallyAppropriate) => {
    if (!state.lastAnalysis) return;
    await culturalCrisisDetectionService.updateCulturalPatterns({
      text: text5,
      culturalRegion: state.lastAnalysis.culturalContext,
      actualRisk,
      predictedRisk: state.lastAnalysis.culturallyAdjustedRisk?.adjustedRisk || 0,
      culturallyAppropriate
    });
    console.log("[Cultural Crisis Detection] Feedback provided for cultural improvement");
  }, [state.lastAnalysis]);
  const getCulturalMetrics = (0, import_react13.useCallback)(async () => {
    try {
      const metrics = await culturalCrisisDetectionService.getCulturalMetrics(culturalContext);
      setState((prev) => ({
        ...prev,
        culturalMetrics: {
          totalAnalyses: metrics.totalAnalyses,
          biasReductionRate: metrics.biasReductionRate,
          culturalAccuracy: metrics.culturalAccuracy
        }
      }));
      return metrics;
    } catch (error44) {
      console.error("[Cultural Crisis Detection] Failed to get metrics:", error44);
      return null;
    }
  }, [culturalContext]);
  const dismissCulturalAlert = (0, import_react13.useCallback)(() => {
    setCulturalAlert((prev) => ({ ...prev, show: false }));
  }, []);
  const clearAnalysisHistory = (0, import_react13.useCallback)(() => {
    setState((prev) => ({
      ...prev,
      analysisHistory: [],
      lastAnalysis: null,
      culturallyAdjustedRisk: 0,
      biasAdjustments: [],
      culturalInterventions: null
    }));
    lastAnalysisRef.current = "";
  }, []);
  (0, import_react13.useEffect)(() => {
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
      }
    };
  }, []);
  (0, import_react13.useEffect)(() => {
    getCulturalMetrics();
  }, [getCulturalMetrics]);
  return {
    // State
    isAnalyzing: state.isAnalyzing,
    lastAnalysis: state.lastAnalysis,
    culturallyAdjustedRisk: state.culturallyAdjustedRisk,
    biasAdjustments: state.biasAdjustments,
    culturalInterventions: state.culturalInterventions,
    analysisHistory: state.analysisHistory,
    culturalMetrics: state.culturalMetrics,
    culturalAlert,
    // Actions
    analyzeCulturalCrisis,
    analyzeWithDebounce,
    getCulturalInterventions,
    provideCulturalFeedback,
    getCulturalMetrics,
    dismissCulturalAlert,
    clearAnalysisHistory,
    // Computed values
    hasCulturalBias: state.biasAdjustments.length > 0,
    requiresFamilyInvolvement: state.culturalInterventions?.familyInvolvement === "high",
    needsCommunitySupport: state.culturalInterventions?.communityApproach || false,
    includesReligiousSupport: state.culturalInterventions?.religiousConsideration || false,
    currentCulturalContext: state.lastAnalysis?.culturalContext || culturalContext || "Western"
  };
}
var import_react13;
var init_useCulturalCrisisDetection = __esm({
  "src/hooks/useCulturalCrisisDetection.ts"() {
    "use strict";
    import_react13 = __toESM(require_react());
    init_culturalCrisisDetectionService();
  }
});

// src/components/CrisisAlert.css
var init_CrisisAlert = __esm({
  "src/components/CrisisAlert.css"() {
  }
});

// src/components/CrisisAlert.tsx
function CrisisAlert({
  show,
  severity,
  message,
  actions,
  resources,
  emergencyMode,
  onDismiss,
  onEmergencyCall,
  onCrisisChat,
  userType = "seeker"
}) {
  const [isVisible, setIsVisible] = (0, import_react14.useState)(false);
  const [timeShown, setTimeShown] = (0, import_react14.useState)(null);
  (0, import_react14.useEffect)(() => {
    if (show) {
      setIsVisible(true);
      setTimeShown(/* @__PURE__ */ new Date());
      const alertElement = document.getElementById("crisis-alert");
      if (alertElement) {
        alertElement.focus();
      }
    } else {
      const timer = setTimeout(() => setIsVisible(false), 300);
      return () => clearTimeout(timer);
    }
  }, [show]);
  const handleDismiss = () => {
    onDismiss();
  };
  const handleEmergencyCall = (contact) => {
    if (onEmergencyCall) {
      onEmergencyCall();
    }
    if (contact.type === "call") {
      window.open(`tel:${contact.number}`, "_self");
    } else if (contact.type === "text") {
      window.open(`sms:${contact.number}`, "_self");
    }
  };
  const handleCrisisChat = () => {
    if (onCrisisChat) {
      onCrisisChat();
    } else {
      window.open("https://suicidepreventionlifeline.org/chat/", "_blank");
    }
  };
  const getSeverityConfig = () => {
    switch (severity) {
      case "critical":
        return {
          className: "crisis-alert--critical",
          icon: AlertTriangle,
          color: "#dc2626",
          pulse: true,
          title: "IMMEDIATE ATTENTION NEEDED"
        };
      case "high":
        return {
          className: "crisis-alert--high",
          icon: AlertTriangle,
          color: "#ea580c",
          pulse: true,
          title: "Crisis Support Needed"
        };
      case "medium":
        return {
          className: "crisis-alert--medium",
          icon: ShieldIcon,
          color: "#d97706",
          pulse: false,
          title: "Support Recommended"
        };
      case "low":
        return {
          className: "crisis-alert--low",
          icon: ShieldIcon,
          color: "#059669",
          pulse: false,
          title: "Resources Available"
        };
      default:
        return {
          className: "crisis-alert--none",
          icon: ShieldIcon,
          color: "#6b7280",
          pulse: false,
          title: "Support Available"
        };
    }
  };
  const config2 = getSeverityConfig();
  const IconComponent = config2.icon;
  if (!isVisible) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
    "div",
    {
      className: [
        "crisis-alert",
        config2.className,
        show ? "crisis-alert--show" : "crisis-alert--hide"
      ].join(" "),
      role: "alert",
      "aria-live": "assertive",
      "aria-labelledby": "crisis-alert-title",
      id: "crisis-alert",
      tabIndex: -1,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__backdrop", onClick: emergencyMode ? void 0 : handleDismiss }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__container", children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__icon-container", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              IconComponent,
              {
                className: config2.pulse ? "crisis-alert__icon crisis-alert__icon--pulse" : "crisis-alert__icon",
                style: { color: config2.color },
                size: 24,
                "aria-hidden": "true"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__title-container", children: [
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h2", { id: "crisis-alert-title", className: "crisis-alert__title", children: config2.title }),
              timeShown && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__timestamp", children: [
                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Clock, { size: 14 }),
                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { children: timeShown.toLocaleTimeString() })
              ] })
            ] }),
            !emergencyMode && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              "button",
              {
                className: "crisis-alert__close",
                onClick: handleDismiss,
                "aria-label": "Close alert",
                type: "button",
                children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(X2, { size: 20 })
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__content", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("p", { className: "crisis-alert__message", children: message }) }),
          (severity === "critical" || severity === "high") && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__emergency-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h3", { className: "crisis-alert__section-title", children: "Immediate Help Available" }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__emergency-contacts", children: emergencyContacts.map((contact, index2) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
              "button",
              {
                className: `crisis-alert__emergency-contact ${contact.type === "call" ? "crisis-alert__emergency-contact--call" : contact.type === "text" ? "crisis-alert__emergency-contact--text" : "crisis-alert__emergency-contact--chat"}`,
                onClick: () => handleEmergencyCall(contact),
                type: "button",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__contact-icon", children: [
                    contact.type === "call" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Phone, { size: 20 }),
                    contact.type === "text" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(MessageCircle, { size: 20 }),
                    contact.type === "chat" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(MessageCircle, { size: 20 })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__contact-info", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__contact-name", children: contact.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__contact-number", children: contact.number }),
                    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__contact-description", children: contact.description }),
                    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__contact-availability", children: contact.available })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ExternalLink, { size: 16, className: "crisis-alert__contact-external" })
                ]
              },
              index2
            )) })
          ] }),
          actions.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__actions-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h3", { className: "crisis-alert__section-title", children: "Recommended Actions" }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("ul", { className: "crisis-alert__actions-list", children: actions.map((action, index2) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("li", { className: "crisis-alert__action-item", children: action }, index2)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__chat-section", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
            "button",
            {
              className: "crisis-alert__chat-button",
              onClick: handleCrisisChat,
              type: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(MessageCircle, { size: 20 }),
                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { children: "Start Crisis Chat" })
              ]
            }
          ) }),
          resources.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__resources-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("h3", { className: "crisis-alert__section-title", children: "Additional Resources" }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("ul", { className: "crisis-alert__resources-list", children: resources.map((resource, index2) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("li", { className: "crisis-alert__resource-item", children: resource }, index2)) })
          ] }),
          userType === "helper" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__helper-footer", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "crisis-alert__helper-note", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("strong", { children: "Helper Guidance:" }),
            " This situation requires professional intervention. Do not attempt to handle this crisis alone. Connect the person with professional crisis services immediately."
          ] }) }),
          !emergencyMode && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "crisis-alert__footer", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "button",
            {
              className: "crisis-alert__dismiss-button",
              onClick: handleDismiss,
              onKeyDown: (e4) => {
                if (e4.key === "Enter" || e4.key === " ") {
                  e4.preventDefault();
                  handleDismiss();
                }
              },
              type: "button",
              children: "I understand"
            }
          ) })
        ] })
      ]
    }
  );
}
var import_react14, import_jsx_runtime12, emergencyContacts;
var init_CrisisAlert2 = __esm({
  "src/components/CrisisAlert.tsx"() {
    "use strict";
    import_react14 = __toESM(require_react());
    init_icons_dynamic();
    init_CrisisAlert();
    import_jsx_runtime12 = __toESM(require_jsx_runtime());
    emergencyContacts = [
      {
        name: "988 Suicide & Crisis Lifeline",
        number: "988",
        description: "Free, confidential crisis counseling",
        available: "24/7",
        type: "call"
      },
      {
        name: "Crisis Text Line",
        number: "741741",
        description: "Text HOME for immediate support",
        available: "24/7",
        type: "text"
      },
      {
        name: "Emergency Services",
        number: "911",
        description: "Immediate emergency assistance",
        available: "24/7",
        type: "call"
      }
    ];
  }
});

// node_modules/void-elements/index.js
var require_void_elements = __commonJS({
  "node_modules/void-elements/index.js"(exports, module) {
    module.exports = {
      "area": true,
      "base": true,
      "br": true,
      "col": true,
      "embed": true,
      "hr": true,
      "img": true,
      "input": true,
      "link": true,
      "meta": true,
      "param": true,
      "source": true,
      "track": true,
      "wbr": true
    };
  }
});

// node_modules/html-parse-stringify/dist/html-parse-stringify.module.js
var import_void_elements;
var init_html_parse_stringify_module = __esm({
  "node_modules/html-parse-stringify/dist/html-parse-stringify.module.js"() {
    import_void_elements = __toESM(require_void_elements());
  }
});

// node_modules/react-i18next/dist/es/utils.js
var warn2, alreadyWarned2, warnOnce, loadedClb, loadNamespaces, loadLanguages, hasLoadedNamespace, isString2, isObject2;
var init_utils = __esm({
  "node_modules/react-i18next/dist/es/utils.js"() {
    warn2 = (i18n, code2, msg, rest) => {
      const args = [msg, {
        code: code2,
        ...rest || {}
      }];
      if (i18n?.services?.logger?.forward) {
        return i18n.services.logger.forward(args, "warn", "react-i18next::", true);
      }
      if (isString2(args[0])) args[0] = `react-i18next:: ${args[0]}`;
      if (i18n?.services?.logger?.warn) {
        i18n.services.logger.warn(...args);
      } else if (console?.warn) {
        console.warn(...args);
      }
    };
    alreadyWarned2 = {};
    warnOnce = (i18n, code2, msg, rest) => {
      if (isString2(msg) && alreadyWarned2[msg]) return;
      if (isString2(msg)) alreadyWarned2[msg] = /* @__PURE__ */ new Date();
      warn2(i18n, code2, msg, rest);
    };
    loadedClb = (i18n, cb) => () => {
      if (i18n.isInitialized) {
        cb();
      } else {
        const initialized = () => {
          setTimeout(() => {
            i18n.off("initialized", initialized);
          }, 0);
          cb();
        };
        i18n.on("initialized", initialized);
      }
    };
    loadNamespaces = (i18n, ns, cb) => {
      i18n.loadNamespaces(ns, loadedClb(i18n, cb));
    };
    loadLanguages = (i18n, lng, ns, cb) => {
      if (isString2(ns)) ns = [ns];
      if (i18n.options.preload && i18n.options.preload.indexOf(lng) > -1) return loadNamespaces(i18n, ns, cb);
      ns.forEach((n3) => {
        if (i18n.options.ns.indexOf(n3) < 0) i18n.options.ns.push(n3);
      });
      i18n.loadLanguages(lng, loadedClb(i18n, cb));
    };
    hasLoadedNamespace = (ns, i18n, options2 = {}) => {
      if (!i18n.languages || !i18n.languages.length) {
        warnOnce(i18n, "NO_LANGUAGES", "i18n.languages were undefined or empty", {
          languages: i18n.languages
        });
        return true;
      }
      return i18n.hasLoadedNamespace(ns, {
        lng: options2.lng,
        precheck: (i18nInstance2, loadNotPending) => {
          if (options2.bindI18n && options2.bindI18n.indexOf("languageChanging") > -1 && i18nInstance2.services.backendConnector.backend && i18nInstance2.isLanguageChangingTo && !loadNotPending(i18nInstance2.isLanguageChangingTo, ns)) return false;
        }
      });
    };
    isString2 = (obj) => typeof obj === "string";
    isObject2 = (obj) => typeof obj === "object" && obj !== null;
  }
});

// node_modules/react-i18next/dist/es/unescape.js
var matchHtmlEntity, htmlEntities, unescapeHtmlEntity, unescape;
var init_unescape = __esm({
  "node_modules/react-i18next/dist/es/unescape.js"() {
    matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
    htmlEntities = {
      "&amp;": "&",
      "&#38;": "&",
      "&lt;": "<",
      "&#60;": "<",
      "&gt;": ">",
      "&#62;": ">",
      "&apos;": "'",
      "&#39;": "'",
      "&quot;": '"',
      "&#34;": '"',
      "&nbsp;": " ",
      "&#160;": " ",
      "&copy;": "\xA9",
      "&#169;": "\xA9",
      "&reg;": "\xAE",
      "&#174;": "\xAE",
      "&hellip;": "\u2026",
      "&#8230;": "\u2026",
      "&#x2F;": "/",
      "&#47;": "/"
    };
    unescapeHtmlEntity = (m3) => htmlEntities[m3];
    unescape = (text5) => text5.replace(matchHtmlEntity, unescapeHtmlEntity);
  }
});

// node_modules/react-i18next/dist/es/defaults.js
var defaultOptions, setDefaults, getDefaults;
var init_defaults = __esm({
  "node_modules/react-i18next/dist/es/defaults.js"() {
    init_unescape();
    defaultOptions = {
      bindI18n: "languageChanged",
      bindI18nStore: "",
      transEmptyNodeValue: "",
      transSupportBasicHtmlNodes: true,
      transWrapTextNodes: "",
      transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
      useSuspense: true,
      unescape
    };
    setDefaults = (options2 = {}) => {
      defaultOptions = {
        ...defaultOptions,
        ...options2
      };
    };
    getDefaults = () => defaultOptions;
  }
});

// node_modules/react-i18next/dist/es/i18nInstance.js
var i18nInstance, setI18n, getI18n;
var init_i18nInstance = __esm({
  "node_modules/react-i18next/dist/es/i18nInstance.js"() {
    setI18n = (instance2) => {
      i18nInstance = instance2;
    };
    getI18n = () => i18nInstance;
  }
});

// node_modules/react-i18next/dist/es/TransWithoutContext.js
var import_react15;
var init_TransWithoutContext = __esm({
  "node_modules/react-i18next/dist/es/TransWithoutContext.js"() {
    import_react15 = __toESM(require_react(), 1);
    init_html_parse_stringify_module();
    init_utils();
    init_defaults();
    init_i18nInstance();
  }
});

// node_modules/react-i18next/dist/es/initReactI18next.js
var initReactI18next;
var init_initReactI18next = __esm({
  "node_modules/react-i18next/dist/es/initReactI18next.js"() {
    init_defaults();
    init_i18nInstance();
    initReactI18next = {
      type: "3rdParty",
      init(instance2) {
        setDefaults(instance2.options.react);
        setI18n(instance2);
      }
    };
  }
});

// node_modules/react-i18next/dist/es/context.js
var import_react16, I18nContext, ReportNamespaces;
var init_context = __esm({
  "node_modules/react-i18next/dist/es/context.js"() {
    import_react16 = __toESM(require_react(), 1);
    init_defaults();
    init_i18nInstance();
    init_initReactI18next();
    I18nContext = (0, import_react16.createContext)();
    ReportNamespaces = class {
      constructor() {
        this.usedNamespaces = {};
      }
      addUsedNamespaces(namespaces) {
        namespaces.forEach((ns) => {
          if (!this.usedNamespaces[ns]) this.usedNamespaces[ns] = true;
        });
      }
      getUsedNamespaces() {
        return Object.keys(this.usedNamespaces);
      }
    };
  }
});

// node_modules/react-i18next/dist/es/Trans.js
var import_react17;
var init_Trans = __esm({
  "node_modules/react-i18next/dist/es/Trans.js"() {
    import_react17 = __toESM(require_react(), 1);
    init_TransWithoutContext();
    init_context();
  }
});

// node_modules/react-i18next/dist/es/useTranslation.js
var import_react18, usePrevious, alwaysNewT, useMemoizedT, useTranslation;
var init_useTranslation = __esm({
  "node_modules/react-i18next/dist/es/useTranslation.js"() {
    import_react18 = __toESM(require_react(), 1);
    init_context();
    init_utils();
    usePrevious = (value, ignore2) => {
      const ref = (0, import_react18.useRef)();
      (0, import_react18.useEffect)(() => {
        ref.current = ignore2 ? ref.current : value;
      }, [value, ignore2]);
      return ref.current;
    };
    alwaysNewT = (i18n, language, namespace, keyPrefix) => i18n.getFixedT(language, namespace, keyPrefix);
    useMemoizedT = (i18n, language, namespace, keyPrefix) => (0, import_react18.useCallback)(alwaysNewT(i18n, language, namespace, keyPrefix), [i18n, language, namespace, keyPrefix]);
    useTranslation = (ns, props = {}) => {
      const {
        i18n: i18nFromProps
      } = props;
      const {
        i18n: i18nFromContext,
        defaultNS: defaultNSFromContext
      } = (0, import_react18.useContext)(I18nContext) || {};
      const i18n = i18nFromProps || i18nFromContext || getI18n();
      if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();
      if (!i18n) {
        warnOnce(i18n, "NO_I18NEXT_INSTANCE", "useTranslation: You will need to pass in an i18next instance by using initReactI18next");
        const notReadyT = (k3, optsOrDefaultValue) => {
          if (isString2(optsOrDefaultValue)) return optsOrDefaultValue;
          if (isObject2(optsOrDefaultValue) && isString2(optsOrDefaultValue.defaultValue)) return optsOrDefaultValue.defaultValue;
          return Array.isArray(k3) ? k3[k3.length - 1] : k3;
        };
        const retNotReady = [notReadyT, {}, false];
        retNotReady.t = notReadyT;
        retNotReady.i18n = {};
        retNotReady.ready = false;
        return retNotReady;
      }
      if (i18n.options.react?.wait) warnOnce(i18n, "DEPRECATED_OPTION", "useTranslation: It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
      const i18nOptions = {
        ...getDefaults(),
        ...i18n.options.react,
        ...props
      };
      const {
        useSuspense,
        keyPrefix
      } = i18nOptions;
      let namespaces = ns || defaultNSFromContext || i18n.options?.defaultNS;
      namespaces = isString2(namespaces) ? [namespaces] : namespaces || ["translation"];
      i18n.reportNamespaces.addUsedNamespaces?.(namespaces);
      const ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every((n3) => hasLoadedNamespace(n3, i18n, i18nOptions));
      const memoGetT = useMemoizedT(i18n, props.lng || null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
      const getT = () => memoGetT;
      const getNewT = () => alwaysNewT(i18n, props.lng || null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
      const [t4, setT] = (0, import_react18.useState)(getT);
      let joinedNS = namespaces.join();
      if (props.lng) joinedNS = `${props.lng}${joinedNS}`;
      const previousJoinedNS = usePrevious(joinedNS);
      const isMounted = (0, import_react18.useRef)(true);
      (0, import_react18.useEffect)(() => {
        const {
          bindI18n,
          bindI18nStore
        } = i18nOptions;
        isMounted.current = true;
        if (!ready && !useSuspense) {
          if (props.lng) {
            loadLanguages(i18n, props.lng, namespaces, () => {
              if (isMounted.current) setT(getNewT);
            });
          } else {
            loadNamespaces(i18n, namespaces, () => {
              if (isMounted.current) setT(getNewT);
            });
          }
        }
        if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
          setT(getNewT);
        }
        const boundReset = () => {
          if (isMounted.current) setT(getNewT);
        };
        if (bindI18n) i18n?.on(bindI18n, boundReset);
        if (bindI18nStore) i18n?.store.on(bindI18nStore, boundReset);
        return () => {
          isMounted.current = false;
          if (i18n && bindI18n) bindI18n?.split(" ").forEach((e4) => i18n.off(e4, boundReset));
          if (bindI18nStore && i18n) bindI18nStore.split(" ").forEach((e4) => i18n.store.off(e4, boundReset));
        };
      }, [i18n, joinedNS]);
      (0, import_react18.useEffect)(() => {
        if (isMounted.current && ready) {
          setT(getT);
        }
      }, [i18n, keyPrefix, ready]);
      const ret = [t4, i18n, ready];
      ret.t = t4;
      ret.i18n = i18n;
      ret.ready = ready;
      if (ready) return ret;
      if (!ready && !useSuspense) return ret;
      throw new Promise((resolve) => {
        if (props.lng) {
          loadLanguages(i18n, props.lng, namespaces, () => resolve());
        } else {
          loadNamespaces(i18n, namespaces, () => resolve());
        }
      });
    };
  }
});

// node_modules/react-i18next/dist/es/withTranslation.js
var import_react19;
var init_withTranslation = __esm({
  "node_modules/react-i18next/dist/es/withTranslation.js"() {
    import_react19 = __toESM(require_react(), 1);
    init_useTranslation();
    init_utils();
  }
});

// node_modules/react-i18next/dist/es/Translation.js
var init_Translation = __esm({
  "node_modules/react-i18next/dist/es/Translation.js"() {
    init_useTranslation();
  }
});

// node_modules/react-i18next/dist/es/I18nextProvider.js
var import_react20;
var init_I18nextProvider = __esm({
  "node_modules/react-i18next/dist/es/I18nextProvider.js"() {
    import_react20 = __toESM(require_react(), 1);
    init_context();
  }
});

// node_modules/react-i18next/dist/es/useSSR.js
var import_react21;
var init_useSSR = __esm({
  "node_modules/react-i18next/dist/es/useSSR.js"() {
    import_react21 = __toESM(require_react(), 1);
    init_context();
  }
});

// node_modules/react-i18next/dist/es/withSSR.js
var import_react22;
var init_withSSR = __esm({
  "node_modules/react-i18next/dist/es/withSSR.js"() {
    import_react22 = __toESM(require_react(), 1);
    init_useSSR();
    init_context();
    init_utils();
  }
});

// node_modules/react-i18next/dist/es/index.js
var init_es2 = __esm({
  "node_modules/react-i18next/dist/es/index.js"() {
    init_Trans();
    init_TransWithoutContext();
    init_useTranslation();
    init_withTranslation();
    init_Translation();
    init_I18nextProvider();
    init_withSSR();
    init_useSSR();
    init_initReactI18next();
    init_defaults();
    init_i18nInstance();
    init_context();
  }
});

// node_modules/i18next/dist/esm/i18next.js
var isString3, defer, makeString, copy, lastOfPathSeparatorRegExp, cleanKey, canNotTraverseDeeper, getLastOfPath, setPath, pushPath, getPath, getPathWithDefaults, deepExtend, regexEscape, _entityMap, escape, RegExpCache, chars, looksLikeObjectPathRegExpCache, looksLikeObjectPath, deepFind, getCleanedCode, consoleLogger, Logger, baseLogger, EventEmitter, ResourceStore, postProcessor, checkedLoadedFor, shouldHandleAsObject, Translator, LanguageUtil, suffixesOrder, dummyRule, PluralResolver, deepFindWithDefaults, regexSafe, Interpolator, parseFormatStr, createCachedFormatter, createNonCachedFormatter, Formatter, removePending, Connector, get, transformOptions, noop, bindMemberFunctions, I18n, instance, createInstance, dir, init3, loadResources, reloadResources, use, changeLanguage, getFixedT, t2, exists, setDefaultNamespace, hasLoadedNamespace2, loadNamespaces2, loadLanguages2;
var init_i18next = __esm({
  "node_modules/i18next/dist/esm/i18next.js"() {
    isString3 = (obj) => typeof obj === "string";
    defer = () => {
      let res;
      let rej;
      const promise2 = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      promise2.resolve = res;
      promise2.reject = rej;
      return promise2;
    };
    makeString = (object2) => {
      if (object2 == null) return "";
      return "" + object2;
    };
    copy = (a3, s3, t4) => {
      a3.forEach((m3) => {
        if (s3[m3]) t4[m3] = s3[m3];
      });
    };
    lastOfPathSeparatorRegExp = /###/g;
    cleanKey = (key) => key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
    canNotTraverseDeeper = (object2) => !object2 || isString3(object2);
    getLastOfPath = (object2, path2, Empty) => {
      const stack = !isString3(path2) ? path2 : path2.split(".");
      let stackIndex = 0;
      while (stackIndex < stack.length - 1) {
        if (canNotTraverseDeeper(object2)) return {};
        const key = cleanKey(stack[stackIndex]);
        if (!object2[key] && Empty) object2[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object2, key)) {
          object2 = object2[key];
        } else {
          object2 = {};
        }
        ++stackIndex;
      }
      if (canNotTraverseDeeper(object2)) return {};
      return {
        obj: object2,
        k: cleanKey(stack[stackIndex])
      };
    };
    setPath = (object2, path2, newValue) => {
      const {
        obj,
        k: k3
      } = getLastOfPath(object2, path2, Object);
      if (obj !== void 0 || path2.length === 1) {
        obj[k3] = newValue;
        return;
      }
      let e4 = path2[path2.length - 1];
      let p3 = path2.slice(0, path2.length - 1);
      let last = getLastOfPath(object2, p3, Object);
      while (last.obj === void 0 && p3.length) {
        e4 = `${p3[p3.length - 1]}.${e4}`;
        p3 = p3.slice(0, p3.length - 1);
        last = getLastOfPath(object2, p3, Object);
        if (last?.obj && typeof last.obj[`${last.k}.${e4}`] !== "undefined") {
          last.obj = void 0;
        }
      }
      last.obj[`${last.k}.${e4}`] = newValue;
    };
    pushPath = (object2, path2, newValue, concat) => {
      const {
        obj,
        k: k3
      } = getLastOfPath(object2, path2, Object);
      obj[k3] = obj[k3] || [];
      obj[k3].push(newValue);
    };
    getPath = (object2, path2) => {
      const {
        obj,
        k: k3
      } = getLastOfPath(object2, path2);
      if (!obj) return void 0;
      if (!Object.prototype.hasOwnProperty.call(obj, k3)) return void 0;
      return obj[k3];
    };
    getPathWithDefaults = (data2, defaultData, key) => {
      const value = getPath(data2, key);
      if (value !== void 0) {
        return value;
      }
      return getPath(defaultData, key);
    };
    deepExtend = (target, source, overwrite) => {
      for (const prop in source) {
        if (prop !== "__proto__" && prop !== "constructor") {
          if (prop in target) {
            if (isString3(target[prop]) || target[prop] instanceof String || isString3(source[prop]) || source[prop] instanceof String) {
              if (overwrite) target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }
      return target;
    };
    regexEscape = (str) => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    _entityMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "/": "&#x2F;"
    };
    escape = (data2) => {
      if (isString3(data2)) {
        return data2.replace(/[&<>"'\/]/g, (s3) => _entityMap[s3]);
      }
      return data2;
    };
    RegExpCache = class {
      constructor(capacity) {
        this.capacity = capacity;
        this.regExpMap = /* @__PURE__ */ new Map();
        this.regExpQueue = [];
      }
      getRegExp(pattern) {
        const regExpFromCache = this.regExpMap.get(pattern);
        if (regExpFromCache !== void 0) {
          return regExpFromCache;
        }
        const regExpNew = new RegExp(pattern);
        if (this.regExpQueue.length === this.capacity) {
          this.regExpMap.delete(this.regExpQueue.shift());
        }
        this.regExpMap.set(pattern, regExpNew);
        this.regExpQueue.push(pattern);
        return regExpNew;
      }
    };
    chars = [" ", ",", "?", "!", ";"];
    looksLikeObjectPathRegExpCache = new RegExpCache(20);
    looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
      nsSeparator = nsSeparator || "";
      keySeparator = keySeparator || "";
      const possibleChars = chars.filter((c3) => nsSeparator.indexOf(c3) < 0 && keySeparator.indexOf(c3) < 0);
      if (possibleChars.length === 0) return true;
      const r3 = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c3) => c3 === "?" ? "\\?" : c3).join("|")})`);
      let matched = !r3.test(key);
      if (!matched) {
        const ki = key.indexOf(keySeparator);
        if (ki > 0 && !r3.test(key.substring(0, ki))) {
          matched = true;
        }
      }
      return matched;
    };
    deepFind = (obj, path2, keySeparator = ".") => {
      if (!obj) return void 0;
      if (obj[path2]) {
        if (!Object.prototype.hasOwnProperty.call(obj, path2)) return void 0;
        return obj[path2];
      }
      const tokens = path2.split(keySeparator);
      let current = obj;
      for (let i3 = 0; i3 < tokens.length; ) {
        if (!current || typeof current !== "object") {
          return void 0;
        }
        let next;
        let nextPath = "";
        for (let j2 = i3; j2 < tokens.length; ++j2) {
          if (j2 !== i3) {
            nextPath += keySeparator;
          }
          nextPath += tokens[j2];
          next = current[nextPath];
          if (next !== void 0) {
            if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j2 < tokens.length - 1) {
              continue;
            }
            i3 += j2 - i3 + 1;
            break;
          }
        }
        current = next;
      }
      return current;
    };
    getCleanedCode = (code2) => code2?.replace("_", "-");
    consoleLogger = {
      type: "logger",
      log(args) {
        this.output("log", args);
      },
      warn(args) {
        this.output("warn", args);
      },
      error(args) {
        this.output("error", args);
      },
      output(type, args) {
        console?.[type]?.apply?.(console, args);
      }
    };
    Logger = class _Logger {
      constructor(concreteLogger, options2 = {}) {
        this.init(concreteLogger, options2);
      }
      init(concreteLogger, options2 = {}) {
        this.prefix = options2.prefix || "i18next:";
        this.logger = concreteLogger || consoleLogger;
        this.options = options2;
        this.debug = options2.debug;
      }
      log(...args) {
        return this.forward(args, "log", "", true);
      }
      warn(...args) {
        return this.forward(args, "warn", "", true);
      }
      error(...args) {
        return this.forward(args, "error", "");
      }
      deprecate(...args) {
        return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
      }
      forward(args, lvl, prefix, debugOnly) {
        if (debugOnly && !this.debug) return null;
        if (isString3(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
        return this.logger[lvl](args);
      }
      create(moduleName) {
        return new _Logger(this.logger, {
          ...{
            prefix: `${this.prefix}:${moduleName}:`
          },
          ...this.options
        });
      }
      clone(options2) {
        options2 = options2 || this.options;
        options2.prefix = options2.prefix || this.prefix;
        return new _Logger(this.logger, options2);
      }
    };
    baseLogger = new Logger();
    EventEmitter = class {
      constructor() {
        this.observers = {};
      }
      on(events, listener) {
        events.split(" ").forEach((event) => {
          if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
          const numListeners = this.observers[event].get(listener) || 0;
          this.observers[event].set(listener, numListeners + 1);
        });
        return this;
      }
      off(event, listener) {
        if (!this.observers[event]) return;
        if (!listener) {
          delete this.observers[event];
          return;
        }
        this.observers[event].delete(listener);
      }
      emit(event, ...args) {
        if (this.observers[event]) {
          const cloned = Array.from(this.observers[event].entries());
          cloned.forEach(([observer, numTimesAdded]) => {
            for (let i3 = 0; i3 < numTimesAdded; i3++) {
              observer(...args);
            }
          });
        }
        if (this.observers["*"]) {
          const cloned = Array.from(this.observers["*"].entries());
          cloned.forEach(([observer, numTimesAdded]) => {
            for (let i3 = 0; i3 < numTimesAdded; i3++) {
              observer.apply(observer, [event, ...args]);
            }
          });
        }
      }
    };
    ResourceStore = class extends EventEmitter {
      constructor(data2, options2 = {
        ns: ["translation"],
        defaultNS: "translation"
      }) {
        super();
        this.data = data2 || {};
        this.options = options2;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        if (this.options.ignoreJSONStructure === void 0) {
          this.options.ignoreJSONStructure = true;
        }
      }
      addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
      removeNamespaces(ns) {
        const index2 = this.options.ns.indexOf(ns);
        if (index2 > -1) {
          this.options.ns.splice(index2, 1);
        }
      }
      getResource(lng, ns, key, options2 = {}) {
        const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
        const ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
        let path2;
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
        } else {
          path2 = [lng, ns];
          if (key) {
            if (Array.isArray(key)) {
              path2.push(...key);
            } else if (isString3(key) && keySeparator) {
              path2.push(...key.split(keySeparator));
            } else {
              path2.push(key);
            }
          }
        }
        const result = getPath(this.data, path2);
        if (!result && !ns && !key && lng.indexOf(".") > -1) {
          lng = path2[0];
          ns = path2[1];
          key = path2.slice(2).join(".");
        }
        if (result || !ignoreJSONStructure || !isString3(key)) return result;
        return deepFind(this.data?.[lng]?.[ns], key, keySeparator);
      }
      addResource(lng, ns, key, value, options2 = {
        silent: false
      }) {
        const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
        let path2 = [lng, ns];
        if (key) path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          value = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path2, value);
        if (!options2.silent) this.emit("added", lng, ns, key, value);
      }
      addResources(lng, ns, resources, options2 = {
        silent: false
      }) {
        for (const m3 in resources) {
          if (isString3(resources[m3]) || Array.isArray(resources[m3])) this.addResource(lng, ns, m3, resources[m3], {
            silent: true
          });
        }
        if (!options2.silent) this.emit("added", lng, ns, resources);
      }
      addResourceBundle(lng, ns, resources, deep, overwrite, options2 = {
        silent: false,
        skipCopy: false
      }) {
        let path2 = [lng, ns];
        if (lng.indexOf(".") > -1) {
          path2 = lng.split(".");
          deep = resources;
          resources = ns;
          ns = path2[1];
        }
        this.addNamespaces(ns);
        let pack = getPath(this.data, path2) || {};
        if (!options2.skipCopy) resources = JSON.parse(JSON.stringify(resources));
        if (deep) {
          deepExtend(pack, resources, overwrite);
        } else {
          pack = {
            ...pack,
            ...resources
          };
        }
        setPath(this.data, path2, pack);
        if (!options2.silent) this.emit("added", lng, ns, resources);
      }
      removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit("removed", lng, ns);
      }
      hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== void 0;
      }
      getResourceBundle(lng, ns) {
        if (!ns) ns = this.options.defaultNS;
        return this.getResource(lng, ns);
      }
      getDataByLanguage(lng) {
        return this.data[lng];
      }
      hasLanguageSomeTranslations(lng) {
        const data2 = this.getDataByLanguage(lng);
        const n3 = data2 && Object.keys(data2) || [];
        return !!n3.find((v3) => data2[v3] && Object.keys(data2[v3]).length > 0);
      }
      toJSON() {
        return this.data;
      }
    };
    postProcessor = {
      processors: {},
      addPostProcessor(module) {
        this.processors[module.name] = module;
      },
      handle(processors, value, key, options2, translator) {
        processors.forEach((processor) => {
          value = this.processors[processor]?.process(value, key, options2, translator) ?? value;
        });
        return value;
      }
    };
    checkedLoadedFor = {};
    shouldHandleAsObject = (res) => !isString3(res) && typeof res !== "boolean" && typeof res !== "number";
    Translator = class _Translator extends EventEmitter {
      constructor(services, options2 = {}) {
        super();
        copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
        this.options = options2;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        this.logger = baseLogger.create("translator");
      }
      changeLanguage(lng) {
        if (lng) this.language = lng;
      }
      exists(key, o3 = {
        interpolation: {}
      }) {
        const opt = {
          ...o3
        };
        if (key == null) return false;
        const resolved = this.resolve(key, opt);
        return resolved?.res !== void 0;
      }
      extractFromKey(key, opt) {
        let nsSeparator = opt.nsSeparator !== void 0 ? opt.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0) nsSeparator = ":";
        const keySeparator = opt.keySeparator !== void 0 ? opt.keySeparator : this.options.keySeparator;
        let namespaces = opt.ns || this.options.defaultNS || [];
        const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
        const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !opt.keySeparator && !this.options.userDefinedNsSeparator && !opt.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
          const m3 = key.match(this.interpolator.nestingRegexp);
          if (m3 && m3.length > 0) {
            return {
              key,
              namespaces: isString3(namespaces) ? [namespaces] : namespaces
            };
          }
          const parts = key.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
          key = parts.join(keySeparator);
        }
        return {
          key,
          namespaces: isString3(namespaces) ? [namespaces] : namespaces
        };
      }
      translate(keys2, o3, lastKey) {
        let opt = typeof o3 === "object" ? {
          ...o3
        } : o3;
        if (typeof opt !== "object" && this.options.overloadTranslationOptionHandler) {
          opt = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (typeof options === "object") opt = {
          ...opt
        };
        if (!opt) opt = {};
        if (keys2 == null) return "";
        if (!Array.isArray(keys2)) keys2 = [String(keys2)];
        const returnDetails = opt.returnDetails !== void 0 ? opt.returnDetails : this.options.returnDetails;
        const keySeparator = opt.keySeparator !== void 0 ? opt.keySeparator : this.options.keySeparator;
        const {
          key,
          namespaces
        } = this.extractFromKey(keys2[keys2.length - 1], opt);
        const namespace = namespaces[namespaces.length - 1];
        let nsSeparator = opt.nsSeparator !== void 0 ? opt.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0) nsSeparator = ":";
        const lng = opt.lng || this.language;
        const appendNamespaceToCIMode = opt.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng?.toLowerCase() === "cimode") {
          if (appendNamespaceToCIMode) {
            if (returnDetails) {
              return {
                res: `${namespace}${nsSeparator}${key}`,
                usedKey: key,
                exactUsedKey: key,
                usedLng: lng,
                usedNS: namespace,
                usedParams: this.getUsedParamsDetails(opt)
              };
            }
            return `${namespace}${nsSeparator}${key}`;
          }
          if (returnDetails) {
            return {
              res: key,
              usedKey: key,
              exactUsedKey: key,
              usedLng: lng,
              usedNS: namespace,
              usedParams: this.getUsedParamsDetails(opt)
            };
          }
          return key;
        }
        const resolved = this.resolve(keys2, opt);
        let res = resolved?.res;
        const resUsedKey = resolved?.usedKey || key;
        const resExactUsedKey = resolved?.exactUsedKey || key;
        const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
        const joinArrays = opt.joinArrays !== void 0 ? opt.joinArrays : this.options.joinArrays;
        const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        const needsPluralHandling = opt.count !== void 0 && !isString3(opt.count);
        const hasDefaultValue = _Translator.hasDefaultValue(opt);
        const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, opt) : "";
        const defaultValueSuffixOrdinalFallback = opt.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, opt.count, {
          ordinal: false
        }) : "";
        const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
        const defaultValue = needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] || opt[`defaultValue${defaultValueSuffix}`] || opt[`defaultValue${defaultValueSuffixOrdinalFallback}`] || opt.defaultValue;
        let resForObjHndl = res;
        if (handleAsObjectInI18nFormat && !res && hasDefaultValue) {
          resForObjHndl = defaultValue;
        }
        const handleAsObject = shouldHandleAsObject(resForObjHndl);
        const resType = Object.prototype.toString.apply(resForObjHndl);
        if (handleAsObjectInI18nFormat && resForObjHndl && handleAsObject && noObject.indexOf(resType) < 0 && !(isString3(joinArrays) && Array.isArray(resForObjHndl))) {
          if (!opt.returnObjects && !this.options.returnObjects) {
            if (!this.options.returnedObjectHandler) {
              this.logger.warn("accessing an object - but returnObjects options is not enabled!");
            }
            const r3 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, resForObjHndl, {
              ...opt,
              ns: namespaces
            }) : `key '${key} (${this.language})' returned an object instead of string.`;
            if (returnDetails) {
              resolved.res = r3;
              resolved.usedParams = this.getUsedParamsDetails(opt);
              return resolved;
            }
            return r3;
          }
          if (keySeparator) {
            const resTypeIsArray = Array.isArray(resForObjHndl);
            const copy2 = resTypeIsArray ? [] : {};
            const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (const m3 in resForObjHndl) {
              if (Object.prototype.hasOwnProperty.call(resForObjHndl, m3)) {
                const deepKey = `${newKeyToUse}${keySeparator}${m3}`;
                if (hasDefaultValue && !res) {
                  copy2[m3] = this.translate(deepKey, {
                    ...opt,
                    defaultValue: shouldHandleAsObject(defaultValue) ? defaultValue[m3] : void 0,
                    ...{
                      joinArrays: false,
                      ns: namespaces
                    }
                  });
                } else {
                  copy2[m3] = this.translate(deepKey, {
                    ...opt,
                    ...{
                      joinArrays: false,
                      ns: namespaces
                    }
                  });
                }
                if (copy2[m3] === deepKey) copy2[m3] = resForObjHndl[m3];
              }
            }
            res = copy2;
          }
        } else if (handleAsObjectInI18nFormat && isString3(joinArrays) && Array.isArray(res)) {
          res = res.join(joinArrays);
          if (res) res = this.extendTranslation(res, keys2, opt, lastKey);
        } else {
          let usedDefault = false;
          let usedKey = false;
          if (!this.isValidLookup(res) && hasDefaultValue) {
            usedDefault = true;
            res = defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }
          const missingKeyNoValueFallbackToKey = opt.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
          const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
          const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
            if (keySeparator) {
              const fk = this.resolve(key, {
                ...opt,
                keySeparator: false
              });
              if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
            }
            let lngs = [];
            const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, opt.lng || this.language);
            if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
              for (let i3 = 0; i3 < fallbackLngs.length; i3++) {
                lngs.push(fallbackLngs[i3]);
              }
            } else if (this.options.saveMissingTo === "all") {
              lngs = this.languageUtils.toResolveHierarchy(opt.lng || this.language);
            } else {
              lngs.push(opt.lng || this.language);
            }
            const send = (l3, k3, specificDefaultValue) => {
              const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
              if (this.options.missingKeyHandler) {
                this.options.missingKeyHandler(l3, namespace, k3, defaultForMissing, updateMissing, opt);
              } else if (this.backendConnector?.saveMissing) {
                this.backendConnector.saveMissing(l3, namespace, k3, defaultForMissing, updateMissing, opt);
              }
              this.emit("missingKey", l3, namespace, k3, res);
            };
            if (this.options.saveMissing) {
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach((language) => {
                  const suffixes = this.pluralResolver.getSuffixes(language, opt);
                  if (needsZeroSuffixLookup && opt[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                    suffixes.push(`${this.options.pluralSeparator}zero`);
                  }
                  suffixes.forEach((suffix) => {
                    send([language], key + suffix, opt[`defaultValue${suffix}`] || defaultValue);
                  });
                });
              } else {
                send(lngs, key, defaultValue);
              }
            }
          }
          res = this.extendTranslation(res, keys2, opt, resolved, lastKey);
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey) {
            res = `${namespace}${nsSeparator}${key}`;
          }
          if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}${nsSeparator}${key}` : key, usedDefault ? res : void 0, opt);
          }
        }
        if (returnDetails) {
          resolved.res = res;
          resolved.usedParams = this.getUsedParamsDetails(opt);
          return resolved;
        }
        return res;
      }
      extendTranslation(res, key, opt, resolved, lastKey) {
        if (this.i18nFormat?.parse) {
          res = this.i18nFormat.parse(res, {
            ...this.options.interpolation.defaultVariables,
            ...opt
          }, opt.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
            resolved
          });
        } else if (!opt.skipInterpolation) {
          if (opt.interpolation) this.interpolator.init({
            ...opt,
            ...{
              interpolation: {
                ...this.options.interpolation,
                ...opt.interpolation
              }
            }
          });
          const skipOnVariables = isString3(res) && (opt?.interpolation?.skipOnVariables !== void 0 ? opt.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
          let nestBef;
          if (skipOnVariables) {
            const nb = res.match(this.interpolator.nestingRegexp);
            nestBef = nb && nb.length;
          }
          let data2 = opt.replace && !isString3(opt.replace) ? opt.replace : opt;
          if (this.options.interpolation.defaultVariables) data2 = {
            ...this.options.interpolation.defaultVariables,
            ...data2
          };
          res = this.interpolator.interpolate(res, data2, opt.lng || this.language || resolved.usedLng, opt);
          if (skipOnVariables) {
            const na = res.match(this.interpolator.nestingRegexp);
            const nestAft = na && na.length;
            if (nestBef < nestAft) opt.nest = false;
          }
          if (!opt.lng && resolved && resolved.res) opt.lng = this.language || resolved.usedLng;
          if (opt.nest !== false) res = this.interpolator.nest(res, (...args) => {
            if (lastKey?.[0] === args[0] && !opt.context) {
              this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
              return null;
            }
            return this.translate(...args, key);
          }, opt);
          if (opt.interpolation) this.interpolator.reset();
        }
        const postProcess = opt.postProcess || this.options.postProcess;
        const postProcessorNames = isString3(postProcess) ? [postProcess] : postProcess;
        if (res != null && postProcessorNames?.length && opt.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
            i18nResolved: {
              ...resolved,
              usedParams: this.getUsedParamsDetails(opt)
            },
            ...opt
          } : opt, this);
        }
        return res;
      }
      resolve(keys2, opt = {}) {
        let found;
        let usedKey;
        let exactUsedKey;
        let usedLng;
        let usedNS;
        if (isString3(keys2)) keys2 = [keys2];
        keys2.forEach((k3) => {
          if (this.isValidLookup(found)) return;
          const extracted = this.extractFromKey(k3, opt);
          const key = extracted.key;
          usedKey = key;
          let namespaces = extracted.namespaces;
          if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
          const needsPluralHandling = opt.count !== void 0 && !isString3(opt.count);
          const needsZeroSuffixLookup = needsPluralHandling && !opt.ordinal && opt.count === 0;
          const needsContextHandling = opt.context !== void 0 && (isString3(opt.context) || typeof opt.context === "number") && opt.context !== "";
          const codes = opt.lngs ? opt.lngs : this.languageUtils.toResolveHierarchy(opt.lng || this.language, opt.fallbackLng);
          namespaces.forEach((ns) => {
            if (this.isValidLookup(found)) return;
            usedNS = ns;
            if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils?.hasLoadedNamespace && !this.utils?.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor[`${codes[0]}-${ns}`] = true;
              this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            }
            codes.forEach((code2) => {
              if (this.isValidLookup(found)) return;
              usedLng = code2;
              const finalKeys = [key];
              if (this.i18nFormat?.addLookupKeys) {
                this.i18nFormat.addLookupKeys(finalKeys, key, code2, ns, opt);
              } else {
                let pluralSuffix;
                if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code2, opt.count, opt);
                const zeroSuffix = `${this.options.pluralSeparator}zero`;
                const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
                if (needsPluralHandling) {
                  finalKeys.push(key + pluralSuffix);
                  if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                    finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                  }
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(key + zeroSuffix);
                  }
                }
                if (needsContextHandling) {
                  const contextKey = `${key}${this.options.contextSeparator}${opt.context}`;
                  finalKeys.push(contextKey);
                  if (needsPluralHandling) {
                    finalKeys.push(contextKey + pluralSuffix);
                    if (opt.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                      finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                    }
                    if (needsZeroSuffixLookup) {
                      finalKeys.push(contextKey + zeroSuffix);
                    }
                  }
                }
              }
              let possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!this.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = this.getResource(code2, ns, possibleKey, opt);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey,
          exactUsedKey,
          usedLng,
          usedNS
        };
      }
      isValidLookup(res) {
        return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
      }
      getResource(code2, ns, key, options2 = {}) {
        if (this.i18nFormat?.getResource) return this.i18nFormat.getResource(code2, ns, key, options2);
        return this.resourceStore.getResource(code2, ns, key, options2);
      }
      getUsedParamsDetails(options2 = {}) {
        const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
        const useOptionsReplaceForData = options2.replace && !isString3(options2.replace);
        let data2 = useOptionsReplaceForData ? options2.replace : options2;
        if (useOptionsReplaceForData && typeof options2.count !== "undefined") {
          data2.count = options2.count;
        }
        if (this.options.interpolation.defaultVariables) {
          data2 = {
            ...this.options.interpolation.defaultVariables,
            ...data2
          };
        }
        if (!useOptionsReplaceForData) {
          data2 = {
            ...data2
          };
          for (const key of optionsKeys) {
            delete data2[key];
          }
        }
        return data2;
      }
      static hasDefaultValue(options2) {
        const prefix = "defaultValue";
        for (const option in options2) {
          if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
            return true;
          }
        }
        return false;
      }
    };
    LanguageUtil = class {
      constructor(options2) {
        this.options = options2;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create("languageUtils");
      }
      getScriptPartFromCode(code2) {
        code2 = getCleanedCode(code2);
        if (!code2 || code2.indexOf("-") < 0) return null;
        const p3 = code2.split("-");
        if (p3.length === 2) return null;
        p3.pop();
        if (p3[p3.length - 1].toLowerCase() === "x") return null;
        return this.formatLanguageCode(p3.join("-"));
      }
      getLanguagePartFromCode(code2) {
        code2 = getCleanedCode(code2);
        if (!code2 || code2.indexOf("-") < 0) return code2;
        const p3 = code2.split("-");
        return this.formatLanguageCode(p3[0]);
      }
      formatLanguageCode(code2) {
        if (isString3(code2) && code2.indexOf("-") > -1) {
          let formattedCode;
          try {
            formattedCode = Intl.getCanonicalLocales(code2)[0];
          } catch (e4) {
          }
          if (formattedCode && this.options.lowerCaseLng) {
            formattedCode = formattedCode.toLowerCase();
          }
          if (formattedCode) return formattedCode;
          if (this.options.lowerCaseLng) {
            return code2.toLowerCase();
          }
          return code2;
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code2.toLowerCase() : code2;
      }
      isSupportedCode(code2) {
        if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
          code2 = this.getLanguagePartFromCode(code2);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code2) > -1;
      }
      getBestMatchFromCodes(codes) {
        if (!codes) return null;
        let found;
        codes.forEach((code2) => {
          if (found) return;
          const cleanedLng = this.formatLanguageCode(code2);
          if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach((code2) => {
            if (found) return;
            const lngScOnly = this.getScriptPartFromCode(code2);
            if (this.isSupportedCode(lngScOnly)) return found = lngScOnly;
            const lngOnly = this.getLanguagePartFromCode(code2);
            if (this.isSupportedCode(lngOnly)) return found = lngOnly;
            found = this.options.supportedLngs.find((supportedLng) => {
              if (supportedLng === lngOnly) return supportedLng;
              if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
              if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
              if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
            });
          });
        }
        if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
      getFallbackCodes(fallbacks, code2) {
        if (!fallbacks) return [];
        if (typeof fallbacks === "function") fallbacks = fallbacks(code2);
        if (isString3(fallbacks)) fallbacks = [fallbacks];
        if (Array.isArray(fallbacks)) return fallbacks;
        if (!code2) return fallbacks.default || [];
        let found = fallbacks[code2];
        if (!found) found = fallbacks[this.getScriptPartFromCode(code2)];
        if (!found) found = fallbacks[this.formatLanguageCode(code2)];
        if (!found) found = fallbacks[this.getLanguagePartFromCode(code2)];
        if (!found) found = fallbacks.default;
        return found || [];
      }
      toResolveHierarchy(code2, fallbackCode) {
        const fallbackCodes = this.getFallbackCodes((fallbackCode === false ? [] : fallbackCode) || this.options.fallbackLng || [], code2);
        const codes = [];
        const addCode = (c3) => {
          if (!c3) return;
          if (this.isSupportedCode(c3)) {
            codes.push(c3);
          } else {
            this.logger.warn(`rejecting language code not found in supportedLngs: ${c3}`);
          }
        };
        if (isString3(code2) && (code2.indexOf("-") > -1 || code2.indexOf("_") > -1)) {
          if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code2));
          if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code2));
          if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code2));
        } else if (isString3(code2)) {
          addCode(this.formatLanguageCode(code2));
        }
        fallbackCodes.forEach((fc) => {
          if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
        });
        return codes;
      }
    };
    suffixesOrder = {
      zero: 0,
      one: 1,
      two: 2,
      few: 3,
      many: 4,
      other: 5
    };
    dummyRule = {
      select: (count) => count === 1 ? "one" : "other",
      resolvedOptions: () => ({
        pluralCategories: ["one", "other"]
      })
    };
    PluralResolver = class {
      constructor(languageUtils, options2 = {}) {
        this.languageUtils = languageUtils;
        this.options = options2;
        this.logger = baseLogger.create("pluralResolver");
        this.pluralRulesCache = {};
      }
      addRule(lng, obj) {
        this.rules[lng] = obj;
      }
      clearCache() {
        this.pluralRulesCache = {};
      }
      getRule(code2, options2 = {}) {
        const cleanedCode = getCleanedCode(code2 === "dev" ? "en" : code2);
        const type = options2.ordinal ? "ordinal" : "cardinal";
        const cacheKey = JSON.stringify({
          cleanedCode,
          type
        });
        if (cacheKey in this.pluralRulesCache) {
          return this.pluralRulesCache[cacheKey];
        }
        let rule;
        try {
          rule = new Intl.PluralRules(cleanedCode, {
            type
          });
        } catch (err) {
          if (!Intl) {
            this.logger.error("No Intl support, please use an Intl polyfill!");
            return dummyRule;
          }
          if (!code2.match(/-|_/)) return dummyRule;
          const lngPart = this.languageUtils.getLanguagePartFromCode(code2);
          rule = this.getRule(lngPart, options2);
        }
        this.pluralRulesCache[cacheKey] = rule;
        return rule;
      }
      needsPlural(code2, options2 = {}) {
        let rule = this.getRule(code2, options2);
        if (!rule) rule = this.getRule("dev", options2);
        return rule?.resolvedOptions().pluralCategories.length > 1;
      }
      getPluralFormsOfKey(code2, key, options2 = {}) {
        return this.getSuffixes(code2, options2).map((suffix) => `${key}${suffix}`);
      }
      getSuffixes(code2, options2 = {}) {
        let rule = this.getRule(code2, options2);
        if (!rule) rule = this.getRule("dev", options2);
        if (!rule) return [];
        return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
      }
      getSuffix(code2, count, options2 = {}) {
        const rule = this.getRule(code2, options2);
        if (rule) {
          return `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
        }
        this.logger.warn(`no plural rule found for: ${code2}`);
        return this.getSuffix("dev", count, options2);
      }
    };
    deepFindWithDefaults = (data2, defaultData, key, keySeparator = ".", ignoreJSONStructure = true) => {
      let path2 = getPathWithDefaults(data2, defaultData, key);
      if (!path2 && ignoreJSONStructure && isString3(key)) {
        path2 = deepFind(data2, key, keySeparator);
        if (path2 === void 0) path2 = deepFind(defaultData, key, keySeparator);
      }
      return path2;
    };
    regexSafe = (val) => val.replace(/\$/g, "$$$$");
    Interpolator = class {
      constructor(options2 = {}) {
        this.logger = baseLogger.create("interpolator");
        this.options = options2;
        this.format = options2?.interpolation?.format || ((value) => value);
        this.init(options2);
      }
      init(options2 = {}) {
        if (!options2.interpolation) options2.interpolation = {
          escapeValue: true
        };
        const {
          escape: escape$1,
          escapeValue,
          useRawValueToEscape,
          prefix,
          prefixEscaped,
          suffix,
          suffixEscaped,
          formatSeparator,
          unescapeSuffix,
          unescapePrefix,
          nestingPrefix,
          nestingPrefixEscaped,
          nestingSuffix,
          nestingSuffixEscaped,
          nestingOptionsSeparator,
          maxReplaces,
          alwaysFormat
        } = options2.interpolation;
        this.escape = escape$1 !== void 0 ? escape$1 : escape;
        this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
        this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
        this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
        this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
        this.formatSeparator = formatSeparator || ",";
        this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
        this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
        this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
        this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
        this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
        this.maxReplaces = maxReplaces || 1e3;
        this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
        this.resetRegExp();
      }
      reset() {
        if (this.options) this.init(this.options);
      }
      resetRegExp() {
        const getOrResetRegExp = (existingRegExp, pattern) => {
          if (existingRegExp?.source === pattern) {
            existingRegExp.lastIndex = 0;
            return existingRegExp;
          }
          return new RegExp(pattern, "g");
        };
        this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
        this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
        this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
      }
      interpolate(str, data2, lng, options2) {
        let match;
        let value;
        let replaces;
        const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        const handleFormat = (key) => {
          if (key.indexOf(this.formatSeparator) < 0) {
            const path2 = deepFindWithDefaults(data2, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
            return this.alwaysFormat ? this.format(path2, void 0, lng, {
              ...options2,
              ...data2,
              interpolationkey: key
            }) : path2;
          }
          const p3 = key.split(this.formatSeparator);
          const k3 = p3.shift().trim();
          const f3 = p3.join(this.formatSeparator).trim();
          return this.format(deepFindWithDefaults(data2, defaultData, k3, this.options.keySeparator, this.options.ignoreJSONStructure), f3, lng, {
            ...options2,
            ...data2,
            interpolationkey: k3
          });
        };
        this.resetRegExp();
        const missingInterpolationHandler = options2?.missingInterpolationHandler || this.options.missingInterpolationHandler;
        const skipOnVariables = options2?.interpolation?.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        const todos = [{
          regex: this.regexpUnescape,
          safeValue: (val) => regexSafe(val)
        }, {
          regex: this.regexp,
          safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
        }];
        todos.forEach((todo) => {
          replaces = 0;
          while (match = todo.regex.exec(str)) {
            const matchedVar = match[1].trim();
            value = handleFormat(matchedVar);
            if (value === void 0) {
              if (typeof missingInterpolationHandler === "function") {
                const temp = missingInterpolationHandler(str, match, options2);
                value = isString3(temp) ? temp : "";
              } else if (options2 && Object.prototype.hasOwnProperty.call(options2, matchedVar)) {
                value = "";
              } else if (skipOnVariables) {
                value = match[0];
                continue;
              } else {
                this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
                value = "";
              }
            } else if (!isString3(value) && !this.useRawValueToEscape) {
              value = makeString(value);
            }
            const safeValue = todo.safeValue(value);
            str = str.replace(match[0], safeValue);
            if (skipOnVariables) {
              todo.regex.lastIndex += value.length;
              todo.regex.lastIndex -= match[0].length;
            } else {
              todo.regex.lastIndex = 0;
            }
            replaces++;
            if (replaces >= this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
      nest(str, fc, options2 = {}) {
        let match;
        let value;
        let clonedOptions;
        const handleHasOptions = (key, inheritedOptions) => {
          const sep = this.nestingOptionsSeparator;
          if (key.indexOf(sep) < 0) return key;
          const c3 = key.split(new RegExp(`${sep}[ ]*{`));
          let optionsString = `{${c3[1]}`;
          key = c3[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          const matchedSingleQuotes = optionsString.match(/'/g);
          const matchedDoubleQuotes = optionsString.match(/"/g);
          if ((matchedSingleQuotes?.length ?? 0) % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
            optionsString = optionsString.replace(/'/g, '"');
          }
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions) clonedOptions = {
              ...inheritedOptions,
              ...clonedOptions
            };
          } catch (e4) {
            this.logger.warn(`failed parsing options string in nesting for key ${key}`, e4);
            return `${key}${sep}${optionsString}`;
          }
          if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
          return key;
        };
        while (match = this.nestingRegexp.exec(str)) {
          let formatters = [];
          clonedOptions = {
            ...options2
          };
          clonedOptions = clonedOptions.replace && !isString3(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;
          const keyEndIndex = /{.*}/.test(match[1]) ? match[1].lastIndexOf("}") + 1 : match[1].indexOf(this.formatSeparator);
          if (keyEndIndex !== -1) {
            formatters = match[1].slice(keyEndIndex).split(this.formatSeparator).map((elem) => elem.trim()).filter(Boolean);
            match[1] = match[1].slice(0, keyEndIndex);
          }
          value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
          if (value && match[0] === str && !isString3(value)) return value;
          if (!isString3(value)) value = makeString(value);
          if (!value) {
            this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
            value = "";
          }
          if (formatters.length) {
            value = formatters.reduce((v3, f3) => this.format(v3, f3, options2.lng, {
              ...options2,
              interpolationkey: match[1].trim()
            }), value.trim());
          }
          str = str.replace(match[0], value);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    };
    parseFormatStr = (formatStr) => {
      let formatName = formatStr.toLowerCase().trim();
      const formatOptions = {};
      if (formatStr.indexOf("(") > -1) {
        const p3 = formatStr.split("(");
        formatName = p3[0].toLowerCase().trim();
        const optStr = p3[1].substring(0, p3[1].length - 1);
        if (formatName === "currency" && optStr.indexOf(":") < 0) {
          if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
          if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
          const opts = optStr.split(";");
          opts.forEach((opt) => {
            if (opt) {
              const [key, ...rest] = opt.split(":");
              const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
              const trimmedKey = key.trim();
              if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
              if (val === "false") formatOptions[trimmedKey] = false;
              if (val === "true") formatOptions[trimmedKey] = true;
              if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
            }
          });
        }
      }
      return {
        formatName,
        formatOptions
      };
    };
    createCachedFormatter = (fn) => {
      const cache = {};
      return (v3, l3, o3) => {
        let optForCache = o3;
        if (o3 && o3.interpolationkey && o3.formatParams && o3.formatParams[o3.interpolationkey] && o3[o3.interpolationkey]) {
          optForCache = {
            ...optForCache,
            [o3.interpolationkey]: void 0
          };
        }
        const key = l3 + JSON.stringify(optForCache);
        let frm = cache[key];
        if (!frm) {
          frm = fn(getCleanedCode(l3), o3);
          cache[key] = frm;
        }
        return frm(v3);
      };
    };
    createNonCachedFormatter = (fn) => (v3, l3, o3) => fn(getCleanedCode(l3), o3)(v3);
    Formatter = class {
      constructor(options2 = {}) {
        this.logger = baseLogger.create("formatter");
        this.options = options2;
        this.init(options2);
      }
      init(services, options2 = {
        interpolation: {}
      }) {
        this.formatSeparator = options2.interpolation.formatSeparator || ",";
        const cf = options2.cacheInBuiltFormats ? createCachedFormatter : createNonCachedFormatter;
        this.formats = {
          number: cf((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          currency: cf((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt,
              style: "currency"
            });
            return (val) => formatter.format(val);
          }),
          datetime: cf((lng, opt) => {
            const formatter = new Intl.DateTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          relativetime: cf((lng, opt) => {
            const formatter = new Intl.RelativeTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val, opt.range || "day");
          }),
          list: cf((lng, opt) => {
            const formatter = new Intl.ListFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          })
        };
      }
      add(name2, fc) {
        this.formats[name2.toLowerCase().trim()] = fc;
      }
      addCached(name2, fc) {
        this.formats[name2.toLowerCase().trim()] = createCachedFormatter(fc);
      }
      format(value, format, lng, options2 = {}) {
        const formats = format.split(this.formatSeparator);
        if (formats.length > 1 && formats[0].indexOf("(") > 1 && formats[0].indexOf(")") < 0 && formats.find((f3) => f3.indexOf(")") > -1)) {
          const lastIndex = formats.findIndex((f3) => f3.indexOf(")") > -1);
          formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
        }
        const result = formats.reduce((mem, f3) => {
          const {
            formatName,
            formatOptions
          } = parseFormatStr(f3);
          if (this.formats[formatName]) {
            let formatted = mem;
            try {
              const valOptions = options2?.formatParams?.[options2.interpolationkey] || {};
              const l3 = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
              formatted = this.formats[formatName](mem, l3, {
                ...formatOptions,
                ...options2,
                ...valOptions
              });
            } catch (error44) {
              this.logger.warn(error44);
            }
            return formatted;
          } else {
            this.logger.warn(`there was no format function for ${formatName}`);
          }
          return mem;
        }, value);
        return result;
      }
    };
    removePending = (q3, name2) => {
      if (q3.pending[name2] !== void 0) {
        delete q3.pending[name2];
        q3.pendingCount--;
      }
    };
    Connector = class extends EventEmitter {
      constructor(backend, store, services, options2 = {}) {
        super();
        this.backend = backend;
        this.store = store;
        this.services = services;
        this.languageUtils = services.languageUtils;
        this.options = options2;
        this.logger = baseLogger.create("backendConnector");
        this.waitingReads = [];
        this.maxParallelReads = options2.maxParallelReads || 10;
        this.readingCalls = 0;
        this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
        this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
        this.state = {};
        this.queue = [];
        this.backend?.init?.(services, options2.backend, options2);
      }
      queueLoad(languages, namespaces, options2, callback) {
        const toLoad = {};
        const pending = {};
        const toLoadLanguages = {};
        const toLoadNamespaces = {};
        languages.forEach((lng) => {
          let hasAllNamespaces = true;
          namespaces.forEach((ns) => {
            const name2 = `${lng}|${ns}`;
            if (!options2.reload && this.store.hasResourceBundle(lng, ns)) {
              this.state[name2] = 2;
            } else if (this.state[name2] < 0) ;
            else if (this.state[name2] === 1) {
              if (pending[name2] === void 0) pending[name2] = true;
            } else {
              this.state[name2] = 1;
              hasAllNamespaces = false;
              if (pending[name2] === void 0) pending[name2] = true;
              if (toLoad[name2] === void 0) toLoad[name2] = true;
              if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
            }
          });
          if (!hasAllNamespaces) toLoadLanguages[lng] = true;
        });
        if (Object.keys(toLoad).length || Object.keys(pending).length) {
          this.queue.push({
            pending,
            pendingCount: Object.keys(pending).length,
            loaded: {},
            errors: [],
            callback
          });
        }
        return {
          toLoad: Object.keys(toLoad),
          pending: Object.keys(pending),
          toLoadLanguages: Object.keys(toLoadLanguages),
          toLoadNamespaces: Object.keys(toLoadNamespaces)
        };
      }
      loaded(name2, err, data2) {
        const s3 = name2.split("|");
        const lng = s3[0];
        const ns = s3[1];
        if (err) this.emit("failedLoading", lng, ns, err);
        if (!err && data2) {
          this.store.addResourceBundle(lng, ns, data2, void 0, void 0, {
            skipCopy: true
          });
        }
        this.state[name2] = err ? -1 : 2;
        if (err && data2) this.state[name2] = 0;
        const loaded = {};
        this.queue.forEach((q3) => {
          pushPath(q3.loaded, [lng], ns);
          removePending(q3, name2);
          if (err) q3.errors.push(err);
          if (q3.pendingCount === 0 && !q3.done) {
            Object.keys(q3.loaded).forEach((l3) => {
              if (!loaded[l3]) loaded[l3] = {};
              const loadedKeys = q3.loaded[l3];
              if (loadedKeys.length) {
                loadedKeys.forEach((n3) => {
                  if (loaded[l3][n3] === void 0) loaded[l3][n3] = true;
                });
              }
            });
            q3.done = true;
            if (q3.errors.length) {
              q3.callback(q3.errors);
            } else {
              q3.callback();
            }
          }
        });
        this.emit("loaded", loaded);
        this.queue = this.queue.filter((q3) => !q3.done);
      }
      read(lng, ns, fcName, tried = 0, wait = this.retryTimeout, callback) {
        if (!lng.length) return callback(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
          this.waitingReads.push({
            lng,
            ns,
            fcName,
            tried,
            wait,
            callback
          });
          return;
        }
        this.readingCalls++;
        const resolver2 = (err, data2) => {
          this.readingCalls--;
          if (this.waitingReads.length > 0) {
            const next = this.waitingReads.shift();
            this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
          }
          if (err && data2 && tried < this.maxRetries) {
            setTimeout(() => {
              this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
            }, wait);
            return;
          }
          callback(err, data2);
        };
        const fc = this.backend[fcName].bind(this.backend);
        if (fc.length === 2) {
          try {
            const r3 = fc(lng, ns);
            if (r3 && typeof r3.then === "function") {
              r3.then((data2) => resolver2(null, data2)).catch(resolver2);
            } else {
              resolver2(null, r3);
            }
          } catch (err) {
            resolver2(err);
          }
          return;
        }
        return fc(lng, ns, resolver2);
      }
      prepareLoading(languages, namespaces, options2 = {}, callback) {
        if (!this.backend) {
          this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          return callback && callback();
        }
        if (isString3(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
        if (isString3(namespaces)) namespaces = [namespaces];
        const toLoad = this.queueLoad(languages, namespaces, options2, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length) callback();
          return null;
        }
        toLoad.toLoad.forEach((name2) => {
          this.loadOne(name2);
        });
      }
      load(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
      reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
      loadOne(name2, prefix = "") {
        const s3 = name2.split("|");
        const lng = s3[0];
        const ns = s3[1];
        this.read(lng, ns, "read", void 0, void 0, (err, data2) => {
          if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
          if (!err && data2) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data2);
          this.loaded(name2, err, data2);
        });
      }
      saveMissing(languages, namespace, key, fallbackValue, isUpdate, options2 = {}, clb = () => {
      }) {
        if (this.services?.utils?.hasLoadedNamespace && !this.services?.utils?.hasLoadedNamespace(namespace)) {
          this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          return;
        }
        if (key === void 0 || key === null || key === "") return;
        if (this.backend?.create) {
          const opts = {
            ...options2,
            isUpdate
          };
          const fc = this.backend.create.bind(this.backend);
          if (fc.length < 6) {
            try {
              let r3;
              if (fc.length === 5) {
                r3 = fc(languages, namespace, key, fallbackValue, opts);
              } else {
                r3 = fc(languages, namespace, key, fallbackValue);
              }
              if (r3 && typeof r3.then === "function") {
                r3.then((data2) => clb(null, data2)).catch(clb);
              } else {
                clb(null, r3);
              }
            } catch (err) {
              clb(err);
            }
          } else {
            fc(languages, namespace, key, fallbackValue, clb, opts);
          }
        }
        if (!languages || !languages[0]) return;
        this.store.addResource(languages[0], namespace, key, fallbackValue);
      }
    };
    get = () => ({
      debug: false,
      initAsync: true,
      ns: ["translation"],
      defaultNS: ["translation"],
      fallbackLng: ["dev"],
      fallbackNS: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: "all",
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: ".",
      nsSeparator: ":",
      pluralSeparator: "_",
      contextSeparator: "_",
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: "fallback",
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: false,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: (args) => {
        let ret = {};
        if (typeof args[1] === "object") ret = args[1];
        if (isString3(args[1])) ret.defaultValue = args[1];
        if (isString3(args[2])) ret.tDescription = args[2];
        if (typeof args[2] === "object" || typeof args[3] === "object") {
          const options2 = args[3] || args[2];
          Object.keys(options2).forEach((key) => {
            ret[key] = options2[key];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: (value) => value,
        prefix: "{{",
        suffix: "}}",
        formatSeparator: ",",
        unescapePrefix: "-",
        nestingPrefix: "$t(",
        nestingSuffix: ")",
        nestingOptionsSeparator: ",",
        maxReplaces: 1e3,
        skipOnVariables: true
      },
      cacheInBuiltFormats: true
    });
    transformOptions = (options2) => {
      if (isString3(options2.ns)) options2.ns = [options2.ns];
      if (isString3(options2.fallbackLng)) options2.fallbackLng = [options2.fallbackLng];
      if (isString3(options2.fallbackNS)) options2.fallbackNS = [options2.fallbackNS];
      if (options2.supportedLngs?.indexOf?.("cimode") < 0) {
        options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
      }
      if (typeof options2.initImmediate === "boolean") options2.initAsync = options2.initImmediate;
      return options2;
    };
    noop = () => {
    };
    bindMemberFunctions = (inst) => {
      const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
      mems.forEach((mem) => {
        if (typeof inst[mem] === "function") {
          inst[mem] = inst[mem].bind(inst);
        }
      });
    };
    I18n = class _I18n extends EventEmitter {
      constructor(options2 = {}, callback) {
        super();
        this.options = transformOptions(options2);
        this.services = {};
        this.logger = baseLogger;
        this.modules = {
          external: []
        };
        bindMemberFunctions(this);
        if (callback && !this.isInitialized && !options2.isClone) {
          if (!this.options.initAsync) {
            this.init(options2, callback);
            return this;
          }
          setTimeout(() => {
            this.init(options2, callback);
          }, 0);
        }
      }
      init(options2 = {}, callback) {
        this.isInitializing = true;
        if (typeof options2 === "function") {
          callback = options2;
          options2 = {};
        }
        if (options2.defaultNS == null && options2.ns) {
          if (isString3(options2.ns)) {
            options2.defaultNS = options2.ns;
          } else if (options2.ns.indexOf("translation") < 0) {
            options2.defaultNS = options2.ns[0];
          }
        }
        const defOpts = get();
        this.options = {
          ...defOpts,
          ...this.options,
          ...transformOptions(options2)
        };
        this.options.interpolation = {
          ...defOpts.interpolation,
          ...this.options.interpolation
        };
        if (options2.keySeparator !== void 0) {
          this.options.userDefinedKeySeparator = options2.keySeparator;
        }
        if (options2.nsSeparator !== void 0) {
          this.options.userDefinedNsSeparator = options2.nsSeparator;
        }
        const createClassOnDemand = (ClassOrObject) => {
          if (!ClassOrObject) return null;
          if (typeof ClassOrObject === "function") return new ClassOrObject();
          return ClassOrObject;
        };
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          let formatter;
          if (this.modules.formatter) {
            formatter = this.modules.formatter;
          } else {
            formatter = Formatter;
          }
          const lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          const s3 = this.services;
          s3.logger = baseLogger;
          s3.resourceStore = this.store;
          s3.languageUtils = lu;
          s3.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          const usingLegacyFormatFunction = this.options.interpolation.format && this.options.interpolation.format !== defOpts.interpolation.format;
          if (usingLegacyFormatFunction) {
            this.logger.warn(`init: you are still using the legacy format function, please use the new approach: https://www.i18next.com/translation-function/formatting`);
          }
          if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
            s3.formatter = createClassOnDemand(formatter);
            if (s3.formatter.init) s3.formatter.init(s3, this.options);
            this.options.interpolation.format = s3.formatter.format.bind(s3.formatter);
          }
          s3.interpolator = new Interpolator(this.options);
          s3.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s3.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s3.resourceStore, s3, this.options);
          s3.backendConnector.on("*", (event, ...args) => {
            this.emit(event, ...args);
          });
          if (this.modules.languageDetector) {
            s3.languageDetector = createClassOnDemand(this.modules.languageDetector);
            if (s3.languageDetector.init) s3.languageDetector.init(s3, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s3.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s3.i18nFormat.init) s3.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on("*", (event, ...args) => {
            this.emit(event, ...args);
          });
          this.modules.external.forEach((m3) => {
            if (m3.init) m3.init(this);
          });
        }
        this.format = this.options.interpolation.format;
        if (!callback) callback = noop;
        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
          const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn("init: no languageDetector is used and no lng is defined");
        }
        const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
        storeApi.forEach((fcName) => {
          this[fcName] = (...args) => this.store[fcName](...args);
        });
        const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
        storeApiChained.forEach((fcName) => {
          this[fcName] = (...args) => {
            this.store[fcName](...args);
            return this;
          };
        });
        const deferred = defer();
        const load = () => {
          const finish = (err, t4) => {
            this.isInitializing = false;
            if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
            this.isInitialized = true;
            if (!this.options.isClone) this.logger.log("initialized", this.options);
            this.emit("initialized", this.options);
            deferred.resolve(t4);
            callback(err, t4);
          };
          if (this.languages && !this.isInitialized) return finish(null, this.t.bind(this));
          this.changeLanguage(this.options.lng, finish);
        };
        if (this.options.resources || !this.options.initAsync) {
          load();
        } else {
          setTimeout(load, 0);
        }
        return deferred;
      }
      loadResources(language, callback = noop) {
        let usedCallback = callback;
        const usedLng = isString3(language) ? language : this.language;
        if (typeof language === "function") usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng?.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
          const toLoad = [];
          const append = (lng) => {
            if (!lng) return;
            if (lng === "cimode") return;
            const lngs = this.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach((l3) => {
              if (l3 === "cimode") return;
              if (toLoad.indexOf(l3) < 0) toLoad.push(l3);
            });
          };
          if (!usedLng) {
            const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach((l3) => append(l3));
          } else {
            append(usedLng);
          }
          this.options.preload?.forEach?.((l3) => append(l3));
          this.services.backendConnector.load(toLoad, this.options.ns, (e4) => {
            if (!e4 && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
            usedCallback(e4);
          });
        } else {
          usedCallback(null);
        }
      }
      reloadResources(lngs, ns, callback) {
        const deferred = defer();
        if (typeof lngs === "function") {
          callback = lngs;
          lngs = void 0;
        }
        if (typeof ns === "function") {
          callback = ns;
          ns = void 0;
        }
        if (!lngs) lngs = this.languages;
        if (!ns) ns = this.options.ns;
        if (!callback) callback = noop;
        this.services.backendConnector.reload(lngs, ns, (err) => {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
      use(module) {
        if (!module) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!module.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        if (module.type === "backend") {
          this.modules.backend = module;
        }
        if (module.type === "logger" || module.log && module.warn && module.error) {
          this.modules.logger = module;
        }
        if (module.type === "languageDetector") {
          this.modules.languageDetector = module;
        }
        if (module.type === "i18nFormat") {
          this.modules.i18nFormat = module;
        }
        if (module.type === "postProcessor") {
          postProcessor.addPostProcessor(module);
        }
        if (module.type === "formatter") {
          this.modules.formatter = module;
        }
        if (module.type === "3rdParty") {
          this.modules.external.push(module);
        }
        return this;
      }
      setResolvedLanguage(l3) {
        if (!l3 || !this.languages) return;
        if (["cimode", "dev"].indexOf(l3) > -1) return;
        for (let li = 0; li < this.languages.length; li++) {
          const lngInLngs = this.languages[li];
          if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
          if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
            this.resolvedLanguage = lngInLngs;
            break;
          }
        }
        if (!this.resolvedLanguage && this.languages.indexOf(l3) < 0 && this.store.hasLanguageSomeTranslations(l3)) {
          this.resolvedLanguage = l3;
          this.languages.unshift(l3);
        }
      }
      changeLanguage(lng, callback) {
        this.isLanguageChangingTo = lng;
        const deferred = defer();
        this.emit("languageChanging", lng);
        const setLngProps = (l3) => {
          this.language = l3;
          this.languages = this.services.languageUtils.toResolveHierarchy(l3);
          this.resolvedLanguage = void 0;
          this.setResolvedLanguage(l3);
        };
        const done = (err, l3) => {
          if (l3) {
            if (this.isLanguageChangingTo === lng) {
              setLngProps(l3);
              this.translator.changeLanguage(l3);
              this.isLanguageChangingTo = void 0;
              this.emit("languageChanged", l3);
              this.logger.log("languageChanged", l3);
            }
          } else {
            this.isLanguageChangingTo = void 0;
          }
          deferred.resolve((...args) => this.t(...args));
          if (callback) callback(err, (...args) => this.t(...args));
        };
        const setLng = (lngs) => {
          if (!lng && !lngs && this.services.languageDetector) lngs = [];
          const fl = isString3(lngs) ? lngs : lngs && lngs[0];
          const l3 = this.store.hasLanguageSomeTranslations(fl) ? fl : this.services.languageUtils.getBestMatchFromCodes(isString3(lngs) ? [lngs] : lngs);
          if (l3) {
            if (!this.language) {
              setLngProps(l3);
            }
            if (!this.translator.language) this.translator.changeLanguage(l3);
            this.services.languageDetector?.cacheUserLanguage?.(l3);
          }
          this.loadResources(l3, (err) => {
            done(err, l3);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          if (this.services.languageDetector.detect.length === 0) {
            this.services.languageDetector.detect().then(setLng);
          } else {
            this.services.languageDetector.detect(setLng);
          }
        } else {
          setLng(lng);
        }
        return deferred;
      }
      getFixedT(lng, ns, keyPrefix) {
        const fixedT = (key, opts, ...rest) => {
          let o3;
          if (typeof opts !== "object") {
            o3 = this.options.overloadTranslationOptionHandler([key, opts].concat(rest));
          } else {
            o3 = {
              ...opts
            };
          }
          o3.lng = o3.lng || fixedT.lng;
          o3.lngs = o3.lngs || fixedT.lngs;
          o3.ns = o3.ns || fixedT.ns;
          if (o3.keyPrefix !== "") o3.keyPrefix = o3.keyPrefix || keyPrefix || fixedT.keyPrefix;
          const keySeparator = this.options.keySeparator || ".";
          let resultKey;
          if (o3.keyPrefix && Array.isArray(key)) {
            resultKey = key.map((k3) => `${o3.keyPrefix}${keySeparator}${k3}`);
          } else {
            resultKey = o3.keyPrefix ? `${o3.keyPrefix}${keySeparator}${key}` : key;
          }
          return this.t(resultKey, o3);
        };
        if (isString3(lng)) {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        fixedT.keyPrefix = keyPrefix;
        return fixedT;
      }
      t(...args) {
        return this.translator?.translate(...args);
      }
      exists(...args) {
        return this.translator?.exists(...args);
      }
      setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
      hasLoadedNamespace(ns, options2 = {}) {
        if (!this.isInitialized) {
          this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
          return false;
        }
        const lng = options2.lng || this.resolvedLanguage || this.languages[0];
        const fallbackLng = this.options ? this.options.fallbackLng : false;
        const lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === "cimode") return true;
        const loadNotPending = (l3, n3) => {
          const loadState = this.services.backendConnector.state[`${l3}|${n3}`];
          return loadState === -1 || loadState === 0 || loadState === 2;
        };
        if (options2.precheck) {
          const preResult = options2.precheck(this, loadNotPending);
          if (preResult !== void 0) return preResult;
        }
        if (this.hasResourceBundle(lng, ns)) return true;
        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
        return false;
      }
      loadNamespaces(ns, callback) {
        const deferred = defer();
        if (!this.options.ns) {
          if (callback) callback();
          return Promise.resolve();
        }
        if (isString3(ns)) ns = [ns];
        ns.forEach((n3) => {
          if (this.options.ns.indexOf(n3) < 0) this.options.ns.push(n3);
        });
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      loadLanguages(lngs, callback) {
        const deferred = defer();
        if (isString3(lngs)) lngs = [lngs];
        const preloaded = this.options.preload || [];
        const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
        if (!newLngs.length) {
          if (callback) callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      dir(lng) {
        if (!lng) lng = this.resolvedLanguage || (this.languages?.length > 0 ? this.languages[0] : this.language);
        if (!lng) return "rtl";
        try {
          const l3 = new Intl.Locale(lng);
          if (l3 && l3.getTextInfo) {
            const ti = l3.getTextInfo();
            if (ti && ti.direction) return ti.direction;
          }
        } catch (e4) {
        }
        const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
        const languageUtils = this.services?.languageUtils || new LanguageUtil(get());
        if (lng.toLowerCase().indexOf("-latn") > 1) return "ltr";
        return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
      }
      static createInstance(options2 = {}, callback) {
        return new _I18n(options2, callback);
      }
      cloneInstance(options2 = {}, callback = noop) {
        const forkResourceStore = options2.forkResourceStore;
        if (forkResourceStore) delete options2.forkResourceStore;
        const mergedOptions = {
          ...this.options,
          ...options2,
          ...{
            isClone: true
          }
        };
        const clone2 = new _I18n(mergedOptions);
        if (options2.debug !== void 0 || options2.prefix !== void 0) {
          clone2.logger = clone2.logger.clone(options2);
        }
        const membersToCopy = ["store", "services", "language"];
        membersToCopy.forEach((m3) => {
          clone2[m3] = this[m3];
        });
        clone2.services = {
          ...this.services
        };
        clone2.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        if (forkResourceStore) {
          const clonedData = Object.keys(this.store.data).reduce((prev, l3) => {
            prev[l3] = {
              ...this.store.data[l3]
            };
            prev[l3] = Object.keys(prev[l3]).reduce((acc, n3) => {
              acc[n3] = {
                ...prev[l3][n3]
              };
              return acc;
            }, prev[l3]);
            return prev;
          }, {});
          clone2.store = new ResourceStore(clonedData, mergedOptions);
          clone2.services.resourceStore = clone2.store;
        }
        clone2.translator = new Translator(clone2.services, mergedOptions);
        clone2.translator.on("*", (event, ...args) => {
          clone2.emit(event, ...args);
        });
        clone2.init(mergedOptions, callback);
        clone2.translator.options = mergedOptions;
        clone2.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        return clone2;
      }
      toJSON() {
        return {
          options: this.options,
          store: this.store,
          language: this.language,
          languages: this.languages,
          resolvedLanguage: this.resolvedLanguage
        };
      }
    };
    instance = I18n.createInstance();
    instance.createInstance = I18n.createInstance;
    createInstance = instance.createInstance;
    dir = instance.dir;
    init3 = instance.init;
    loadResources = instance.loadResources;
    reloadResources = instance.reloadResources;
    use = instance.use;
    changeLanguage = instance.changeLanguage;
    getFixedT = instance.getFixedT;
    t2 = instance.t;
    exists = instance.exists;
    setDefaultNamespace = instance.setDefaultNamespace;
    hasLoadedNamespace2 = instance.hasLoadedNamespace;
    loadNamespaces2 = instance.loadNamespaces;
    loadLanguages2 = instance.loadLanguages;
  }
});

// node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js
function defaults(obj) {
  forEach.call(slice.call(arguments, 1), (source) => {
    if (source) {
      for (const prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}
function hasXSS(input) {
  if (typeof input !== "string") return false;
  const xssPatterns = [/<\s*script.*?>/i, /<\s*\/\s*script\s*>/i, /<\s*img.*?on\w+\s*=/i, /<\s*\w+\s*on\w+\s*=.*?>/i, /javascript\s*:/i, /vbscript\s*:/i, /expression\s*\(/i, /eval\s*\(/i, /alert\s*\(/i, /document\.cookie/i, /document\.write\s*\(/i, /window\.location/i, /innerHTML/i];
  return xssPatterns.some((pattern) => pattern.test(input));
}
var slice, forEach, fieldContentRegExp, serializeCookie, cookie, cookie$1, querystring, hash, hasLocalStorageSupport, localStorageAvailable, localStorage2, hasSessionStorageSupport, sessionStorageAvailable, sessionStorage2, navigator$1, htmlTag, path, subdomain, canCookies, order, getDefaults2, Browser;
var init_i18nextBrowserLanguageDetector = __esm({
  "node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js"() {
    ({
      slice,
      forEach
    } = []);
    fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    serializeCookie = function(name2, val) {
      let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        path: "/"
      };
      const opt = options2;
      const value = encodeURIComponent(val);
      let str = `${name2}=${value}`;
      if (opt.maxAge > 0) {
        const maxAge = opt.maxAge - 0;
        if (Number.isNaN(maxAge)) throw new Error("maxAge should be a Number");
        str += `; Max-Age=${Math.floor(maxAge)}`;
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += `; Domain=${opt.domain}`;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += `; Path=${opt.path}`;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += `; Expires=${opt.expires.toUTCString()}`;
      }
      if (opt.httpOnly) str += "; HttpOnly";
      if (opt.secure) str += "; Secure";
      if (opt.sameSite) {
        const sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      if (opt.partitioned) str += "; Partitioned";
      return str;
    };
    cookie = {
      create(name2, value, minutes, domain2) {
        let cookieOptions = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
          path: "/",
          sameSite: "strict"
        };
        if (minutes) {
          cookieOptions.expires = /* @__PURE__ */ new Date();
          cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1e3);
        }
        if (domain2) cookieOptions.domain = domain2;
        document.cookie = serializeCookie(name2, value, cookieOptions);
      },
      read(name2) {
        const nameEQ = `${name2}=`;
        const ca = document.cookie.split(";");
        for (let i3 = 0; i3 < ca.length; i3++) {
          let c3 = ca[i3];
          while (c3.charAt(0) === " ") c3 = c3.substring(1, c3.length);
          if (c3.indexOf(nameEQ) === 0) return c3.substring(nameEQ.length, c3.length);
        }
        return null;
      },
      remove(name2, domain2) {
        this.create(name2, "", -1, domain2);
      }
    };
    cookie$1 = {
      name: "cookie",
      // Deconstruct the options object and extract the lookupCookie property
      lookup(_ref) {
        let {
          lookupCookie
        } = _ref;
        if (lookupCookie && typeof document !== "undefined") {
          return cookie.read(lookupCookie) || void 0;
        }
        return void 0;
      },
      // Deconstruct the options object and extract the lookupCookie, cookieMinutes, cookieDomain, and cookieOptions properties
      cacheUserLanguage(lng, _ref2) {
        let {
          lookupCookie,
          cookieMinutes,
          cookieDomain,
          cookieOptions
        } = _ref2;
        if (lookupCookie && typeof document !== "undefined") {
          cookie.create(lookupCookie, lng, cookieMinutes, cookieDomain, cookieOptions);
        }
      }
    };
    querystring = {
      name: "querystring",
      // Deconstruct the options object and extract the lookupQuerystring property
      lookup(_ref) {
        let {
          lookupQuerystring
        } = _ref;
        let found;
        if (typeof window !== "undefined") {
          let {
            search: search2
          } = window.location;
          if (!window.location.search && window.location.hash?.indexOf("?") > -1) {
            search2 = window.location.hash.substring(window.location.hash.indexOf("?"));
          }
          const query = search2.substring(1);
          const params = query.split("&");
          for (let i3 = 0; i3 < params.length; i3++) {
            const pos = params[i3].indexOf("=");
            if (pos > 0) {
              const key = params[i3].substring(0, pos);
              if (key === lookupQuerystring) {
                found = params[i3].substring(pos + 1);
              }
            }
          }
        }
        return found;
      }
    };
    hash = {
      name: "hash",
      // Deconstruct the options object and extract the lookupHash property and the lookupFromHashIndex property
      lookup(_ref) {
        let {
          lookupHash,
          lookupFromHashIndex
        } = _ref;
        let found;
        if (typeof window !== "undefined") {
          const {
            hash: hash2
          } = window.location;
          if (hash2 && hash2.length > 2) {
            const query = hash2.substring(1);
            if (lookupHash) {
              const params = query.split("&");
              for (let i3 = 0; i3 < params.length; i3++) {
                const pos = params[i3].indexOf("=");
                if (pos > 0) {
                  const key = params[i3].substring(0, pos);
                  if (key === lookupHash) {
                    found = params[i3].substring(pos + 1);
                  }
                }
              }
            }
            if (found) return found;
            if (!found && lookupFromHashIndex > -1) {
              const language = hash2.match(/\/([a-zA-Z-]*)/g);
              if (!Array.isArray(language)) return void 0;
              const index2 = typeof lookupFromHashIndex === "number" ? lookupFromHashIndex : 0;
              return language[index2]?.replace("/", "");
            }
          }
        }
        return found;
      }
    };
    hasLocalStorageSupport = null;
    localStorageAvailable = () => {
      if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;
      try {
        hasLocalStorageSupport = typeof window !== "undefined" && window.localStorage !== null;
        if (!hasLocalStorageSupport) {
          return false;
        }
        const testKey = "i18next.translate.boo";
        window.localStorage.setItem(testKey, "foo");
        window.localStorage.removeItem(testKey);
      } catch (e4) {
        hasLocalStorageSupport = false;
      }
      return hasLocalStorageSupport;
    };
    localStorage2 = {
      name: "localStorage",
      // Deconstruct the options object and extract the lookupLocalStorage property
      lookup(_ref) {
        let {
          lookupLocalStorage
        } = _ref;
        if (lookupLocalStorage && localStorageAvailable()) {
          return window.localStorage.getItem(lookupLocalStorage) || void 0;
        }
        return void 0;
      },
      // Deconstruct the options object and extract the lookupLocalStorage property
      cacheUserLanguage(lng, _ref2) {
        let {
          lookupLocalStorage
        } = _ref2;
        if (lookupLocalStorage && localStorageAvailable()) {
          window.localStorage.setItem(lookupLocalStorage, lng);
        }
      }
    };
    hasSessionStorageSupport = null;
    sessionStorageAvailable = () => {
      if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;
      try {
        hasSessionStorageSupport = typeof window !== "undefined" && window.sessionStorage !== null;
        if (!hasSessionStorageSupport) {
          return false;
        }
        const testKey = "i18next.translate.boo";
        window.sessionStorage.setItem(testKey, "foo");
        window.sessionStorage.removeItem(testKey);
      } catch (e4) {
        hasSessionStorageSupport = false;
      }
      return hasSessionStorageSupport;
    };
    sessionStorage2 = {
      name: "sessionStorage",
      lookup(_ref) {
        let {
          lookupSessionStorage
        } = _ref;
        if (lookupSessionStorage && sessionStorageAvailable()) {
          return window.sessionStorage.getItem(lookupSessionStorage) || void 0;
        }
        return void 0;
      },
      cacheUserLanguage(lng, _ref2) {
        let {
          lookupSessionStorage
        } = _ref2;
        if (lookupSessionStorage && sessionStorageAvailable()) {
          window.sessionStorage.setItem(lookupSessionStorage, lng);
        }
      }
    };
    navigator$1 = {
      name: "navigator",
      lookup(options2) {
        const found = [];
        if (typeof navigator !== "undefined") {
          const {
            languages,
            userLanguage,
            language
          } = navigator;
          if (languages) {
            for (let i3 = 0; i3 < languages.length; i3++) {
              found.push(languages[i3]);
            }
          }
          if (userLanguage) {
            found.push(userLanguage);
          }
          if (language) {
            found.push(language);
          }
        }
        return found.length > 0 ? found : void 0;
      }
    };
    htmlTag = {
      name: "htmlTag",
      // Deconstruct the options object and extract the htmlTag property
      lookup(_ref) {
        let {
          htmlTag: htmlTag2
        } = _ref;
        let found;
        const internalHtmlTag = htmlTag2 || (typeof document !== "undefined" ? document.documentElement : null);
        if (internalHtmlTag && typeof internalHtmlTag.getAttribute === "function") {
          found = internalHtmlTag.getAttribute("lang");
        }
        return found;
      }
    };
    path = {
      name: "path",
      // Deconstruct the options object and extract the lookupFromPathIndex property
      lookup(_ref) {
        let {
          lookupFromPathIndex
        } = _ref;
        if (typeof window === "undefined") return void 0;
        const language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
        if (!Array.isArray(language)) return void 0;
        const index2 = typeof lookupFromPathIndex === "number" ? lookupFromPathIndex : 0;
        return language[index2]?.replace("/", "");
      }
    };
    subdomain = {
      name: "subdomain",
      lookup(_ref) {
        let {
          lookupFromSubdomainIndex
        } = _ref;
        const internalLookupFromSubdomainIndex = typeof lookupFromSubdomainIndex === "number" ? lookupFromSubdomainIndex + 1 : 1;
        const language = typeof window !== "undefined" && window.location?.hostname?.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);
        if (!language) return void 0;
        return language[internalLookupFromSubdomainIndex];
      }
    };
    canCookies = false;
    try {
      document.cookie;
      canCookies = true;
    } catch (e4) {
    }
    order = ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"];
    if (!canCookies) order.splice(1, 1);
    getDefaults2 = () => ({
      order,
      lookupQuerystring: "lng",
      lookupCookie: "i18next",
      lookupLocalStorage: "i18nextLng",
      lookupSessionStorage: "i18nextLng",
      // cache user language
      caches: ["localStorage"],
      excludeCacheFor: ["cimode"],
      // cookieMinutes: 10,
      // cookieDomain: 'myDomain'
      convertDetectedLanguage: (l3) => l3
    });
    Browser = class {
      constructor(services) {
        let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.type = "languageDetector";
        this.detectors = {};
        this.init(services, options2);
      }
      init() {
        let services = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          languageUtils: {}
        };
        let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let i18nOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        this.services = services;
        this.options = defaults(options2, this.options || {}, getDefaults2());
        if (typeof this.options.convertDetectedLanguage === "string" && this.options.convertDetectedLanguage.indexOf("15897") > -1) {
          this.options.convertDetectedLanguage = (l3) => l3.replace("-", "_");
        }
        if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
        this.i18nOptions = i18nOptions;
        this.addDetector(cookie$1);
        this.addDetector(querystring);
        this.addDetector(localStorage2);
        this.addDetector(sessionStorage2);
        this.addDetector(navigator$1);
        this.addDetector(htmlTag);
        this.addDetector(path);
        this.addDetector(subdomain);
        this.addDetector(hash);
      }
      addDetector(detector) {
        this.detectors[detector.name] = detector;
        return this;
      }
      detect() {
        let detectionOrder = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.order;
        let detected = [];
        detectionOrder.forEach((detectorName) => {
          if (this.detectors[detectorName]) {
            let lookup = this.detectors[detectorName].lookup(this.options);
            if (lookup && typeof lookup === "string") lookup = [lookup];
            if (lookup) detected = detected.concat(lookup);
          }
        });
        detected = detected.filter((d3) => d3 !== void 0 && d3 !== null && !hasXSS(d3)).map((d3) => this.options.convertDetectedLanguage(d3));
        if (this.services && this.services.languageUtils && this.services.languageUtils.getBestMatchFromCodes) return detected;
        return detected.length > 0 ? detected[0] : null;
      }
      cacheUserLanguage(lng) {
        let caches2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.caches;
        if (!caches2) return;
        if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
        caches2.forEach((cacheName) => {
          if (this.detectors[cacheName]) this.detectors[cacheName].cacheUserLanguage(lng, this.options);
        });
      }
    };
    Browser.type = "languageDetector";
  }
});

// src/i18n/locales/ar/common.json
var require_common = __commonJS({
  "src/i18n/locales/ar/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "\u0623\u0633\u062A\u0631\u0627\u0644 \u0643\u0648\u0631",
        tagline: "\u0645\u0633\u0627\u062D\u062A\u0643 \u0627\u0644\u0622\u0645\u0646\u0629 \u0644\u062F\u0639\u0645 \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629",
        loading: "\u062C\u0627\u0631\u064A \u062A\u062D\u0645\u064A\u0644 \u0645\u0633\u0627\u062D\u062A\u0643 \u0627\u0644\u0622\u0645\u0646\u0629...",
        error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0645\u0627. \u064A\u0631\u062C\u0649 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649.",
        offline: "\u0623\u0646\u062A \u063A\u064A\u0631 \u0645\u062A\u0635\u0644. \u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0644\u0627 \u062A\u0632\u0627\u0644 \u0645\u062A\u0627\u062D\u0629."
      },
      navigation: {
        share: "\u0645\u0634\u0627\u0631\u0643\u0629",
        my_activity: "\u0646\u0634\u0627\u0637\u064A",
        ai_chat: "\u0645\u062D\u0627\u062F\u062B\u0629 \u0645\u0639 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064A",
        my_safety_plan: "\u062E\u0637\u0629 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u062E\u0627\u0635\u0629 \u0628\u064A",
        community_feed: "\u0645\u0648\u062C\u0632 \u0627\u0644\u0645\u062C\u062A\u0645\u0639",
        reflections: "\u062A\u0623\u0645\u0644\u0627\u062A",
        get_help_now: "\u0627\u062D\u0635\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0627\u0644\u0622\u0646",
        quiet_space: "\u0645\u0633\u0627\u062D\u0629 \u0647\u0627\u062F\u0626\u0629",
        wellness_videos: "\u0641\u064A\u062F\u064A\u0648\u0647\u0627\u062A \u0627\u0644\u0639\u0627\u0641\u064A\u0629",
        moderation_history: "\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0625\u0634\u0631\u0627\u0641",
        guidelines: "\u0627\u0644\u0645\u0628\u0627\u062F\u0626 \u0627\u0644\u062A\u0648\u062C\u064A\u0647\u064A\u0629",
        legal: "\u0642\u0627\u0646\u0648\u0646\u064A",
        helper_login: "\u062A\u0633\u062C\u064A\u0644 \u062F\u062E\u0648\u0644 \u0627\u0644\u0645\u0633\u0627\u0639\u062F",
        settings: "\u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A",
        donate: "\u062A\u0628\u0631\u0639",
        wellness_tracking: "\u062A\u062A\u0628\u0639 \u0627\u0644\u0639\u0627\u0641\u064A\u0629",
        assessments: "\u0627\u0644\u062A\u0642\u064A\u064A\u0645\u0627\u062A",
        peer_support: "\u062F\u0639\u0645 \u0627\u0644\u0623\u0642\u0631\u0627\u0646",
        dashboard: "\u0644\u0648\u062D\u0629 \u0627\u0644\u062A\u062D\u0643\u0645",
        crisis_resources: "\u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0623\u0632\u0645\u0627\u062A"
      },
      auth: {
        helper_signin_signup: "\u062A\u0633\u062C\u064A\u0644 \u062F\u062E\u0648\u0644 / \u062A\u0633\u062C\u064A\u0644 \u0645\u0633\u0627\u0639\u062F",
        helper_dashboard_access: "\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0644\u0648\u062D\u0629 \u0627\u0644\u0645\u0633\u0627\u0639\u062F \u0644\u062F\u0639\u0645 \u0627\u0644\u0645\u062C\u062A\u0645\u0639.",
        signin_signup_email: "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 / \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0628\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A",
        continue_with: "\u0623\u0648 \u0627\u0644\u0645\u062A\u0627\u0628\u0639\u0629 \u0645\u0639",
        signin_google: "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0645\u0639 \u062C\u0648\u062C\u0644",
        signin_apple: "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0645\u0639 \u0623\u0628\u0644",
        signin_agreement: "\u0628\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644\u060C \u0623\u0646\u062A \u062A\u0648\u0627\u0641\u0642 \u0639\u0644\u0649 \u0627\u062A\u0641\u0627\u0642\u064A\u0629 \u0627\u0644\u0645\u0633\u0627\u0639\u062F \u0648\u0627\u0644\u0645\u0628\u0627\u062F\u0626 \u0627\u0644\u062A\u0648\u062C\u064A\u0647\u064A\u0629 \u0644\u0644\u0645\u062C\u062A\u0645\u0639.",
        logout: "\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062E\u0631\u0648\u062C",
        login_success: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0628\u0646\u062C\u0627\u062D \u0643\u0645\u0633\u0627\u0639\u062F.",
        logout_success: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u062E\u0631\u0648\u062C\u0643."
      },
      share: {
        share_your_thoughts: "\u0634\u0627\u0631\u0643 \u0623\u0641\u0643\u0627\u0631\u0643",
        chat_with_ai_prompt: "\u062A\u062D\u062F\u062B \u0645\u0639 \u0631\u0641\u064A\u0642 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064A \u0644\u0635\u064A\u0627\u063A\u0629 \u0645\u0646\u0634\u0648\u0631 \u0644\u0644\u0645\u062C\u062A\u0645\u0639.",
        ai_welcome: "\u0645\u0631\u062D\u0628\u0627\u064B! \u0623\u0646\u0627 \u0623\u0633\u062A\u0631\u0627\u0644\u060C \u0631\u0641\u064A\u0642 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064A \u0627\u0644\u062E\u0627\u0635 \u0628\u0643. \u0623\u0646\u0627 \u0647\u0646\u0627 \u0644\u0645\u0633\u0627\u0639\u062F\u062A\u0643 \u0641\u064A \u0627\u0644\u062A\u0639\u0628\u064A\u0631 \u0639\u0646 \u0623\u0641\u0643\u0627\u0631\u0643 \u0641\u064A \u0645\u0646\u0634\u0648\u0631. \u0645\u0627\u0630\u0627 \u064A\u062F\u0648\u0631 \u0641\u064A \u0630\u0647\u0646\u0643 \u0627\u0644\u064A\u0648\u0645\u061F",
        draft_post_from_chat: "\u0625\u0646\u0634\u0627\u0621 \u0645\u0633\u0648\u062F\u0629 \u0645\u0646 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629",
        chat_with_ai_here: "\u062A\u062D\u062F\u062B \u0645\u0639 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064A \u0647\u0646\u0627...",
        review_your_post: "\u0631\u0627\u062C\u0639 \u0645\u0646\u0634\u0648\u0631\u0643",
        review_your_post_subheader: "\u0644\u0642\u062F \u0623\u0646\u0634\u0623 \u0631\u0641\u064A\u0642 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064A \u0647\u0630\u0647 \u0627\u0644\u0645\u0633\u0648\u062F\u0629. \u0639\u062F\u0651\u0644 \u0639\u0644\u064A\u0647\u0627 \u0643\u0645\u0627 \u062A\u0634\u0627\u0621 \u0642\u0628\u0644 \u0627\u0644\u0645\u0634\u0627\u0631\u0643\u0629.",
        category: "\u0627\u0644\u0641\u0626\u0629",
        your_anonymous_post: "\u0645\u0646\u0634\u0648\u0631\u0643 \u0627\u0644\u0645\u062C\u0647\u0648\u0644",
        back_to_chat: "\u0627\u0644\u0639\u0648\u062F\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629",
        submit_anonymously: "\u0646\u0634\u0631 \u0645\u062C\u0647\u0648\u0644\u0627\u064B",
        post_shared: "\u062A\u0645 \u0645\u0634\u0627\u0631\u0643\u0629 \u0645\u0646\u0634\u0648\u0631\u0643 \u0645\u062C\u0647\u0648\u0644\u0627\u064B!",
        post_failed: "\u0641\u0634\u0644 \u0641\u064A \u0645\u0634\u0627\u0631\u0643\u0629 \u0645\u0646\u0634\u0648\u0631\u0643."
      },
      crisis: {
        immediate_help: "\u0647\u0644 \u062A\u062D\u062A\u0627\u062C \u0645\u0633\u0627\u0639\u062F\u0629 \u0641\u0648\u0631\u064A\u0629\u061F",
        call_988: "\u0627\u062A\u0635\u0644 \u0628\u0640 920033360 \u0644\u0644\u062F\u0639\u0645 \u0641\u064A \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
        text_home: "\u0623\u0631\u0633\u0644 \u0631\u0633\u0627\u0644\u0629 \u0646\u0635\u064A\u0629 \u0625\u0644\u0649 741741",
        chat_online: "\u062A\u062D\u062F\u062B \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062A\u0631\u0646\u062A \u0627\u0644\u0622\u0646",
        safety_plan: "\u0639\u0631\u0636 \u062E\u0637\u0629 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u062E\u0627\u0635\u0629 \u0628\u064A",
        you_matter: "\u0623\u0646\u062A \u0645\u0647\u0645. \u0644\u0633\u062A \u0648\u062D\u062F\u0643.",
        help_available: "\u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0645\u062A\u0627\u062D\u0629 \u0639\u0644\u0649 \u0645\u062F\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629"
      },
      accessibility: {
        skip_to_main: "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0626\u064A\u0633\u064A",
        skip_to_navigation: "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u062A\u0646\u0642\u0644",
        skip_to_crisis: "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
        language_changed: "\u062A\u0645 \u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u0644\u063A\u0629 \u0625\u0644\u0649 {{language}}",
        high_contrast: "\u062A\u0628\u0627\u064A\u0646 \u0639\u0627\u0644\u064A",
        voice_navigation: "\u0627\u0644\u062A\u0646\u0642\u0644 \u0627\u0644\u0635\u0648\u062A\u064A",
        screen_reader: "\u0642\u0627\u0631\u0626 \u0627\u0644\u0634\u0627\u0634\u0629",
        settings: "\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0625\u0645\u0643\u0627\u0646\u064A\u0629 \u0627\u0644\u0648\u0635\u0648\u0644",
        crisis_shortcuts: "\u0627\u062E\u062A\u0635\u0627\u0631\u0627\u062A \u0627\u0644\u0623\u0632\u0645\u0627\u062A"
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      },
      common: {
        submit: "\u0625\u0631\u0633\u0627\u0644",
        cancel: "\u0625\u0644\u063A\u0627\u0621",
        save: "\u062D\u0641\u0638",
        edit: "\u062A\u0639\u062F\u064A\u0644",
        delete: "\u062D\u0630\u0641",
        confirm: "\u062A\u0623\u0643\u064A\u062F",
        yes: "\u0646\u0639\u0645",
        no: "\u0644\u0627",
        loading: "\u062C\u0627\u0631\u064A \u0627\u0644\u062A\u062D\u0645\u064A\u0644...",
        error: "\u062E\u0637\u0623",
        success: "\u0646\u062C\u062D",
        warning: "\u062A\u062D\u0630\u064A\u0631",
        info: "\u0645\u0639\u0644\u0648\u0645\u0627\u062A",
        close: "\u0625\u063A\u0644\u0627\u0642",
        back: "\u0631\u062C\u0648\u0639",
        next: "\u0627\u0644\u062A\u0627\u0644\u064A",
        previous: "\u0627\u0644\u0633\u0627\u0628\u0642",
        search: "\u0628\u062D\u062B",
        filter: "\u062A\u0635\u0641\u064A\u0629",
        sort: "\u062A\u0631\u062A\u064A\u0628",
        help: "\u0645\u0633\u0627\u0639\u062F\u0629",
        support: "\u062F\u0639\u0645",
        feedback: "\u0645\u0644\u0627\u062D\u0638\u0627\u062A",
        report: "\u0625\u0628\u0644\u0627\u063A",
        block: "\u062D\u0638\u0631",
        unblock: "\u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062D\u0638\u0631",
        favorite: "\u0645\u0641\u0636\u0644",
        unfavorite: "\u0625\u0632\u0627\u0644\u0629 \u0645\u0646 \u0627\u0644\u0645\u0641\u0636\u0644\u0629",
        share: "\u0645\u0634\u0627\u0631\u0643\u0629",
        copy: "\u0646\u0633\u062E",
        download: "\u062A\u062D\u0645\u064A\u0644",
        upload: "\u0631\u0641\u0639",
        send: "\u0625\u0631\u0633\u0627\u0644",
        receive: "\u0627\u0633\u062A\u0642\u0628\u0627\u0644",
        view: "\u0639\u0631\u0636",
        hide: "\u0625\u062E\u0641\u0627\u0621",
        show: "\u0625\u0638\u0647\u0627\u0631",
        expand: "\u062A\u0648\u0633\u064A\u0639",
        collapse: "\u0637\u0648\u064A",
        select: "\u062A\u062D\u062F\u064A\u062F",
        deselect: "\u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u062F\u064A\u062F",
        all: "\u0627\u0644\u0643\u0644",
        none: "\u0644\u0627 \u0634\u064A\u0621",
        other: "\u0623\u062E\u0631\u0649",
        unknown: "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
        anonymous: "\u0645\u062C\u0647\u0648\u0644",
        public: "\u0639\u0627\u0645",
        private: "\u062E\u0627\u0635",
        online: "\u0645\u062A\u0635\u0644",
        offline: "\u063A\u064A\u0631 \u0645\u062A\u0635\u0644",
        active: "\u0646\u0634\u0637",
        inactive: "\u063A\u064A\u0631 \u0646\u0634\u0637",
        available: "\u0645\u062A\u0627\u062D",
        unavailable: "\u063A\u064A\u0631 \u0645\u062A\u0627\u062D",
        enabled: "\u0645\u064F\u0641\u0639\u0651\u0644",
        disabled: "\u0645\u064F\u0639\u0637\u0651\u0644"
      },
      mental_health: {
        categories: {
          anxiety: "\u0627\u0644\u0642\u0644\u0642",
          depression: "\u0627\u0644\u0627\u0643\u062A\u0626\u0627\u0628",
          stress: "\u0627\u0644\u062A\u0648\u062A\u0631",
          trauma: "\u0627\u0644\u0635\u062F\u0645\u0629",
          relationships: "\u0627\u0644\u0639\u0644\u0627\u0642\u0627\u062A",
          work: "\u0627\u0644\u0639\u0645\u0644 \u0648\u0627\u0644\u0645\u0647\u0646\u0629",
          family: "\u0627\u0644\u0623\u0633\u0631\u0629",
          grief: "\u0627\u0644\u062D\u0632\u0646 \u0648\u0627\u0644\u0641\u0642\u062F\u0627\u0646",
          addiction: "\u0627\u0644\u0625\u062F\u0645\u0627\u0646",
          eating: "\u0627\u0636\u0637\u0631\u0627\u0628\u0627\u062A \u0627\u0644\u0623\u0643\u0644",
          sleep: "\u0645\u0634\u0627\u0643\u0644 \u0627\u0644\u0646\u0648\u0645",
          self_harm: "\u0625\u064A\u0630\u0627\u0621 \u0627\u0644\u0646\u0641\u0633",
          suicidal_thoughts: "\u0627\u0644\u0623\u0641\u0643\u0627\u0631 \u0627\u0644\u0627\u0646\u062A\u062D\u0627\u0631\u064A\u0629",
          crisis: "\u062F\u0639\u0645 \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
          general: "\u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u0639\u0627\u0645",
          other: "\u0623\u062E\u0631\u0649"
        },
        wellness: {
          mood_tracking: "\u062A\u062A\u0628\u0639 \u0627\u0644\u0645\u0632\u0627\u062C",
          meditation: "\u0627\u0644\u062A\u0623\u0645\u0644",
          breathing: "\u062A\u0645\u0627\u0631\u064A\u0646 \u0627\u0644\u062A\u0646\u0641\u0633",
          journaling: "\u0643\u062A\u0627\u0628\u0629 \u0627\u0644\u064A\u0648\u0645\u064A\u0627\u062A",
          exercise: "\u0627\u0644\u062A\u0645\u0631\u064A\u0646 \u0627\u0644\u0628\u062F\u0646\u064A",
          sleep_hygiene: "\u0646\u0638\u0627\u0641\u0629 \u0627\u0644\u0646\u0648\u0645",
          nutrition: "\u0627\u0644\u062A\u063A\u0630\u064A\u0629",
          mindfulness: "\u0627\u0644\u064A\u0642\u0638\u0629 \u0627\u0644\u0630\u0647\u0646\u064A\u0629",
          gratitude: "\u0645\u0645\u0627\u0631\u0633\u0629 \u0627\u0644\u0627\u0645\u062A\u0646\u0627\u0646",
          social_connection: "\u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0627\u0644\u0627\u062C\u062A\u0645\u0627\u0639\u064A"
        }
      },
      safety_plan: {
        title: "\u062E\u0637\u0629 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0627\u0644\u062E\u0627\u0635\u0629 \u0628\u064A",
        warning_signs: "\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u0625\u0646\u0630\u0627\u0631",
        coping_strategies: "\u0627\u0633\u062A\u0631\u0627\u062A\u064A\u062C\u064A\u0627\u062A \u0627\u0644\u062A\u0623\u0642\u0644\u0645",
        support_contacts: "\u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0644\u0644\u062F\u0639\u0645",
        professional_contacts: "\u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0627\u0644\u0645\u0647\u0646\u064A\u0629",
        environment_safety: "\u062C\u0639\u0644 \u0627\u0644\u0628\u064A\u0626\u0629 \u0622\u0645\u0646\u0629",
        reasons_to_live: "\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u0639\u064A\u0634"
      },
      validation: {
        required: "\u0647\u0630\u0627 \u0627\u0644\u062D\u0642\u0644 \u0645\u0637\u0644\u0648\u0628",
        email: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0639\u0646\u0648\u0627\u0646 \u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0635\u062D\u064A\u062D",
        min_length: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 {{count}} \u0623\u062D\u0631\u0641",
        max_length: "\u064A\u062C\u0628 \u0623\u0644\u0627 \u064A\u0632\u064A\u062F \u0639\u0646 {{count}} \u0623\u062D\u0631\u0641",
        password_match: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062A\u0637\u0627\u0628\u0642 \u0643\u0644\u0645\u0627\u062A \u0627\u0644\u0645\u0631\u0648\u0631",
        phone: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0642\u0645 \u0647\u0627\u062A\u0641 \u0635\u062D\u064A\u062D"
      },
      time: {
        now: "\u0627\u0644\u0622\u0646",
        minute_ago: "\u0645\u0646\u0630 \u062F\u0642\u064A\u0642\u0629",
        minutes_ago: "\u0645\u0646\u0630 {{count}} \u062F\u0642\u0627\u0626\u0642",
        hour_ago: "\u0645\u0646\u0630 \u0633\u0627\u0639\u0629",
        hours_ago: "\u0645\u0646\u0630 {{count}} \u0633\u0627\u0639\u0627\u062A",
        day_ago: "\u0645\u0646\u0630 \u064A\u0648\u0645",
        days_ago: "\u0645\u0646\u0630 {{count}} \u0623\u064A\u0627\u0645",
        week_ago: "\u0645\u0646\u0630 \u0623\u0633\u0628\u0648\u0639",
        weeks_ago: "\u0645\u0646\u0630 {{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        month_ago: "\u0645\u0646\u0630 \u0634\u0647\u0631",
        months_ago: "\u0645\u0646\u0630 {{count}} \u0623\u0634\u0647\u0631",
        year_ago: "\u0645\u0646\u0630 \u0633\u0646\u0629",
        years_ago: "\u0645\u0646\u0630 {{count}} \u0633\u0646\u0648\u0627\u062A"
      }
    };
  }
});

// src/i18n/locales/ar/crisis.json
var require_crisis = __commonJS({
  "src/i18n/locales/ar/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "\u062F\u0639\u0645 \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
        subtitle: "\u0644\u0633\u062A \u0648\u062D\u062F\u0643. \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0645\u062A\u0627\u062D\u0629 \u0639\u0644\u0649 \u0645\u062F\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629.",
        immediate_danger: "\u0625\u0630\u0627 \u0643\u0646\u062A \u0641\u064A \u062E\u0637\u0631 \u0645\u0628\u0627\u0634\u0631\u060C \u0627\u062A\u0635\u0644 \u0628\u0640 999 \u0623\u0648 \u062A\u0648\u062C\u0647 \u0625\u0644\u0649 \u0623\u0642\u0631\u0628 \u0642\u0633\u0645 \u0637\u0648\u0627\u0631\u0626.",
        call_988: {
          title: "\u0627\u062A\u0635\u0644 \u0628\u0640 920033360 \u062E\u0637 \u0645\u0646\u0639 \u0627\u0644\u0627\u0646\u062A\u062D\u0627\u0631 \u0648\u0627\u0644\u0623\u0632\u0645\u0627\u062A",
          description: "\u062F\u0639\u0645 \u0645\u062C\u0627\u0646\u064A \u0648\u0633\u0631\u064A \u0639\u0644\u0649 \u0645\u062F\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629 \u0644\u0644\u0623\u0634\u062E\u0627\u0635 \u0641\u064A \u0623\u0632\u0645\u0629 \u0648\u0623\u062D\u0628\u0627\u0626\u0647\u0645.",
          number: "920033360",
          action: "\u0627\u062A\u0635\u0644 \u0627\u0644\u0622\u0646"
        },
        text_crisis: {
          title: "\u062E\u0637 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0646\u0635\u064A\u0629 \u0644\u0644\u0623\u0632\u0645\u0627\u062A",
          description: "\u0623\u0631\u0633\u0644 \u0631\u0633\u0627\u0644\u0629 \u0646\u0635\u064A\u0629 \u0625\u0644\u0649 \u0645\u0633\u062A\u0634\u0627\u0631 \u0623\u0632\u0645\u0627\u062A \u0645\u062F\u0631\u0628 \u0639\u0644\u0649 \u0645\u062F\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629.",
          text: "\u0623\u0631\u0633\u0644 HOME \u0625\u0644\u0649 741741",
          action: "\u0623\u0631\u0633\u0644 \u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0622\u0646"
        },
        chat_online: {
          title: "\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062A\u0631\u0646\u062A",
          description: "\u062A\u062D\u062F\u062B \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062A\u0631\u0646\u062A \u0645\u0639 \u0645\u0633\u062A\u0634\u0627\u0631 \u0623\u0632\u0645\u0627\u062A \u0645\u062F\u0631\u0628.",
          action: "\u062A\u062D\u062F\u062B \u0627\u0644\u0622\u0646"
        },
        emergency_contacts: {
          title: "\u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0627\u0644\u0637\u0627\u0631\u0626\u0629",
          police: "\u0627\u0644\u0634\u0631\u0637\u0629: 999",
          fire: "\u0627\u0644\u0625\u0637\u0641\u0627\u0621: 998",
          ambulance: "\u0627\u0644\u0625\u0633\u0639\u0627\u0641: 997",
          poison_control: "\u0645\u0631\u0627\u0642\u0628\u0629 \u0627\u0644\u0633\u0645\u0648\u0645: 966-11-288-8888"
        }
      },
      support: {
        you_matter: "\u0623\u0646\u062A \u0645\u0647\u0645.",
        not_alone: "\u0644\u0633\u062A \u0648\u062D\u062F\u0643.",
        help_available: "\u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0645\u062A\u0627\u062D\u0629.",
        safe_space: "\u0647\u0630\u0627 \u0645\u0643\u0627\u0646 \u0622\u0645\u0646.",
        confidential: "\u0645\u062D\u0627\u062F\u062B\u0627\u062A\u0643 \u0633\u0631\u064A\u0629.",
        no_judgment: "\u0644\u0627 \u0623\u062D\u0643\u0627\u0645 \u0647\u0646\u0627.",
        take_time: "\u062E\u0630 \u0648\u0642\u062A\u0643.",
        breathe: "\u062A\u0630\u0643\u0631 \u0623\u0646 \u062A\u062A\u0646\u0641\u0633.",
        one_step: "\u062E\u0637\u0648\u0629 \u0648\u0627\u062D\u062F\u0629 \u0641\u064A \u0643\u0644 \u0645\u0631\u0629.",
        tomorrow_different: "\u0642\u062F \u064A\u0643\u0648\u0646 \u0627\u0644\u063A\u062F \u0645\u062E\u062A\u0644\u0641\u0627\u064B.",
        strength_within: "\u0644\u062F\u064A\u0643 \u0642\u0648\u0629 \u0628\u062F\u0627\u062E\u0644\u0643.",
        reach_out: "\u0644\u0627 \u0628\u0623\u0633 \u0641\u064A \u0637\u0644\u0628 \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629.",
        allah_with_you: "\u0627\u0644\u0644\u0647 \u0645\u0639\u0643 \u0641\u064A \u0643\u0644 \u062E\u0637\u0648\u0629.",
        patience_virtue: "\u0627\u0644\u0635\u0628\u0631 \u0645\u0641\u062A\u0627\u062D \u0627\u0644\u0641\u0631\u062C.",
        family_support: "\u0639\u0627\u0626\u0644\u062A\u0643 \u062A\u062D\u0628\u0643 \u0648\u062A\u062F\u0639\u0645\u0643.",
        honor_preserved: "\u0643\u0631\u0627\u0645\u062A\u0643 \u0645\u062D\u0641\u0648\u0638\u0629 \u0645\u0639\u0646\u0627."
      },
      cultural_support: {
        islamic_healing: {
          title: "\u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u0631\u0648\u062D\u064A \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A",
          prayer: "\u0627\u0644\u0635\u0644\u0627\u0629 \u0648\u0627\u0644\u062F\u0639\u0627\u0621 \u0644\u0644\u0633\u0643\u064A\u0646\u0629",
          quran: "\u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0642\u0631\u0622\u0646 \u0644\u0644\u0637\u0645\u0623\u0646\u064A\u0646\u0629",
          dhikr: "\u0627\u0644\u0630\u0643\u0631 \u0648\u0627\u0644\u0627\u0633\u062A\u063A\u0641\u0627\u0631",
          ruqyah: "\u0627\u0644\u0631\u0642\u064A\u0629 \u0627\u0644\u0634\u0631\u0639\u064A\u0629",
          mosque_support: "\u0627\u0644\u062F\u0639\u0645 \u0645\u0646 \u0627\u0644\u0645\u0633\u062C\u062F \u0627\u0644\u0645\u062D\u0644\u064A"
        },
        family_honor: {
          title: "\u062D\u0645\u0627\u064A\u0629 \u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0626\u0644\u0629",
          description: "\u0646\u062D\u0646 \u0646\u0641\u0647\u0645 \u0623\u0647\u0645\u064A\u0629 \u0627\u0644\u0633\u0631\u064A\u0629 \u0648\u062D\u0645\u0627\u064A\u0629 \u0633\u0645\u0639\u0629 \u0627\u0644\u0639\u0627\u0626\u0644\u0629",
          private_support: "\u062F\u0639\u0645 \u062E\u0627\u0635 \u0648\u0633\u0631\u064A \u062A\u0645\u0627\u0645\u0627\u064B",
          family_mediation: "\u0648\u0633\u0627\u0637\u0629 \u0639\u0627\u0626\u0644\u064A\u0629 \u0645\u062D\u062A\u0631\u0645\u0629",
          elder_consultation: "\u0627\u0633\u062A\u0634\u0627\u0631\u0629 \u0643\u0628\u0627\u0631 \u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0628\u062D\u0643\u0645\u0629"
        },
        gender_specific: {
          title: "\u062E\u062F\u0645\u0627\u062A \u062E\u0627\u0635\u0629 \u0628\u0627\u0644\u062C\u0646\u0633",
          women_support: "\u062F\u0639\u0645 \u0646\u0633\u0627\u0626\u064A \u0645\u062A\u062E\u0635\u0635",
          men_support: "\u062F\u0639\u0645 \u0631\u062C\u0627\u0644\u064A \u0645\u062A\u062E\u0635\u0635",
          female_counselors: "\u0645\u0633\u062A\u0634\u0627\u0631\u0627\u062A \u0646\u0633\u0627\u0621 \u0645\u062A\u0627\u062D\u0627\u062A",
          male_counselors: "\u0645\u0633\u062A\u0634\u0627\u0631\u0648\u0646 \u0631\u062C\u0627\u0644 \u0645\u062A\u0627\u062D\u0648\u0646"
        },
        community_resources: {
          title: "\u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0645\u062C\u062A\u0645\u0639",
          imam_counseling: "\u0627\u0644\u0625\u0631\u0634\u0627\u062F \u0645\u0646 \u0627\u0644\u0625\u0645\u0627\u0645",
          islamic_centers: "\u0627\u0644\u0645\u0631\u0627\u0643\u0632 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
          family_councils: "\u0645\u062C\u0627\u0644\u0633 \u0627\u0644\u0639\u0627\u0626\u0644\u0629",
          trusted_elders: "\u0643\u0628\u0627\u0631 \u0627\u0644\u0633\u0646 \u0627\u0644\u0645\u0648\u062B\u0648\u0642\u0648\u0646"
        }
      },
      safety_plan: {
        title: "\u062E\u0637\u0629 \u0627\u0644\u0633\u0644\u0627\u0645\u0629 \u0644\u0644\u0623\u0632\u0645\u0627\u062A",
        description: "\u062E\u0637\u0629 \u0634\u062E\u0635\u064A\u0629 \u0644\u0645\u0633\u0627\u0639\u062F\u062A\u0643 \u0639\u0644\u0649 \u0627\u0644\u0628\u0642\u0627\u0621 \u0622\u0645\u0646\u0627\u064B \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0623\u0632\u0645\u0629.",
        step1: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 1: \u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u0625\u0646\u0630\u0627\u0631",
          description: "\u062A\u0639\u0631\u0641 \u0639\u0644\u0649 \u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u0625\u0646\u0630\u0627\u0631 \u0627\u0644\u0634\u062E\u0635\u064A\u0629 \u0627\u0644\u062A\u064A \u062A\u0634\u064A\u0631 \u0625\u0644\u0649 \u0623\u0646 \u0623\u0632\u0645\u0629 \u0642\u062F \u062A\u062A\u0637\u0648\u0631.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0627\u0644\u0634\u0639\u0648\u0631 \u0628\u0641\u0642\u062F\u0627\u0646 \u0627\u0644\u0623\u0645\u0644\u060C \u0627\u0644\u0639\u0632\u0644\u0629\u060C \u0632\u064A\u0627\u062F\u0629 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0645\u0648\u0627\u062F\u060C \u062A\u063A\u064A\u0631\u0627\u062A \u0627\u0644\u0646\u0648\u0645"
        },
        step2: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 2: \u0627\u0633\u062A\u0631\u0627\u062A\u064A\u062C\u064A\u0627\u062A \u0627\u0644\u062A\u0623\u0642\u0644\u0645 \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629",
          description: "\u0623\u0634\u064A\u0627\u0621 \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u0642\u064A\u0627\u0645 \u0628\u0647\u0627 \u0628\u0646\u0641\u0633\u0643 \u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0646\u0641\u0633\u0643 \u0639\u0644\u0649 \u0627\u0644\u0634\u0639\u0648\u0631 \u0628\u062A\u062D\u0633\u0646.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0627\u0644\u0627\u0633\u062A\u0645\u0627\u0639 \u0644\u0644\u0645\u0648\u0633\u064A\u0642\u0649\u060C \u0627\u0644\u0645\u0634\u064A\u060C \u0645\u0645\u0627\u0631\u0633\u0629 \u0627\u0644\u062A\u0646\u0641\u0633 \u0627\u0644\u0639\u0645\u064A\u0642\u060C \u0627\u0644\u0643\u062A\u0627\u0628\u0629 \u0641\u064A \u0627\u0644\u064A\u0648\u0645\u064A\u0627\u062A"
        },
        step3: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 3: \u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0627\u0644\u0627\u062C\u062A\u0645\u0627\u0639\u064A\u0629 \u0644\u0644\u0625\u0644\u0647\u0627\u0621",
          description: "\u0627\u0644\u0623\u0634\u062E\u0627\u0635 \u0648\u0627\u0644\u0628\u064A\u0626\u0627\u062A \u0627\u0644\u0627\u062C\u062A\u0645\u0627\u0639\u064A\u0629 \u0627\u0644\u062A\u064A \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u0633\u0627\u0639\u062F \u0641\u064A \u0627\u0644\u0625\u0644\u0647\u0627\u0621 \u0639\u0646 \u0627\u0644\u0623\u0632\u0645\u0629.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0627\u0644\u0623\u0635\u062F\u0642\u0627\u0621\u060C \u0623\u0641\u0631\u0627\u062F \u0627\u0644\u0623\u0633\u0631\u0629\u060C \u0627\u0644\u0623\u0646\u0634\u0637\u0629 \u0627\u0644\u0627\u062C\u062A\u0645\u0627\u0639\u064A\u0629\u060C \u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u062F\u0639\u0645"
        },
        step4: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 4: \u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0644\u0644\u0645\u0633\u0627\u0639\u062F\u0629",
          description: "\u0627\u0644\u0623\u0634\u062E\u0627\u0635 \u0627\u0644\u0630\u064A\u0646 \u064A\u0645\u0643\u0646\u0643 \u0623\u0646 \u062A\u0637\u0644\u0628 \u0645\u0646\u0647\u0645 \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0623\u0632\u0645\u0629.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0623\u0641\u0631\u0627\u062F \u0627\u0644\u0623\u0633\u0631\u0629\u060C \u0627\u0644\u0623\u0635\u062F\u0642\u0627\u0621\u060C \u0645\u062A\u062E\u0635\u0635\u0648 \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629\u060C \u062E\u0637\u0648\u0637 \u0627\u0644\u0623\u0632\u0645\u0627\u062A"
        },
        step5: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 5: \u062C\u0647\u0627\u062A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0627\u0644\u0645\u0647\u0646\u064A\u0629",
          description: "\u0645\u062A\u062E\u0635\u0635\u0648 \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629 \u0648\u0627\u0644\u0648\u0643\u0627\u0644\u0627\u062A \u0644\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0647\u0627 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0623\u0632\u0645\u0629.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0627\u0644\u0645\u0639\u0627\u0644\u062C\u060C \u0637\u0628\u064A\u0628 \u0646\u0641\u0633\u064A\u060C \u0645\u0631\u0643\u0632 \u0627\u0644\u0623\u0632\u0645\u0627\u062A\u060C \u0642\u0633\u0645 \u0627\u0644\u0637\u0648\u0627\u0631\u0626"
        },
        step6: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 6: \u062C\u0639\u0644 \u0627\u0644\u0628\u064A\u0626\u0629 \u0622\u0645\u0646\u0629",
          description: "\u0637\u0631\u0642 \u0625\u0632\u0627\u0644\u0629 \u0623\u0648 \u062A\u0642\u064A\u064A\u062F \u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0627\u0644\u0648\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u0645\u064A\u062A\u0629.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0623\u0633\u0644\u062D\u0629 \u0627\u0644\u0646\u0627\u0631\u064A\u0629\u060C \u0627\u0644\u0623\u062F\u0648\u064A\u0629\u060C \u0627\u0644\u0623\u0634\u064A\u0627\u0621 \u0627\u0644\u062D\u0627\u062F\u0629\u061B \u0637\u0644\u0628 \u0645\u0646 \u0634\u062E\u0635 \u0627\u0644\u0627\u062D\u062A\u0641\u0627\u0638 \u0628\u0647\u0627"
        },
        step7: {
          title: "\u0627\u0644\u062E\u0637\u0648\u0629 7: \u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u0639\u064A\u0634",
          description: "\u0627\u0644\u0623\u0634\u064A\u0627\u0621 \u0627\u0644\u0645\u0647\u0645\u0629 \u0628\u0627\u0644\u0646\u0633\u0628\u0629 \u0644\u0643 \u0648\u0627\u0644\u062A\u064A \u062A\u0639\u0637\u064A \u0645\u0639\u0646\u0649 \u0644\u062D\u064A\u0627\u062A\u0643.",
          examples: "\u0623\u0645\u062B\u0644\u0629: \u0627\u0644\u0623\u0633\u0631\u0629\u060C \u0627\u0644\u0623\u0635\u062F\u0642\u0627\u0621\u060C \u0627\u0644\u062D\u064A\u0648\u0627\u0646\u0627\u062A \u0627\u0644\u0623\u0644\u064A\u0641\u0629\u060C \u0627\u0644\u0623\u0647\u062F\u0627\u0641\u060C \u0627\u0644\u0645\u0639\u062A\u0642\u062F\u0627\u062A \u0627\u0644\u0631\u0648\u062D\u064A\u0629\u060C \u0627\u0644\u062E\u0637\u0637 \u0627\u0644\u0645\u0633\u062A\u0642\u0628\u0644\u064A\u0629"
        }
      },
      resources: {
        hotlines: {
          title: "\u062E\u0637\u0648\u0637 \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
          suicide_prevention: "\u062E\u0637 \u0645\u0646\u0639 \u0627\u0644\u0627\u0646\u062A\u062D\u0627\u0631",
          crisis_text: "\u062E\u0637 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0646\u0635\u064A\u0629 \u0644\u0644\u0623\u0632\u0645\u0627\u062A",
          domestic_violence: "\u0627\u0644\u062E\u0637 \u0627\u0644\u0648\u0637\u0646\u064A \u0644\u0644\u0639\u0646\u0641 \u0627\u0644\u0645\u0646\u0632\u0644\u064A",
          substance_abuse: "\u062E\u0637 \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0627\u0644\u0648\u0637\u0646\u064A \u0644\u0625\u0633\u0627\u0621\u0629 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0645\u0648\u0627\u062F",
          lgbt_crisis: "\u062E\u0637 \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0627\u0644\u0648\u0637\u0646\u064A \u0644\u0644\u0645\u062B\u0644\u064A\u064A\u0646",
          veterans: "\u062E\u0637 \u0623\u0632\u0645\u0627\u062A \u0627\u0644\u0645\u062D\u0627\u0631\u0628\u064A\u0646 \u0627\u0644\u0642\u062F\u0627\u0645\u0649",
          teens: "\u062E\u0637 \u0627\u0644\u0645\u0631\u0627\u0647\u0642\u064A\u0646",
          eating_disorders: "\u062C\u0645\u0639\u064A\u0629 \u0627\u0636\u0637\u0631\u0627\u0628\u0627\u062A \u0627\u0644\u0623\u0643\u0644 \u0627\u0644\u0648\u0637\u0646\u064A\u0629"
        },
        online_resources: {
          title: "\u0627\u0644\u0645\u0648\u0627\u0631\u062F \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062A\u0631\u0646\u062A",
          mental_health_america: "\u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
          nami: "\u0627\u0644\u062A\u062D\u0627\u0644\u0641 \u0627\u0644\u0648\u0637\u0646\u064A \u0644\u0644\u0623\u0645\u0631\u0627\u0636 \u0627\u0644\u0646\u0641\u0633\u064A\u0629",
          crisis_chat: "\u062E\u062F\u0645\u0627\u062A \u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u0623\u0632\u0645\u0627\u062A",
          therapy_apps: "\u062A\u0637\u0628\u064A\u0642\u0627\u062A \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629",
          support_groups: "\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u062F\u0639\u0645 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062A\u0631\u0646\u062A"
        },
        local_resources: {
          title: "\u0627\u0644\u0645\u0648\u0627\u0631\u062F \u0627\u0644\u0645\u062D\u0644\u064A\u0629",
          hospitals: "\u0623\u0642\u0633\u0627\u0645 \u0627\u0644\u0637\u0648\u0627\u0631\u0626 \u0627\u0644\u0645\u062D\u0644\u064A\u0629",
          mental_health_centers: "\u0645\u0631\u0627\u0643\u0632 \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629 \u0627\u0644\u0645\u062C\u062A\u0645\u0639\u064A\u0629",
          therapists: "\u0627\u0644\u0645\u0639\u0627\u0644\u062C\u0648\u0646 \u0627\u0644\u0645\u062D\u0644\u064A\u0648\u0646",
          support_groups: "\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u0645\u062D\u0644\u064A\u0629",
          crisis_centers: "\u0645\u0631\u0627\u0643\u0632 \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0627\u0644\u0645\u062D\u0644\u064A\u0629"
        }
      },
      coping: {
        title: "\u0627\u0633\u062A\u0631\u0627\u062A\u064A\u062C\u064A\u0627\u062A \u0627\u0644\u062A\u0623\u0642\u0644\u0645",
        breathing: {
          title: "\u0627\u0644\u062A\u0646\u0641\u0633 \u0627\u0644\u0639\u0645\u064A\u0642",
          description: "\u0627\u0644\u062A\u0646\u0641\u0633 \u0627\u0644\u0628\u0637\u064A\u0621 \u0648\u0627\u0644\u0639\u0645\u064A\u0642 \u064A\u0645\u0643\u0646 \u0623\u0646 \u064A\u0633\u0627\u0639\u062F \u0641\u064A \u062A\u0647\u062F\u0626\u0629 \u0639\u0642\u0644\u0643 \u0648\u062C\u0633\u0645\u0643.",
          steps: [
            "\u062A\u0646\u0641\u0633 \u0628\u0628\u0637\u0621 \u0645\u0646 \u0623\u0646\u0641\u0643 \u0644\u0645\u062F\u0629 4 \u0639\u062F\u0627\u062A",
            "\u0627\u062D\u0628\u0633 \u0623\u0646\u0641\u0627\u0633\u0643 \u0644\u0645\u062F\u0629 4 \u0639\u062F\u0627\u062A",
            "\u0627\u0632\u0641\u0631 \u0628\u0628\u0637\u0621 \u0645\u0646 \u0641\u0645\u0643 \u0644\u0645\u062F\u0629 6 \u0639\u062F\u0627\u062A",
            "\u0643\u0631\u0631 \u062D\u062A\u0649 \u062A\u0634\u0639\u0631 \u0628\u0647\u062F\u0648\u0621 \u0623\u0643\u0628\u0631"
          ]
        },
        grounding: {
          title: "\u062A\u0642\u0646\u064A\u0629 \u0627\u0644\u062A\u0623\u0631\u064A\u0636 5-4-3-2-1",
          description: "\u0627\u0633\u062A\u062E\u062F\u0645 \u062D\u0648\u0627\u0633\u0643 \u0644\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0644\u062D\u0638\u0629 \u0627\u0644\u062D\u0627\u0644\u064A\u0629.",
          steps: [
            "5 \u0623\u0634\u064A\u0627\u0621 \u064A\u0645\u0643\u0646\u0643 \u0631\u0624\u064A\u062A\u0647\u0627",
            "4 \u0623\u0634\u064A\u0627\u0621 \u064A\u0645\u0643\u0646\u0643 \u0644\u0645\u0633\u0647\u0627",
            "3 \u0623\u0634\u064A\u0627\u0621 \u064A\u0645\u0643\u0646\u0643 \u0633\u0645\u0627\u0639\u0647\u0627",
            "\u0634\u064A\u0626\u0627\u0646 \u064A\u0645\u0643\u0646\u0643 \u0634\u0645\u0647\u0645\u0627",
            "\u0634\u064A\u0621 \u0648\u0627\u062D\u062F \u064A\u0645\u0643\u0646\u0643 \u062A\u0630\u0648\u0642\u0647"
          ]
        },
        distraction: {
          title: "\u0627\u0644\u0625\u0644\u0647\u0627\u0621\u0627\u062A \u0627\u0644\u0635\u062D\u064A\u0629",
          activities: [
            "\u0627\u0644\u0627\u0633\u062A\u0645\u0627\u0639 \u0644\u0645\u0648\u0633\u064A\u0642\u0649 \u0647\u0627\u062F\u0626\u0629",
            "\u0645\u0634\u0627\u0647\u062F\u0629 \u0641\u064A\u062F\u064A\u0648 \u0645\u0636\u062D\u0643",
            "\u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0635\u062F\u064A\u0642 \u0623\u0648 \u0641\u0631\u062F \u0645\u0646 \u0627\u0644\u0623\u0633\u0631\u0629",
            "\u0623\u062E\u0630 \u062F\u0634 \u0623\u0648 \u062D\u0645\u0627\u0645 \u062F\u0627\u0641\u0626",
            "\u0627\u0644\u0645\u0634\u064A \u0641\u064A \u0627\u0644\u0647\u0648\u0627\u0621 \u0627\u0644\u0637\u0644\u0642",
            "\u0645\u0645\u0627\u0631\u0633\u0629 \u0647\u0648\u0627\u064A\u0629",
            "\u0627\u0644\u0643\u062A\u0627\u0628\u0629 \u0641\u064A \u0627\u0644\u064A\u0648\u0645\u064A\u0627\u062A",
            "\u0627\u0644\u0642\u064A\u0627\u0645 \u0628\u062A\u0645\u0631\u064A\u0646 \u062E\u0641\u064A\u0641"
          ]
        },
        self_care: {
          title: "\u0623\u0646\u0634\u0637\u0629 \u0627\u0644\u0631\u0639\u0627\u064A\u0629 \u0627\u0644\u0630\u0627\u062A\u064A\u0629",
          immediate: [
            "\u0634\u0631\u0628 \u0643\u0648\u0628 \u0645\u0646 \u0627\u0644\u0645\u0627\u0621",
            "\u062A\u0646\u0627\u0648\u0644 \u0648\u062C\u0628\u0629 \u062E\u0641\u064A\u0641\u0629 \u0635\u062D\u064A\u0629",
            "\u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0647\u0648\u0627\u0621 \u0646\u0642\u064A",
            "\u0627\u0644\u0627\u0633\u062A\u0645\u0627\u0639 \u0644\u0644\u0645\u0648\u0633\u064A\u0642\u0649",
            "\u0645\u0645\u0627\u0631\u0633\u0629 \u0627\u0644\u062A\u0646\u0641\u0633 \u0627\u0644\u0639\u0645\u064A\u0642"
          ],
          short_term: [
            "\u0623\u062E\u0630 \u062D\u0645\u0627\u0645 \u062F\u0627\u0641\u0626",
            "\u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0635\u062F\u064A\u0642 \u062F\u0627\u0639\u0645",
            "\u0645\u0634\u0627\u0647\u062F\u0629 \u0641\u064A\u0644\u0645 \u0645\u0631\u064A\u062D",
            "\u0645\u0645\u0627\u0631\u0633\u0629 \u0627\u0644\u062A\u0623\u0645\u0644",
            "\u0627\u0644\u0642\u064A\u0627\u0645 \u0628\u062A\u0645\u0631\u064A\u0646 \u0644\u0637\u064A\u0641"
          ],
          long_term: [
            "\u0627\u0644\u0645\u062D\u0627\u0641\u0638\u0629 \u0639\u0644\u0649 \u062C\u062F\u0648\u0644 \u0646\u0648\u0645 \u0645\u0646\u062A\u0638\u0645",
            "\u062A\u0646\u0627\u0648\u0644 \u0648\u062C\u0628\u0627\u062A \u0645\u063A\u0630\u064A\u0629",
            "\u0645\u0645\u0627\u0631\u0633\u0629 \u0627\u0644\u0631\u064A\u0627\u0636\u0629 \u0628\u0627\u0646\u062A\u0638\u0627\u0645",
            "\u0627\u0644\u0628\u0642\u0627\u0621 \u0645\u062A\u0635\u0644\u0627\u064B \u0645\u0639 \u0627\u0644\u0623\u062D\u0628\u0627\u0621",
            "\u0645\u0645\u0627\u0631\u0633\u0629 \u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u062A\u0648\u062A\u0631"
          ]
        }
      },
      messages: {
        crisis_detected: "\u0646\u062D\u0646 \u0647\u0646\u0627 \u0645\u0646 \u0623\u062C\u0644\u0643. \u064A\u0628\u062F\u0648 \u0623\u0646\u0643 \u0642\u062F \u062A\u0645\u0631 \u0628\u0648\u0642\u062A \u0635\u0639\u0628.",
        help_available: "\u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0627\u0644\u0645\u0647\u0646\u064A\u0629 \u0645\u062A\u0627\u062D\u0629 \u0639\u0644\u0649 \u0645\u062F\u0627\u0631 \u0627\u0644\u0633\u0627\u0639\u0629. \u0644\u0627 \u064A\u062A\u0648\u062C\u0628 \u0639\u0644\u064A\u0643 \u0645\u0648\u0627\u062C\u0647\u0629 \u0647\u0630\u0627 \u0648\u062D\u062F\u0643.",
        safety_first: "\u0633\u0644\u0627\u0645\u062A\u0643 \u0647\u064A \u0623\u0648\u0644\u0648\u064A\u062A\u0646\u0627. \u064A\u0631\u062C\u0649 \u0627\u0644\u0646\u0638\u0631 \u0641\u064A \u0637\u0644\u0628 \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629 \u0627\u0644\u0641\u0648\u0631\u064A\u0629 \u0625\u0630\u0627 \u0643\u0646\u062A \u0641\u064A \u062E\u0637\u0631.",
        not_therapist: "\u062A\u0630\u0643\u0631: \u0647\u0630\u0647 \u0627\u0644\u0645\u0646\u0635\u0629 \u062A\u0648\u0641\u0631 \u062F\u0639\u0645 \u0627\u0644\u0623\u0642\u0631\u0627\u0646\u060C \u0648\u0644\u064A\u0633 \u0627\u0644\u0639\u0644\u0627\u062C \u0627\u0644\u0645\u0647\u0646\u064A.",
        emergency_services: "\u0625\u0630\u0627 \u0643\u0627\u0646\u062A \u0647\u0630\u0647 \u062D\u0627\u0644\u0629 \u0637\u0648\u0627\u0631\u0626 \u0637\u0628\u064A\u0629\u060C \u064A\u0631\u062C\u0649 \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0640 997 \u0623\u0648 \u0627\u0644\u062A\u0648\u062C\u0647 \u0625\u0644\u0649 \u0623\u0642\u0631\u0628 \u0642\u0633\u0645 \u0637\u0648\u0627\u0631\u0626.",
        confidential_support: "\u062C\u0645\u064A\u0639 \u0645\u062D\u0627\u062F\u062B\u0627\u062A \u062F\u0639\u0645 \u0627\u0644\u0623\u0632\u0645\u0627\u062A \u0633\u0631\u064A\u0629 \u0648\u0622\u0645\u0646\u0629.",
        family_context: "\u0641\u0643\u0631 \u0641\u064A \u0625\u0634\u0631\u0627\u0643 \u0623\u0641\u0631\u0627\u062F \u0627\u0644\u0623\u0633\u0631\u0629 \u0627\u0644\u0645\u0648\u062B\u0648\u0642\u064A\u0646 \u0627\u0644\u0630\u064A\u0646 \u064A\u0645\u0643\u0646\u0647\u0645 \u062A\u0642\u062F\u064A\u0645 \u062F\u0639\u0645 \u0625\u0636\u0627\u0641\u064A.",
        community_context: "\u0645\u062C\u062A\u0645\u0639\u0643 \u0648\u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u062B\u0642\u0627\u0641\u064A \u064A\u0645\u0643\u0646 \u0623\u0646 \u064A\u0643\u0648\u0646\u0627 \u0645\u0648\u0627\u0631\u062F \u0642\u064A\u0645\u0629 \u0641\u064A \u0647\u0630\u0627 \u0627\u0644\u0648\u0642\u062A.",
        professional_context: "\u062E\u062F\u0645\u0627\u062A \u0627\u0644\u0635\u062D\u0629 \u0627\u0644\u0646\u0641\u0633\u064A\u0629 \u0627\u0644\u0645\u0647\u0646\u064A\u0629 \u0645\u062A\u0627\u062D\u0629 \u0648\u0645\u0648\u0635\u0649 \u0628\u0647\u0627 \u0644\u0644\u062F\u0639\u0645 \u0627\u0644\u0645\u0633\u062A\u0645\u0631."
      }
    };
  }
});

// src/i18n/locales/en/analytics.json
var require_analytics = __commonJS({
  "src/i18n/locales/en/analytics.json"(exports, module) {
    module.exports = {
      analytics: {
        title: "Crisis Intervention Analytics",
        loading: "Loading analytics data...",
        error: {
          title: "Error Loading Analytics"
        },
        actions: {
          refresh: "Refresh Data",
          retry: "Retry",
          generateReport: "Generate Report",
          generating: "Generating...",
          export: "Export Data",
          resetBudget: "Reset Privacy Budget"
        },
        tabs: {
          overview: "Overview",
          cultural: "Cultural Analysis",
          privacy: "Privacy & Compliance",
          report: "Effectiveness Report"
        },
        metrics: {
          totalInterventions: "Total Interventions",
          "totalInterventions.description": "Anonymous crisis interventions recorded with privacy protection",
          averageEffectiveness: "Average Effectiveness",
          "averageEffectiveness.description": "Risk reduction percentage across all interventions",
          languagesSupported: "Languages Supported",
          "languagesSupported.description": "Active language communities in crisis intervention",
          culturalContexts: "Cultural Contexts",
          "culturalContexts.description": "Diverse cultural backgrounds served"
        },
        distribution: {
          languages: "Language Distribution"
        },
        effectiveness: {
          interventionTypes: "Intervention Type Effectiveness"
        },
        cultural: {
          noData: "Insufficient data for cultural analysis. Minimum 10 interventions required per cultural group for privacy protection.",
          successRate: "Success Rate",
          riskReduction: "Risk Reduction",
          sessionDuration: "Avg Session Duration",
          followUpRate: "Follow-up Rate",
          satisfaction: "Satisfaction Score"
        },
        privacy: {
          overview: "Privacy & Compliance Overview",
          budgetUsed: "Privacy Budget Used",
          dataPoints: "Data Points",
          retentionCompliance: "Retention Compliance",
          compliant: "Compliant",
          nonCompliant: "Non-Compliant",
          features: "Privacy Protection Features",
          differentialPrivacy: "Differential Privacy",
          "differentialPrivacy.description": "Statistical noise added to all metrics to prevent individual identification",
          dataAnonymization: "Data Anonymization",
          "dataAnonymization.description": "All user identifiers replaced with cryptographic hashes",
          autoExpiry: "Automatic Data Expiry",
          "autoExpiry.description": "All intervention data automatically deleted after 90 days",
          minimumCohort: "Minimum Cohort Size",
          "minimumCohort.description": "Analysis only performed on groups of 10+ individuals",
          adminControls: "Administrator Controls"
        },
        report: {
          title: "Effectiveness Report",
          noData: "No report available. Generate a report to see detailed effectiveness analysis.",
          summary: "Executive Summary",
          culturalInsights: "Cultural Insights",
          recommendations: "Recommendations",
          limitations: "Privacy Limitations"
        },
        sampleSize: "{{count}} interventions",
        confidenceInterval: "95% Confidence Interval:",
        units: {
          minutes: "min"
        }
      },
      languages: {
        en: "English",
        es: "Spanish",
        "pt-BR": "Portuguese (Brazil)",
        pt: "Portuguese",
        ar: "Arabic",
        zh: "Chinese",
        vi: "Vietnamese",
        tl: "Tagalog"
      },
      interventions: {
        "ai-chat": "AI Chat Support",
        "human-helper": "Human Helper",
        "peer-support": "Peer Support",
        "crisis-resources": "Crisis Resources",
        "safety-plan": "Safety Plan"
      }
    };
  }
});

// src/i18n/locales/en/common.json
var require_common2 = __commonJS({
  "src/i18n/locales/en/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "Astral Core",
        tagline: "Your safe space for mental health support",
        loading: "Loading your safe space...",
        error: "Something went wrong. Please try again.",
        offline: "You are offline. Crisis resources remain available."
      },
      navigation: {
        share: "Share",
        my_activity: "My Activity",
        ai_chat: "Chat with AI",
        my_safety_plan: "My Safety Plan",
        community_feed: "Community Feed",
        reflections: "Reflections",
        get_help_now: "Get Help Now",
        quiet_space: "Quiet Space",
        wellness_videos: "Wellness Videos",
        moderation_history: "Moderation History",
        guidelines: "Guidelines",
        legal: "Legal",
        helper_login: "Helper Login",
        settings: "Settings",
        donate: "Donate",
        wellness_tracking: "Wellness Tracking",
        assessments: "Assessments",
        peer_support: "Peer Support",
        dashboard: "Dashboard",
        crisis_resources: "Crisis Resources"
      },
      auth: {
        helper_signin_signup: "Helper Sign In / Sign Up",
        helper_dashboard_access: "Access your helper dashboard to support the community.",
        signin_signup_email: "Sign In / Sign Up with Email",
        continue_with: "or continue with",
        signin_google: "Sign in with Google",
        signin_apple: "Sign in with Apple",
        signin_agreement: "By signing in, you agree to our Helper Agreement and Community Guidelines.",
        logout: "Logout",
        login_success: "Successfully logged in as a Helper.",
        logout_success: "You have been logged out."
      },
      share: {
        share_your_thoughts: "Share Your Thoughts",
        chat_with_ai_prompt: "Chat with your AI companion to draft a post for the community.",
        ai_welcome: "Hi there! I'm Astral, your AI companion. I'm here to help you articulate your thoughts for a post. What's on your mind today?",
        draft_post_from_chat: "Draft Post From Chat",
        chat_with_ai_here: "Chat with the AI here...",
        review_your_post: "Review Your Post",
        review_your_post_subheader: "Your AI companion has drafted this post. Edit it as you see fit before sharing.",
        category: "Category",
        your_anonymous_post: "Your anonymous post",
        back_to_chat: "Back to Chat",
        submit_anonymously: "Submit Anonymously",
        post_shared: "Your post has been shared anonymously!",
        post_failed: "Failed to share your post."
      },
      crisis: {
        immediate_help: "Need Immediate Help?",
        call_988: "Call 988 for Crisis Support",
        text_home: "Text HOME to 741741",
        chat_online: "Chat Online Now",
        safety_plan: "View My Safety Plan",
        you_matter: "You matter. You are not alone.",
        help_available: "Help is available 24/7"
      },
      accessibility: {
        skip_to_main: "Skip to main content",
        skip_to_navigation: "Skip to navigation",
        skip_to_crisis: "Skip to crisis resources",
        language_changed: "Language changed to {{language}}",
        high_contrast: "High Contrast",
        voice_navigation: "Voice Navigation",
        screen_reader: "Screen Reader",
        settings: "Accessibility Settings",
        crisis_shortcuts: "Crisis Shortcuts"
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      },
      common: {
        submit: "Submit",
        cancel: "Cancel",
        save: "Save",
        edit: "Edit",
        delete: "Delete",
        confirm: "Confirm",
        yes: "Yes",
        no: "No",
        loading: "Loading...",
        error: "Error",
        success: "Success",
        warning: "Warning",
        info: "Info",
        close: "Close",
        back: "Back",
        next: "Next",
        previous: "Previous",
        search: "Search",
        filter: "Filter",
        sort: "Sort",
        help: "Help",
        support: "Support",
        feedback: "Feedback",
        report: "Report",
        block: "Block",
        unblock: "Unblock",
        favorite: "Favorite",
        unfavorite: "Unfavorite",
        share: "Share",
        copy: "Copy",
        download: "Download",
        upload: "Upload",
        send: "Send",
        receive: "Receive",
        view: "View",
        hide: "Hide",
        show: "Show",
        expand: "Expand",
        collapse: "Collapse",
        select: "Select",
        deselect: "Deselect",
        all: "All",
        none: "None",
        other: "Other",
        unknown: "Unknown",
        anonymous: "Anonymous",
        public: "Public",
        private: "Private",
        online: "Online",
        offline: "Offline",
        active: "Active",
        inactive: "Inactive",
        available: "Available",
        unavailable: "Unavailable",
        enabled: "Enabled",
        disabled: "Disabled"
      },
      mental_health: {
        categories: {
          anxiety: "Anxiety",
          depression: "Depression",
          stress: "Stress",
          trauma: "Trauma",
          relationships: "Relationships",
          work: "Work & Career",
          family: "Family",
          grief: "Grief & Loss",
          addiction: "Addiction",
          eating: "Eating Disorders",
          sleep: "Sleep Issues",
          self_harm: "Self-Harm",
          suicidal_thoughts: "Suicidal Thoughts",
          crisis: "Crisis Support",
          general: "General Support",
          other: "Other"
        },
        wellness: {
          mood_tracking: "Mood Tracking",
          meditation: "Meditation",
          breathing: "Breathing Exercises",
          journaling: "Journaling",
          exercise: "Physical Exercise",
          sleep_hygiene: "Sleep Hygiene",
          nutrition: "Nutrition",
          mindfulness: "Mindfulness",
          gratitude: "Gratitude Practice",
          social_connection: "Social Connection"
        }
      },
      safety_plan: {
        title: "My Safety Plan",
        warning_signs: "Warning Signs",
        coping_strategies: "Coping Strategies",
        support_contacts: "Support Contacts",
        professional_contacts: "Professional Contacts",
        environment_safety: "Making Environment Safe",
        reasons_to_live: "Reasons for Living"
      },
      validation: {
        required: "This field is required",
        email: "Please enter a valid email address",
        min_length: "Must be at least {{count}} characters",
        max_length: "Must be no more than {{count}} characters",
        password_match: "Passwords must match",
        phone: "Please enter a valid phone number"
      },
      time: {
        now: "now",
        minute_ago: "a minute ago",
        minutes_ago: "{{count}} minutes ago",
        hour_ago: "an hour ago",
        hours_ago: "{{count}} hours ago",
        day_ago: "a day ago",
        days_ago: "{{count}} days ago",
        week_ago: "a week ago",
        weeks_ago: "{{count}} weeks ago",
        month_ago: "a month ago",
        months_ago: "{{count}} months ago",
        year_ago: "a year ago",
        years_ago: "{{count}} years ago"
      }
    };
  }
});

// src/i18n/locales/en/crisis.json
var require_crisis2 = __commonJS({
  "src/i18n/locales/en/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "Crisis Support",
        subtitle: "You are not alone. Help is available 24/7.",
        immediate_danger: "If you are in immediate danger, call 911 or go to your nearest emergency room.",
        call_988: {
          title: "Call 988 Suicide & Crisis Lifeline",
          description: "Free and confidential support 24/7 for people in distress and their loved ones.",
          number: "988",
          action: "Call Now"
        },
        text_crisis: {
          title: "Crisis Text Line",
          description: "Text with a trained crisis counselor 24/7 from anywhere in the US.",
          text: "Text HOME to 741741",
          action: "Text Now"
        },
        chat_online: {
          title: "Online Crisis Chat",
          description: "Chat online with a trained crisis counselor.",
          action: "Chat Now"
        },
        emergency_contacts: {
          title: "Emergency Contacts",
          police: "Police: 911",
          fire: "Fire Department: 911",
          ambulance: "Ambulance: 911",
          poison_control: "Poison Control: 1-800-222-1222"
        }
      },
      support: {
        you_matter: "You matter.",
        not_alone: "You are not alone.",
        help_available: "Help is available.",
        safe_space: "This is a safe space.",
        confidential: "Your conversations are confidential.",
        no_judgment: "No judgment here.",
        take_time: "Take your time.",
        breathe: "Remember to breathe.",
        one_step: "One step at a time.",
        tomorrow_different: "Tomorrow can be different.",
        strength_within: "You have strength within you.",
        reach_out: "It's okay to reach out for help."
      },
      safety_plan: {
        title: "Crisis Safety Plan",
        description: "A personalized plan to help you stay safe during a crisis.",
        step1: {
          title: "Step 1: Warning Signs",
          description: "Recognize your personal warning signs that a crisis may be developing.",
          examples: "Examples: feeling hopeless, isolation, increased substance use, sleep changes"
        },
        step2: {
          title: "Step 2: Internal Coping Strategies",
          description: "Things you can do on your own to help yourself feel better.",
          examples: "Examples: listen to music, take a walk, practice deep breathing, journal"
        },
        step3: {
          title: "Step 3: Social Contacts for Distraction",
          description: "People and social settings that can help distract from the crisis.",
          examples: "Examples: friends, family members, social activities, support groups"
        },
        step4: {
          title: "Step 4: Contacts for Help",
          description: "People you can ask for help during a crisis.",
          examples: "Examples: family members, friends, mental health professionals, crisis lines"
        },
        step5: {
          title: "Step 5: Professional Contacts",
          description: "Mental health professionals and agencies to contact during a crisis.",
          examples: "Examples: therapist, psychiatrist, crisis center, emergency room"
        },
        step6: {
          title: "Step 6: Making the Environment Safe",
          description: "Ways to remove or restrict access to lethal means.",
          examples: "Examples: remove firearms, medications, sharp objects; ask someone to keep them"
        },
        step7: {
          title: "Step 7: Reasons for Living",
          description: "Things that are important to you and give your life meaning.",
          examples: "Examples: family, friends, pets, goals, spiritual beliefs, future plans"
        }
      },
      resources: {
        hotlines: {
          title: "Crisis Hotlines",
          suicide_prevention: "Suicide Prevention Lifeline",
          crisis_text: "Crisis Text Line",
          domestic_violence: "National Domestic Violence Hotline",
          substance_abuse: "SAMHSA National Helpline",
          lgbt_crisis: "LGBT National Crisis Hotline",
          veterans: "Veterans Crisis Line",
          teens: "Teen Line",
          eating_disorders: "National Eating Disorders Association"
        },
        online_resources: {
          title: "Online Resources",
          mental_health_america: "Mental Health America",
          nami: "National Alliance on Mental Illness",
          crisis_chat: "Crisis Chat Services",
          therapy_apps: "Mental Health Apps",
          support_groups: "Online Support Groups"
        },
        local_resources: {
          title: "Local Resources",
          hospitals: "Local Emergency Rooms",
          mental_health_centers: "Community Mental Health Centers",
          therapists: "Local Therapists",
          support_groups: "Local Support Groups",
          crisis_centers: "Local Crisis Centers"
        }
      },
      coping: {
        title: "Coping Strategies",
        breathing: {
          title: "Deep Breathing",
          description: "Slow, deep breathing can help calm your mind and body.",
          steps: [
            "Breathe in slowly through your nose for 4 counts",
            "Hold your breath for 4 counts",
            "Breathe out slowly through your mouth for 6 counts",
            "Repeat until you feel calmer"
          ]
        },
        grounding: {
          title: "5-4-3-2-1 Grounding Technique",
          description: "Use your senses to ground yourself in the present moment.",
          steps: [
            "5 things you can see",
            "4 things you can touch",
            "3 things you can hear",
            "2 things you can smell",
            "1 thing you can taste"
          ]
        },
        distraction: {
          title: "Healthy Distractions",
          activities: [
            "Listen to calming music",
            "Watch a funny video",
            "Call a friend or family member",
            "Take a warm shower or bath",
            "Go for a walk outside",
            "Practice a hobby",
            "Write in a journal",
            "Do some light exercise"
          ]
        },
        self_care: {
          title: "Self-Care Activities",
          immediate: [
            "Drink a glass of water",
            "Eat a healthy snack",
            "Get some fresh air",
            "Listen to music",
            "Practice deep breathing"
          ],
          short_term: [
            "Take a warm bath",
            "Call a supportive friend",
            "Watch a comforting movie",
            "Practice meditation",
            "Do gentle exercise"
          ],
          long_term: [
            "Maintain regular sleep schedule",
            "Eat nutritious meals",
            "Exercise regularly",
            "Stay connected with loved ones",
            "Practice stress management"
          ]
        }
      },
      messages: {
        crisis_detected: "We're here for you. It sounds like you might be going through a difficult time.",
        help_available: "Professional help is available 24/7. You don't have to face this alone.",
        safety_first: "Your safety is our priority. Please consider reaching out for immediate help if you're in danger.",
        not_therapist: "Remember: This platform provides peer support, not professional therapy.",
        emergency_services: "If this is a medical emergency, please call 911 or go to your nearest emergency room.",
        confidential_support: "All crisis support conversations are confidential and secure.",
        family_context: "Consider involving trusted family members who can provide additional support.",
        community_context: "Your community and cultural supports can be valuable resources during this time.",
        professional_context: "Professional mental health services are available and recommended for ongoing support.",
        low_risk_response: "I understand you're going through a difficult time. Consider reaching out to friends, family, or a counselor who can provide support.",
        moderate_risk_response: "It sounds like you're experiencing significant distress. Please consider speaking with a mental health professional or calling a crisis helpline for support.",
        high_risk_response: "I'm very concerned about your wellbeing. Please reach out for immediate support from a crisis counselor, trusted friend, or family member.",
        urgent_risk_response: "This appears to be a mental health emergency. Please contact emergency services, a crisis hotline, or go to your nearest emergency room immediately."
      },
      crisis_detection_dashboard: "Crisis Detection Dashboard",
      dashboard: {
        current_status: "Current Status",
        risk_level: "Risk Level",
        emotional_state: "Emotional State",
        urgency: "Intervention Urgency",
        emotional_trend: "Emotional Trend",
        risk_prediction: "Risk Prediction",
        predicted_24h_risk: "Predicted 24h Risk",
        model_performance: "Model Performance",
        recommended_interventions: "Recommended Interventions",
        priority: "Priority",
        effective: "Effective",
        no_interventions_needed: "No interventions needed at this time",
        view_detailed_analysis: "View Detailed Analysis",
        detailed_analysis: "Detailed Analysis",
        no_emotional_data: "No emotional data available yet",
        insufficient_prediction_data: "Insufficient data for prediction"
      },
      test: {
        enter_text_to_analyze: "Enter text to analyze for crisis indicators...",
        analyze_text: "Analyze Text"
      },
      alert: {
        none_risk_detected: "No Crisis Risk Detected",
        low_risk_detected: "Low Crisis Risk Detected",
        medium_risk_detected: "Medium Crisis Risk Detected",
        high_risk_detected: "High Crisis Risk Detected",
        critical_risk_detected: "Critical Crisis Risk Detected",
        immediate_risk_detected: "Immediate Crisis Risk - Emergency",
        risk_level_description: "Current risk level: {{level}}%",
        recommended_actions: "Recommended Actions"
      },
      trend: {
        improving: "Improving",
        deteriorating: "Deteriorating",
        stable: "Stable",
        increasing: "Increasing",
        decreasing: "Decreasing",
        insufficient_data: "Insufficient Data"
      },
      urgency: {
        none: "None",
        low: "Low",
        medium: "Medium",
        high: "High",
        immediate: "Immediate"
      },
      metrics: {
        accuracy: "Accuracy",
        confidence: "Confidence",
        total_analyses: "Total Analyses"
      },
      analysis: {
        psychological_assessment: "Psychological Assessment",
        behavioral_patterns: "Behavioral Patterns",
        bias_adjustments: "Cultural & Bias Adjustments",
        no_bias_adjustments: "No bias adjustments were applied"
      },
      assessment: {
        depression: "Depression Indicators",
        anxiety: "Anxiety Indicators",
        suicidal_ideation: "Suicidal Ideation"
      },
      patterns: {
        communication_style: "Communication Style",
        help_seeking: "Help-Seeking Behavior",
        triggers: "Escalation Triggers"
      }
    };
  }
});

// src/i18n/locales/es/common.json
var require_common3 = __commonJS({
  "src/i18n/locales/es/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "Astral Core",
        tagline: "Tu espacio seguro para apoyo en salud mental",
        loading: "Cargando tu espacio seguro...",
        error: "Algo sali\xF3 mal. Por favor, int\xE9ntalo de nuevo.",
        offline: "Est\xE1s desconectado. Los recursos de crisis siguen disponibles."
      },
      navigation: {
        share: "Compartir",
        my_activity: "Mi Actividad",
        ai_chat: "Chatear con IA",
        my_safety_plan: "Mi Plan de Seguridad",
        community_feed: "Feed Comunitario",
        reflections: "Reflexiones",
        get_help_now: "Obtener Ayuda Ahora",
        quiet_space: "Espacio Tranquilo",
        wellness_videos: "Videos de Bienestar",
        moderation_history: "Historial de Moderaci\xF3n",
        guidelines: "Normas",
        legal: "Legal",
        helper_login: "Acceso de Ayudante",
        settings: "Configuraci\xF3n",
        donate: "Donar",
        wellness_tracking: "Seguimiento de Bienestar",
        assessments: "Evaluaciones",
        peer_support: "Apoyo entre Pares",
        dashboard: "Panel de Control",
        crisis_resources: "Recursos de Crisis"
      },
      auth: {
        helper_signin_signup: "Acceso / Registro de Ayudante",
        helper_dashboard_access: "Accede a tu panel de ayudante para apoyar a la comunidad.",
        signin_signup_email: "Acceder / Registrarse con Correo",
        continue_with: "o continuar con",
        signin_google: "Acceder con Google",
        signin_apple: "Acceder con Apple",
        signin_agreement: "Al iniciar sesi\xF3n, aceptas nuestro Acuerdo de Ayudante y las Normas de la Comunidad.",
        logout: "Cerrar Sesi\xF3n",
        login_success: "Has iniciado sesi\xF3n exitosamente como Ayudante.",
        logout_success: "Has cerrado sesi\xF3n."
      },
      share: {
        share_your_thoughts: "Comparte Tus Pensamientos",
        chat_with_ai_prompt: "Chatea con tu compa\xF1ero de IA para redactar una publicaci\xF3n para la comunidad.",
        ai_welcome: "\xA1Hola! Soy Astral, tu compa\xF1ero de IA. Estoy aqu\xED para ayudarte a expresar tus pensamientos en una publicaci\xF3n. \xBFQu\xE9 tienes en mente hoy?",
        draft_post_from_chat: "Crear Borrador desde Chat",
        chat_with_ai_here: "Chatea con la IA aqu\xED...",
        review_your_post: "Revisa Tu Publicaci\xF3n",
        review_your_post_subheader: "Tu compa\xF1ero de IA ha creado este borrador. Ed\xEDtalo como consideres antes de compartirlo.",
        category: "Categor\xEDa",
        your_anonymous_post: "Tu publicaci\xF3n an\xF3nima",
        back_to_chat: "Volver al Chat",
        submit_anonymously: "Publicar An\xF3nimamente",
        post_shared: "\xA1Tu publicaci\xF3n ha sido compartida an\xF3nimamente!",
        post_failed: "Error al compartir tu publicaci\xF3n."
      },
      crisis: {
        immediate_help: "\xBFNecesitas Ayuda Inmediata?",
        call_988: "Llama al 988 para Apoyo en Crisis",
        text_home: "Env\xEDa HOGAR al 741741",
        chat_online: "Chatea en L\xEDnea Ahora",
        safety_plan: "Ver Mi Plan de Seguridad",
        you_matter: "T\xFA importas. No est\xE1s solo/a.",
        help_available: "La ayuda est\xE1 disponible 24/7"
      },
      accessibility: {
        skip_to_main: "Saltar al contenido principal",
        skip_to_navigation: "Saltar a la navegaci\xF3n",
        skip_to_crisis: "Saltar a recursos de crisis",
        language_changed: "Idioma cambiado a {{language}}",
        high_contrast: "Alto Contraste",
        voice_navigation: "Navegaci\xF3n por Voz",
        screen_reader: "Lector de Pantalla",
        settings: "Configuraci\xF3n de Accesibilidad",
        crisis_shortcuts: "Atajos de Crisis"
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      },
      common: {
        submit: "Enviar",
        cancel: "Cancelar",
        save: "Guardar",
        edit: "Editar",
        delete: "Eliminar",
        confirm: "Confirmar",
        yes: "S\xED",
        no: "No",
        loading: "Cargando...",
        error: "Error",
        success: "\xC9xito",
        warning: "Advertencia",
        info: "Informaci\xF3n",
        close: "Cerrar",
        back: "Atr\xE1s",
        next: "Siguiente",
        previous: "Anterior",
        search: "Buscar",
        filter: "Filtrar",
        sort: "Ordenar",
        help: "Ayuda",
        support: "Apoyo",
        feedback: "Comentarios",
        report: "Reportar",
        block: "Bloquear",
        unblock: "Desbloquear",
        favorite: "Favorito",
        unfavorite: "Quitar de Favoritos",
        share: "Compartir",
        copy: "Copiar",
        download: "Descargar",
        upload: "Subir",
        send: "Enviar",
        receive: "Recibir",
        view: "Ver",
        hide: "Ocultar",
        show: "Mostrar",
        expand: "Expandir",
        collapse: "Contraer",
        select: "Seleccionar",
        deselect: "Deseleccionar",
        all: "Todos",
        none: "Ninguno",
        other: "Otro",
        unknown: "Desconocido",
        anonymous: "An\xF3nimo",
        public: "P\xFAblico",
        private: "Privado",
        online: "En L\xEDnea",
        offline: "Desconectado",
        active: "Activo",
        inactive: "Inactivo",
        available: "Disponible",
        unavailable: "No Disponible",
        enabled: "Habilitado",
        disabled: "Deshabilitado"
      },
      mental_health: {
        categories: {
          anxiety: "Ansiedad",
          depression: "Depresi\xF3n",
          stress: "Estr\xE9s",
          trauma: "Trauma",
          relationships: "Relaciones",
          work: "Trabajo y Carrera",
          family: "Familia",
          grief: "Duelo y P\xE9rdida",
          addiction: "Adicci\xF3n",
          eating: "Trastornos Alimentarios",
          sleep: "Problemas de Sue\xF1o",
          self_harm: "Autolesi\xF3n",
          suicidal_thoughts: "Pensamientos Suicidas",
          crisis: "Apoyo en Crisis",
          general: "Apoyo General",
          other: "Otro"
        },
        wellness: {
          mood_tracking: "Seguimiento del Estado de \xC1nimo",
          meditation: "Meditaci\xF3n",
          breathing: "Ejercicios de Respiraci\xF3n",
          journaling: "Escribir en Diario",
          exercise: "Ejercicio F\xEDsico",
          sleep_hygiene: "Higiene del Sue\xF1o",
          nutrition: "Nutrici\xF3n",
          mindfulness: "Atenci\xF3n Plena",
          gratitude: "Pr\xE1ctica de Gratitud",
          social_connection: "Conexi\xF3n Social"
        }
      },
      safety_plan: {
        title: "Mi Plan de Seguridad",
        warning_signs: "Se\xF1ales de Alerta",
        coping_strategies: "Estrategias de Afrontamiento",
        support_contacts: "Contactos de Apoyo",
        professional_contacts: "Contactos Profesionales",
        environment_safety: "Hacer el Entorno Seguro",
        reasons_to_live: "Razones para Vivir"
      },
      validation: {
        required: "Este campo es obligatorio",
        email: "Por favor ingresa una direcci\xF3n de correo v\xE1lida",
        min_length: "Debe tener al menos {{count}} caracteres",
        max_length: "No debe tener m\xE1s de {{count}} caracteres",
        password_match: "Las contrase\xF1as deben coincidir",
        phone: "Por favor ingresa un n\xFAmero de tel\xE9fono v\xE1lido"
      },
      time: {
        now: "ahora",
        minute_ago: "hace un minuto",
        minutes_ago: "hace {{count}} minutos",
        hour_ago: "hace una hora",
        hours_ago: "hace {{count}} horas",
        day_ago: "hace un d\xEDa",
        days_ago: "hace {{count}} d\xEDas",
        week_ago: "hace una semana",
        weeks_ago: "hace {{count}} semanas",
        month_ago: "hace un mes",
        months_ago: "hace {{count}} meses",
        year_ago: "hace un a\xF1o",
        years_ago: "hace {{count}} a\xF1os"
      }
    };
  }
});

// src/i18n/locales/es/crisis.json
var require_crisis3 = __commonJS({
  "src/i18n/locales/es/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "Apoyo en Crisis",
        subtitle: "No est\xE1s solo/a. La ayuda est\xE1 disponible las 24 horas.",
        immediate_danger: "Si est\xE1s en peligro inmediato, llama al 911 o ve a la sala de emergencias m\xE1s cercana.",
        call_988: {
          title: "Llama al 988 L\xEDnea de Prevenci\xF3n del Suicidio y Crisis",
          description: "Apoyo gratuito y confidencial las 24 horas para personas en crisis y sus seres queridos.",
          number: "988",
          action: "Llamar Ahora"
        },
        text_crisis: {
          title: "L\xEDnea de Texto para Crisis",
          description: "Env\xEDa un mensaje a un consejero de crisis entrenado las 24 horas desde cualquier lugar en EE.UU.",
          text: "Env\xEDa HOGAR al 741741",
          action: "Enviar Mensaje Ahora"
        },
        chat_online: {
          title: "Chat de Crisis en L\xEDnea",
          description: "Chatea en l\xEDnea con un consejero de crisis entrenado.",
          action: "Chatear Ahora"
        },
        emergency_contacts: {
          title: "Contactos de Emergencia",
          police: "Polic\xEDa: 911",
          fire: "Bomberos: 911",
          ambulance: "Ambulancia: 911",
          poison_control: "Control de Envenenamiento: 1-800-222-1222"
        }
      },
      support: {
        you_matter: "T\xFA importas.",
        not_alone: "No est\xE1s solo/a.",
        help_available: "La ayuda est\xE1 disponible.",
        safe_space: "Este es un espacio seguro.",
        confidential: "Tus conversaciones son confidenciales.",
        no_judgment: "Aqu\xED no hay juicios.",
        take_time: "T\xF3mate tu tiempo.",
        breathe: "Recuerda respirar.",
        one_step: "Un paso a la vez.",
        tomorrow_different: "Ma\xF1ana puede ser diferente.",
        strength_within: "Tienes fuerza dentro de ti.",
        reach_out: "Est\xE1 bien pedir ayuda."
      },
      safety_plan: {
        title: "Plan de Seguridad para Crisis",
        description: "Un plan personalizado para ayudarte a mantenerte seguro/a durante una crisis.",
        step1: {
          title: "Paso 1: Se\xF1ales de Alerta",
          description: "Reconoce tus se\xF1ales de alerta personales que indican que una crisis puede estar desarroll\xE1ndose.",
          examples: "Ejemplos: sentirse sin esperanza, aislamiento, aumento del uso de sustancias, cambios en el sue\xF1o"
        },
        step2: {
          title: "Paso 2: Estrategias Internas de Afrontamiento",
          description: "Cosas que puedes hacer por tu cuenta para ayudarte a sentirte mejor.",
          examples: "Ejemplos: escuchar m\xFAsica, caminar, practicar respiraci\xF3n profunda, escribir en diario"
        },
        step3: {
          title: "Paso 3: Contactos Sociales para Distracci\xF3n",
          description: "Personas y entornos sociales que pueden ayudar a distraerte de la crisis.",
          examples: "Ejemplos: amigos, familiares, actividades sociales, grupos de apoyo"
        },
        step4: {
          title: "Paso 4: Contactos para Ayuda",
          description: "Personas a quienes puedes pedir ayuda durante una crisis.",
          examples: "Ejemplos: familiares, amigos, profesionales de salud mental, l\xEDneas de crisis"
        },
        step5: {
          title: "Paso 5: Contactos Profesionales",
          description: "Profesionales de salud mental y agencias a contactar durante una crisis.",
          examples: "Ejemplos: terapeuta, psiquiatra, centro de crisis, sala de emergencias"
        },
        step6: {
          title: "Paso 6: Hacer el Entorno Seguro",
          description: "Formas de remover o restringir el acceso a medios letales.",
          examples: "Ejemplos: remover armas de fuego, medicamentos, objetos cortantes; pedirle a alguien que los guarde"
        },
        step7: {
          title: "Paso 7: Razones para Vivir",
          description: "Cosas que son importantes para ti y dan significado a tu vida.",
          examples: "Ejemplos: familia, amigos, mascotas, metas, creencias espirituales, planes futuros"
        }
      },
      resources: {
        hotlines: {
          title: "L\xEDneas de Crisis",
          suicide_prevention: "L\xEDnea Nacional de Prevenci\xF3n del Suicidio",
          crisis_text: "L\xEDnea de Texto para Crisis",
          domestic_violence: "L\xEDnea Nacional de Violencia Dom\xE9stica",
          substance_abuse: "L\xEDnea de Ayuda Nacional SAMHSA",
          lgbt_crisis: "L\xEDnea de Crisis Nacional LGBT",
          veterans: "L\xEDnea de Crisis para Veteranos",
          teens: "L\xEDnea para Adolescentes",
          eating_disorders: "Asociaci\xF3n Nacional de Trastornos Alimentarios"
        },
        online_resources: {
          title: "Recursos en L\xEDnea",
          mental_health_america: "Mental Health America",
          nami: "Alianza Nacional sobre Enfermedades Mentales",
          crisis_chat: "Servicios de Chat para Crisis",
          therapy_apps: "Aplicaciones de Salud Mental",
          support_groups: "Grupos de Apoyo en L\xEDnea"
        },
        local_resources: {
          title: "Recursos Locales",
          hospitals: "Salas de Emergencia Locales",
          mental_health_centers: "Centros Comunitarios de Salud Mental",
          therapists: "Terapeutas Locales",
          support_groups: "Grupos de Apoyo Locales",
          crisis_centers: "Centros de Crisis Locales"
        }
      },
      coping: {
        title: "Estrategias de Afrontamiento",
        breathing: {
          title: "Respiraci\xF3n Profunda",
          description: "La respiraci\xF3n lenta y profunda puede ayudar a calmar tu mente y cuerpo.",
          steps: [
            "Respira lentamente por la nariz contando hasta 4",
            "Mant\xE9n la respiraci\xF3n contando hasta 4",
            "Exhala lentamente por la boca contando hasta 6",
            "Repite hasta que te sientas m\xE1s calmado/a"
          ]
        },
        grounding: {
          title: "T\xE9cnica de Conexi\xF3n a Tierra 5-4-3-2-1",
          description: "Usa tus sentidos para conectarte al momento presente.",
          steps: [
            "5 cosas que puedes ver",
            "4 cosas que puedes tocar",
            "3 cosas que puedes escuchar",
            "2 cosas que puedes oler",
            "1 cosa que puedes saborear"
          ]
        },
        distraction: {
          title: "Distracciones Saludables",
          activities: [
            "Escuchar m\xFAsica relajante",
            "Ver un video divertido",
            "Llamar a un amigo o familiar",
            "Tomar una ducha o ba\xF1o tibio",
            "Caminar al aire libre",
            "Practicar un pasatiempo",
            "Escribir en un diario",
            "Hacer ejercicio ligero"
          ]
        },
        self_care: {
          title: "Actividades de Autocuidado",
          immediate: [
            "Beber un vaso de agua",
            "Comer un refrigerio saludable",
            "Tomar aire fresco",
            "Escuchar m\xFAsica",
            "Practicar respiraci\xF3n profunda"
          ],
          short_term: [
            "Tomar un ba\xF1o tibio",
            "Llamar a un amigo que te apoye",
            "Ver una pel\xEDcula reconfortante",
            "Practicar meditaci\xF3n",
            "Hacer ejercicio suave"
          ],
          long_term: [
            "Mantener un horario regular de sue\xF1o",
            "Comer comidas nutritivas",
            "Hacer ejercicio regularmente",
            "Mantenerse conectado con seres queridos",
            "Practicar manejo del estr\xE9s"
          ]
        }
      },
      messages: {
        crisis_detected: "Estamos aqu\xED para ti. Parece que podr\xEDas estar pasando por un momento dif\xEDcil.",
        help_available: "La ayuda profesional est\xE1 disponible las 24 horas. No tienes que enfrentar esto solo/a.",
        safety_first: "Tu seguridad es nuestra prioridad. Por favor considera buscar ayuda inmediata si est\xE1s en peligro.",
        not_therapist: "Recuerda: Esta plataforma proporciona apoyo entre pares, no terapia profesional.",
        emergency_services: "Si esta es una emergencia m\xE9dica, por favor llama al 911 o ve a la sala de emergencias m\xE1s cercana.",
        confidential_support: "Todas las conversaciones de apoyo en crisis son confidenciales y seguras.",
        family_context: "Considera involucrar a familiares de confianza que puedan brindar apoyo adicional.",
        community_context: "Tu comunidad y apoyos culturales pueden ser recursos valiosos en este momento.",
        professional_context: "Los servicios profesionales de salud mental est\xE1n disponibles y se recomiendan para apoyo continuo."
      }
    };
  }
});

// src/i18n/locales/pt/common.json
var require_common4 = __commonJS({
  "src/i18n/locales/pt/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "Astral Core",
        tagline: "Seu espa\xE7o seguro para apoio em sa\xFAde mental",
        loading: "Carregando seu espa\xE7o seguro...",
        error: "Algo deu errado. Por favor, tente novamente.",
        offline: "Voc\xEA est\xE1 offline. Recursos de crise permanecem dispon\xEDveis."
      },
      navigation: {
        share: "Compartilhar",
        my_activity: "Minha Atividade",
        ai_chat: "Conversar com IA",
        my_safety_plan: "Meu Plano de Seguran\xE7a",
        community_feed: "Feed da Comunidade",
        reflections: "Reflex\xF5es",
        get_help_now: "Obter Ajuda Agora",
        quiet_space: "Espa\xE7o Tranquilo",
        wellness_videos: "V\xEDdeos de Bem-estar",
        moderation_history: "Hist\xF3rico de Modera\xE7\xE3o",
        guidelines: "Diretrizes",
        legal: "Legal",
        helper_login: "Login de Ajudante",
        settings: "Configura\xE7\xF5es",
        donate: "Doar",
        wellness_tracking: "Acompanhamento de Bem-estar",
        assessments: "Avalia\xE7\xF5es",
        peer_support: "Apoio entre Pares",
        dashboard: "Painel",
        crisis_resources: "Recursos de Crise"
      },
      auth: {
        helper_signin_signup: "Entrar / Cadastrar como Ajudante",
        helper_dashboard_access: "Acesse seu painel de ajudante para apoiar a comunidade.",
        signin_signup_email: "Entrar / Cadastrar com E-mail",
        continue_with: "ou continuar com",
        signin_google: "Entrar com Google",
        signin_apple: "Entrar com Apple",
        signin_agreement: "Ao entrar, voc\xEA concorda com nosso Acordo de Ajudante e Diretrizes da Comunidade.",
        logout: "Sair",
        login_success: "Login realizado com sucesso como Ajudante.",
        logout_success: "Voc\xEA saiu da sua conta."
      },
      share: {
        share_your_thoughts: "Compartilhe Seus Pensamentos",
        chat_with_ai_prompt: "Converse com seu companheiro de IA para redigir uma postagem para a comunidade.",
        ai_welcome: "Ol\xE1! Sou Astral, seu companheiro de IA. Estou aqui para ajud\xE1-lo a articular seus pensamentos em uma postagem. O que voc\xEA tem em mente hoje?",
        draft_post_from_chat: "Criar Rascunho do Chat",
        chat_with_ai_here: "Converse com a IA aqui...",
        review_your_post: "Revise Sua Postagem",
        review_your_post_subheader: "Seu companheiro de IA criou este rascunho. Edite conforme necess\xE1rio antes de compartilhar.",
        category: "Categoria",
        your_anonymous_post: "Sua postagem an\xF4nima",
        back_to_chat: "Voltar ao Chat",
        submit_anonymously: "Postar Anonimamente",
        post_shared: "Sua postagem foi compartilhada anonimamente!",
        post_failed: "Falha ao compartilhar sua postagem."
      },
      crisis: {
        immediate_help: "Precisa de Ajuda Imediata?",
        call_988: "Ligue 196 para Apoio em Crise",
        text_home: "Envie CASA para 141",
        chat_online: "Converse Online Agora",
        safety_plan: "Ver Meu Plano de Seguran\xE7a",
        you_matter: "Voc\xEA importa. Voc\xEA n\xE3o est\xE1 sozinho/a.",
        help_available: "Ajuda est\xE1 dispon\xEDvel 24/7"
      },
      accessibility: {
        skip_to_main: "Pular para o conte\xFAdo principal",
        skip_to_navigation: "Pular para a navega\xE7\xE3o",
        skip_to_crisis: "Pular para recursos de crise",
        language_changed: "Idioma alterado para {{language}}",
        high_contrast: "Alto Contraste",
        voice_navigation: "Navega\xE7\xE3o por Voz",
        screen_reader: "Leitor de Tela",
        settings: "Configura\xE7\xF5es de Acessibilidade",
        crisis_shortcuts: "Atalhos de Crise"
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      },
      common: {
        submit: "Enviar",
        cancel: "Cancelar",
        save: "Salvar",
        edit: "Editar",
        delete: "Excluir",
        confirm: "Confirmar",
        yes: "Sim",
        no: "N\xE3o",
        loading: "Carregando...",
        error: "Erro",
        success: "Sucesso",
        warning: "Aviso",
        info: "Informa\xE7\xE3o",
        close: "Fechar",
        back: "Voltar",
        next: "Pr\xF3ximo",
        previous: "Anterior",
        search: "Buscar",
        filter: "Filtrar",
        sort: "Ordenar",
        help: "Ajuda",
        support: "Apoio",
        feedback: "Feedback",
        report: "Reportar",
        block: "Bloquear",
        unblock: "Desbloquear",
        favorite: "Favorito",
        unfavorite: "Remover dos Favoritos",
        share: "Compartilhar",
        copy: "Copiar",
        download: "Baixar",
        upload: "Carregar",
        send: "Enviar",
        receive: "Receber",
        view: "Ver",
        hide: "Ocultar",
        show: "Mostrar",
        expand: "Expandir",
        collapse: "Recolher",
        select: "Selecionar",
        deselect: "Desselecionar",
        all: "Todos",
        none: "Nenhum",
        other: "Outro",
        unknown: "Desconhecido",
        anonymous: "An\xF4nimo",
        public: "P\xFAblico",
        private: "Privado",
        online: "Online",
        offline: "Offline",
        active: "Ativo",
        inactive: "Inativo",
        available: "Dispon\xEDvel",
        unavailable: "Indispon\xEDvel",
        enabled: "Habilitado",
        disabled: "Desabilitado"
      },
      mental_health: {
        categories: {
          anxiety: "Ansiedade",
          depression: "Depress\xE3o",
          stress: "Estresse",
          trauma: "Trauma",
          relationships: "Relacionamentos",
          work: "Trabalho e Carreira",
          family: "Fam\xEDlia",
          grief: "Luto e Perda",
          addiction: "V\xEDcio",
          eating: "Transtornos Alimentares",
          sleep: "Problemas de Sono",
          self_harm: "Autoles\xE3o",
          suicidal_thoughts: "Pensamentos Suicidas",
          crisis: "Apoio em Crise",
          general: "Apoio Geral",
          other: "Outro"
        },
        wellness: {
          mood_tracking: "Acompanhamento do Humor",
          meditation: "Medita\xE7\xE3o",
          breathing: "Exerc\xEDcios de Respira\xE7\xE3o",
          journaling: "Di\xE1rio",
          exercise: "Exerc\xEDcio F\xEDsico",
          sleep_hygiene: "Higiene do Sono",
          nutrition: "Nutri\xE7\xE3o",
          mindfulness: "Aten\xE7\xE3o Plena",
          gratitude: "Pr\xE1tica da Gratid\xE3o",
          social_connection: "Conex\xE3o Social"
        }
      },
      safety_plan: {
        title: "Meu Plano de Seguran\xE7a",
        warning_signs: "Sinais de Alerta",
        coping_strategies: "Estrat\xE9gias de Enfrentamento",
        support_contacts: "Contatos de Apoio",
        professional_contacts: "Contatos Profissionais",
        environment_safety: "Tornar o Ambiente Seguro",
        reasons_to_live: "Raz\xF5es para Viver"
      },
      validation: {
        required: "Este campo \xE9 obrigat\xF3rio",
        email: "Por favor, insira um endere\xE7o de e-mail v\xE1lido",
        min_length: "Deve ter pelo menos {{count}} caracteres",
        max_length: "Deve ter no m\xE1ximo {{count}} caracteres",
        password_match: "As senhas devem coincidir",
        phone: "Por favor, insira um n\xFAmero de telefone v\xE1lido"
      },
      time: {
        now: "agora",
        minute_ago: "h\xE1 um minuto",
        minutes_ago: "h\xE1 {{count}} minutos",
        hour_ago: "h\xE1 uma hora",
        hours_ago: "h\xE1 {{count}} horas",
        day_ago: "h\xE1 um dia",
        days_ago: "h\xE1 {{count}} dias",
        week_ago: "h\xE1 uma semana",
        weeks_ago: "h\xE1 {{count}} semanas",
        month_ago: "h\xE1 um m\xEAs",
        months_ago: "h\xE1 {{count}} meses",
        year_ago: "h\xE1 um ano",
        years_ago: "h\xE1 {{count}} anos"
      }
    };
  }
});

// src/i18n/locales/pt/crisis.json
var require_crisis4 = __commonJS({
  "src/i18n/locales/pt/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "Apoio em Crise",
        subtitle: "Voc\xEA n\xE3o est\xE1 sozinho/a. Ajuda est\xE1 dispon\xEDvel 24 horas.",
        immediate_danger: "Se voc\xEA est\xE1 em perigo imediato, ligue 190 ou v\xE1 para o pronto-socorro mais pr\xF3ximo.",
        call_988: {
          title: "Ligue 196 Centro de Valoriza\xE7\xE3o da Vida",
          description: "Apoio gratuito e confidencial 24 horas para pessoas em crise e seus entes queridos.",
          number: "196",
          action: "Ligar Agora"
        },
        text_crisis: {
          title: "Linha de Texto para Crise",
          description: "Envie uma mensagem para um conselheiro de crise treinado 24 horas.",
          text: "Envie CASA para 141",
          action: "Enviar Mensagem Agora"
        },
        chat_online: {
          title: "Chat de Crise Online",
          description: "Converse online com um conselheiro de crise treinado.",
          action: "Conversar Agora"
        },
        emergency_contacts: {
          title: "Contatos de Emerg\xEAncia",
          police: "Pol\xEDcia: 190",
          fire: "Bombeiros: 193",
          ambulance: "SAMU: 192",
          poison_control: "Centro de Informa\xE7\xF5es Toxicol\xF3gicas: 0800-722-6001"
        }
      },
      support: {
        you_matter: "Voc\xEA importa.",
        not_alone: "Voc\xEA n\xE3o est\xE1 sozinho/a.",
        help_available: "Ajuda est\xE1 dispon\xEDvel.",
        safe_space: "Este \xE9 um espa\xE7o seguro.",
        confidential: "Suas conversas s\xE3o confidenciais.",
        no_judgment: "Aqui n\xE3o h\xE1 julgamento.",
        take_time: "Tome seu tempo.",
        breathe: "Lembre-se de respirar.",
        one_step: "Um passo de cada vez.",
        tomorrow_different: "Amanh\xE3 pode ser diferente.",
        strength_within: "Voc\xEA tem for\xE7a dentro de voc\xEA.",
        reach_out: "\xC9 normal pedir ajuda."
      },
      safety_plan: {
        title: "Plano de Seguran\xE7a para Crise",
        description: "Um plano personalizado para ajud\xE1-lo a se manter seguro durante uma crise.",
        step1: {
          title: "Passo 1: Sinais de Alerta",
          description: "Reconhe\xE7a seus sinais de alerta pessoais que indicam que uma crise pode estar se desenvolvendo.",
          examples: "Exemplos: sentir-se sem esperan\xE7a, isolamento, aumento do uso de subst\xE2ncias, mudan\xE7as no sono"
        },
        step2: {
          title: "Passo 2: Estrat\xE9gias Internas de Enfrentamento",
          description: "Coisas que voc\xEA pode fazer sozinho para se ajudar a se sentir melhor.",
          examples: "Exemplos: ouvir m\xFAsica, caminhar, praticar respira\xE7\xE3o profunda, escrever no di\xE1rio"
        },
        step3: {
          title: "Passo 3: Contatos Sociais para Distra\xE7\xE3o",
          description: "Pessoas e ambientes sociais que podem ajudar a distrair da crise.",
          examples: "Exemplos: amigos, familiares, atividades sociais, grupos de apoio"
        },
        step4: {
          title: "Passo 4: Contatos para Ajuda",
          description: "Pessoas que voc\xEA pode pedir ajuda durante uma crise.",
          examples: "Exemplos: familiares, amigos, profissionais de sa\xFAde mental, linhas de crise"
        },
        step5: {
          title: "Passo 5: Contatos Profissionais",
          description: "Profissionais de sa\xFAde mental e ag\xEAncias para contatar durante uma crise.",
          examples: "Exemplos: terapeuta, psiquiatra, centro de crise, pronto-socorro"
        },
        step6: {
          title: "Passo 6: Tornar o Ambiente Seguro",
          description: "Maneiras de remover ou restringir o acesso a meios letais.",
          examples: "Exemplos: remover armas de fogo, medicamentos, objetos cortantes; pedir para algu\xE9m guard\xE1-los"
        },
        step7: {
          title: "Passo 7: Raz\xF5es para Viver",
          description: "Coisas que s\xE3o importantes para voc\xEA e d\xE3o significado \xE0 sua vida.",
          examples: "Exemplos: fam\xEDlia, amigos, animais de estima\xE7\xE3o, objetivos, cren\xE7as espirituais, planos futuros"
        }
      },
      resources: {
        hotlines: {
          title: "Linhas de Crise",
          suicide_prevention: "Centro de Valoriza\xE7\xE3o da Vida",
          crisis_text: "Linha de Texto para Crise",
          domestic_violence: "Central de Atendimento \xE0 Mulher",
          substance_abuse: "CAPS-AD",
          lgbt_crisis: "Disque 100 Direitos Humanos",
          veterans: "Hospital de Veteranos",
          teens: "Linha do Adolescente",
          eating_disorders: "Programa de Transtornos Alimentares"
        },
        online_resources: {
          title: "Recursos Online",
          mental_health_america: "Sa\xFAde Mental Brasil",
          nami: "Associa\xE7\xE3o Brasileira de Familiares e Portadores de Transtornos Mentais",
          crisis_chat: "Servi\xE7os de Chat para Crise",
          therapy_apps: "Aplicativos de Sa\xFAde Mental",
          support_groups: "Grupos de Apoio Online"
        },
        local_resources: {
          title: "Recursos Locais",
          hospitals: "Prontos-Socorros Locais",
          mental_health_centers: "Centros de Aten\xE7\xE3o Psicossocial (CAPS)",
          therapists: "Terapeutas Locais",
          support_groups: "Grupos de Apoio Locais",
          crisis_centers: "Centros de Crise Locais"
        }
      },
      coping: {
        title: "Estrat\xE9gias de Enfrentamento",
        breathing: {
          title: "Respira\xE7\xE3o Profunda",
          description: "A respira\xE7\xE3o lenta e profunda pode ajudar a acalmar sua mente e corpo.",
          steps: [
            "Respire lentamente pelo nariz contando at\xE9 4",
            "Segure a respira\xE7\xE3o contando at\xE9 4",
            "Expire lentamente pela boca contando at\xE9 6",
            "Repita at\xE9 se sentir mais calmo/a"
          ]
        },
        grounding: {
          title: "T\xE9cnica de Grounding 5-4-3-2-1",
          description: "Use seus sentidos para se conectar ao momento presente.",
          steps: [
            "5 coisas que voc\xEA pode ver",
            "4 coisas que voc\xEA pode tocar",
            "3 coisas que voc\xEA pode ouvir",
            "2 coisas que voc\xEA pode cheirar",
            "1 coisa que voc\xEA pode saborear"
          ]
        },
        distraction: {
          title: "Distra\xE7\xF5es Saud\xE1veis",
          activities: [
            "Ouvir m\xFAsica relaxante",
            "Assistir a um v\xEDdeo engra\xE7ado",
            "Ligar para um amigo ou familiar",
            "Tomar um banho morno",
            "Fazer uma caminhada ao ar livre",
            "Praticar um hobby",
            "Escrever no di\xE1rio",
            "Fazer exerc\xEDcio leve"
          ]
        },
        self_care: {
          title: "Atividades de Autocuidado",
          immediate: [
            "Beber um copo de \xE1gua",
            "Comer um lanche saud\xE1vel",
            "Pegar um pouco de ar fresco",
            "Ouvir m\xFAsica",
            "Praticar respira\xE7\xE3o profunda"
          ],
          short_term: [
            "Tomar um banho morno",
            "Ligar para um amigo solid\xE1rio",
            "Assistir a um filme reconfortante",
            "Praticar medita\xE7\xE3o",
            "Fazer exerc\xEDcio suave"
          ],
          long_term: [
            "Manter hor\xE1rio regular de sono",
            "Comer refei\xE7\xF5es nutritivas",
            "Exercitar-se regularmente",
            "Manter-se conectado com entes queridos",
            "Praticar gerenciamento do estresse"
          ]
        }
      },
      messages: {
        crisis_detected: "Estamos aqui para voc\xEA. Parece que voc\xEA pode estar passando por um momento dif\xEDcil.",
        help_available: "Ajuda profissional est\xE1 dispon\xEDvel 24 horas. Voc\xEA n\xE3o precisa enfrentar isso sozinho/a.",
        safety_first: "Sua seguran\xE7a \xE9 nossa prioridade. Por favor, considere buscar ajuda imediata se voc\xEA est\xE1 em perigo.",
        not_therapist: "Lembre-se: Esta plataforma oferece apoio entre pares, n\xE3o terapia profissional.",
        emergency_services: "Se esta \xE9 uma emerg\xEAncia m\xE9dica, por favor ligue 192 ou v\xE1 para o pronto-socorro mais pr\xF3ximo.",
        confidential_support: "Todas as conversas de apoio em crise s\xE3o confidenciais e seguras.",
        family_context: "Considere envolver familiares de confian\xE7a que possam fornecer apoio adicional.",
        community_context: "Sua comunidade e apoios culturais podem ser recursos valiosos neste momento.",
        professional_context: "Servi\xE7os profissionais de sa\xFAde mental est\xE3o dispon\xEDveis e s\xE3o recomendados para apoio cont\xEDnuo."
      }
    };
  }
});

// src/i18n/locales/tl/common.json
var require_common5 = __commonJS({
  "src/i18n/locales/tl/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "Astral Core",
        tagline: "Ang inyong ligtas na lugar para sa suportang pangkalusugan ng isip",
        loading: "Naglo-load ng inyong ligtas na lugar...",
        error: "May nangyaring mali. Pakisubukan ulit.",
        offline: "Offline kayo. Ang mga resources para sa krisis ay nananatiling available."
      },
      navigation: {
        share: "Ibahagi",
        my_activity: "Aking Aktibidad",
        ai_chat: "Makipag-chat sa AI",
        my_safety_plan: "Aking Safety Plan",
        community_feed: "Community Feed",
        reflections: "Mga Pagmumuni",
        get_help_now: "Kumuha ng Tulong Ngayon",
        quiet_space: "Tahimik na Lugar",
        wellness_videos: "Mga Wellness Videos",
        guidelines: "Mga Gabay",
        settings: "Mga Setting",
        crisis_resources: "Mga Resources para sa Krisis"
      },
      crisis: {
        immediate_help: "Kailangan ng agarang tulong?",
        call_988: "Tumawag sa 2919 para sa Crisis Support",
        you_matter: "Mahalaga kayo. Hindi kayo nag-iisa.",
        help_available: "Meron pong tulong 24/7"
      },
      common: {
        submit: "Ipasa",
        cancel: "Kanselahin",
        save: "I-save",
        edit: "I-edit",
        delete: "Burahin",
        yes: "Oo",
        no: "Hindi",
        loading: "Naglo-load...",
        help: "Tulong",
        support: "Suporta"
      },
      mental_health: {
        categories: {
          anxiety: "Pagkabalisa",
          depression: "Kalungkutan",
          stress: "Stress",
          trauma: "Trauma",
          family: "Pamilya",
          crisis: "Crisis Support"
        }
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      }
    };
  }
});

// src/i18n/locales/tl/crisis.json
var require_crisis5 = __commonJS({
  "src/i18n/locales/tl/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "Crisis Support",
        subtitle: "Hindi kayo nag-iisa. Meron pong tulong 24/7.",
        immediate_danger: "Kung kayo ay nasa agarang panganib, tumawag sa 911 o pumunta sa pinakamalapit na emergency room.",
        call_988: {
          title: "Tumawag sa 2919 Crisis Hotline",
          description: "Libreng at confidential na suporta 24/7 para sa mga taong nasa krisis.",
          number: "2919",
          action: "Tumawag Ngayon"
        },
        additional_resources: {
          hopeline: {
            title: "Hopeline Philippines",
            number: "(02) 804-4673",
            mobile: "0917-558-4673",
            description: "24/7 suicide prevention hotline"
          },
          ncmh_crisis: {
            title: "NCMH Crisis Hotline",
            number: "0917-899-8727",
            description: "National Center for Mental Health"
          },
          in_touch: {
            title: "In Touch Crisis Line",
            number: "(02) 8893-7603",
            description: "24/7 emotional support"
          },
          bantay_bata: {
            title: "Bantay Bata 163",
            number: "163",
            description: "Child protection hotline"
          }
        }
      },
      cultural_support: {
        bayanihan_spirit: {
          title: "Bayanihan at Pakikipagkapwa",
          description: "Ang komunidad ay handang tumulong",
          community_help: "Tulong ng barangay",
          neighbor_support: "Suporta ng kapitbahay",
          collective_strength: "Lakas ng pagkakaisa",
          shared_burden: "Pagdadamayan sa hirap"
        },
        family_centered: {
          title: "Suporta ng Pamilya",
          kapamilya: "Ang pamilya mo ay nandito",
          extended_family: "Kamag-anak na maaasahan",
          family_council: "Payo ng nakatatanda",
          utang_na_loob: "Pagpapahalaga sa pamilya",
          family_honor: "Pangangalaga sa dangal"
        },
        spiritual_healing: {
          title: "Espirituwal na Gabay",
          prayer_power: "Lakas ng panalangin",
          novena: "Nobena para sa kapayapaan",
          church_support: "Suporta ng simbahan",
          priest_counseling: "Payo ng pari",
          faith_community: "Samahan sa pananampalataya",
          devotion: "Debosyon at pag-asa"
        },
        traditional_practices: {
          title: "Tradisyonal na Paraan",
          albularyo: "Albularyo/Manghihilot",
          herbal_healing: "Halamang gamot",
          hilot_massage: "Hilot para sa ginhawa",
          spiritual_cleansing: "Paglilinis ng espiritu",
          community_elder: "Karunungan ng matatanda"
        },
        hiya_management: {
          title: "Pag-iwas sa Kahihiyan",
          discrete_help: "Tahimik na tulong",
          face_saving: "Pag-ingat sa reputasyon",
          private_matters: "Pribadong usapin",
          gradual_disclosure: "Unti-unting pagbubukas"
        }
      },
      support: {
        you_matter: "Mahalaga kayo.",
        not_alone: "Hindi kayo nag-iisa.",
        help_available: "May tulong na makakakuha.",
        safe_space: "Ligtas na lugar ito.",
        take_time: "Dahan-dahan lang.",
        breathe: "Huminga ng malalim.",
        family_context: "Isaalang-alang ang pagdamay sa mga pinagkakatiwalaang miyembro ng pamilya na maaaring magbigay ng karagdagang suporta.",
        god_with_you: "Kasama mo ang Diyos.",
        tomorrow_hope: "May pag-asa bukas.",
        bahala_na: "Bahala na, kakayanin.",
        ginhawa_coming: "Darating ang ginhawa.",
        kapwa_support: "Nandito ang kapwa mo.",
        malakas_ka: "Malakas ka, kakayanin mo."
      },
      messages: {
        crisis_detected: "Nandito kami para sa inyo. Mukhang dumadaan kayo sa mahirap na panahon.",
        help_available: "Maraming paraan para makakuha ng tulong, kasama ang pribado at tahimik na suporta.",
        family_context: "Kung handa na kayo, makipag-usap sa pinagkakatiwalaang kamag-anak o humingi ng payo sa nakatatanda.",
        spiritual_support: "Hanapin ang lakas sa panalangin, simbahan, o sa inyong pananampalataya.",
        community_help: "Ang barangay at komunidad ay handang tumulong sa paraang komportable para sa inyo.",
        traditional_approach: "May mga tradisyonal na paraan din na maaaring makatulong sa inyong kalagayan.",
        preserve_dignity: "Nauunawaan namin ang kahalagahan ng hiya at dangal ng pamilya.",
        gradual_healing: "Hindi kailangang madaliin - unti-unti, magiging maayos din."
      },
      coping_strategies: {
        title: "Mga Paraan ng Pagkaya",
        prayer_novena: "Mag-novena o rosaryo",
        family_gathering: "Makipagkuwentuhan sa pamilya",
        bayanihan_activity: "Sumali sa bayanihan",
        church_attendance: "Magsimba regular",
        pakikipagkwentuhan: "Magkwentuhan sa kumpare/kumare",
        nature_relaxation: "Magpahinga sa kalikasan",
        music_videoke: "Mag-videoke para sa saya",
        traditional_healing: "Magpahilot o albularyo",
        community_fiesta: "Sumali sa pistang bayan"
      },
      professional_help: {
        title: "Propesyonal na Tulong",
        psychiatrist: "Psychiatrist/Doktor",
        psychologist: "Psychologist",
        counselor: "Counselor o Therapist",
        social_worker: "Social Worker",
        barangay_health: "Barangay Health Center",
        municipal_health: "Municipal Health Office",
        doh_facilities: "DOH Mental Health Facilities",
        online_counseling: "Online na konsultasyon"
      },
      resources: {
        hotlines: {
          title: "Mga Hotline",
          crisis_hotline: "Crisis Hotline",
          suicide_prevention: "Suicide Prevention",
          mental_health: "Mental Health Support",
          youth_helpline: "Kabataang Hotline",
          women_desk: "VAWC Women's Desk",
          child_protection: "Child Protection"
        },
        local_resources: {
          title: "Lokal na Tulong",
          barangay_captain: "Kapitan ng Barangay",
          health_center: "Health Center",
          social_services: "DSWD Office",
          church_programs: "Church Programs",
          ngo_support: "NGO Support Groups"
        }
      },
      bahala_na: {
        title: "Pag-asa at Lakas ng Loob",
        resilience: "Ang Filipino ay matatag",
        hope_message: "Sa hirap at ginhawa, magkasama",
        collective_strength: "Mas malakas tayo kapag sama-sama",
        faith_anchor: "Hawak ng Diyos ang bukas",
        family_bond: "Ang pamilya ang sandigan",
        tomorrow_promise: "May magandang bukas na naghihintay"
      }
    };
  }
});

// src/i18n/locales/vi/common.json
var require_common6 = __commonJS({
  "src/i18n/locales/vi/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "Astral Core",
        tagline: "Kh\xF4ng gian an to\xE0n c\u1EE7a b\u1EA1n cho h\u1ED7 tr\u1EE3 s\u1EE9c kh\u1ECFe t\xE2m th\u1EA7n",
        loading: "\u0110ang t\u1EA3i kh\xF4ng gian an to\xE0n c\u1EE7a b\u1EA1n...",
        error: "C\xF3 l\u1ED7i x\u1EA3y ra. Vui l\xF2ng th\u1EED l\u1EA1i.",
        offline: "B\u1EA1n \u0111ang ngo\u1EA1i tuy\u1EBFn. T\xE0i nguy\xEAn kh\u1EE7ng ho\u1EA3ng v\u1EABn c\xF3 s\u1EB5n."
      },
      navigation: {
        share: "Chia s\u1EBB",
        my_activity: "Ho\u1EA1t \u0111\u1ED9ng c\u1EE7a t\xF4i",
        ai_chat: "Tr\xF2 chuy\u1EC7n v\u1EDBi AI",
        my_safety_plan: "K\u1EBF ho\u1EA1ch an to\xE0n c\u1EE7a t\xF4i",
        community_feed: "B\u1EA3ng tin c\u1ED9ng \u0111\u1ED3ng",
        reflections: "Suy ng\u1EABm",
        get_help_now: "Nh\u1EADn tr\u1EE3 gi\xFAp ngay",
        quiet_space: "Kh\xF4ng gian y\xEAn t\u0129nh",
        wellness_videos: "Video ch\u0103m s\xF3c s\u1EE9c kh\u1ECFe",
        guidelines: "H\u01B0\u1EDBng d\u1EABn",
        settings: "C\xE0i \u0111\u1EB7t",
        crisis_resources: "T\xE0i nguy\xEAn kh\u1EE7ng ho\u1EA3ng"
      },
      crisis: {
        immediate_help: "C\u1EA7n tr\u1EE3 gi\xFAp ngay l\u1EADp t\u1EE9c?",
        call_988: "G\u1ECDi 1800-1567 \u0111\u1EC3 h\u1ED7 tr\u1EE3 kh\u1EE7ng ho\u1EA3ng",
        you_matter: "B\u1EA1n r\u1EA5t quan tr\u1ECDng. B\u1EA1n kh\xF4ng \u0111\u01A1n \u0111\u1ED9c.",
        help_available: "Tr\u1EE3 gi\xFAp c\xF3 s\u1EB5n 24/7"
      },
      common: {
        submit: "G\u1EEDi",
        cancel: "H\u1EE7y",
        save: "L\u01B0u",
        edit: "Ch\u1EC9nh s\u1EEDa",
        delete: "X\xF3a",
        yes: "C\xF3",
        no: "Kh\xF4ng",
        loading: "\u0110ang t\u1EA3i...",
        help: "Tr\u1EE3 gi\xFAp",
        support: "H\u1ED7 tr\u1EE3"
      },
      mental_health: {
        categories: {
          anxiety: "Lo \xE2u",
          depression: "Tr\u1EA7m c\u1EA3m",
          stress: "C\u0103ng th\u1EB3ng",
          trauma: "Ch\u1EA5n th\u01B0\u01A1ng",
          family: "Gia \u0111\xECnh",
          crisis: "H\u1ED7 tr\u1EE3 kh\u1EE7ng ho\u1EA3ng"
        }
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      }
    };
  }
});

// src/i18n/locales/vi/crisis.json
var require_crisis6 = __commonJS({
  "src/i18n/locales/vi/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "H\u1ED7 tr\u1EE3 kh\u1EE7ng ho\u1EA3ng",
        subtitle: "B\u1EA1n kh\xF4ng \u0111\u01A1n \u0111\u1ED9c. Tr\u1EE3 gi\xFAp c\xF3 s\u1EB5n 24/7.",
        immediate_danger: "N\u1EBFu b\u1EA1n \u0111ang g\u1EB7p nguy hi\u1EC3m tr\u1EF1c ti\u1EBFp, h\xE3y g\u1ECDi 113 ho\u1EB7c \u0111\u1EBFn ph\xF2ng c\u1EA5p c\u1EE9u g\u1EA7n nh\u1EA5t.",
        call_988: {
          title: "G\u1ECDi 1800-1567 \u0110\u01B0\u1EDDng d\xE2y n\xF3ng kh\u1EE7ng ho\u1EA3ng",
          description: "H\u1ED7 tr\u1EE3 mi\u1EC5n ph\xED v\xE0 b\u1EA3o m\u1EADt 24/7 cho nh\u1EEFng ng\u01B0\u1EDDi \u0111ang g\u1EB7p kh\u1EE7ng ho\u1EA3ng.",
          number: "1800-1567",
          action: "G\u1ECDi ngay"
        },
        additional_resources: {
          mental_health_hotline: {
            title: "T\u1ED5ng \u0111\xE0i T\u01B0 v\u1EA5n S\u1EE9c kh\u1ECFe T\xE2m th\u1EA7n",
            number: "02873086888",
            description: "B\u1EC7nh vi\u1EC7n T\xE2m th\u1EA7n TP.HCM"
          },
          youth_hotline: {
            title: "\u0110\u01B0\u1EDDng d\xE2y n\xF3ng Thanh thi\u1EBFu ni\xEAn",
            number: "18001567",
            description: "H\u1ED7 tr\u1EE3 thanh thi\u1EBFu ni\xEAn 24/7"
          },
          family_violence: {
            title: "\u0110\u01B0\u1EDDng d\xE2y n\xF3ng B\u1EA1o l\u1EF1c Gia \u0111\xECnh",
            number: "18001769",
            description: "H\u1ED7 tr\u1EE3 n\u1EA1n nh\xE2n b\u1EA1o l\u1EF1c gia \u0111\xECnh"
          }
        }
      },
      cultural_support: {
        buddhist_healing: {
          title: "H\u1ED7 tr\u1EE3 T\xE2m linh Ph\u1EADt gi\xE1o",
          meditation: "Thi\u1EC1n \u0111\u1ECBnh v\xE0 ch\xE1nh ni\u1EC7m",
          temple_support: "T\xECm s\u1EF1 b\xECnh an t\u1EA1i ch\xF9a",
          monks_guidance: "L\u1EDDi khuy\xEAn t\u1EEB s\u01B0 th\u1EA7y",
          dharma_teachings: "H\u1ECDc Ph\u1EADt ph\xE1p \u0111\u1EC3 v\u01B0\u1EE3t kh\u1ED5",
          karma_understanding: "Hi\u1EC3u v\u1EC1 nghi\u1EC7p v\xE0 nh\xE2n qu\u1EA3"
        },
        ancestor_connection: {
          title: "K\u1EBFt n\u1ED1i v\u1EDBi T\u1ED5 ti\xEAn",
          ancestor_worship: "C\u1EA7u nguy\u1EC7n v\u1EDBi t\u1ED5 ti\xEAn",
          family_altar: "Th\u1EAFp h\u01B0\u01A1ng t\u1EA1i b\xE0n th\u1EDD",
          seeking_guidance: "Xin l\u1EDDi khuy\xEAn t\u1EEB t\u1ED5 ti\xEAn",
          spiritual_protection: "C\u1EA7u xin s\u1EF1 ph\xF9 h\u1ED9"
        },
        community_support: {
          title: "H\u1ED7 tr\u1EE3 C\u1ED9ng \u0111\u1ED3ng",
          neighborhood: "T\xECnh l\xE0ng ngh\u0129a x\xF3m",
          collective_help: "C\xF9ng nhau v\u01B0\u1EE3t kh\xF3",
          elder_wisdom: "L\u1EDDi khuy\xEAn t\u1EEB ng\u01B0\u1EDDi l\u1EDBn tu\u1ED5i",
          community_activities: "Sinh ho\u1EA1t c\u1ED9ng \u0111\u1ED3ng"
        },
        traditional_healing: {
          title: "Y h\u1ECDc C\u1ED5 truy\u1EC1n",
          herbal_medicine: "Thu\u1ED1c Nam tr\u1ECB t\xE2m",
          acupuncture: "Ch\xE2m c\u1EE9u \u0111i\u1EC1u h\xF2a",
          massage_therapy: "Xoa b\xF3p th\u01B0 gi\xE3n",
          qi_gong: "Kh\xED c\xF4ng d\u01B0\u1EE1ng sinh"
        },
        face_preservation: {
          title: "Gi\u1EEF th\u1EC3 di\u1EC7n",
          discrete_help: "H\u1ED7 tr\u1EE3 k\xEDn \u0111\xE1o",
          family_reputation: "B\u1EA3o v\u1EC7 danh d\u1EF1 gia \u0111\xECnh",
          private_consultation: "T\u01B0 v\u1EA5n ri\xEAng t\u01B0",
          gradual_approach: "T\u1EEBng b\u01B0\u1EDBc m\u1ED9t"
        }
      },
      support: {
        you_matter: "B\u1EA1n r\u1EA5t quan tr\u1ECDng.",
        not_alone: "B\u1EA1n kh\xF4ng \u0111\u01A1n \u0111\u1ED9c.",
        help_available: "C\xF3 tr\u1EE3 gi\xFAp s\u1EB5n s\xE0ng.",
        safe_space: "\u0110\xE2y l\xE0 n\u01A1i an to\xE0n.",
        take_time: "H\xE3y t\u1EEB t\u1EEB.",
        breathe: "Nh\u1EDB th\u1EDF s\xE2u.",
        community_context: "C\u1ED9ng \u0111\u1ED3ng v\xE0 h\u1ED7 tr\u1EE3 v\u0103n h\xF3a c\u1EE7a b\u1EA1n c\xF3 th\u1EC3 l\xE0 ngu\u1ED3n t\xE0i nguy\xEAn qu\xFD gi\xE1 v\xE0o l\xFAc n\xE0y.",
        karma_comfort: "M\u1ECDi kh\u1ED5 \u0111au \u0111\u1EC1u c\xF3 th\u1EC3 v\u01B0\u1EE3t qua.",
        ancestors_watching: "T\u1ED5 ti\xEAn lu\xF4n ph\xF9 h\u1ED9 b\u1EA1n.",
        collective_strength: "S\u1EE9c m\u1EA1nh t\u1EEB c\u1ED9ng \u0111\u1ED3ng.",
        inner_peace: "T\xECm l\u1EA1i s\u1EF1 b\xECnh an n\u1ED9i t\xE2m.",
        gradual_healing: "T\u1EEBng b\u01B0\u1EDBc s\u1EBD kh\u1ECFe l\u1EA1i."
      },
      messages: {
        crisis_detected: "Ch\xFAng t\xF4i \u1EDF \u0111\xE2y \u0111\u1EC3 h\u1ED7 tr\u1EE3 b\u1EA1n. C\xF3 v\u1EBB nh\u01B0 b\u1EA1n \u0111ang tr\u1EA3i qua th\u1EDDi \u0111i\u1EC3m kh\xF3 kh\u0103n.",
        help_available: "C\xF3 nhi\u1EC1u c\xE1ch \u0111\u1EC3 nh\u1EADn \u0111\u01B0\u1EE3c s\u1EF1 gi\xFAp \u0111\u1EE1, bao g\u1ED3m c\u1EA3 h\u1ED7 tr\u1EE3 k\xEDn \u0111\xE1o.",
        family_context: "N\u1EBFu b\u1EA1n s\u1EB5n s\xE0ng, h\xE3y chia s\u1EBB v\u1EDBi ng\u01B0\u1EDDi th\xE2n tin c\u1EADy ho\u1EB7c t\xECm ki\u1EBFm l\u1EDDi khuy\xEAn t\u1EEB ng\u01B0\u1EDDi l\u1EDBn tu\u1ED5i.",
        spiritual_support: "T\xECm s\u1EF1 b\xECnh an qua thi\u1EC1n \u0111\u1ECBnh, c\u1EA7u nguy\u1EC7n, ho\u1EB7c \u0111\u1EBFn ch\xF9a.",
        community_help: "L\xE1ng gi\u1EC1ng v\xE0 c\u1ED9ng \u0111\u1ED3ng c\xF3 th\u1EC3 l\xE0 ngu\u1ED3n h\u1ED7 tr\u1EE3 quan tr\u1ECDng.",
        traditional_approach: "Y h\u1ECDc c\u1ED5 truy\u1EC1n c\u0169ng c\xF3 th\u1EC3 gi\xFAp \u0111i\u1EC1u h\xF2a t\xE2m tr\u1EA1ng.",
        preserve_dignity: "Ch\xFAng t\xF4i hi\u1EC3u t\u1EA7m quan tr\u1ECDng c\u1EE7a vi\u1EC7c gi\u1EEF th\u1EC3 di\u1EC7n v\xE0 danh d\u1EF1 gia \u0111\xECnh."
      },
      coping_strategies: {
        title: "C\xE1ch \u0111\u1ED1i ph\xF3 ph\xF9 h\u1EE3p v\u0103n h\xF3a",
        buddhist_meditation: "Thi\u1EC1n Ph\u1EADt gi\xE1o m\u1ED7i ng\xE0y",
        ancestor_prayer: "C\u1EA7u nguy\u1EC7n v\u1EDBi t\u1ED5 ti\xEAn",
        community_gathering: "Tham gia sinh ho\u1EA1t x\xF3m l\xE0ng",
        nature_connection: "\u0110i d\u1EA1o trong thi\xEAn nhi\xEAn",
        traditional_tea: "Th\u01B0\u1EDFng tr\xE0 t\u0129nh t\xE2m",
        family_meals: "\u0102n c\u01A1m c\xF9ng gia \u0111\xECnh",
        temple_visits: "Vi\u1EBFng ch\xF9a th\u01B0\u1EDDng xuy\xEAn",
        herbal_remedies: "D\xF9ng thu\u1ED1c Nam an th\u1EA7n"
      },
      professional_help: {
        title: "H\u1ED7 tr\u1EE3 chuy\xEAn m\xF4n",
        psychiatric_hospital: "B\u1EC7nh vi\u1EC7n T\xE2m th\u1EA7n",
        mental_health_clinic: "Ph\xF2ng kh\xE1m T\xE2m l\xFD",
        counseling_center: "Trung t\xE2m T\u01B0 v\u1EA5n",
        traditional_medicine: "Y h\u1ECDc C\u1ED5 truy\u1EC1n",
        community_health: "Tr\u1EA1m Y t\u1EBF Ph\u01B0\u1EDDng/X\xE3",
        online_counseling: "T\u01B0 v\u1EA5n tr\u1EF1c tuy\u1EBFn"
      },
      resources: {
        hotlines: {
          title: "\u0110\u01B0\u1EDDng d\xE2y n\xF3ng",
          national_crisis: "T\u1ED5ng \u0111\xE0i Kh\u1EE7ng ho\u1EA3ng Qu\u1ED1c gia",
          mental_health: "\u0110\u01B0\u1EDDng d\xE2y S\u1EE9c kh\u1ECFe T\xE2m th\u1EA7n",
          youth_support: "H\u1ED7 tr\u1EE3 Thanh thi\u1EBFu ni\xEAn",
          family_violence: "B\u1EA1o l\u1EF1c Gia \u0111\xECnh",
          substance_abuse: "Cai nghi\u1EC7n"
        }
      }
    };
  }
});

// src/i18n/locales/zh/common.json
var require_common7 = __commonJS({
  "src/i18n/locales/zh/common.json"(exports, module) {
    module.exports = {
      app: {
        name: "\u5FC3\u7406\u6838\u5FC3",
        tagline: "\u60A8\u7684\u5FC3\u7406\u5065\u5EB7\u652F\u6301\u5B89\u5168\u7A7A\u95F4",
        loading: "\u6B63\u5728\u52A0\u8F7D\u60A8\u7684\u5B89\u5168\u7A7A\u95F4...",
        error: "\u51FA\u73B0\u4E86\u95EE\u9898\u3002\u8BF7\u91CD\u8BD5\u3002",
        offline: "\u60A8\u5DF2\u79BB\u7EBF\u3002\u5371\u673A\u8D44\u6E90\u4ECD\u7136\u53EF\u7528\u3002"
      },
      navigation: {
        share: "\u5206\u4EAB",
        my_activity: "\u6211\u7684\u6D3B\u52A8",
        ai_chat: "\u4E0EAI\u804A\u5929",
        my_safety_plan: "\u6211\u7684\u5B89\u5168\u8BA1\u5212",
        community_feed: "\u793E\u533A\u52A8\u6001",
        reflections: "\u53CD\u601D",
        get_help_now: "\u7ACB\u5373\u83B7\u53D6\u5E2E\u52A9",
        quiet_space: "\u5B89\u9759\u7A7A\u95F4",
        wellness_videos: "\u5065\u5EB7\u89C6\u9891",
        moderation_history: "\u7BA1\u7406\u5386\u53F2",
        guidelines: "\u6307\u5BFC\u539F\u5219",
        legal: "\u6CD5\u5F8B",
        helper_login: "\u52A9\u624B\u767B\u5F55",
        settings: "\u8BBE\u7F6E",
        donate: "\u6350\u8D60",
        wellness_tracking: "\u5065\u5EB7\u8FFD\u8E2A",
        assessments: "\u8BC4\u4F30",
        peer_support: "\u540C\u4F34\u652F\u6301",
        dashboard: "\u4EEA\u8868\u677F",
        crisis_resources: "\u5371\u673A\u8D44\u6E90"
      },
      crisis: {
        immediate_help: "\u9700\u8981\u7ACB\u5373\u5E2E\u52A9\uFF1F",
        call_988: "\u62E8\u6253400-161-9995\u5BFB\u6C42\u5371\u673A\u652F\u6301",
        text_home: "\u53D1\u9001\u77ED\u4FE1\u5230741741",
        chat_online: "\u7ACB\u5373\u5728\u7EBF\u804A\u5929",
        safety_plan: "\u67E5\u770B\u6211\u7684\u5B89\u5168\u8BA1\u5212",
        you_matter: "\u60A8\u5F88\u91CD\u8981\u3002\u60A8\u5E76\u4E0D\u5B64\u5355\u3002",
        help_available: "24/7\u5168\u5929\u5019\u63D0\u4F9B\u5E2E\u52A9"
      },
      common: {
        submit: "\u63D0\u4EA4",
        cancel: "\u53D6\u6D88",
        save: "\u4FDD\u5B58",
        edit: "\u7F16\u8F91",
        delete: "\u5220\u9664",
        confirm: "\u786E\u8BA4",
        yes: "\u662F",
        no: "\u5426",
        loading: "\u52A0\u8F7D\u4E2D...",
        error: "\u9519\u8BEF",
        success: "\u6210\u529F",
        warning: "\u8B66\u544A",
        info: "\u4FE1\u606F",
        close: "\u5173\u95ED",
        back: "\u8FD4\u56DE",
        next: "\u4E0B\u4E00\u4E2A",
        previous: "\u4E0A\u4E00\u4E2A",
        help: "\u5E2E\u52A9",
        support: "\u652F\u6301"
      },
      mental_health: {
        categories: {
          anxiety: "\u7126\u8651",
          depression: "\u6291\u90C1",
          stress: "\u538B\u529B",
          trauma: "\u521B\u4F24",
          relationships: "\u4EBA\u9645\u5173\u7CFB",
          work: "\u5DE5\u4F5C\u4E0E\u804C\u4E1A",
          family: "\u5BB6\u5EAD",
          grief: "\u60B2\u4F24\u4E0E\u5931\u843D",
          crisis: "\u5371\u673A\u652F\u6301"
        }
      },
      languages: {
        en: "English",
        es: "Espa\xF1ol",
        "pt-BR": "Portugu\xEAs (Brasil)",
        "pt-PT": "Portugu\xEAs (Portugal)",
        ar: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629",
        zh: "\u4E2D\u6587",
        vi: "Ti\u1EBFng Vi\u1EC7t",
        tl: "Tagalog"
      }
    };
  }
});

// src/i18n/locales/zh/crisis.json
var require_crisis7 = __commonJS({
  "src/i18n/locales/zh/crisis.json"(exports, module) {
    module.exports = {
      emergency: {
        title: "\u5371\u673A\u652F\u6301",
        subtitle: "\u60A8\u5E76\u4E0D\u5B64\u5355\u300224\u5C0F\u65F6\u5168\u5929\u5019\u63D0\u4F9B\u5E2E\u52A9\u3002",
        immediate_danger: "\u5982\u679C\u60A8\u5904\u4E8E\u76F4\u63A5\u5371\u9669\u4E2D\uFF0C\u8BF7\u62E8\u6253120\u6216\u524D\u5F80\u6700\u8FD1\u7684\u6025\u8BCA\u5BA4\u3002",
        call_988: {
          title: "\u62E8\u6253400-161-9995\u5371\u673A\u5E72\u9884\u70ED\u7EBF",
          description: "\u4E3A\u5904\u4E8E\u5371\u673A\u4E2D\u7684\u4EBA\u53CA\u5176\u4EB2\u53CB\u63D0\u4F9B24\u5C0F\u65F6\u514D\u8D39\u4FDD\u5BC6\u652F\u6301\u3002",
          number: "400-161-9995",
          action: "\u7ACB\u5373\u62E8\u6253"
        },
        additional_resources: {
          beijing_crisis: {
            title: "\u5317\u4EAC\u5FC3\u7406\u5371\u673A\u70ED\u7EBF",
            number: "010-82951332",
            description: "\u5317\u4EAC\u4E13\u4E1A\u5FC3\u7406\u5371\u673A\u5E72\u9884"
          },
          shanghai_crisis: {
            title: "\u4E0A\u6D77\u5FC3\u7406\u63F4\u52A9\u70ED\u7EBF",
            number: "021-62785533",
            description: "\u4E0A\u6D7724\u5C0F\u65F6\u5FC3\u7406\u63F4\u52A9"
          },
          guangzhou_crisis: {
            title: "\u5E7F\u5DDE\u5FC3\u7406\u63F4\u52A9\u70ED\u7EBF",
            number: "020-81899120",
            description: "\u5E7F\u5DDE\u5FC3\u7406\u5065\u5EB7\u670D\u52A1"
          },
          online_counseling: {
            title: "\u5728\u7EBF\u5FC3\u7406\u54A8\u8BE2",
            description: "\u533F\u540D\u4FDD\u5BC6\u7684\u5728\u7EBF\u652F\u6301",
            action: "\u5F00\u59CB\u804A\u5929"
          }
        }
      },
      cultural_support: {
        face_saving: {
          title: "\u4FDD\u62A4\u9690\u79C1\u4E0E\u5C0A\u4E25",
          description: "\u6211\u4EEC\u7406\u89E3\u7EF4\u62A4\u9762\u5B50\u7684\u91CD\u8981\u6027\u3002\u6240\u6709\u652F\u6301\u90FD\u662F\u4FDD\u5BC6\u7684\u3002",
          private_options: "\u63D0\u4F9B\u79C1\u5BC6\u7684\u5E2E\u52A9\u9009\u9879"
        },
        family_harmony: {
          title: "\u5BB6\u5EAD\u548C\u8C10\u652F\u6301",
          description: "\u5728\u4FDD\u6301\u5BB6\u5EAD\u548C\u8C10\u7684\u540C\u65F6\u83B7\u5F97\u5E2E\u52A9",
          family_counseling: "\u5BB6\u5EAD\u54A8\u8BE2\u670D\u52A1",
          mediation: "\u5BB6\u5EAD\u8C03\u89E3\u652F\u6301"
        },
        traditional_healing: {
          title: "\u8EAB\u5FC3\u8C03\u7406",
          description: "\u7ED3\u5408\u4F20\u7EDF\u4E0E\u73B0\u4EE3\u7684\u8EAB\u5FC3\u5065\u5EB7\u65B9\u6CD5",
          tcm_support: "\u4E2D\u533B\u60C5\u5FD7\u8C03\u7406",
          qigong: "\u6C14\u529F\u4E0E\u592A\u6781\u7EC3\u4E60",
          meditation: "\u7985\u4FEE\u4E0E\u6B63\u5FF5"
        },
        somatic_expression: {
          physical_symptoms: "\u5982\u679C\u60A8\u611F\u5230\uFF1A",
          chest_tightness: "\u80F8\u95F7\u3001\u5FC3\u614C",
          sleep_issues: "\u5931\u7720\u3001\u591A\u68A6",
          appetite_changes: "\u98DF\u6B32\u6539\u53D8",
          fatigue: "\u75B2\u52B3\u3001\u65E0\u529B",
          message: "\u8FD9\u4E9B\u8EAB\u4F53\u75C7\u72B6\u53EF\u80FD\u4E0E\u60C5\u7EEA\u538B\u529B\u6709\u5173\uFF0C\u5BFB\u6C42\u5E2E\u52A9\u662F\u660E\u667A\u7684\u9009\u62E9\u3002"
        }
      },
      support: {
        you_matter: "\u60A8\u5F88\u91CD\u8981\u3002",
        not_alone: "\u60A8\u5E76\u4E0D\u5B64\u5355\u3002",
        help_available: "\u6709\u5E2E\u52A9\u53EF\u83B7\u5F97\u3002",
        safe_space: "\u8FD9\u662F\u4E00\u4E2A\u5B89\u5168\u7A7A\u95F4\u3002",
        take_time: "\u6162\u6162\u6765\u3002",
        breathe: "\u8BB0\u5F97\u547C\u5438\u3002",
        strength_wisdom: "\u56F0\u96BE\u662F\u6682\u65F6\u7684\uFF0C\u60A8\u6709\u5185\u5728\u7684\u529B\u91CF\u3002",
        harmony_balance: "\u5BFB\u6C42\u5185\u5FC3\u7684\u5E73\u8861\u4E0E\u548C\u8C10\u3002",
        collective_support: "\u5BB6\u4EBA\u548C\u670B\u53CB\u90FD\u5173\u5FC3\u60A8\u3002",
        gradual_healing: "\u5EB7\u590D\u662F\u4E00\u4E2A\u6E10\u8FDB\u7684\u8FC7\u7A0B\u3002"
      },
      messages: {
        crisis_detected: "\u6211\u4EEC\u6CE8\u610F\u5230\u60A8\u53EF\u80FD\u9700\u8981\u4E00\u4E9B\u652F\u6301\u3002\u8BF7\u8BB0\u4F4F\uFF0C\u5BFB\u6C42\u5E2E\u52A9\u662F\u52C7\u6562\u7684\u8868\u73B0\u3002",
        help_available: "\u6709\u591A\u79CD\u65B9\u5F0F\u53EF\u4EE5\u83B7\u5F97\u5E2E\u52A9\uFF0C\u5305\u62EC\u4FDD\u5BC6\u7684\u5728\u7EBF\u652F\u6301\u3002",
        family_context: "\u5982\u679C\u60A8\u613F\u610F\uFF0C\u53EF\u4EE5\u8003\u8651\u4E0E\u4FE1\u4EFB\u7684\u5BB6\u4EBA\u5206\u4EAB\uFF0C\u6216\u8005\u5148\u5BFB\u6C42\u4E13\u4E1A\u7684\u79C1\u5BC6\u54A8\u8BE2\u3002",
        discrete_support: "\u6211\u4EEC\u63D0\u4F9B\u8C28\u614E\u7684\u652F\u6301\u9009\u9879\uFF0C\u4FDD\u62A4\u60A8\u7684\u9690\u79C1\u3002",
        physical_wellbeing: "\u5173\u6CE8\u8EAB\u4F53\u5065\u5EB7\u4E5F\u5F88\u91CD\u8981\uFF0C\u8003\u8651\u901A\u8FC7\u4E2D\u533B\u8C03\u7406\u6216\u8FD0\u52A8\u6765\u6539\u5584\u72B6\u6001\u3002",
        gradual_approach: "\u4E0D\u5FC5\u6025\u4E8E\u6539\u53D8\uFF0C\u53EF\u4EE5\u4ECE\u5C0F\u6B65\u9AA4\u5F00\u59CB\uFF0C\u6BD4\u5982\u6539\u5584\u7761\u7720\u6216\u996E\u98DF\u3002"
      },
      coping_strategies: {
        title: "\u6587\u5316\u9002\u5E94\u7684\u5E94\u5BF9\u65B9\u6CD5",
        qigong_practice: "\u6BCF\u65E5\u6C14\u529F\u7EC3\u4E60\uFF0C\u8C03\u8282\u6C14\u8840\u5E73\u8861",
        tea_meditation: "\u8336\u9053\u51A5\u60F3\uFF0C\u9759\u5FC3\u517B\u795E",
        calligraphy: "\u4E66\u6CD5\u7EC3\u4E60\uFF0C\u6292\u53D1\u60C5\u611F",
        nature_walks: "\u4EB2\u8FD1\u81EA\u7136\uFF0C\u6563\u6B65\u8C03\u5FC3",
        family_meals: "\u4E0E\u5BB6\u4EBA\u5171\u9910\uFF0C\u589E\u8FDB\u8054\u7CFB",
        ancestor_wisdom: "\u601D\u8003\u7956\u5148\u667A\u6167\uFF0C\u83B7\u5F97\u529B\u91CF"
      },
      professional_help: {
        title: "\u4E13\u4E1A\u652F\u6301\u9009\u9879",
        hospital_psychiatry: "\u7EFC\u5408\u533B\u9662\u7CBE\u795E\u79D1",
        tcm_emotional: "\u4E2D\u533B\u60C5\u5FD7\u79D1",
        psychological_counseling: "\u5FC3\u7406\u54A8\u8BE2\u4E2D\u5FC3",
        online_anonymous: "\u5728\u7EBF\u533F\u540D\u54A8\u8BE2",
        community_mental_health: "\u793E\u533A\u5FC3\u7406\u5065\u5EB7\u670D\u52A1\u7AD9"
      }
    };
  }
});

// import("./locales/**/*/**/*.json") in src/i18n/index.ts
var globImport_locales_json;
var init_ = __esm({
  'import("./locales/**/*/**/*.json") in src/i18n/index.ts'() {
    globImport_locales_json = __glob({
      "./locales/ar/common.json": () => Promise.resolve().then(() => __toESM(require_common())),
      "./locales/ar/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis())),
      "./locales/en/analytics.json": () => Promise.resolve().then(() => __toESM(require_analytics())),
      "./locales/en/common.json": () => Promise.resolve().then(() => __toESM(require_common2())),
      "./locales/en/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis2())),
      "./locales/es/common.json": () => Promise.resolve().then(() => __toESM(require_common3())),
      "./locales/es/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis3())),
      "./locales/pt/common.json": () => Promise.resolve().then(() => __toESM(require_common4())),
      "./locales/pt/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis4())),
      "./locales/tl/common.json": () => Promise.resolve().then(() => __toESM(require_common5())),
      "./locales/tl/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis5())),
      "./locales/vi/common.json": () => Promise.resolve().then(() => __toESM(require_common6())),
      "./locales/vi/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis6())),
      "./locales/zh/common.json": () => Promise.resolve().then(() => __toESM(require_common7())),
      "./locales/zh/crisis.json": () => Promise.resolve().then(() => __toESM(require_crisis7()))
    });
  }
});

// src/i18n/index.ts
var culturalContexts, loadTranslations, detectionOptions, initializeTranslations, getCulturalContext, isRTLLanguage, changeLanguage2, getCrisisTranslation, getCommonTranslation, getCulturallyAppropriateCrisisMessage, i18n_default;
var init_i18n = __esm({
  "src/i18n/index.ts"() {
    "use strict";
    init_i18next();
    init_es2();
    init_i18nextBrowserLanguageDetector();
    init_();
    culturalContexts = {
      en: {
        rtl: false,
        mentalHealthStigma: "medium",
        familyInvolvement: "medium",
        communitySupport: "medium",
        religiousContext: "mixed",
        crisisEscalationPreference: "professional",
        preferredCommunicationStyle: "direct"
      },
      es: {
        rtl: false,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "high",
        religiousContext: "christian",
        crisisEscalationPreference: "family",
        preferredCommunicationStyle: "familial"
      },
      "pt-BR": {
        rtl: false,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "high",
        religiousContext: "christian",
        crisisEscalationPreference: "community",
        preferredCommunicationStyle: "indirect"
      },
      "pt-PT": {
        rtl: false,
        mentalHealthStigma: "medium",
        familyInvolvement: "medium",
        communitySupport: "medium",
        religiousContext: "christian",
        crisisEscalationPreference: "professional",
        preferredCommunicationStyle: "formal"
      },
      ar: {
        rtl: true,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "high",
        religiousContext: "islamic",
        crisisEscalationPreference: "family",
        preferredCommunicationStyle: "indirect"
      },
      zh: {
        rtl: false,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "medium",
        religiousContext: "mixed",
        crisisEscalationPreference: "family",
        preferredCommunicationStyle: "indirect"
      },
      vi: {
        rtl: false,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "high",
        religiousContext: "buddhist",
        crisisEscalationPreference: "community",
        preferredCommunicationStyle: "indirect"
      },
      tl: {
        rtl: false,
        mentalHealthStigma: "high",
        familyInvolvement: "high",
        communitySupport: "high",
        religiousContext: "christian",
        crisisEscalationPreference: "family",
        preferredCommunicationStyle: "familial"
      }
    };
    loadTranslations = async (language, namespace) => {
      try {
        const module = await globImport_locales_json(`./locales/${language}/${namespace}.json`);
        return module.default;
      } catch (error44) {
        console.warn(`[i18n] Failed to load translations for ${language}:${namespace}`, error44);
        return {};
      }
    };
    detectionOptions = {
      order: ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"],
      lookupQuerystring: "lng",
      lookupCookie: "astral_language",
      lookupLocalStorage: "astral_language",
      lookupSessionStorage: "astral_language",
      lookupFromPathIndex: 0,
      lookupFromSubdomainIndex: 0,
      caches: ["localStorage", "cookie"],
      excludeCacheFor: ["cimode"],
      checkWhitelist: true
    };
    instance.use(Browser).use(initReactI18next).init({
      fallbackLng: "en",
      debug: false,
      // Language detection
      detection: detectionOptions,
      // Interpolation options
      interpolation: {
        escapeValue: false
        // React already escapes values
      },
      // Default namespace
      defaultNS: "common",
      ns: ["common", "crisis"],
      // React options
      react: {
        useSuspense: false,
        bindI18n: "languageChanged",
        bindI18nStore: "",
        transEmptyNodeValue: "",
        transSupportBasicHtmlNodes: true,
        transWrapTextNodes: "",
        transKeepBasicHtmlNodesFor: ["br", "strong", "i", "em"]
      },
      // Whitelist of allowed languages
      supportedLngs: ["en", "es", "pt-BR", "pt-PT", "ar", "zh", "vi", "tl"],
      // Load path for dynamic loading
      load: "languageOnly",
      // Preload languages for crisis scenarios
      preload: ["en", "es"],
      // Return empty string for missing keys in development
      returnEmptyString: false,
      returnObjects: false,
      // Disable object returns to prevent React rendering issues
      // Custom options for mental health context
      saveMissing: false,
      missingKeyHandler: (lngs, ns, key) => {
        if (false) {
          console.warn(`[i18n] Missing translation: ${lngs.join(", ")} - ${ns}:${key}`);
        }
      },
      // Basic resources to prevent backend errors
      resources: {
        en: {
          common: {
            // Navigation translations
            navigation: {
              share: "Share",
              my_activity: "My Activity",
              ai_chat: "AI Chat",
              my_safety_plan: "My Safety Plan",
              community_feed: "Community Feed",
              reflections: "Reflections",
              wellness_videos: "Wellness Videos",
              get_help_now: "Get Help Now",
              quiet_space: "Quiet Space",
              donate: "Donate",
              moderation_history: "Moderation History",
              guidelines: "Guidelines",
              legal: "Legal",
              helper_login: "Helper Login",
              settings: "Settings"
            },
            // ShareView translations
            share_your_thoughts: "Share Your Thoughts",
            chat_with_ai_prompt: "Chat with your AI companion to draft a post for the community.",
            ai_welcome: "Hi there! I'm Astral, your AI companion. I'm here to help you articulate your thoughts for a post. What's on your mind today?",
            draft_post_from_chat: "Draft Post From Chat",
            chat_with_ai_here: "Chat with the AI here...",
            review_your_post: "Review Your Post",
            review_your_post_subheader: "Your AI companion has drafted this post. Edit it as you see fit before sharing.",
            category: "Category",
            your_anonymous_post: "Your anonymous post",
            back_to_chat: "Back to Chat",
            submit_anonymously: "Submit Anonymously",
            post_shared: "Post shared successfully!",
            post_failed: "Failed to share post. Please try again.",
            // Accessibility translations
            "accessibility.language_changed": "Language changed to {language}",
            // Language names
            "languages.en": "English",
            "languages.es": "Spanish",
            "languages.pt": "Portuguese",
            "languages.ar": "Arabic",
            "languages.zh": "Chinese",
            "languages.vi": "Vietnamese",
            "languages.tl": "Tagalog",
            // Offline translations - flattened to prevent object access issues
            "offline.indicator.ariaLabel": "Offline status indicator",
            "offline.status.initializing": "Initializing...",
            "offline.status.online": "Online",
            "offline.status.offline": "Offline",
            "offline.status.offlineSupported": "Offline (Crisis resources available)",
            "offline.status.offlineUnsupported": "Offline (Limited functionality)",
            "offline.modal.title": "Offline Status",
            "offline.connection.title": "Connection Status",
            "offline.capabilities.title": "Available Features",
            "offline.capabilities.crisisResources": "Crisis resources",
            "offline.capabilities.translations": "Offline translations",
            "offline.capabilities.cultural": "Cultural adaptations",
            "offline.capabilities.aiModels": "Local AI models",
            "offline.storage.title": "Storage Information",
            "offline.storage.used": "Storage used",
            "offline.storage.quota": "Storage quota",
            "offline.network.title": "Network Information",
            "offline.network.type": "Connection type",
            "offline.network.speed": "Connection speed",
            "offline.sync.title": "Sync Status",
            "offline.sync.queued": "Queued items",
            "offline.sync.lastSync": "Last sync",
            "offline.actions.update": "Update offline content",
            "offline.actions.clear": "Clear offline data",
            "offline.help.crisisResources": "Crisis resources available offline",
            "offline.help.sync": "Data will sync when online"
          }
        }
      }
    });
    initializeTranslations = async () => {
      const supportedLanguages = ["en", "es", "pt", "ar", "zh", "vi", "tl"];
      const namespaces = ["common", "crisis"];
      for (const language of supportedLanguages) {
        for (const namespace of namespaces) {
          const translations = await loadTranslations(language, namespace);
          if (Object.keys(translations).length > 0) {
            instance.addResourceBundle(language, namespace, translations, true, true);
          }
        }
      }
      const ptTranslations = {
        common: await loadTranslations("pt", "common"),
        crisis: await loadTranslations("pt", "crisis")
      };
      instance.addResourceBundle("pt-BR", "common", ptTranslations.common, true, true);
      instance.addResourceBundle("pt-BR", "crisis", ptTranslations.crisis, true, true);
      instance.addResourceBundle("pt-PT", "common", ptTranslations.common, true, true);
      instance.addResourceBundle("pt-PT", "crisis", ptTranslations.crisis, true, true);
    };
    initializeTranslations().catch((error44) => {
      console.error("[i18n] Failed to initialize translations:", error44);
    });
    getCulturalContext = (language) => {
      return culturalContexts[language] || culturalContexts.en;
    };
    isRTLLanguage = (language) => {
      return getCulturalContext(language).rtl;
    };
    changeLanguage2 = async (language) => {
      await instance.changeLanguage(language);
      const htmlElement = document.documentElement;
      if (isRTLLanguage(language)) {
        htmlElement.setAttribute("dir", "rtl");
        htmlElement.setAttribute("lang", language);
      } else {
        htmlElement.setAttribute("dir", "ltr");
        htmlElement.setAttribute("lang", language);
      }
      localStorage.setItem("astral_language", language);
      localStorage.setItem("astral_cultural_context", JSON.stringify(getCulturalContext(language)));
      const announcement = instance.t("accessibility.language_changed", { language: instance.t(`languages.${language}`) });
      const screenReaderAnnouncement = document.createElement("div");
      screenReaderAnnouncement.setAttribute("aria-live", "polite");
      screenReaderAnnouncement.setAttribute("aria-atomic", "true");
      screenReaderAnnouncement.className = "sr-only";
      screenReaderAnnouncement.textContent = announcement;
      document.body.appendChild(screenReaderAnnouncement);
      setTimeout(() => {
        document.body.removeChild(screenReaderAnnouncement);
      }, 3e3);
    };
    getCrisisTranslation = (key, options2) => {
      const result = instance.t(`crisis:${key}`, options2);
      return typeof result === "string" ? result : String(result);
    };
    getCommonTranslation = (key, options2) => {
      const result = instance.t(`common:${key}`, options2);
      return typeof result === "string" ? result : String(result);
    };
    getCulturallyAppropriateCrisisMessage = (key, language = instance.language) => {
      const context = getCulturalContext(language);
      const baseMessage = getCrisisTranslation(key);
      switch (context.crisisEscalationPreference) {
        case "family":
          return getCrisisTranslation(`${key}_family_context`) || baseMessage;
        case "community":
          return getCrisisTranslation(`${key}_community_context`) || baseMessage;
        case "professional":
          return getCrisisTranslation(`${key}_professional_context`) || baseMessage;
        default:
          return baseMessage;
      }
    };
    i18n_default = instance;
  }
});

// src/i18n/hooks.ts
var useI18n;
var init_hooks = __esm({
  "src/i18n/hooks.ts"() {
    "use strict";
    init_es2();
    init_i18n();
    useI18n = () => {
      const { t: t4, i18n } = useTranslation();
      return {
        // Basic translation function
        t: t4,
        // Current language
        language: i18n.language,
        // Language change function
        changeLanguage: changeLanguage2,
        // Cultural context helpers
        getCulturalContext: () => getCulturalContext(i18n.language),
        // Crisis-specific translations
        tCrisis: (key, options2) => getCrisisTranslation(key, options2),
        // Common translations
        tCommon: (key, options2) => getCommonTranslation(key, options2),
        // Culturally appropriate crisis messaging
        tCrisisContextual: (key) => getCulturallyAppropriateCrisisMessage(key, i18n.language),
        // Check if current language is RTL
        isRTL: getCulturalContext(i18n.language).rtl,
        // Mental health stigma level for current culture
        mentalHealthStigma: getCulturalContext(i18n.language).mentalHealthStigma,
        // Crisis escalation preference for current culture
        crisisEscalationPreference: getCulturalContext(i18n.language).crisisEscalationPreference,
        // Communication style preference for current culture
        communicationStyle: getCulturalContext(i18n.language).preferredCommunicationStyle,
        // Helper function for namespace-specific translations
        tWithNamespace: (namespace, key, options2) => {
          return i18n.t(`${namespace}:${key}`, options2);
        }
      };
    };
  }
});

// src/components/CulturalCrisisAlert.css
var init_CulturalCrisisAlert = __esm({
  "src/components/CulturalCrisisAlert.css"() {
  }
});

// src/components/CulturalCrisisAlert.tsx
var import_react23, import_jsx_runtime13, CulturalCrisisAlert, CulturalCrisisAlert_default;
var init_CulturalCrisisAlert2 = __esm({
  "src/components/CulturalCrisisAlert.tsx"() {
    "use strict";
    import_react23 = __toESM(require_react());
    init_CrisisAlert2();
    init_useCulturalCrisisDetection();
    init_hooks();
    init_CulturalCrisisAlert();
    import_jsx_runtime13 = __toESM(require_jsx_runtime());
    CulturalCrisisAlert = ({
      analysisText,
      languageCode = "en",
      culturalContext,
      userId,
      show = false,
      userType = "seeker",
      onCrisisDetected,
      onCulturalBiasDetected,
      onCulturalInterventionRecommended,
      onEmergencyCall,
      onCrisisChat,
      onDismiss
    }) => {
      const { t: t4, language } = useI18n();
      const [alertData, setAlertData] = (0, import_react23.useState)({
        show: false,
        severity: "none",
        message: "",
        actions: [],
        resources: [],
        emergencyMode: false,
        culturalFactors: [],
        culturallyAdapted: false
      });
      const {
        isAnalyzing,
        lastAnalysis,
        culturalAlert,
        analyzeCulturalCrisis,
        getCulturalInterventions,
        dismissCulturalAlert
      } = useCulturalCrisisDetection({
        autoAnalyze: true,
        languageCode: languageCode || language,
        culturalContext,
        userId,
        onCrisisDetected,
        onCulturalBiasDetected,
        onCulturalInterventionRecommended
      });
      (0, import_react23.useEffect)(() => {
        if (analysisText && analysisText.trim().length > 10) {
          analyzeCulturalCrisis(analysisText, { immediate: true, trackHistory: true });
        }
      }, [analysisText, analyzeCulturalCrisis]);
      (0, import_react23.useEffect)(() => {
        if (culturalAlert.show || show) {
          const severity = culturalAlert.severity !== "none" ? culturalAlert.severity : "medium";
          const culturalFactors = culturalAlert.culturalFactors || [];
          const culturallyAdapted = culturalAlert.culturallyAdapted;
          let message = "";
          if (culturallyAdapted && culturalFactors.length > 0) {
            message = t4("crisis.cultural_alert_message", {
              factors: culturalFactors.join(", "),
              defaultValue: "Help is available. Your cultural background has been considered in these recommendations."
            });
          } else {
            message = t4("crisis.standard_alert_message", {
              defaultValue: "Help is available. You are not alone."
            });
          }
          const interventions = getCulturalInterventions();
          const actions = [];
          const resources = [];
          if (lastAnalysis?.culturalIndicators) {
            lastAnalysis.culturalIndicators.forEach((indicator) => {
              const indicatorText = indicator.type || indicator.indicator;
              if (indicatorText) {
                actions.push(indicatorText);
              }
            });
          }
          if (interventions && interventions.length > 0) {
            actions.push(...interventions);
          }
          if (languageCode === "es") {
            resources.push(t4("crisis.resource.spanish_lifeline", { defaultValue: "L\xEDnea Nacional de Prevenci\xF3n del Suicidio: 988" }));
          } else if (languageCode === "zh") {
            resources.push(t4("crisis.resource.chinese_support", { defaultValue: "Chinese Mental Health Helpline: 1-844-292-4357" }));
          } else if (languageCode === "ar") {
            resources.push(t4("crisis.resource.arabic_support", { defaultValue: "Arabic Crisis Support: 988 (Arabic available)" }));
          }
          resources.push(
            t4("crisis.resource.national_lifeline", { defaultValue: "988 Suicide & Crisis Lifeline" }),
            t4("crisis.resource.crisis_text", { defaultValue: "Crisis Text Line: Text HOME to 741741" })
          );
          setAlertData({
            show: true,
            severity,
            message,
            actions: actions.slice(0, 5),
            // Limit to 5 actions
            resources: resources.slice(0, 4),
            // Limit to 4 resources
            emergencyMode: severity === "critical" || culturalAlert.emergencyMode,
            culturalFactors,
            culturallyAdapted
          });
        } else {
          setAlertData((prev) => ({ ...prev, show: false }));
        }
      }, [culturalAlert, show, t4, languageCode, getCulturalInterventions]);
      const handleDismiss = () => {
        dismissCulturalAlert();
        setAlertData((prev) => ({ ...prev, show: false }));
        onDismiss?.();
      };
      const handleEmergencyCall = () => {
        if (lastAnalysis && lastAnalysis.culturalContext) {
          console.log("[Cultural Crisis Alert] Emergency call with cultural context:", lastAnalysis.culturalContext);
        }
        onEmergencyCall?.();
      };
      const handleCrisisChat = () => {
        if (lastAnalysis && lastAnalysis.culturalContext) {
          console.log("[Cultural Crisis Alert] Crisis chat with cultural context:", lastAnalysis.culturalContext);
        }
        onCrisisChat?.();
      };
      if (isAnalyzing && analysisText) {
        return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("output", { className: "cultural-crisis-alert-loading", "aria-live": "polite", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "loading-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "loading-spinner" }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { children: t4("crisis.analyzing_with_cultural_context", {
            defaultValue: "Analyzing with cultural context..."
          }) })
        ] }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          CrisisAlert,
          {
            show: alertData.show,
            severity: alertData.severity,
            message: alertData.message,
            actions: alertData.actions,
            resources: alertData.resources,
            emergencyMode: alertData.emergencyMode,
            onDismiss: handleDismiss,
            onEmergencyCall: handleEmergencyCall,
            onCrisisChat: handleCrisisChat,
            userType
          }
        ),
        alertData.culturallyAdapted && alertData.culturalFactors.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("aside", { className: "cultural-context-indicator", "aria-label": "Cultural context information", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "cultural-indicator-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "cultural-indicator-icon", children: "\u{1F30D}" }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "cultural-indicator-text", children: t4("crisis.cultural_awareness_active", {
            defaultValue: "Cultural awareness active"
          }) }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "cultural-factors-list", children: alertData.culturalFactors.map((factor, index2) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { className: "cultural-factor-tag", children: factor }, `cultural-factor-${factor}-${index2}`)) })
        ] }) })
      ] });
    };
    CulturalCrisisAlert_default = CulturalCrisisAlert;
  }
});

// src/components/MoodTracker.tsx
var import_react24, import_jsx_runtime14, moodOptions, moodTags, MoodTracker;
var init_MoodTracker = __esm({
  "src/components/MoodTracker.tsx"() {
    "use strict";
    import_react24 = __toESM(require_react());
    init_icons_dynamic();
    init_NotificationContext();
    init_AppButton();
    init_useCulturalCrisisDetection();
    init_CulturalCrisisAlert2();
    import_jsx_runtime14 = __toESM(require_jsx_runtime());
    moodOptions = [
      {
        id: "terrible",
        emoji: "\u{1F622}",
        label: "Terrible",
        value: 1,
        color: "#ef4444",
        description: "Feeling really down today"
      },
      {
        id: "bad",
        emoji: "\u{1F61E}",
        label: "Bad",
        value: 2,
        color: "#f97316",
        description: "Not having a good day"
      },
      {
        id: "okay",
        emoji: "\u{1F610}",
        label: "Okay",
        value: 3,
        color: "#eab308",
        description: "Feeling neutral"
      },
      {
        id: "good",
        emoji: "\u{1F642}",
        label: "Good",
        value: 4,
        color: "#22c55e",
        description: "Having a good day"
      },
      {
        id: "great",
        emoji: "\u{1F60A}",
        label: "Great",
        value: 5,
        color: "#10b981",
        description: "Feeling amazing!"
      }
    ];
    moodTags = [
      "Grateful",
      "Anxious",
      "Tired",
      "Hopeful",
      "Stressed",
      "Calm",
      "Lonely",
      "Productive",
      "Excited",
      "Peaceful",
      "Overwhelmed",
      "Confident",
      "Sad",
      "Energetic",
      "Worried",
      "Hopeless",
      "Trapped",
      "Worthless",
      "Alone"
    ];
    MoodTracker = ({ onMoodSubmit }) => {
      const [selectedMood, setSelectedMood] = (0, import_react24.useState)(null);
      const [selectedTags, setSelectedTags] = (0, import_react24.useState)([]);
      const [note, setNote] = (0, import_react24.useState)("");
      const [isSubmitted, setIsSubmitted] = (0, import_react24.useState)(false);
      const [showCrisisAlert, setShowCrisisAlert] = (0, import_react24.useState)(false);
      const { addToast } = useNotification();
      const { dismissCulturalAlert } = useCulturalCrisisDetection();
      const handleMoodSelect = (mood) => {
        setSelectedMood(mood);
        setIsSubmitted(false);
      };
      const handleTagToggle = (tag) => {
        setSelectedTags(
          (prev) => prev.includes(tag) ? prev.filter((t4) => t4 !== tag) : [...prev, tag]
        );
      };
      const handleSubmit = async () => {
        if (!selectedMood) {
          addToast("Please select your mood first", "error");
          return;
        }
        const hasLowMood = selectedMood.value <= 2;
        const hasConcerningTags = selectedTags.some(
          (tag) => ["hopeless", "overwhelmed", "trapped", "worthless", "alone"].includes(tag.toLowerCase())
        );
        const hasConcerningNote = note.toLowerCase().includes("suicide") || note.toLowerCase().includes("hurt myself") || note.toLowerCase().includes("end it all");
        if (hasLowMood || hasConcerningTags || hasConcerningNote) {
          setShowCrisisAlert(true);
          return;
        }
        const moodData = {
          value: selectedMood.value,
          tags: selectedTags,
          note: note.trim()
        };
        onMoodSubmit?.(moodData);
        setIsSubmitted(true);
        addToast(`Mood logged: ${selectedMood.label} \u{1F49C}`, "success");
        setTimeout(() => {
          setIsSubmitted(false);
        }, 3e3);
      };
      const handleReset = () => {
        setSelectedMood(null);
        setSelectedTags([]);
        setNote("");
        setIsSubmitted(false);
        setShowCrisisAlert(false);
      };
      const handleCrisisDismiss = () => {
        setShowCrisisAlert(false);
        dismissCulturalAlert();
      };
      if (isSubmitted && selectedMood) {
        return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-tracker submitted", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-submitted-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-submitted-icon", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(CheckIcon, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { children: "Mood Logged Successfully!" }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-submitted-summary", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-submitted-emoji", style: { color: selectedMood.color }, children: selectedMood.emoji }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("p", { children: [
              "You're feeling ",
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("strong", { children: selectedMood.label.toLowerCase() }),
              " today"
            ] }),
            selectedTags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-submitted-tags", children: selectedTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", { className: "mood-tag selected", children: tag }, tag)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
            AppButton,
            {
              enhanced: true,
              size: "sm",
              variant: "secondary",
              onClick: handleReset,
              children: "Log Another Mood"
            }
          )
        ] }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-tracker", children: [
        showCrisisAlert && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          CulturalCrisisAlert_default,
          {
            analysisText: `Mood: ${selectedMood?.label} (${selectedMood?.value}/5). Tags: ${selectedTags.join(", ")}. Note: ${note.trim()}`,
            show: true,
            onDismiss: handleCrisisDismiss
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-tracker-header", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-header-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(HeartIcon2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h2", { children: "How are you feeling today?" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { children: "Take a moment to check in with yourself" })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-selection", children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { children: "Select your mood" }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-options", children: moodOptions.map((mood) => /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
            "button",
            {
              className: `mood-option ${selectedMood?.id === mood.id ? "selected" : ""}`,
              onClick: () => handleMoodSelect(mood),
              style: {
                "--mood-color": mood.color,
                borderColor: selectedMood?.id === mood.id ? mood.color : "transparent"
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-emoji", children: mood.emoji }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-label", children: mood.label }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-description", children: mood.description }),
                selectedMood?.id === mood.id && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-selected-indicator", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(CheckIcon, {}) })
              ]
            },
            mood.id
          )) })
        ] }),
        selectedMood && /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-tags-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { children: "What's contributing to this feeling? (optional)" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "mood-tags", children: moodTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
              "button",
              {
                className: `mood-tag ${selectedTags.includes(tag) ? "selected" : ""}`,
                onClick: () => handleTagToggle(tag),
                children: [
                  tag,
                  selectedTags.includes(tag) && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(CheckIcon, {})
                ]
              },
              tag
            )) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-note-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { children: "Any additional thoughts? (optional)" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              "textarea",
              {
                value: note,
                onChange: (e4) => setNote(e4.target.value),
                placeholder: "How was your day? What's on your mind?",
                className: "mood-note-input",
                rows: 3,
                maxLength: 500
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-note-counter", children: [
              note.length,
              "/500 characters"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mood-tracker-actions form-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              AppButton,
              {
                enhanced: true,
                size: "sm",
                variant: "secondary",
                onClick: handleReset,
                children: "Reset"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              AppButton,
              {
                enhanced: true,
                size: "md",
                variant: "primary",
                onClick: handleSubmit,
                icon: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(SparkleIcon, {}),
                children: "Log My Mood"
              }
            )
          ] })
        ] })
      ] });
    };
  }
});

// src/components/WellnessInsights.css
var init_WellnessInsights = __esm({
  "src/components/WellnessInsights.css"() {
  }
});

// src/components/WellnessInsights.tsx
var import_jsx_runtime15, WellnessInsights;
var init_WellnessInsights2 = __esm({
  "src/components/WellnessInsights.tsx"() {
    "use strict";
    init_icons_dynamic();
    init_WellnessInsights();
    import_jsx_runtime15 = __toESM(require_jsx_runtime());
    WellnessInsights = ({
      moodAverage,
      streakDays,
      totalCheckIns,
      topMood
    }) => {
      const getInsights = () => {
        const insights2 = [];
        if (streakDays >= 7) {
          insights2.push({
            type: "achievement",
            message: `Amazing! You've checked in for ${streakDays} days straight!`,
            icon: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(StarIcon, {})
          });
        }
        if (moodAverage >= 4) {
          insights2.push({
            type: "positive",
            message: "Your mood has been consistently positive this week!",
            icon: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(HeartIcon2, {})
          });
        } else if (moodAverage >= 3) {
          insights2.push({
            type: "improvement",
            message: "Your mood is stable. Small daily habits can boost it further.",
            icon: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(SparkleIcon, {})
          });
        }
        if (totalCheckIns >= 30) {
          insights2.push({
            type: "achievement",
            message: `You've completed ${totalCheckIns} check-ins! Self-awareness is growing.`,
            icon: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(TrendingUpIcon, {})
          });
        }
        if (!insights2.length) {
          insights2.push({
            type: "improvement",
            message: "Keep tracking to unlock personalized insights!",
            icon: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(SparkleIcon, {})
          });
        }
        return insights2;
      };
      const insights = getInsights();
      return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "wellness-insights-card", children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "insights-header", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("h3", { className: "insights-title", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(SparkleIcon, { className: "insights-icon" }),
          "Your Wellness Insights"
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "insights-grid", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "insight-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "stat-icon-circle", style: { background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" }, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(HeartIcon2, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "stat-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-number", children: moodAverage.toFixed(1) }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-label", children: "Avg Mood" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "insight-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "stat-icon-circle", style: { background: "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)" }, children: "\u{1F525}" }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "stat-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-number", children: streakDays }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-label", children: "Day Streak" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "insight-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "stat-icon-circle", style: { background: "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)" }, children: "\u2728" }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "stat-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-number", children: totalCheckIns }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-label", children: "Check-ins" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "insight-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "stat-icon-circle", style: { background: "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)" }, children: topMood }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "stat-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-number", children: "Top" }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "stat-label", children: "Mood" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "insights-messages", children: insights.map((insight, index2) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
          "div",
          {
            className: `insight-message insight-${insight.type}`,
            style: { animationDelay: `${index2 * 0.2}s` },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "insight-icon", children: insight.icon }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "insight-text", children: insight.message })
            ]
          },
          index2
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "insights-footer", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "insights-tip", children: "\u{1F4A1} Consistency is key - even small check-ins make a difference!" }) })
      ] });
    };
  }
});

// src/components/EnhancedMoodChart.css
var init_EnhancedMoodChart = __esm({
  "src/components/EnhancedMoodChart.css"() {
  }
});

// src/components/EnhancedMoodChart.tsx
var import_react25, import_jsx_runtime16, MOOD_EMOJIS, MOOD_COLORS, EnhancedMoodChart;
var init_EnhancedMoodChart2 = __esm({
  "src/components/EnhancedMoodChart.tsx"() {
    "use strict";
    import_react25 = __toESM(require_react());
    init_EnhancedMoodChart();
    import_jsx_runtime16 = __toESM(require_jsx_runtime());
    MOOD_EMOJIS = ["\u{1F61E}", "\u{1F641}", "\u{1F610}", "\u{1F642}", "\u{1F60A}"];
    MOOD_COLORS = [
      "#FF5722",
      // Very low
      "#FF9800",
      // Low
      "#FFC107",
      // Neutral
      "#8BC34A",
      // Good
      "#4CAF50"
      // Great
    ];
    EnhancedMoodChart = ({ data: data2, period }) => {
      const maxValue = 5;
      const minValue = 1;
      const getMoodColor = (value) => {
        const index2 = Math.min(Math.floor(value) - 1, 4);
        return MOOD_COLORS[Math.max(0, index2)];
      };
      const getMoodEmoji = (value) => {
        const index2 = Math.min(Math.floor(value) - 1, 4);
        return MOOD_EMOJIS[Math.max(0, index2)];
      };
      const average = (0, import_react25.useMemo)(() => {
        if (data2.length === 0) return 0;
        const sum = data2.reduce((acc, point4) => acc + point4.value, 0);
        return sum / data2.length;
      }, [data2]);
      const trend = (0, import_react25.useMemo)(() => {
        if (data2.length < 2) return "stable";
        const firstHalf = data2.slice(0, Math.floor(data2.length / 2));
        const secondHalf = data2.slice(Math.floor(data2.length / 2));
        const firstAvg = firstHalf.reduce((acc, p3) => acc + p3.value, 0) / firstHalf.length;
        const secondAvg = secondHalf.reduce((acc, p3) => acc + p3.value, 0) / secondHalf.length;
        if (secondAvg > firstAvg + 0.3) return "improving";
        if (secondAvg < firstAvg - 0.3) return "declining";
        return "stable";
      }, [data2]);
      const getTrendMessage = () => {
        switch (trend) {
          case "improving":
            return { text: "Your mood is trending upward! \u{1F4C8}", color: "#4CAF50" };
          case "declining":
            return { text: "Your mood needs attention \u{1F499}", color: "#FF9800" };
          default:
            return { text: "Your mood is stable", color: "#2196F3" };
        }
      };
      const trendMessage = getTrendMessage();
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "enhanced-mood-chart", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h3", { className: "chart-title", children: "Mood Journey" }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-period-selector", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: period === "7days" ? "active" : "", children: "Week" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: period === "30days" ? "active" : "", children: "Month" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: period === "90days" ? "active" : "", children: "Quarter" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-summary", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "summary-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "summary-label", children: "Average" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "summary-value", style: { color: getMoodColor(average) }, children: [
              getMoodEmoji(average),
              " ",
              average.toFixed(1)
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "summary-stat", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "summary-label", children: "Trend" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "summary-value", style: { color: trendMessage.color }, children: trendMessage.text })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "chart-container", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-grid", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "chart-y-axis", children: MOOD_EMOJIS.slice().reverse().map((emoji3, index2) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "y-axis-label", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "emoji-label", children: emoji3 }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "value-label", children: 5 - index2 })
          ] }, index2)) }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-area", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "chart-grid-lines", children: [5, 4, 3, 2, 1].map((value) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
              "div",
              {
                className: "grid-line",
                style: { bottom: `${(value - 1) / 4 * 100}%` }
              },
              value
            )) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "chart-bars", children: data2.map((point4, index2) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-bar-wrapper", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                "div",
                {
                  className: "chart-bar",
                  style: {
                    height: `${(point4.value - minValue) / (maxValue - minValue) * 100}%`,
                    backgroundColor: getMoodColor(point4.value),
                    animationDelay: `${index2 * 0.05}s`
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "bar-tooltip", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "tooltip-emoji", children: getMoodEmoji(point4.value) }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "tooltip-value", children: point4.value.toFixed(1) }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "tooltip-date", children: point4.label })
                  ] })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "x-axis-label", children: point4.label })
            ] }, index2)) }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", { className: "trend-line-svg", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
              "polyline",
              {
                className: "trend-line",
                points: data2.map((point4, index2) => {
                  const x3 = index2 / (data2.length - 1) * 100;
                  const y3 = 100 - (point4.value - minValue) / (maxValue - minValue) * 100;
                  return `${x3},${y3}`;
                }).join(" "),
                fill: "none",
                stroke: getMoodColor(average),
                strokeWidth: "2",
                strokeDasharray: "5,5",
                opacity: "0.5"
              }
            ) })
          ] })
        ] }) }),
        data2.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "chart-empty-state", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { children: "No mood data available for this period" }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "empty-state-hint", children: "Start tracking your mood to see beautiful visualizations!" })
        ] })
      ] });
    };
  }
});

// src/components/BreathingWidget.css
var init_BreathingWidget = __esm({
  "src/components/BreathingWidget.css"() {
  }
});

// src/components/BreathingWidget.tsx
var import_react26, import_jsx_runtime17, breathingPatterns, BreathingWidget;
var init_BreathingWidget2 = __esm({
  "src/components/BreathingWidget.tsx"() {
    "use strict";
    import_react26 = __toESM(require_react());
    init_Card();
    init_icons_dynamic();
    init_BreathingWidget();
    import_jsx_runtime17 = __toESM(require_jsx_runtime());
    breathingPatterns = [
      {
        name: "4-7-8 Relaxation",
        inhale: 4,
        hold1: 7,
        exhale: 8,
        hold2: 0,
        description: "Calms the nervous system and reduces anxiety"
      },
      {
        name: "Box Breathing",
        inhale: 4,
        hold1: 4,
        exhale: 4,
        hold2: 4,
        description: "Used by Navy SEALs for focus and calm"
      },
      {
        name: "Coherent Breathing",
        inhale: 5,
        hold1: 0,
        exhale: 5,
        hold2: 0,
        description: "Balances the autonomic nervous system"
      },
      {
        name: "Quick Relief",
        inhale: 2,
        hold1: 2,
        exhale: 4,
        hold2: 0,
        description: "Fast anxiety relief in stressful moments"
      }
    ];
    BreathingWidget = ({ embedded = false, onComplete, autoStart = false }) => {
      const [isActive, setIsActive] = (0, import_react26.useState)(autoStart);
      const [currentPhase, setCurrentPhase] = (0, import_react26.useState)("inhale");
      const [progress, setProgress] = (0, import_react26.useState)(0);
      const [cycles, setCycles] = (0, import_react26.useState)(0);
      const [selectedPattern, setSelectedPattern] = (0, import_react26.useState)(breathingPatterns[0]);
      const [showInstructions, setShowInstructions] = (0, import_react26.useState)(true);
      const intervalRef = (0, import_react26.useRef)();
      const phaseTimeRef = (0, import_react26.useRef)(0);
      const totalPhaseTimeRef = (0, import_react26.useRef)(0);
      (0, import_react26.useEffect)(() => {
        if (isActive) {
          startBreathing();
        } else {
          stopBreathing();
        }
        return () => {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
        };
      }, [isActive, selectedPattern]);
      const startBreathing = () => {
        setShowInstructions(false);
        phaseTimeRef.current = 0;
        totalPhaseTimeRef.current = selectedPattern.inhale;
        setCurrentPhase("inhale");
        setProgress(0);
        intervalRef.current = setInterval(() => {
          phaseTimeRef.current += 0.1;
          const phaseProgress = phaseTimeRef.current / totalPhaseTimeRef.current * 100;
          setProgress(Math.min(phaseProgress, 100));
          if (phaseTimeRef.current >= totalPhaseTimeRef.current) {
            moveToNextPhase();
          }
        }, 100);
      };
      const moveToNextPhase = () => {
        const phases = ["inhale", "hold1", "exhale", "hold2"];
        const currentIndex = phases.indexOf(currentPhase);
        const nextIndex = (currentIndex + 1) % 4;
        const nextPhase = phases[nextIndex];
        if (nextPhase === "hold1" && selectedPattern.hold1 === 0) {
          setCurrentPhase("exhale");
          totalPhaseTimeRef.current = selectedPattern.exhale;
        } else if (nextPhase === "hold2" && selectedPattern.hold2 === 0) {
          setCurrentPhase("inhale");
          totalPhaseTimeRef.current = selectedPattern.inhale;
          setCycles((prev) => prev + 1);
          checkCompletion();
        } else {
          setCurrentPhase(nextPhase);
          totalPhaseTimeRef.current = selectedPattern[nextPhase];
        }
        phaseTimeRef.current = 0;
        setProgress(0);
      };
      const stopBreathing = () => {
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
        }
        setCurrentPhase("inhale");
        setProgress(0);
      };
      const checkCompletion = () => {
        if (cycles >= 3 && onComplete) {
          setIsActive(false);
          onComplete();
        }
      };
      const getPhaseInstruction = () => {
        switch (currentPhase) {
          case "inhale":
            return `Breathe In... ${selectedPattern.inhale}s`;
          case "hold1":
            return `Hold... ${selectedPattern.hold1}s`;
          case "exhale":
            return `Breathe Out... ${selectedPattern.exhale}s`;
          case "hold2":
            return `Hold... ${selectedPattern.hold2}s`;
        }
      };
      const getPhaseColor = () => {
        switch (currentPhase) {
          case "inhale":
            return "#4CAF50";
          case "hold1":
          case "hold2":
            return "#FFC107";
          case "exhale":
            return "#2196F3";
        }
      };
      if (embedded) {
        return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-widget-embedded", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-mini", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
            "button",
            {
              className: "breathing-mini-toggle",
              onClick: () => setIsActive(!isActive),
              "aria-label": isActive ? "Stop breathing exercise" : "Start breathing exercise",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(HeartIcon2, { className: "breathing-mini-icon" }),
                isActive && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-mini-pulse", style: { backgroundColor: getPhaseColor() } })
              ]
            }
          ),
          isActive && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-mini-text", children: getPhaseInstruction() })
        ] }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { className: "breathing-widget-card", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("h3", { className: "breathing-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(HeartIcon2, { className: "breathing-icon" }),
            "Guided Breathing Exercise"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "breathing-subtitle", children: "Take a moment to center yourself with controlled breathing" })
        ] }),
        showInstructions && !isActive && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-instructions", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { children: "Choose a breathing pattern that suits your needs:" }) }),
        !isActive && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "pattern-selector", children: breathingPatterns.map((pattern) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
          "button",
          {
            className: selectedPattern.name === pattern.name ? "pattern-option selected" : "pattern-option",
            onClick: () => setSelectedPattern(pattern),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "pattern-name", children: pattern.name }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "pattern-timing", children: [
                pattern.inhale,
                "-",
                pattern.hold1 || 0,
                "-",
                pattern.exhale,
                "-",
                pattern.hold2 || 0
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "pattern-description", children: pattern.description })
            ]
          },
          pattern.name
        )) }),
        isActive && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-visualization", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-circle-container", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
              "div",
              {
                className: `breathing-circle ${currentPhase}`,
                style: {
                  transform: `scale(${currentPhase === "inhale" ? 1 + progress / 200 : 1 - progress / 400})`,
                  backgroundColor: getPhaseColor()
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-circle-inner", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "phase-text", children: getPhaseInstruction() }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "cycle-count", children: [
                    "Cycle ",
                    cycles + 1,
                    "/4"
                  ] })
                ] })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("svg", { className: "breathing-progress-ring", width: "300", height: "300", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                "circle",
                {
                  className: "progress-ring-bg",
                  stroke: "rgba(255, 255, 255, 0.1)",
                  strokeWidth: "4",
                  fill: "transparent",
                  r: "140",
                  cx: "150",
                  cy: "150"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                "circle",
                {
                  className: "progress-ring-fill",
                  stroke: getPhaseColor(),
                  strokeWidth: "4",
                  fill: "transparent",
                  r: "140",
                  cx: "150",
                  cy: "150",
                  strokeDasharray: `${2 * Math.PI * 140}`,
                  strokeDashoffset: `${2 * Math.PI * 140 * (1 - progress / 100)}`,
                  transform: "rotate(-90 150 150)"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-tips", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("p", { className: "tip-text", children: [
            currentPhase === "inhale" && "Breathe in slowly through your nose",
            currentPhase === "hold1" && "Gently hold your breath",
            currentPhase === "exhale" && "Release slowly through your mouth",
            currentPhase === "hold2" && "Rest before the next breath"
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "breathing-controls", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            "button",
            {
              className: isActive ? "breathing-button stop" : "breathing-button start",
              onClick: () => setIsActive(!isActive),
              children: isActive ? /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PauseIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Stop Exercise" })
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PlayIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Start Breathing" })
              ] })
            }
          ),
          cycles > 0 && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "breathing-stats", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("span", { className: "stat-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(HeartIcon2, { className: "stat-icon" }),
            cycles,
            " cycles completed"
          ] }) })
        ] })
      ] });
    };
  }
});

// src/services/backendService.ts
async function apiCall(endpoint, method = "GET", body, headers) {
  try {
    const token = localStorage.getItem("auth_token");
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      method,
      headers: {
        "Content-Type": "application/json",
        ...token && { "Authorization": `Bearer ${token}` },
        ...headers
      },
      ...body && { body: JSON.stringify(body) }
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.statusText}`);
    }
    return await response.json();
  } catch (error44) {
    console.error("API Call Failed:", error44);
    throw error44;
  }
}
var API_BASE_URL, userService, moodService, assessmentService, safetyPlanService, journalService, crisisService, peerSupportService, healthService, backendService;
var init_backendService = __esm({
  "src/services/backendService.ts"() {
    "use strict";
    API_BASE_URL = false ? "http://localhost:8888/.netlify/functions/api" : "/.netlify/functions/api";
    userService = {
      async register(email3, password, role = "seeker") {
        return apiCall("/users/register", "POST", { email: email3, password, role });
      },
      async getProfile() {
        return apiCall("/users/profile");
      },
      async updateProfile(data2) {
        return apiCall("/users/profile", "PUT", data2);
      }
    };
    moodService = {
      async saveMoodEntry(moodData) {
        return apiCall("/mood", "POST", moodData);
      },
      async getMoodHistory() {
        return apiCall("/mood");
      },
      async getMoodAnalytics(period = "month") {
        return apiCall(`/mood/analytics?period=${period}`);
      }
    };
    assessmentService = {
      async submitAssessment(type, responses) {
        return apiCall("/assessments/submit", "POST", { type, responses });
      },
      async getAssessmentHistory() {
        return apiCall("/assessments");
      },
      async getLatestAssessment(type) {
        return apiCall(`/assessments/latest?type=${type}`);
      }
    };
    safetyPlanService = {
      async getSafetyPlan() {
        return apiCall("/safety-plan");
      },
      async saveSafetyPlan(planData) {
        return apiCall("/safety-plan", "POST", planData);
      },
      async updateSafetyPlan(section, data2) {
        return apiCall("/safety-plan", "PATCH", { section, data: data2 });
      }
    };
    journalService = {
      async saveEntry(entry) {
        return apiCall("/journal", "POST", entry);
      },
      async getEntries(limit = 20, offset = 0) {
        return apiCall(`/journal?limit=${limit}&offset=${offset}`);
      },
      async getEntry(id) {
        return apiCall(`/journal/${id}`);
      },
      async updateEntry(id, updates) {
        return apiCall(`/journal/${id}`, "PUT", updates);
      },
      async deleteEntry(id) {
        return apiCall(`/journal/${id}`, "DELETE");
      }
    };
    crisisService = {
      async getResources() {
        return apiCall("/crisis/resources");
      },
      async reportCrisis(data2) {
        return apiCall("/crisis/report", "POST", data2);
      },
      async getEmergencyContacts() {
        return apiCall("/crisis/emergency-contacts");
      }
    };
    peerSupportService = {
      async findMatch(preferences) {
        return apiCall("/peer-support/match", "POST", preferences);
      },
      async sendMessage(recipientId, message) {
        return apiCall("/peer-support/message", "POST", { recipientId, message });
      },
      async getConversations() {
        return apiCall("/peer-support/conversations");
      },
      async reportUser(userId, reason) {
        return apiCall("/peer-support/report", "POST", { userId, reason });
      }
    };
    healthService = {
      async checkHealth() {
        return apiCall("/health");
      }
    };
    backendService = {
      user: userService,
      mood: moodService,
      assessment: assessmentService,
      safetyPlan: safetyPlanService,
      journal: journalService,
      crisis: crisisService,
      peerSupport: peerSupportService,
      health: healthService
    };
  }
});

// src/views/WellnessView.tsx
var WellnessView_exports = {};
__export(WellnessView_exports, {
  WellnessView: () => WellnessView,
  default: () => WellnessView_default
});
var import_react27, import_jsx_runtime18, MOOD_EMOJIS2, MOOD_TAGS, RangeSlider, CheckInTab, HabitsTab, JournalTab, WellnessView, WellnessView_default;
var init_WellnessView = __esm({
  "src/views/WellnessView.tsx"() {
    "use strict";
    import_react27 = __toESM(require_react());
    init_NotificationContext();
    init_ViewHeader();
    init_Card();
    init_AppButton();
    init_AppInput();
    init_chartUtils();
    init_icons_dynamic();
    init_wellnessStore();
    init_MoodTracker();
    init_WellnessInsights2();
    init_EnhancedMoodChart2();
    init_BreathingWidget2();
    init_backendService();
    import_jsx_runtime18 = __toESM(require_jsx_runtime());
    MOOD_EMOJIS2 = ["\u{1F61E}", "\u{1F641}", "\u{1F610}", "\u{1F642}", "\u{1F60A}"];
    MOOD_TAGS = ["Grateful", "Anxious", "Tired", "Hopeful", "Stressed", "Calm", "Lonely", "Productive"];
    RangeSlider = ({ label, value, onChange }) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "form-group", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "input",
        {
          type: "range",
          min: "1",
          max: "5",
          value,
          onChange: (e4) => onChange(parseInt(e4.target.value)),
          className: "wellness-slider"
        }
      )
    ] });
    CheckInTab = () => {
      const { history, postCheckIn } = useWellnessStore();
      const { addToast } = useNotification();
      const [isSubmitting, setIsSubmitting] = (0, import_react27.useState)(false);
      const [chartPeriod, _setChartPeriod] = (0, import_react27.useState)("7days");
      const [moodScore, setMoodScore] = (0, import_react27.useState)(3);
      const [anxietyLevel, setAnxietyLevel] = (0, import_react27.useState)(3);
      const [sleepQuality, setSleepQuality] = (0, import_react27.useState)(3);
      const [energyLevel, setEnergyLevel] = (0, import_react27.useState)(3);
      const [tags, setTags2] = (0, import_react27.useState)([]);
      const [notes, setNotes] = (0, import_react27.useState)("");
      (0, import_react27.useEffect)(() => {
        const loadMoodHistory = async () => {
          try {
            const data2 = await backendService.mood.getMoodHistory();
            console.log("Loaded mood history from backend:", data2);
          } catch (error44) {
            console.error("Failed to load mood history:", error44);
          }
        };
        loadMoodHistory();
      }, []);
      const chartData = (0, import_react27.useMemo)(() => {
        const days = chartPeriod === "7days" ? 7 : chartPeriod === "30days" ? 30 : 90;
        return groupCheckInsByDay(history, days);
      }, [history, chartPeriod]);
      const insightsData = (0, import_react27.useMemo)(() => {
        const moodAvg = history.length > 0 ? history.reduce((acc, h3) => acc + h3.moodScore, 0) / history.length : 0;
        let streak = 0;
        const today = /* @__PURE__ */ new Date();
        for (let i3 = 0; i3 < 30; i3++) {
          const date5 = new Date(today);
          date5.setDate(date5.getDate() - i3);
          const dateStr = date5.toISOString().split("T")[0];
          if (history.some((h3) => new Date(h3.timestamp).toISOString().split("T")[0] === dateStr)) {
            streak++;
          } else if (i3 > 0) {
            break;
          }
        }
        const moodCounts = history.reduce((acc, h3) => {
          const emoji3 = MOOD_EMOJIS2[Math.min(Math.floor(h3.moodScore) - 1, 4)];
          acc[emoji3] = (acc[emoji3] || 0) + 1;
          return acc;
        }, {});
        const topMood = Object.keys(moodCounts).reduce(
          (a3, b3) => moodCounts[a3] > moodCounts[b3] ? a3 : b3,
          "\u{1F60A}"
        );
        return {
          moodAverage: moodAvg,
          streakDays: streak,
          totalCheckIns: history.length,
          topMood
        };
      }, [history]);
      const handleTagClick = (tag) => {
        setTags2((prev) => prev.includes(tag) ? prev.filter((t4) => t4 !== tag) : [...prev, tag]);
      };
      const resetForm = () => {
        setMoodScore(3);
        setAnxietyLevel(3);
        setSleepQuality(3);
        setEnergyLevel(3);
        setTags2([]);
        setNotes("");
      };
      const handleSubmit = async () => {
        setIsSubmitting(true);
        try {
          const checkInData = {
            moodScore,
            anxietyLevel,
            sleepQuality,
            energyLevel,
            tags,
            notes: notes.trim()
          };
          await postCheckIn(checkInData);
          try {
            const moodLabels = ["Very Bad", "Bad", "Neutral", "Good", "Very Good"];
            await backendService.mood.saveMoodEntry({
              mood: moodLabels[moodScore - 1],
              score: moodScore,
              notes: notes.trim(),
              triggers: tags.filter((t4) => ["Anxious", "Stressed", "Lonely"].includes(t4)),
              activities: tags.filter((t4) => ["Grateful", "Hopeful", "Calm", "Productive"].includes(t4))
            });
            console.log("Mood saved to backend successfully");
          } catch (backendError) {
            console.error("Failed to save to backend (will retry later):", backendError);
          }
          addToast("Your wellness check-in has been saved!", "success");
          resetForm();
        } catch (error44) {
          addToast(error44.message || "Failed to save check-in.", "error");
        } finally {
          setIsSubmitting(false);
        }
      };
      const hasCheckedInToday = (0, import_react27.useMemo)(() => {
        if (!history || history.length === 0) return false;
        const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
        return history.some((c3) => new Date(c3.timestamp).toISOString().split("T")[0] === today);
      }, [history]);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { enhanced: true, variant: "interactive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { children: "Daily Check-in" }),
          hasCheckedInToday ? /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "empty-state", style: { padding: "2rem 1rem" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h3", { children: "Great job!" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "You've already completed your check-in for today. Come back tomorrow!" })
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "form-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { children: "How are you feeling overall today?" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mood-selector", children: MOOD_EMOJIS2.map((emoji3, index2) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  className: moodScore === index2 + 1 ? "mood-emoji-btn selected" : "mood-emoji-btn",
                  onClick: () => setMoodScore(index2 + 1),
                  "aria-label": `Mood score ${index2 + 1}`,
                  children: emoji3
                },
                index2
              )) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(RangeSlider, { label: "Anxiety Level (Low to High)", value: anxietyLevel, onChange: setAnxietyLevel }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(RangeSlider, { label: "Sleep Quality (Poor to Great)", value: sleepQuality, onChange: setSleepQuality }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(RangeSlider, { label: "Energy Level (Low to High)", value: energyLevel, onChange: setEnergyLevel }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "form-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { children: "Select tags that apply:" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "tag-selector filter-buttons", children: MOOD_TAGS.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                AppButton,
                {
                  className: tags.includes(tag) ? "active" : "",
                  onClick: () => handleTagClick(tag),
                  variant: "secondary",
                  children: tag
                },
                tag
              )) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppTextArea, { label: "Notes (Private)", value: notes, onChange: (e4) => setNotes(e4.target.value), placeholder: "Any specific thoughts or events today?", rows: 3 }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { enhanced: true, size: "lg", onClick: handleSubmit, isLoading: isSubmitting, disabled: isSubmitting, children: "Save Today's Check-in" }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(WellnessInsights, { ...insightsData }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(EnhancedMoodChart, { data: chartData, period: chartPeriod })
      ] });
    };
    HabitsTab = () => {
      const { predefinedHabits, trackedHabits, isLoadingHabits, trackHabit, logCompletion } = useWellnessStore();
      const discoverableHabits = (0, import_react27.useMemo)(() => {
        const trackedIds = new Set(trackedHabits.map((h3) => h3.habitId));
        return predefinedHabits.filter((h3) => !trackedIds.has(h3.id));
      }, [predefinedHabits, trackedHabits]);
      if (isLoadingHabits) {
        return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "loading-spinner", style: { margin: "3rem auto" } });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { enhanced: true, variant: "elevated", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { children: "My Habits" }),
          trackedHabits.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("ul", { className: "habit-list", children: trackedHabits.map((habit) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("li", { className: habit.isCompletedToday ? "habit-item completed" : "habit-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "habit-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h4", { children: predefinedHabits.find((h3) => h3.id === habit.habitId)?.name }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: predefinedHabits.find((h3) => h3.id === habit.habitId)?.description })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "habit-streak", title: `Current Streak: ${habit.currentStreak} days`, children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: "\u{1F525}" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { children: habit.currentStreak })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
              AppButton,
              {
                variant: habit.isCompletedToday ? "success" : "primary",
                onClick: () => logCompletion(habit.habitId),
                disabled: habit.isCompletedToday,
                children: habit.isCompletedToday ? "Done!" : "Complete"
              }
            )
          ] }, habit.habitId)) }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "You're not tracking any habits yet. Add one from the list below to get started!" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { enhanced: true, variant: "interactive", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { children: "Discover New Habits" }),
          discoverableHabits.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("ul", { className: "habit-list", children: discoverableHabits.map((habit) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("li", { className: "habit-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "habit-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h4", { children: habit.name }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: habit.description })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { enhanced: true, variant: "secondary", size: "sm", onClick: () => trackHabit(habit.id), icon: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PlusIcon, {}), children: "Track" })
          ] }, habit.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "You're tracking all available habits. Great job!" })
        ] })
      ] });
    };
    JournalTab = () => {
      const { journalEntries, postJournalEntry } = useWellnessStore();
      const { addToast } = useNotification();
      const [newEntry, setNewEntry] = (0, import_react27.useState)("");
      const [isSubmitting, setIsSubmitting] = (0, import_react27.useState)(false);
      const MAX_LENGTH = 2e3;
      const handleSubmit = async () => {
        if (!newEntry.trim()) return;
        setIsSubmitting(true);
        try {
          await postJournalEntry(newEntry);
          setNewEntry("");
          addToast("Journal entry saved.", "success");
        } catch (error44) {
          addToast(error44.message || "Failed to save journal entry.", "error");
        } finally {
          setIsSubmitting(false);
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { enhanced: true, variant: "glass", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { children: "New Journal Entry" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "This is a private space for your thoughts. Only you can see these entries." }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            AppTextArea,
            {
              enhanced: true,
              value: newEntry,
              onChange: (e4) => setNewEntry(e4.target.value),
              placeholder: "What's on your mind today?",
              rows: 5,
              maxLength: MAX_LENGTH
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { enhanced: true, size: "lg", onClick: handleSubmit, isLoading: isSubmitting, disabled: isSubmitting || !newEntry.trim(), children: "Save Entry" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "journal-history", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { children: "Past Entries" }),
          journalEntries.length > 0 ? journalEntries.map((entry) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(Card, { enhanced: true, variant: "interactive", className: "journal-entry-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "journal-entry-timestamp", children: new Date(entry.timestamp).toLocaleDateString(void 0, {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric"
            }) }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "journal-entry-content", children: entry.content })
          ] }, entry.id)) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Card, { enhanced: true, variant: "default", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { children: "You have no journal entries yet." }) })
        ] })
      ] });
    };
    WellnessView = () => {
      const [activeTab, setActiveTab] = (0, import_react27.useState)("mood");
      const { fetchHistory, fetchHabits, fetchJournalEntries } = useWellnessStore();
      const [showBreathing, setShowBreathing] = (0, import_react27.useState)(false);
      import_react27.default.useEffect(() => {
        fetchHistory();
        fetchHabits();
        fetchJournalEntries();
      }, []);
      const handleMoodSubmit = (_moodData) => {
      };
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("style", { children: `
                .wellness-slider { width: 100%; }
                .mood-selector { display: flex; justify-content: space-around; margin-bottom: 1rem; }
                .mood-emoji-btn { font-size: 2.5rem; cursor: pointer; transition: transform 0.2s; padding: 0.5rem; border-radius: 50%; border: 2px solid transparent; background: none; }
                .mood-emoji-btn:hover { transform: scale(1.1); }
                .mood-emoji-btn.selected { transform: scale(1.2); border-color: var(--accent-primary); background: color-mix(in srgb, var(--accent-primary) 15%, transparent); }
                .tag-selector { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 1rem; }
                .wellness-chart { display: flex; gap: 1rem; height: 250px; margin-top: 2rem; }
                .chart-y-axis { display: flex; flex-direction: column-reverse; justify-content: space-between; font-size: 1.25rem; }
                .chart-bars { display: flex; flex-grow: 1; justify-content: space-around; border-left: 2px solid var(--border-color); border-bottom: 2px solid var(--border-color); padding-left: 0.5rem; }
                .chart-bar-group { display: flex; flex-direction: column; align-items: center; justify-content: flex-end; width: 10%; }
                .chart-bar-wrapper { flex-grow: 1; width: 100%; display: flex; align-items: flex-end; justify-content: center;}
                .chart-bar { width: 60%; background-color: var(--accent-primary); border-radius: 4px 4px 0 0; transition: height 0.5s ease-out, background-color 0.5s; }
                .chart-bar:hover { opacity: 0.8; }
                .chart-label { margin-top: 0.5rem; font-weight: 600; color: var(--text-secondary); font-size: 0.875rem; }
                .journal-history { margin-top: 1.5rem; display: flex; flex-direction: column; gap: 1rem; }
                .journal-entry-card { padding: 1rem 1.5rem; }
                .journal-entry-timestamp { font-weight: bold; color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem; }
                .journal-entry-content { white-space: pre-wrap; }
            ` }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ViewHeader, { title: "My Wellness", subtitle: "Track your mood, build healthy habits, and reflect in your private journal." }),
        showBreathing && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { style: { marginBottom: "2rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(BreathingWidget, { onComplete: () => setShowBreathing(false) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { style: { textAlign: "center", marginBottom: "1rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "button",
          {
            onClick: () => setShowBreathing(!showBreathing),
            style: {
              padding: "0.5rem 1.5rem",
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              color: "white",
              border: "none",
              borderRadius: "25px",
              cursor: "pointer",
              fontSize: "0.9rem",
              fontWeight: "500",
              transition: "all 0.3s ease"
            },
            children: showBreathing ? "\u2728 Hide Breathing Exercise" : "\u{1F9D8} Take a Mindful Moment"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "dashboard-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { className: activeTab === "mood" ? "active" : "", onClick: () => setActiveTab("mood"), children: "Daily Mood" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { className: activeTab === "checkin" ? "active" : "", onClick: () => setActiveTab("checkin"), children: "Check-in" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { className: activeTab === "habits" ? "active" : "", onClick: () => setActiveTab("habits"), children: "Habits" }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppButton, { className: activeTab === "journal" ? "active" : "", onClick: () => setActiveTab("journal"), children: "Journal" })
        ] }),
        activeTab === "mood" && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mood-tracker-container", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(MoodTracker, { onMoodSubmit: handleMoodSubmit }) }),
        activeTab === "checkin" && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CheckInTab, {}),
        activeTab === "habits" && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(HabitsTab, {}),
        activeTab === "journal" && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(JournalTab, {})
      ] });
    };
    WellnessView_default = WellnessView;
  }
});

// src/views/ProfileView.tsx
var ProfileView_exports = {};
__export(ProfileView_exports, {
  default: () => ProfileView_default
});
var import_react28, import_jsx_runtime19, ProfileView, ProfileView_default;
var init_ProfileView = __esm({
  "src/views/ProfileView.tsx"() {
    "use strict";
    import_react28 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime19 = __toESM(require_jsx_runtime());
    ProfileView = () => {
      const [activeTab, setActiveTab] = (0, import_react28.useState)("overview");
      const userData = {
        name: "Anonymous User",
        joinDate: "March 2024",
        streak: 14,
        checkIns: 42,
        connectionsHelped: 8,
        badgesEarned: 5,
        privacy: {
          profileVisibility: "anonymous",
          shareProgress: false,
          crisisContacts: ["Emergency Contact 1", "Family Member"]
        },
        preferences: {
          notifications: true,
          reminders: true,
          darkMode: false,
          language: "English"
        }
      };
      const badges = [
        { id: "1", name: "First Check-in", description: "Completed your first wellness check-in", earned: true },
        { id: "2", name: "Week Warrior", description: "Maintained a 7-day check-in streak", earned: true },
        { id: "3", name: "Helper Hand", description: "Provided support to 5 community members", earned: true },
        { id: "4", name: "Reflection Master", description: "Completed 10 journal entries", earned: false },
        { id: "5", name: "Crisis Advocate", description: "Completed crisis safety planning", earned: true }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "container mx-auto px-4 py-8 max-w-4xl", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "w-20 h-20 bg-gradient-to-br from-purple-400 to-blue-500 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-white text-2xl font-bold", children: "AU" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h1", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1", children: userData.name }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("p", { className: "text-gray-600 dark:text-gray-400", children: [
              "Member since ",
              userData.joinDate
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-4 mt-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(HeartIcon2, { className: "w-4 h-4 text-pink-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { className: "text-sm text-gray-600 dark:text-gray-400", children: [
                  userData.streak,
                  " day streak"
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("span", { className: "text-sm text-gray-600 dark:text-gray-400", children: [
                  userData.badgesEarned,
                  " badges earned"
                ] })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { className: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors", children: "Edit Profile" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "grid gap-4 md:grid-cols-4 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(HeartIcon2, { className: "w-8 h-8 text-pink-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: userData.checkIns }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Check-ins" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(UsersIcon, { className: "w-8 h-8 text-blue-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: userData.connectionsHelped }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "People Helped" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(BookIcon, { className: "w-8 h-8 text-green-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "12" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Journal Entries" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ShieldIcon, { className: "w-8 h-8 text-purple-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "Safe" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Safety Plan" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex border-b border-gray-200 dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "overview" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("overview"),
              children: "Overview"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "privacy" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("privacy"),
              children: "Privacy & Safety"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "preferences" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("preferences"),
              children: "Preferences"
            }
          )
        ] }) }),
        activeTab === "overview" && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4", children: "Achievements & Badges" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "grid gap-4 md:grid-cols-2", children: badges.map((badge) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "div",
              {
                className: `p-4 rounded-lg border ${badge.earned ? "border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20" : "border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50"}`,
                children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: `w-10 h-10 rounded-full flex items-center justify-center ${badge.earned ? "bg-green-100 dark:bg-green-900/40 text-green-600 dark:text-green-400" : "bg-gray-200 dark:bg-gray-600 text-gray-400"}`, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(StarIcon, { className: "w-5 h-5" }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: `font-semibold ${badge.earned ? "text-gray-900 dark:text-gray-100" : "text-gray-500 dark:text-gray-400"}`, children: badge.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: `text-sm ${badge.earned ? "text-gray-600 dark:text-gray-300" : "text-gray-400 dark:text-gray-500"}`, children: badge.description })
                  ] }),
                  badge.earned && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-xs bg-green-100 dark:bg-green-900/40 text-green-600 dark:text-green-400 px-2 py-1 rounded", children: "Earned" })
                ] })
              },
              badge.id
            )) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4", children: "Recent Activity" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(HeartIcon2, { className: "w-5 h-5 text-pink-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "Completed wellness check-in" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Today, 9:30 AM" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(UsersIcon, { className: "w-5 h-5 text-blue-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "Helped a community member" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Yesterday, 3:15 PM" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(BookIcon, { className: "w-5 h-5 text-green-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100", children: "Added new journal reflection" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: "2 days ago, 7:45 PM" })
                ] })
              ] })
            ] })
          ] })
        ] }),
        activeTab === "privacy" && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "Privacy & Safety Settings" }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Profile Visibility" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "radio",
                      name: "visibility",
                      value: "anonymous",
                      defaultChecked: true,
                      className: "mr-3"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Anonymous - Your identity is completely protected" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "radio",
                      name: "visibility",
                      value: "pseudonym",
                      className: "mr-3"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Pseudonym - Use a chosen username" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Crisis Contacts" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-3", children: "People who can be contacted in case of emergency" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-2", children: [
                userData.privacy.crisisContacts.map((contact) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-900 dark:text-gray-100", children: contact }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { className: "text-red-600 hover:text-red-700 text-sm", children: "Remove" })
                ] }, contact)),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("button", { className: "w-full p-3 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-gray-600 dark:text-gray-400 hover:border-blue-500 hover:text-blue-500 transition-colors", children: "+ Add Crisis Contact" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Data & Privacy" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Share progress with community helpers" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "checkbox",
                      defaultChecked: userData.privacy.shareProgress,
                      className: "toggle"
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Allow anonymous usage analytics" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "checkbox",
                      defaultChecked: true,
                      className: "toggle"
                    }
                  )
                ] })
              ] })
            ] })
          ] })
        ] }),
        activeTab === "preferences" && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "App Preferences" }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Notifications" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Daily check-in reminders" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "checkbox",
                      defaultChecked: userData.preferences.reminders,
                      className: "toggle"
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Community support notifications" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "checkbox",
                      defaultChecked: userData.preferences.notifications,
                      className: "toggle"
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Crisis alert notifications" }),
                  /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                    "input",
                    {
                      type: "checkbox",
                      defaultChecked: true,
                      className: "toggle"
                    }
                  )
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Appearance" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "space-y-3", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("label", { className: "flex items-center justify-between", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-gray-700 dark:text-gray-300", children: "Dark mode" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  "input",
                  {
                    type: "checkbox",
                    defaultChecked: userData.preferences.darkMode,
                    className: "toggle"
                  }
                )
              ] }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Language & Region" }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("select", { className: "w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "en", children: "English" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "es", children: "Espa\xF1ol" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "fr", children: "Fran\xE7ais" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("option", { value: "de", children: "Deutsch" })
              ] })
            ] })
          ] })
        ] })
      ] }) });
    };
    ProfileView_default = ProfileView;
  }
});

// src/components/Modal.tsx
var import_react29, import_jsx_runtime20, Modal;
var init_Modal = __esm({
  "src/components/Modal.tsx"() {
    "use strict";
    import_react29 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime20 = __toESM(require_jsx_runtime());
    Modal = ({
      isOpen,
      onClose,
      children,
      title,
      isDismissible = true,
      allowSwipeToDismiss = true,
      enhanced = true,
      size = "md",
      description
    }) => {
      const modalRef = (0, import_react29.useRef)(null);
      const previousFocusRef = (0, import_react29.useRef)(null);
      (0, import_react29.useEffect)(() => {
        if (isOpen) {
          previousFocusRef.current = document.activeElement;
          setTimeout(() => {
            const focusableElement = modalRef.current?.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            if (focusableElement) {
              focusableElement.focus();
            } else {
              modalRef.current?.focus();
            }
          }, 100);
        } else if (previousFocusRef.current) {
          previousFocusRef.current.focus();
          previousFocusRef.current = null;
        }
      }, [isOpen]);
      (0, import_react29.useEffect)(() => {
        const handleKeyDown = (event) => {
          if (!isOpen) return;
          if (event.key === "Escape" && isDismissible && onClose) {
            event.preventDefault();
            onClose();
            return;
          }
          if (event.key === "Tab" && modalRef.current) {
            const focusableElements = modalRef.current.querySelectorAll(
              'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            );
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];
            if (event.shiftKey && document.activeElement === firstElement) {
              event.preventDefault();
              lastElement?.focus();
            } else if (!event.shiftKey && document.activeElement === lastElement) {
              event.preventDefault();
              firstElement?.focus();
            }
          }
        };
        document.addEventListener("keydown", handleKeyDown);
        return () => document.removeEventListener("keydown", handleKeyDown);
      }, [isOpen, isDismissible, onClose]);
      if (!isOpen) return null;
      const overlayClasses = [enhanced ? "modal-overlay-enhanced" : "modal-overlay"];
      const contentClasses = [enhanced ? "modal-content-enhanced" : "modal-panel"];
      if (enhanced && size !== "md") {
        contentClasses.push(`modal-${size}`);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: overlayClasses.join(" "), children: [
        isDismissible && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "button",
          {
            className: "modal-overlay-button",
            onClick: onClose,
            "aria-label": "Close modal",
            style: {
              position: "absolute",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              background: "transparent",
              border: "none",
              cursor: "pointer",
              zIndex: -1
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
          "dialog",
          {
            ref: modalRef,
            className: contentClasses.join(" "),
            open: isOpen,
            "aria-labelledby": "modal-title",
            "aria-describedby": description ? "modal-description" : void 0,
            onCancel: (e4) => {
              e4.preventDefault();
              if (isDismissible && onClose) onClose();
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: enhanced ? "modal-header-enhanced" : "modal-header", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h2", { id: "modal-title", className: enhanced ? "modal-title-enhanced" : "", children: title }),
                isDismissible && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                  "button",
                  {
                    type: "button",
                    onClick: onClose,
                    className: `modal-close-btn touch-optimized ${enhanced ? "btn-enhanced ghost sm" : ""}`,
                    "aria-label": `Close ${title} dialog`,
                    children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CloseIcon, {})
                  }
                )
              ] }),
              description && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { id: "modal-description", className: "sr-only", children: description }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: enhanced ? "modal-body-enhanced" : "modal-body", children }),
              enhanced && isDismissible && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "modal-footer-enhanced", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
                "button",
                {
                  type: "button",
                  onClick: onClose,
                  className: "btn-enhanced secondary sm",
                  "aria-label": `Close ${title} dialog`,
                  children: "Close"
                }
              ) }),
              allowSwipeToDismiss && isDismissible && !enhanced && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "modal-swipe-hint", "aria-hidden": "true", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "swipe-indicator" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", { children: "Swipe to dismiss" })
              ] })
            ]
          }
        )
      ] });
    };
  }
});

// src/constants.ts
var CATEGORIES;
var init_constants = __esm({
  "src/constants.ts"() {
    "use strict";
    CATEGORIES = ["Anxiety", "Depression", "Grief", "Relationships", "Stress", "Loneliness", "Other"];
  }
});

// src/contexts/ThemeContext.tsx
var import_react30, import_jsx_runtime21, lightTheme, darkTheme, ThemeContext, useTheme;
var init_ThemeContext = __esm({
  "src/contexts/ThemeContext.tsx"() {
    "use strict";
    import_react30 = __toESM(require_react());
    import_jsx_runtime21 = __toESM(require_jsx_runtime());
    lightTheme = {
      colors: {
        bgPrimary: "#f7f9fc",
        bgSecondary: "#FFFFFF",
        bgTertiary: "#eef2f7",
        textPrimary: "#2c3e50",
        textSecondary: "#7f8c8d",
        accentPrimary: "#3498db",
        accentPrimaryHover: "#2980b9",
        accentPrimaryText: "#ffffff",
        accentDanger: "#e74c3c",
        accentSuccess: "#2ecc71",
        borderColor: "#e0e6ed"
      },
      spacing: { xs: "0.25rem", sm: "0.5rem", md: "1rem", lg: "1.5rem", xl: "2.5rem" },
      radius: { sm: "4px", md: "8px", lg: "12px" }
    };
    darkTheme = {
      colors: {
        bgPrimary: "#161b22",
        bgSecondary: "#22272e",
        bgTertiary: "#1c2128",
        textPrimary: "#cdd9e5",
        textSecondary: "#768390",
        accentPrimary: "#58a6ff",
        accentPrimaryHover: "#79b8ff",
        accentPrimaryText: "#161b22",
        accentDanger: "#f85149",
        accentSuccess: "#3fb950",
        borderColor: "#373e47"
      },
      spacing: { ...lightTheme.spacing },
      radius: { ...lightTheme.radius }
    };
    ThemeContext = (0, import_react30.createContext)(void 0);
    useTheme = () => {
      const context = (0, import_react30.useContext)(ThemeContext);
      if (context === void 0) {
        throw new Error("useTheme must be used within a ThemeProvider");
      }
      return context;
    };
  }
});

// src/stores/preferenceStore.ts
var usePreferenceStore;
var init_preferenceStore = __esm({
  "src/stores/preferenceStore.ts"() {
    "use strict";
    init_esm();
    usePreferenceStore = create((set2) => ({
      contentFilters: [],
      loadFilters: () => {
        try {
          const savedFilters = localStorage.getItem("contentFilters");
          if (savedFilters) {
            set2({ contentFilters: JSON.parse(savedFilters) });
          }
        } catch (e4) {
          console.error("Failed to parse content filters from localStorage", e4);
          localStorage.removeItem("contentFilters");
        }
      },
      setFilters: (filters) => {
        set2({ contentFilters: filters });
        localStorage.setItem("contentFilters", JSON.stringify(filters));
      }
    }));
    usePreferenceStore.getState().loadFilters();
  }
});

// src/components/PreferencesManager.css
var init_PreferencesManager = __esm({
  "src/components/PreferencesManager.css"() {
  }
});

// src/components/PreferencesManager.tsx
var import_react31, import_jsx_runtime22, defaultPreferences, PreferencesManager;
var init_PreferencesManager2 = __esm({
  "src/components/PreferencesManager.tsx"() {
    "use strict";
    import_react31 = __toESM(require_react());
    init_icons_dynamic();
    init_PreferencesManager();
    import_jsx_runtime22 = __toESM(require_jsx_runtime());
    defaultPreferences = {
      theme: "auto",
      fontSize: "medium",
      reducedMotion: false,
      highContrast: false,
      enableNotifications: true,
      wellnessReminders: true,
      reminderFrequency: 4,
      quietHoursStart: "22:00",
      quietHoursEnd: "08:00",
      shareAnalytics: false,
      showOnlineStatus: true,
      allowPeerMessages: true,
      defaultBreathingPattern: "4-7-8",
      meditationDuration: 10,
      backgroundTheme: "ocean",
      moodTracking: true,
      screenReaderMode: false,
      keyboardShortcuts: true,
      focusIndicators: true,
      autoSave: true,
      backupFrequency: "weekly"
    };
    PreferencesManager = () => {
      const [preferences, setPreferences] = (0, import_react31.useState)(defaultPreferences);
      const [activeTab, setActiveTab] = (0, import_react31.useState)("appearance");
      const [saved, setSaved] = (0, import_react31.useState)(false);
      (0, import_react31.useEffect)(() => {
        const saved2 = localStorage.getItem("userPreferences");
        if (saved2) {
          try {
            setPreferences(JSON.parse(saved2));
          } catch (e4) {
            console.error("Failed to load preferences:", e4);
          }
        }
        if (window.matchMedia) {
          const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
          const prefersHighContrast = window.matchMedia("(prefers-contrast: high)").matches;
          if (prefersReducedMotion || prefersHighContrast) {
            setPreferences((prev) => ({
              ...prev,
              reducedMotion: prefersReducedMotion,
              highContrast: prefersHighContrast
            }));
          }
        }
      }, []);
      const savePreferences = () => {
        localStorage.setItem("userPreferences", JSON.stringify(preferences));
        setSaved(true);
        setTimeout(() => setSaved(false), 2e3);
        applyPreferences(preferences);
      };
      const applyPreferences = (prefs) => {
        if (prefs.theme === "dark") {
          document.documentElement.setAttribute("data-theme", "dark");
        } else if (prefs.theme === "light") {
          document.documentElement.removeAttribute("data-theme");
        } else {
          const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
          if (prefersDark) {
            document.documentElement.setAttribute("data-theme", "dark");
          }
        }
        document.documentElement.style.setProperty(
          "--base-font-size",
          prefs.fontSize === "small" ? "14px" : prefs.fontSize === "large" ? "18px" : "16px"
        );
        if (prefs.reducedMotion) {
          document.documentElement.classList.add("reduced-motion");
        } else {
          document.documentElement.classList.remove("reduced-motion");
        }
        if (prefs.highContrast) {
          document.documentElement.classList.add("high-contrast");
        } else {
          document.documentElement.classList.remove("high-contrast");
        }
        if (prefs.screenReaderMode) {
          document.documentElement.setAttribute("aria-live", "polite");
        }
      };
      const exportData = () => {
        const data2 = {
          preferences,
          wellnessHistory: localStorage.getItem("wellnessHistory"),
          reflections: localStorage.getItem("reflections"),
          journalPrompts: localStorage.getItem("usedJournalPrompts"),
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        };
        const blob = new Blob([JSON.stringify(data2, null, 2)], { type: "application/json" });
        const url2 = URL.createObjectURL(blob);
        const a3 = document.createElement("a");
        a3.href = url2;
        a3.download = `astralcore-backup-${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.json`;
        a3.click();
        URL.revokeObjectURL(url2);
      };
      const importData = (event) => {
        const file2 = event.target.files?.[0];
        if (!file2) return;
        const reader = new FileReader();
        reader.onload = (e4) => {
          try {
            const data2 = JSON.parse(e4.target?.result);
            if (data2.preferences) {
              setPreferences(data2.preferences);
              localStorage.setItem("userPreferences", JSON.stringify(data2.preferences));
            }
            if (data2.wellnessHistory) {
              localStorage.setItem("wellnessHistory", data2.wellnessHistory);
            }
            if (data2.reflections) {
              localStorage.setItem("reflections", data2.reflections);
            }
            if (data2.journalPrompts) {
              localStorage.setItem("usedJournalPrompts", data2.journalPrompts);
            }
            setSaved(true);
            setTimeout(() => setSaved(false), 2e3);
          } catch (error44) {
            console.error("Failed to import data:", error44);
          }
        };
        reader.readAsText(file2);
      };
      const updatePreference = (key, value) => {
        setPreferences((prev) => ({ ...prev, [key]: value }));
      };
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preferences-manager", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preferences-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("h2", { className: "preferences-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(SettingsIcon, { className: "title-icon" }),
            "Settings & Preferences"
          ] }),
          saved && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "saved-indicator", children: "\u2713 Saved" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preferences-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "appearance" ? "active" : ""}`,
              onClick: () => setActiveTab("appearance"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(SunIcon, {}),
                " Appearance"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "notifications" ? "active" : ""}`,
              onClick: () => setActiveTab("notifications"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(BellIcon, {}),
                " Notifications"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "privacy" ? "active" : ""}`,
              onClick: () => setActiveTab("privacy"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ShieldIcon, {}),
                " Privacy"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "wellness" ? "active" : ""}`,
              onClick: () => setActiveTab("wellness"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HeartIcon2, {}),
                " Wellness"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "accessibility" ? "active" : ""}`,
              onClick: () => setActiveTab("accessibility"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(VolumeIcon, {}),
                " Accessibility"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
            "button",
            {
              className: `tab-btn ${activeTab === "data" ? "active" : ""}`,
              onClick: () => setActiveTab("data"),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(DownloadIcon, {}),
                " Data"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preferences-content", children: [
          activeTab === "appearance" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Appearance Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Theme" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.theme,
                  onChange: (e4) => updatePreference("theme", e4.target.value),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "light", children: "Light" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "dark", children: "Dark" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "auto", children: "Auto (System)" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Font Size" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.fontSize,
                  onChange: (e4) => updatePreference("fontSize", e4.target.value),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "small", children: "Small" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "medium", children: "Medium" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "large", children: "Large" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.reducedMotion,
                  onChange: (e4) => updatePreference("reducedMotion", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Reduce motion and animations" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.highContrast,
                  onChange: (e4) => updatePreference("highContrast", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "High contrast mode" })
            ] }) })
          ] }),
          activeTab === "notifications" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Notification Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.enableNotifications,
                  onChange: (e4) => updatePreference("enableNotifications", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Enable notifications" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.wellnessReminders,
                  onChange: (e4) => updatePreference("wellnessReminders", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Wellness check-in reminders" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Reminder frequency" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.reminderFrequency,
                  onChange: (e4) => updatePreference("reminderFrequency", Number(e4.target.value)),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "2", children: "Every 2 hours" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "4", children: "Every 4 hours" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "6", children: "Every 6 hours" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "8", children: "Every 8 hours" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Quiet hours start" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "time",
                  value: preferences.quietHoursStart,
                  onChange: (e4) => updatePreference("quietHoursStart", e4.target.value),
                  className: "preference-input"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Quiet hours end" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "time",
                  value: preferences.quietHoursEnd,
                  onChange: (e4) => updatePreference("quietHoursEnd", e4.target.value),
                  className: "preference-input"
                }
              )
            ] })
          ] }),
          activeTab === "privacy" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Privacy Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                  "input",
                  {
                    type: "checkbox",
                    checked: preferences.shareAnalytics,
                    onChange: (e4) => updatePreference("shareAnalytics", e4.target.checked)
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Share anonymous usage analytics" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "preference-hint", children: "Help us improve by sharing anonymous usage data" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.showOnlineStatus,
                  onChange: (e4) => updatePreference("showOnlineStatus", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Show online status to peers" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.allowPeerMessages,
                  onChange: (e4) => updatePreference("allowPeerMessages", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Allow messages from peers" })
            ] }) })
          ] }),
          activeTab === "wellness" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Wellness Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Default breathing pattern" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.defaultBreathingPattern,
                  onChange: (e4) => updatePreference("defaultBreathingPattern", e4.target.value),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "4-7-8", children: "4-7-8 Relaxation" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "box", children: "Box Breathing" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "coherent", children: "Coherent Breathing" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "calm", children: "Calm Breathing" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Default meditation duration (minutes)" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "number",
                  min: "3",
                  max: "60",
                  value: preferences.meditationDuration,
                  onChange: (e4) => updatePreference("meditationDuration", Number(e4.target.value)),
                  className: "preference-input"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Background theme" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.backgroundTheme,
                  onChange: (e4) => updatePreference("backgroundTheme", e4.target.value),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "ocean", children: "Ocean" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "forest", children: "Forest" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "sky", children: "Sky" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "aurora", children: "Aurora" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.moodTracking,
                  onChange: (e4) => updatePreference("moodTracking", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Enable mood tracking" })
            ] }) })
          ] }),
          activeTab === "accessibility" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Accessibility Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                  "input",
                  {
                    type: "checkbox",
                    checked: preferences.screenReaderMode,
                    onChange: (e4) => updatePreference("screenReaderMode", e4.target.checked)
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Screen reader optimization" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "preference-hint", children: "Optimizes the interface for screen readers" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.keyboardShortcuts,
                  onChange: (e4) => updatePreference("keyboardShortcuts", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Enable keyboard shortcuts" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                  "input",
                  {
                    type: "checkbox",
                    checked: preferences.focusIndicators,
                    onChange: (e4) => updatePreference("focusIndicators", e4.target.checked)
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Enhanced focus indicators" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "preference-hint", children: "Shows clear focus outlines for keyboard navigation" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "keyboard-shortcuts", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h4", { children: "Keyboard Shortcuts" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("ul", { className: "shortcuts-list", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Alt" }),
                  " + ",
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "H" }),
                  " - Go to Home"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Alt" }),
                  " + ",
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "W" }),
                  " - Open Wellness Dashboard"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Alt" }),
                  " + ",
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "C" }),
                  " - Open Crisis Resources"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Alt" }),
                  " + ",
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "B" }),
                  " - Start Breathing Exercise"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Alt" }),
                  " + ",
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "M" }),
                  " - Start Meditation"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("li", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("kbd", { children: "Esc" }),
                  " - Close modal/dialog"
                ] })
              ] })
            ] })
          ] }),
          activeTab === "data" && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "tab-panel", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h3", { children: "Data Management" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "preference-group", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "preference-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: preferences.autoSave,
                  onChange: (e4) => updatePreference("autoSave", e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { children: "Auto-save progress" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preference-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("label", { className: "preference-label", children: "Backup frequency" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
                "select",
                {
                  value: preferences.backupFrequency,
                  onChange: (e4) => updatePreference("backupFrequency", e4.target.value),
                  className: "preference-select",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "daily", children: "Daily" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "weekly", children: "Weekly" }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("option", { value: "monthly", children: "Monthly" })
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "data-actions", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { className: "data-btn export-btn", onClick: exportData, children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(DownloadIcon, {}),
                "Export All Data"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("label", { className: "data-btn import-btn", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(UploadIcon, {}),
                "Import Data",
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
                  "input",
                  {
                    type: "file",
                    accept: ".json",
                    onChange: importData,
                    style: { display: "none" }
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "data-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h4", { children: "What's included in export:" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("ul", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("li", { children: "All preferences and settings" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("li", { children: "Wellness check-in history" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("li", { children: "Journal entries and reflections" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("li", { children: "Progress tracking data" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("li", { children: "Custom breathing patterns" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "preferences-footer", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { className: "reset-btn", onClick: () => setPreferences(defaultPreferences), children: "Reset to Defaults" }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { className: "save-btn", onClick: savePreferences, children: "Save Changes" })
        ] })
      ] });
    };
  }
});

// src/views/SettingsView.tsx
var SettingsView_exports = {};
__export(SettingsView_exports, {
  SettingsView: () => SettingsView,
  default: () => SettingsView_default
});
var import_react32, import_jsx_runtime23, SettingsView, SettingsView_default;
var init_SettingsView = __esm({
  "src/views/SettingsView.tsx"() {
    "use strict";
    import_react32 = __toESM(require_react());
    init_Modal();
    init_AppButton();
    init_ApiClient();
    init_AuthContext();
    init_constants();
    init_ThemeContext();
    init_ViewHeader();
    init_preferenceStore();
    init_PreferencesManager2();
    import_jsx_runtime23 = __toESM(require_jsx_runtime());
    SettingsView = ({ userToken: propUserToken, onResetId, setActiveView }) => {
      const { user, userToken: contextUserToken } = useAuth();
      const { theme, toggleTheme } = useTheme();
      const { contentFilters, setFilters } = usePreferenceStore();
      const userToken = propUserToken ?? contextUserToken;
      const [isResetModalOpen, setIsResetModalOpen] = (0, import_react32.useState)(false);
      const [isPrivacyModalOpen, setIsPrivacyModalOpen] = (0, import_react32.useState)(false);
      const [researchConsent, setResearchConsent] = (0, import_react32.useState)(false);
      (0, import_react32.useEffect)(() => {
        const currentUserId = user?.sub || userToken;
        if (currentUserId) {
          ApiClient.preferences.getPreferences(currentUserId).then((prefs) => {
            setResearchConsent(prefs.researchConsent);
          });
        }
      }, [user, userToken]);
      const handleReset = () => {
        onResetId?.();
        setIsResetModalOpen(false);
      };
      const handleConsentChange = (consent) => {
        const currentUserId = user?.sub || userToken;
        if (currentUserId) {
          setResearchConsent(consent);
          ApiClient.preferences.updatePreferences(currentUserId, { researchConsent: consent });
        }
      };
      const handleFilterChange = (category) => {
        const newFilters = contentFilters.includes(category) ? contentFilters.filter((c3) => c3 !== category) : [...contentFilters, category];
        setFilters(newFilters);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(Modal, { isOpen: isResetModalOpen, onClose: () => setIsResetModalOpen(false), title: "Confirm ID Reset", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Are you sure you want to reset your anonymous ID? This action cannot be undone. You will appear as a new user to the community." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "modal-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AppButton, { variant: "secondary", onClick: () => setIsResetModalOpen(false), children: "Cancel" }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AppButton, { variant: "danger", onClick: handleReset, children: "Yes, Reset ID" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(Modal, { isOpen: isPrivacyModalOpen, onClose: () => setIsPrivacyModalOpen(false), title: "Public Health Research", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "By opting in, you agree to contribute your fully anonymized and aggregated data for public health research. This helps researchers understand mental health trends and improve support systems globally." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("ul", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("li", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("strong", { children: "What's shared:" }),
              ' General data like dilemma categories (e.g., "Anxiety"), mood trends, and resource usage statistics.'
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("li", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("strong", { children: "What's NOT shared:" }),
              " Your post content, chat messages, or any personal identifiers."
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Your contribution is valuable and completely voluntary. You can opt-out at any time." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "modal-actions", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AppButton, { variant: "primary", onClick: () => setIsPrivacyModalOpen(false), children: "Got it" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ViewHeader, { title: "Settings" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Appearance" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "theme-toggle", children: "Dark Mode" }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Switch between light and dark themes for comfortable viewing" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "theme-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
                "input",
                {
                  type: "checkbox",
                  id: "theme-toggle",
                  checked: theme === "dark",
                  onChange: toggleTheme
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "theme-toggle", className: "slider" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Content Preferences" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Hide or blur content from categories you find triggering to create a safer browsing experience." }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "expertise-options", children: CATEGORIES.map((option) => /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "radio-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "input",
              {
                type: "checkbox",
                id: `filter-${option}`,
                name: "filter",
                value: option,
                checked: contentFilters.includes(option),
                onChange: () => handleFilterChange(option)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: `filter-${option}`, children: option })
          ] }, option)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Data & Privacy" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "research-consent-toggle", children: "Contribute to Public Health Research" }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Help researchers by contributing your fully anonymized data to improve mental health support systems globally." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "theme-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
                "input",
                {
                  type: "checkbox",
                  id: "research-consent-toggle",
                  checked: researchConsent,
                  onChange: (e4) => handleConsentChange(e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { htmlFor: "research-consent-toggle", className: "slider" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { style: { textAlign: "right", marginTop: "0.5rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            "a",
            {
              href: "#",
              onClick: (e4) => {
                e4.preventDefault();
                setIsPrivacyModalOpen(true);
              },
              className: "privacy-link",
              children: "Learn More"
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Account Management" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "account-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "account-action-item", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-info", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { children: "Blocked Users" }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Permanently block communication with specific users for your safety and peace of mind." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AppButton, { variant: "secondary", onClick: () => setActiveView?.("blocked-users"), children: "Manage Blocked Users" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "account-action-item danger", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "setting-info", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("label", { children: "Reset Anonymous ID" }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "Reset your anonymous ID for a fresh start. This action cannot be undone and you will appear as a new user to the community." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(AppButton, { variant: "danger", onClick: () => setIsResetModalOpen(true), children: "Reset Anonymous ID" })
            ] }) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "settings-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { children: "Advanced Settings" }),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(PreferencesManager, {})
        ] })
      ] });
    };
    SettingsView_default = SettingsView;
  }
});

// src/utils/sanitizeHtml.ts
function safeMarkdownToHtml(text5) {
  if (!text5) return "";
  const escapeHtml = (str) => {
    const div = document.createElement("div");
    div.textContent = str;
    return div.innerHTML;
  };
  let safe = escapeHtml(text5);
  safe = safe.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>").replace(/\*(.*?)\*/g, "<em>$1</em>").replace(/\n/g, "<br>");
  safe = safe.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text6, url2) => {
    const isValidUrl = (urlString) => {
      try {
        const parsed = new URL(urlString);
        return ["http:", "https:", "mailto:"].includes(parsed.protocol);
      } catch {
        return urlString.startsWith("/") || urlString.startsWith("#");
      }
    };
    if (isValidUrl(url2)) {
      const safeUrl = escapeHtml(url2);
      const safeText = escapeHtml(text6);
      return `<a href="${safeUrl}" target="_blank" rel="noopener noreferrer">${safeText}</a>`;
    }
    return escapeHtml(match);
  });
  return safe;
}
var init_sanitizeHtml = __esm({
  "src/utils/sanitizeHtml.ts"() {
    "use strict";
  }
});

// node_modules/devlop/lib/default.js
function ok() {
}
function unreachable() {
}
var init_default = __esm({
  "node_modules/devlop/lib/default.js"() {
  }
});

// node_modules/comma-separated-tokens/index.js
function stringify(values, options2) {
  const settings = options2 || {};
  const input = values[values.length - 1] === "" ? [...values, ""] : values;
  return input.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}
var init_comma_separated_tokens = __esm({
  "node_modules/comma-separated-tokens/index.js"() {
  }
});

// node_modules/estree-util-is-identifier-name/lib/index.js
function name(name2, options2) {
  const settings = options2 || emptyOptions;
  const re2 = settings.jsx ? nameReJsx : nameRe;
  return re2.test(name2);
}
var nameRe, nameReJsx, emptyOptions;
var init_lib = __esm({
  "node_modules/estree-util-is-identifier-name/lib/index.js"() {
    nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
    nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
    emptyOptions = {};
  }
});

// node_modules/estree-util-is-identifier-name/index.js
var init_estree_util_is_identifier_name = __esm({
  "node_modules/estree-util-is-identifier-name/index.js"() {
    init_lib();
  }
});

// node_modules/hast-util-whitespace/lib/index.js
function whitespace(thing) {
  return typeof thing === "object" ? thing.type === "text" ? empty(thing.value) : false : empty(thing);
}
function empty(value) {
  return value.replace(re, "") === "";
}
var re;
var init_lib2 = __esm({
  "node_modules/hast-util-whitespace/lib/index.js"() {
    re = /[ \t\n\f\r]/g;
  }
});

// node_modules/hast-util-whitespace/index.js
var init_hast_util_whitespace = __esm({
  "node_modules/hast-util-whitespace/index.js"() {
    init_lib2();
  }
});

// node_modules/property-information/lib/util/schema.js
var Schema;
var init_schema = __esm({
  "node_modules/property-information/lib/util/schema.js"() {
    Schema = class {
      /**
       * @param {SchemaType['property']} property
       *   Property.
       * @param {SchemaType['normal']} normal
       *   Normal.
       * @param {Space | undefined} [space]
       *   Space.
       * @returns
       *   Schema.
       */
      constructor(property, normal, space2) {
        this.normal = normal;
        this.property = property;
        if (space2) {
          this.space = space2;
        }
      }
    };
    Schema.prototype.normal = {};
    Schema.prototype.property = {};
    Schema.prototype.space = void 0;
  }
});

// node_modules/property-information/lib/util/merge.js
function merge3(definitions, space2) {
  const property = {};
  const normal = {};
  for (const definition2 of definitions) {
    Object.assign(property, definition2.property);
    Object.assign(normal, definition2.normal);
  }
  return new Schema(property, normal, space2);
}
var init_merge = __esm({
  "node_modules/property-information/lib/util/merge.js"() {
    init_schema();
  }
});

// node_modules/property-information/lib/normalize.js
function normalize2(value) {
  return value.toLowerCase();
}
var init_normalize = __esm({
  "node_modules/property-information/lib/normalize.js"() {
  }
});

// node_modules/property-information/lib/util/info.js
var Info;
var init_info = __esm({
  "node_modules/property-information/lib/util/info.js"() {
    Info = class {
      /**
       * @param {string} property
       *   Property.
       * @param {string} attribute
       *   Attribute.
       * @returns
       *   Info.
       */
      constructor(property, attribute) {
        this.attribute = attribute;
        this.property = property;
      }
    };
    Info.prototype.attribute = "";
    Info.prototype.booleanish = false;
    Info.prototype.boolean = false;
    Info.prototype.commaOrSpaceSeparated = false;
    Info.prototype.commaSeparated = false;
    Info.prototype.defined = false;
    Info.prototype.mustUseProperty = false;
    Info.prototype.number = false;
    Info.prototype.overloadedBoolean = false;
    Info.prototype.property = "";
    Info.prototype.spaceSeparated = false;
    Info.prototype.space = void 0;
  }
});

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean4,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number4,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
function increment() {
  return 2 ** ++powers;
}
var powers, boolean4, booleanish, overloadedBoolean, number4, spaceSeparated, commaSeparated, commaOrSpaceSeparated;
var init_types = __esm({
  "node_modules/property-information/lib/util/types.js"() {
    powers = 0;
    boolean4 = increment();
    booleanish = increment();
    overloadedBoolean = increment();
    number4 = increment();
    spaceSeparated = increment();
    commaSeparated = increment();
    commaOrSpaceSeparated = increment();
  }
});

// node_modules/property-information/lib/util/defined-info.js
function mark(values, key, value) {
  if (value) {
    values[key] = value;
  }
}
var checks, DefinedInfo;
var init_defined_info = __esm({
  "node_modules/property-information/lib/util/defined-info.js"() {
    init_info();
    init_types();
    checks = /** @type {ReadonlyArray<keyof typeof types>} */
    Object.keys(types_exports);
    DefinedInfo = class extends Info {
      /**
       * @constructor
       * @param {string} property
       *   Property.
       * @param {string} attribute
       *   Attribute.
       * @param {number | null | undefined} [mask]
       *   Mask.
       * @param {Space | undefined} [space]
       *   Space.
       * @returns
       *   Info.
       */
      constructor(property, attribute, mask, space2) {
        let index2 = -1;
        super(property, attribute);
        mark(this, "space", space2);
        if (typeof mask === "number") {
          while (++index2 < checks.length) {
            const check2 = checks[index2];
            mark(this, checks[index2], (mask & types_exports[check2]) === types_exports[check2]);
          }
        }
      }
    };
    DefinedInfo.prototype.defined = true;
  }
});

// node_modules/property-information/lib/util/create.js
function create2(definition2) {
  const properties = {};
  const normals = {};
  for (const [property, value] of Object.entries(definition2.properties)) {
    const info = new DefinedInfo(
      property,
      definition2.transform(definition2.attributes || {}, property),
      value,
      definition2.space
    );
    if (definition2.mustUseProperty && definition2.mustUseProperty.includes(property)) {
      info.mustUseProperty = true;
    }
    properties[property] = info;
    normals[normalize2(property)] = property;
    normals[normalize2(info.attribute)] = property;
  }
  return new Schema(properties, normals, definition2.space);
}
var init_create = __esm({
  "node_modules/property-information/lib/util/create.js"() {
    init_normalize();
    init_defined_info();
    init_schema();
  }
});

// node_modules/property-information/lib/aria.js
var aria;
var init_aria = __esm({
  "node_modules/property-information/lib/aria.js"() {
    init_create();
    init_types();
    aria = create2({
      properties: {
        ariaActiveDescendant: null,
        ariaAtomic: booleanish,
        ariaAutoComplete: null,
        ariaBusy: booleanish,
        ariaChecked: booleanish,
        ariaColCount: number4,
        ariaColIndex: number4,
        ariaColSpan: number4,
        ariaControls: spaceSeparated,
        ariaCurrent: null,
        ariaDescribedBy: spaceSeparated,
        ariaDetails: null,
        ariaDisabled: booleanish,
        ariaDropEffect: spaceSeparated,
        ariaErrorMessage: null,
        ariaExpanded: booleanish,
        ariaFlowTo: spaceSeparated,
        ariaGrabbed: booleanish,
        ariaHasPopup: null,
        ariaHidden: booleanish,
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: spaceSeparated,
        ariaLevel: number4,
        ariaLive: null,
        ariaModal: booleanish,
        ariaMultiLine: booleanish,
        ariaMultiSelectable: booleanish,
        ariaOrientation: null,
        ariaOwns: spaceSeparated,
        ariaPlaceholder: null,
        ariaPosInSet: number4,
        ariaPressed: booleanish,
        ariaReadOnly: booleanish,
        ariaRelevant: null,
        ariaRequired: booleanish,
        ariaRoleDescription: spaceSeparated,
        ariaRowCount: number4,
        ariaRowIndex: number4,
        ariaRowSpan: number4,
        ariaSelected: booleanish,
        ariaSetSize: number4,
        ariaSort: null,
        ariaValueMax: number4,
        ariaValueMin: number4,
        ariaValueNow: number4,
        ariaValueText: null,
        role: null
      },
      transform(_3, property) {
        return property === "role" ? property : "aria-" + property.slice(4).toLowerCase();
      }
    });
  }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}
var init_case_sensitive_transform = __esm({
  "node_modules/property-information/lib/util/case-sensitive-transform.js"() {
  }
});

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}
var init_case_insensitive_transform = __esm({
  "node_modules/property-information/lib/util/case-insensitive-transform.js"() {
    init_case_sensitive_transform();
  }
});

// node_modules/property-information/lib/html.js
var html;
var init_html = __esm({
  "node_modules/property-information/lib/html.js"() {
    init_case_insensitive_transform();
    init_create();
    init_types();
    html = create2({
      attributes: {
        acceptcharset: "accept-charset",
        classname: "class",
        htmlfor: "for",
        httpequiv: "http-equiv"
      },
      mustUseProperty: ["checked", "multiple", "muted", "selected"],
      properties: {
        // Standard Properties.
        abbr: null,
        accept: commaSeparated,
        acceptCharset: spaceSeparated,
        accessKey: spaceSeparated,
        action: null,
        allow: null,
        allowFullScreen: boolean4,
        allowPaymentRequest: boolean4,
        allowUserMedia: boolean4,
        alt: null,
        as: null,
        async: boolean4,
        autoCapitalize: null,
        autoComplete: spaceSeparated,
        autoFocus: boolean4,
        autoPlay: boolean4,
        blocking: spaceSeparated,
        capture: null,
        charSet: null,
        checked: boolean4,
        cite: null,
        className: spaceSeparated,
        cols: number4,
        colSpan: null,
        content: null,
        contentEditable: booleanish,
        controls: boolean4,
        controlsList: spaceSeparated,
        coords: number4 | commaSeparated,
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: boolean4,
        defer: boolean4,
        dir: null,
        dirName: null,
        disabled: boolean4,
        download: overloadedBoolean,
        draggable: booleanish,
        encType: null,
        enterKeyHint: null,
        fetchPriority: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: boolean4,
        formTarget: null,
        headers: spaceSeparated,
        height: number4,
        hidden: overloadedBoolean,
        high: number4,
        href: null,
        hrefLang: null,
        htmlFor: spaceSeparated,
        httpEquiv: spaceSeparated,
        id: null,
        imageSizes: null,
        imageSrcSet: null,
        inert: boolean4,
        inputMode: null,
        integrity: null,
        is: null,
        isMap: boolean4,
        itemId: null,
        itemProp: spaceSeparated,
        itemRef: spaceSeparated,
        itemScope: boolean4,
        itemType: spaceSeparated,
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: boolean4,
        low: number4,
        manifest: null,
        max: null,
        maxLength: number4,
        media: null,
        method: null,
        min: null,
        minLength: number4,
        multiple: boolean4,
        muted: boolean4,
        name: null,
        nonce: null,
        noModule: boolean4,
        noValidate: boolean4,
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforeMatch: null,
        onBeforePrint: null,
        onBeforeToggle: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextLost: null,
        onContextMenu: null,
        onContextRestored: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onScrollEnd: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: boolean4,
        optimum: number4,
        pattern: null,
        ping: spaceSeparated,
        placeholder: null,
        playsInline: boolean4,
        popover: null,
        popoverTarget: null,
        popoverTargetAction: null,
        poster: null,
        preload: null,
        readOnly: boolean4,
        referrerPolicy: null,
        rel: spaceSeparated,
        required: boolean4,
        reversed: boolean4,
        rows: number4,
        rowSpan: number4,
        sandbox: spaceSeparated,
        scope: null,
        scoped: boolean4,
        seamless: boolean4,
        selected: boolean4,
        shadowRootClonable: boolean4,
        shadowRootDelegatesFocus: boolean4,
        shadowRootMode: null,
        shape: null,
        size: number4,
        sizes: null,
        slot: null,
        span: number4,
        spellCheck: booleanish,
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: null,
        start: number4,
        step: null,
        style: null,
        tabIndex: number4,
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: boolean4,
        useMap: null,
        value: booleanish,
        width: number4,
        wrap: null,
        writingSuggestions: null,
        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null,
        // Several. Use CSS `text-align` instead,
        aLink: null,
        // `<body>`. Use CSS `a:active {color}` instead
        archive: spaceSeparated,
        // `<object>`. List of URIs to archives
        axis: null,
        // `<td>` and `<th>`. Use `scope` on `<th>`
        background: null,
        // `<body>`. Use CSS `background-image` instead
        bgColor: null,
        // `<body>` and table elements. Use CSS `background-color` instead
        border: number4,
        // `<table>`. Use CSS `border-width` instead,
        borderColor: null,
        // `<table>`. Use CSS `border-color` instead,
        bottomMargin: number4,
        // `<body>`
        cellPadding: null,
        // `<table>`
        cellSpacing: null,
        // `<table>`
        char: null,
        // Several table elements. When `align=char`, sets the character to align on
        charOff: null,
        // Several table elements. When `char`, offsets the alignment
        classId: null,
        // `<object>`
        clear: null,
        // `<br>`. Use CSS `clear` instead
        code: null,
        // `<object>`
        codeBase: null,
        // `<object>`
        codeType: null,
        // `<object>`
        color: null,
        // `<font>` and `<hr>`. Use CSS instead
        compact: boolean4,
        // Lists. Use CSS to reduce space between items instead
        declare: boolean4,
        // `<object>`
        event: null,
        // `<script>`
        face: null,
        // `<font>`. Use CSS instead
        frame: null,
        // `<table>`
        frameBorder: null,
        // `<iframe>`. Use CSS `border` instead
        hSpace: number4,
        // `<img>` and `<object>`
        leftMargin: number4,
        // `<body>`
        link: null,
        // `<body>`. Use CSS `a:link {color: *}` instead
        longDesc: null,
        // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
        lowSrc: null,
        // `<img>`. Use a `<picture>`
        marginHeight: number4,
        // `<body>`
        marginWidth: number4,
        // `<body>`
        noResize: boolean4,
        // `<frame>`
        noHref: boolean4,
        // `<area>`. Use no href instead of an explicit `nohref`
        noShade: boolean4,
        // `<hr>`. Use background-color and height instead of borders
        noWrap: boolean4,
        // `<td>` and `<th>`
        object: null,
        // `<applet>`
        profile: null,
        // `<head>`
        prompt: null,
        // `<isindex>`
        rev: null,
        // `<link>`
        rightMargin: number4,
        // `<body>`
        rules: null,
        // `<table>`
        scheme: null,
        // `<meta>`
        scrolling: booleanish,
        // `<frame>`. Use overflow in the child context
        standby: null,
        // `<object>`
        summary: null,
        // `<table>`
        text: null,
        // `<body>`. Use CSS `color` instead
        topMargin: number4,
        // `<body>`
        valueType: null,
        // `<param>`
        version: null,
        // `<html>`. Use a doctype.
        vAlign: null,
        // Several. Use CSS `vertical-align` instead
        vLink: null,
        // `<body>`. Use CSS `a:visited {color}` instead
        vSpace: number4,
        // `<img>` and `<object>`
        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: boolean4,
        disableRemotePlayback: boolean4,
        prefix: null,
        property: null,
        results: number4,
        security: null,
        unselectable: null
      },
      space: "html",
      transform: caseInsensitiveTransform
    });
  }
});

// node_modules/property-information/lib/svg.js
var svg;
var init_svg = __esm({
  "node_modules/property-information/lib/svg.js"() {
    init_case_sensitive_transform();
    init_create();
    init_types();
    svg = create2({
      attributes: {
        accentHeight: "accent-height",
        alignmentBaseline: "alignment-baseline",
        arabicForm: "arabic-form",
        baselineShift: "baseline-shift",
        capHeight: "cap-height",
        className: "class",
        clipPath: "clip-path",
        clipRule: "clip-rule",
        colorInterpolation: "color-interpolation",
        colorInterpolationFilters: "color-interpolation-filters",
        colorProfile: "color-profile",
        colorRendering: "color-rendering",
        crossOrigin: "crossorigin",
        dataType: "datatype",
        dominantBaseline: "dominant-baseline",
        enableBackground: "enable-background",
        fillOpacity: "fill-opacity",
        fillRule: "fill-rule",
        floodColor: "flood-color",
        floodOpacity: "flood-opacity",
        fontFamily: "font-family",
        fontSize: "font-size",
        fontSizeAdjust: "font-size-adjust",
        fontStretch: "font-stretch",
        fontStyle: "font-style",
        fontVariant: "font-variant",
        fontWeight: "font-weight",
        glyphName: "glyph-name",
        glyphOrientationHorizontal: "glyph-orientation-horizontal",
        glyphOrientationVertical: "glyph-orientation-vertical",
        hrefLang: "hreflang",
        horizAdvX: "horiz-adv-x",
        horizOriginX: "horiz-origin-x",
        horizOriginY: "horiz-origin-y",
        imageRendering: "image-rendering",
        letterSpacing: "letter-spacing",
        lightingColor: "lighting-color",
        markerEnd: "marker-end",
        markerMid: "marker-mid",
        markerStart: "marker-start",
        navDown: "nav-down",
        navDownLeft: "nav-down-left",
        navDownRight: "nav-down-right",
        navLeft: "nav-left",
        navNext: "nav-next",
        navPrev: "nav-prev",
        navRight: "nav-right",
        navUp: "nav-up",
        navUpLeft: "nav-up-left",
        navUpRight: "nav-up-right",
        onAbort: "onabort",
        onActivate: "onactivate",
        onAfterPrint: "onafterprint",
        onBeforePrint: "onbeforeprint",
        onBegin: "onbegin",
        onCancel: "oncancel",
        onCanPlay: "oncanplay",
        onCanPlayThrough: "oncanplaythrough",
        onChange: "onchange",
        onClick: "onclick",
        onClose: "onclose",
        onCopy: "oncopy",
        onCueChange: "oncuechange",
        onCut: "oncut",
        onDblClick: "ondblclick",
        onDrag: "ondrag",
        onDragEnd: "ondragend",
        onDragEnter: "ondragenter",
        onDragExit: "ondragexit",
        onDragLeave: "ondragleave",
        onDragOver: "ondragover",
        onDragStart: "ondragstart",
        onDrop: "ondrop",
        onDurationChange: "ondurationchange",
        onEmptied: "onemptied",
        onEnd: "onend",
        onEnded: "onended",
        onError: "onerror",
        onFocus: "onfocus",
        onFocusIn: "onfocusin",
        onFocusOut: "onfocusout",
        onHashChange: "onhashchange",
        onInput: "oninput",
        onInvalid: "oninvalid",
        onKeyDown: "onkeydown",
        onKeyPress: "onkeypress",
        onKeyUp: "onkeyup",
        onLoad: "onload",
        onLoadedData: "onloadeddata",
        onLoadedMetadata: "onloadedmetadata",
        onLoadStart: "onloadstart",
        onMessage: "onmessage",
        onMouseDown: "onmousedown",
        onMouseEnter: "onmouseenter",
        onMouseLeave: "onmouseleave",
        onMouseMove: "onmousemove",
        onMouseOut: "onmouseout",
        onMouseOver: "onmouseover",
        onMouseUp: "onmouseup",
        onMouseWheel: "onmousewheel",
        onOffline: "onoffline",
        onOnline: "ononline",
        onPageHide: "onpagehide",
        onPageShow: "onpageshow",
        onPaste: "onpaste",
        onPause: "onpause",
        onPlay: "onplay",
        onPlaying: "onplaying",
        onPopState: "onpopstate",
        onProgress: "onprogress",
        onRateChange: "onratechange",
        onRepeat: "onrepeat",
        onReset: "onreset",
        onResize: "onresize",
        onScroll: "onscroll",
        onSeeked: "onseeked",
        onSeeking: "onseeking",
        onSelect: "onselect",
        onShow: "onshow",
        onStalled: "onstalled",
        onStorage: "onstorage",
        onSubmit: "onsubmit",
        onSuspend: "onsuspend",
        onTimeUpdate: "ontimeupdate",
        onToggle: "ontoggle",
        onUnload: "onunload",
        onVolumeChange: "onvolumechange",
        onWaiting: "onwaiting",
        onZoom: "onzoom",
        overlinePosition: "overline-position",
        overlineThickness: "overline-thickness",
        paintOrder: "paint-order",
        panose1: "panose-1",
        pointerEvents: "pointer-events",
        referrerPolicy: "referrerpolicy",
        renderingIntent: "rendering-intent",
        shapeRendering: "shape-rendering",
        stopColor: "stop-color",
        stopOpacity: "stop-opacity",
        strikethroughPosition: "strikethrough-position",
        strikethroughThickness: "strikethrough-thickness",
        strokeDashArray: "stroke-dasharray",
        strokeDashOffset: "stroke-dashoffset",
        strokeLineCap: "stroke-linecap",
        strokeLineJoin: "stroke-linejoin",
        strokeMiterLimit: "stroke-miterlimit",
        strokeOpacity: "stroke-opacity",
        strokeWidth: "stroke-width",
        tabIndex: "tabindex",
        textAnchor: "text-anchor",
        textDecoration: "text-decoration",
        textRendering: "text-rendering",
        transformOrigin: "transform-origin",
        typeOf: "typeof",
        underlinePosition: "underline-position",
        underlineThickness: "underline-thickness",
        unicodeBidi: "unicode-bidi",
        unicodeRange: "unicode-range",
        unitsPerEm: "units-per-em",
        vAlphabetic: "v-alphabetic",
        vHanging: "v-hanging",
        vIdeographic: "v-ideographic",
        vMathematical: "v-mathematical",
        vectorEffect: "vector-effect",
        vertAdvY: "vert-adv-y",
        vertOriginX: "vert-origin-x",
        vertOriginY: "vert-origin-y",
        wordSpacing: "word-spacing",
        writingMode: "writing-mode",
        xHeight: "x-height",
        // These were camelcased in Tiny. Now lowercased in SVG 2
        playbackOrder: "playbackorder",
        timelineBegin: "timelinebegin"
      },
      properties: {
        about: commaOrSpaceSeparated,
        accentHeight: number4,
        accumulate: null,
        additive: null,
        alignmentBaseline: null,
        alphabetic: number4,
        amplitude: number4,
        arabicForm: null,
        ascent: number4,
        attributeName: null,
        attributeType: null,
        azimuth: number4,
        bandwidth: null,
        baselineShift: null,
        baseFrequency: null,
        baseProfile: null,
        bbox: null,
        begin: null,
        bias: number4,
        by: null,
        calcMode: null,
        capHeight: number4,
        className: spaceSeparated,
        clip: null,
        clipPath: null,
        clipPathUnits: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        colorProfile: null,
        colorRendering: null,
        content: null,
        contentScriptType: null,
        contentStyleType: null,
        crossOrigin: null,
        cursor: null,
        cx: null,
        cy: null,
        d: null,
        dataType: null,
        defaultAction: null,
        descent: number4,
        diffuseConstant: number4,
        direction: null,
        display: null,
        dur: null,
        divisor: number4,
        dominantBaseline: null,
        download: boolean4,
        dx: null,
        dy: null,
        edgeMode: null,
        editable: null,
        elevation: number4,
        enableBackground: null,
        end: null,
        event: null,
        exponent: number4,
        externalResourcesRequired: null,
        fill: null,
        fillOpacity: number4,
        fillRule: null,
        filter: null,
        filterRes: null,
        filterUnits: null,
        floodColor: null,
        floodOpacity: null,
        focusable: null,
        focusHighlight: null,
        fontFamily: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontVariant: null,
        fontWeight: null,
        format: null,
        fr: null,
        from: null,
        fx: null,
        fy: null,
        g1: commaSeparated,
        g2: commaSeparated,
        glyphName: commaSeparated,
        glyphOrientationHorizontal: null,
        glyphOrientationVertical: null,
        glyphRef: null,
        gradientTransform: null,
        gradientUnits: null,
        handler: null,
        hanging: number4,
        hatchContentUnits: null,
        hatchUnits: null,
        height: null,
        href: null,
        hrefLang: null,
        horizAdvX: number4,
        horizOriginX: number4,
        horizOriginY: number4,
        id: null,
        ideographic: number4,
        imageRendering: null,
        initialVisibility: null,
        in: null,
        in2: null,
        intercept: number4,
        k: number4,
        k1: number4,
        k2: number4,
        k3: number4,
        k4: number4,
        kernelMatrix: commaOrSpaceSeparated,
        kernelUnitLength: null,
        keyPoints: null,
        // SEMI_COLON_SEPARATED
        keySplines: null,
        // SEMI_COLON_SEPARATED
        keyTimes: null,
        // SEMI_COLON_SEPARATED
        kerning: null,
        lang: null,
        lengthAdjust: null,
        letterSpacing: null,
        lightingColor: null,
        limitingConeAngle: number4,
        local: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        markerHeight: null,
        markerUnits: null,
        markerWidth: null,
        mask: null,
        maskContentUnits: null,
        maskUnits: null,
        mathematical: null,
        max: null,
        media: null,
        mediaCharacterEncoding: null,
        mediaContentEncodings: null,
        mediaSize: number4,
        mediaTime: null,
        method: null,
        min: null,
        mode: null,
        name: null,
        navDown: null,
        navDownLeft: null,
        navDownRight: null,
        navLeft: null,
        navNext: null,
        navPrev: null,
        navRight: null,
        navUp: null,
        navUpLeft: null,
        navUpRight: null,
        numOctaves: null,
        observer: null,
        offset: null,
        onAbort: null,
        onActivate: null,
        onAfterPrint: null,
        onBeforePrint: null,
        onBegin: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnd: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFocusIn: null,
        onFocusOut: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadStart: null,
        onMessage: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onMouseWheel: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRepeat: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onShow: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onZoom: null,
        opacity: null,
        operator: null,
        order: null,
        orient: null,
        orientation: null,
        origin: null,
        overflow: null,
        overlay: null,
        overlinePosition: number4,
        overlineThickness: number4,
        paintOrder: null,
        panose1: null,
        path: null,
        pathLength: number4,
        patternContentUnits: null,
        patternTransform: null,
        patternUnits: null,
        phase: null,
        ping: spaceSeparated,
        pitch: null,
        playbackOrder: null,
        pointerEvents: null,
        points: null,
        pointsAtX: number4,
        pointsAtY: number4,
        pointsAtZ: number4,
        preserveAlpha: null,
        preserveAspectRatio: null,
        primitiveUnits: null,
        propagate: null,
        property: commaOrSpaceSeparated,
        r: null,
        radius: null,
        referrerPolicy: null,
        refX: null,
        refY: null,
        rel: commaOrSpaceSeparated,
        rev: commaOrSpaceSeparated,
        renderingIntent: null,
        repeatCount: null,
        repeatDur: null,
        requiredExtensions: commaOrSpaceSeparated,
        requiredFeatures: commaOrSpaceSeparated,
        requiredFonts: commaOrSpaceSeparated,
        requiredFormats: commaOrSpaceSeparated,
        resource: null,
        restart: null,
        result: null,
        rotate: null,
        rx: null,
        ry: null,
        scale: null,
        seed: null,
        shapeRendering: null,
        side: null,
        slope: null,
        snapshotTime: null,
        specularConstant: number4,
        specularExponent: number4,
        spreadMethod: null,
        spacing: null,
        startOffset: null,
        stdDeviation: null,
        stemh: null,
        stemv: null,
        stitchTiles: null,
        stopColor: null,
        stopOpacity: null,
        strikethroughPosition: number4,
        strikethroughThickness: number4,
        string: null,
        stroke: null,
        strokeDashArray: commaOrSpaceSeparated,
        strokeDashOffset: null,
        strokeLineCap: null,
        strokeLineJoin: null,
        strokeMiterLimit: number4,
        strokeOpacity: number4,
        strokeWidth: null,
        style: null,
        surfaceScale: number4,
        syncBehavior: null,
        syncBehaviorDefault: null,
        syncMaster: null,
        syncTolerance: null,
        syncToleranceDefault: null,
        systemLanguage: commaOrSpaceSeparated,
        tabIndex: number4,
        tableValues: null,
        target: null,
        targetX: number4,
        targetY: number4,
        textAnchor: null,
        textDecoration: null,
        textRendering: null,
        textLength: null,
        timelineBegin: null,
        title: null,
        transformBehavior: null,
        type: null,
        typeOf: commaOrSpaceSeparated,
        to: null,
        transform: null,
        transformOrigin: null,
        u1: null,
        u2: null,
        underlinePosition: number4,
        underlineThickness: number4,
        unicode: null,
        unicodeBidi: null,
        unicodeRange: null,
        unitsPerEm: number4,
        values: null,
        vAlphabetic: number4,
        vMathematical: number4,
        vectorEffect: null,
        vHanging: number4,
        vIdeographic: number4,
        version: null,
        vertAdvY: number4,
        vertOriginX: number4,
        vertOriginY: number4,
        viewBox: null,
        viewTarget: null,
        visibility: null,
        width: null,
        widths: null,
        wordSpacing: null,
        writingMode: null,
        x: null,
        x1: null,
        x2: null,
        xChannelSelector: null,
        xHeight: number4,
        y: null,
        y1: null,
        y2: null,
        yChannelSelector: null,
        z: null,
        zoomAndPan: null
      },
      space: "svg",
      transform: caseSensitiveTransform
    });
  }
});

// node_modules/property-information/lib/xlink.js
var xlink;
var init_xlink = __esm({
  "node_modules/property-information/lib/xlink.js"() {
    init_create();
    xlink = create2({
      properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
      },
      space: "xlink",
      transform(_3, property) {
        return "xlink:" + property.slice(5).toLowerCase();
      }
    });
  }
});

// node_modules/property-information/lib/xmlns.js
var xmlns;
var init_xmlns = __esm({
  "node_modules/property-information/lib/xmlns.js"() {
    init_create();
    init_case_insensitive_transform();
    xmlns = create2({
      attributes: { xmlnsxlink: "xmlns:xlink" },
      properties: { xmlnsXLink: null, xmlns: null },
      space: "xmlns",
      transform: caseInsensitiveTransform
    });
  }
});

// node_modules/property-information/lib/xml.js
var xml;
var init_xml = __esm({
  "node_modules/property-information/lib/xml.js"() {
    init_create();
    xml = create2({
      properties: { xmlBase: null, xmlLang: null, xmlSpace: null },
      space: "xml",
      transform(_3, property) {
        return "xml:" + property.slice(3).toLowerCase();
      }
    });
  }
});

// node_modules/property-information/lib/hast-to-react.js
var hastToReact;
var init_hast_to_react = __esm({
  "node_modules/property-information/lib/hast-to-react.js"() {
    hastToReact = {
      classId: "classID",
      dataType: "datatype",
      itemId: "itemID",
      strokeDashArray: "strokeDasharray",
      strokeDashOffset: "strokeDashoffset",
      strokeLineCap: "strokeLinecap",
      strokeLineJoin: "strokeLinejoin",
      strokeMiterLimit: "strokeMiterlimit",
      typeOf: "typeof",
      xLinkActuate: "xlinkActuate",
      xLinkArcRole: "xlinkArcrole",
      xLinkHref: "xlinkHref",
      xLinkRole: "xlinkRole",
      xLinkShow: "xlinkShow",
      xLinkTitle: "xlinkTitle",
      xLinkType: "xlinkType",
      xmlnsXLink: "xmlnsXlink"
    };
  }
});

// node_modules/property-information/lib/find.js
function find(schema, value) {
  const normal = normalize2(value);
  let property = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      property = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(property, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}
var cap, dash, valid;
var init_find = __esm({
  "node_modules/property-information/lib/find.js"() {
    init_defined_info();
    init_info();
    init_normalize();
    cap = /[A-Z]/g;
    dash = /-[a-z]/g;
    valid = /^data[-\w.:]+$/i;
  }
});

// node_modules/property-information/index.js
var html2, svg2;
var init_property_information = __esm({
  "node_modules/property-information/index.js"() {
    init_merge();
    init_aria();
    init_html();
    init_svg();
    init_xlink();
    init_xmlns();
    init_xml();
    init_hast_to_react();
    init_find();
    html2 = merge3([aria, html, xlink, xmlns, xml], "html");
    svg2 = merge3([aria, svg, xlink, xmlns, xml], "svg");
  }
});

// node_modules/space-separated-tokens/index.js
function stringify2(values) {
  return values.join(" ").trim();
}
var init_space_separated_tokens = __esm({
  "node_modules/space-separated-tokens/index.js"() {
  }
});

// node_modules/inline-style-parser/index.js
var require_inline_style_parser = __commonJS({
  "node_modules/inline-style-parser/index.js"(exports, module) {
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    module.exports = function(style, options2) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options2 = options2 || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i3 = str.lastIndexOf(NEWLINE);
        column = ~i3 ? str.length - i3 : column + str.length;
      }
      function position3() {
        var start2 = { line: lineno, column };
        return function(node2) {
          node2.position = new Position(start2);
          whitespace2();
          return node2;
        };
      }
      function Position(start2) {
        this.start = start2;
        this.end = { line: lineno, column };
        this.source = options2.source;
      }
      Position.prototype.content = style;
      var errorsList = [];
      function error44(msg) {
        var err = new Error(
          options2.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options2.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options2.silent) {
          errorsList.push(err);
        } else {
          throw err;
        }
      }
      function match(re2) {
        var m3 = re2.exec(style);
        if (!m3) return;
        var str = m3[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m3;
      }
      function whitespace2() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c3;
        rules = rules || [];
        while (c3 = comment()) {
          if (c3 !== false) {
            rules.push(c3);
          }
        }
        return rules;
      }
      function comment() {
        var pos = position3();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i3 = 2;
        while (EMPTY_STRING != style.charAt(i3) && (ASTERISK != style.charAt(i3) || FORWARD_SLASH != style.charAt(i3 + 1))) {
          ++i3;
        }
        i3 += 2;
        if (EMPTY_STRING === style.charAt(i3 - 1)) {
          return error44("End of comment missing");
        }
        var str = style.slice(2, i3 - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i3);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position3();
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        if (!match(COLON_REGEX)) return error44("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace2();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
  }
});

// node_modules/style-to-object/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/style-to-object/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = StyleToObject;
    var inline_style_parser_1 = __importDefault(require_inline_style_parser());
    function StyleToObject(style, iterator) {
      var styleObject = null;
      if (!style || typeof style !== "string") {
        return styleObject;
      }
      var declarations = (0, inline_style_parser_1.default)(style);
      var hasIterator = typeof iterator === "function";
      declarations.forEach(function(declaration) {
        if (declaration.type !== "declaration") {
          return;
        }
        var property = declaration.property, value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          styleObject = styleObject || {};
          styleObject[property] = value;
        }
      });
      return styleObject;
    }
  }
});

// node_modules/style-to-js/cjs/utilities.js
var require_utilities = __commonJS({
  "node_modules/style-to-js/cjs/utilities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.camelCase = void 0;
    var CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;
    var HYPHEN_REGEX = /-([a-z])/g;
    var NO_HYPHEN_REGEX = /^[^-]+$/;
    var VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;
    var MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;
    var skipCamelCase = function(property) {
      return !property || NO_HYPHEN_REGEX.test(property) || CUSTOM_PROPERTY_REGEX.test(property);
    };
    var capitalize = function(match, character) {
      return character.toUpperCase();
    };
    var trimHyphen = function(match, prefix) {
      return "".concat(prefix, "-");
    };
    var camelCase = function(property, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      if (skipCamelCase(property)) {
        return property;
      }
      property = property.toLowerCase();
      if (options2.reactCompat) {
        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);
      } else {
        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);
      }
      return property.replace(HYPHEN_REGEX, capitalize);
    };
    exports.camelCase = camelCase;
  }
});

// node_modules/style-to-js/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/style-to-js/cjs/index.js"(exports, module) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var style_to_object_1 = __importDefault(require_cjs());
    var utilities_1 = require_utilities();
    function StyleToJS(style, options2) {
      var output = {};
      if (!style || typeof style !== "string") {
        return output;
      }
      (0, style_to_object_1.default)(style, function(property, value) {
        if (property && value) {
          output[(0, utilities_1.camelCase)(property, options2)] = value;
        }
      });
      return output;
    }
    StyleToJS.default = StyleToJS;
    module.exports = StyleToJS;
  }
});

// node_modules/unist-util-position/lib/index.js
function point(type) {
  return point4;
  function point4(node2) {
    const point5 = node2 && node2.position && node2.position[type] || {};
    if (typeof point5.line === "number" && point5.line > 0 && typeof point5.column === "number" && point5.column > 0) {
      return {
        line: point5.line,
        column: point5.column,
        offset: typeof point5.offset === "number" && point5.offset > -1 ? point5.offset : void 0
      };
    }
  }
}
function position(node2) {
  const start2 = pointStart(node2);
  const end = pointEnd(node2);
  if (start2 && end) {
    return { start: start2, end };
  }
}
var pointEnd, pointStart;
var init_lib3 = __esm({
  "node_modules/unist-util-position/lib/index.js"() {
    pointEnd = point("end");
    pointStart = point("start");
  }
});

// node_modules/unist-util-position/index.js
var init_unist_util_position = __esm({
  "node_modules/unist-util-position/index.js"() {
    init_lib3();
  }
});

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position2(value.position);
  }
  if ("start" in value || "end" in value) {
    return position2(value);
  }
  if ("line" in value || "column" in value) {
    return point2(value);
  }
  return "";
}
function point2(point4) {
  return index(point4 && point4.line) + ":" + index(point4 && point4.column);
}
function position2(pos) {
  return point2(pos && pos.start) + "-" + point2(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}
var init_lib4 = __esm({
  "node_modules/unist-util-stringify-position/lib/index.js"() {
  }
});

// node_modules/unist-util-stringify-position/index.js
var init_unist_util_stringify_position = __esm({
  "node_modules/unist-util-stringify-position/index.js"() {
    init_lib4();
  }
});

// node_modules/vfile-message/lib/index.js
var VFileMessage;
var init_lib5 = __esm({
  "node_modules/vfile-message/lib/index.js"() {
    init_unist_util_stringify_position();
    VFileMessage = class extends Error {
      /**
       * Create a message for `reason`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {Options | null | undefined} [options]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns
       *   Instance of `VFileMessage`.
       */
      // eslint-disable-next-line complexity
      constructor(causeOrReason, optionsOrParentOrPlace, origin) {
        super();
        if (typeof optionsOrParentOrPlace === "string") {
          origin = optionsOrParentOrPlace;
          optionsOrParentOrPlace = void 0;
        }
        let reason = "";
        let options2 = {};
        let legacyCause = false;
        if (optionsOrParentOrPlace) {
          if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
            options2 = { place: optionsOrParentOrPlace };
          } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
            options2 = { place: optionsOrParentOrPlace };
          } else if ("type" in optionsOrParentOrPlace) {
            options2 = {
              ancestors: [optionsOrParentOrPlace],
              place: optionsOrParentOrPlace.position
            };
          } else {
            options2 = { ...optionsOrParentOrPlace };
          }
        }
        if (typeof causeOrReason === "string") {
          reason = causeOrReason;
        } else if (!options2.cause && causeOrReason) {
          legacyCause = true;
          reason = causeOrReason.message;
          options2.cause = causeOrReason;
        }
        if (!options2.ruleId && !options2.source && typeof origin === "string") {
          const index2 = origin.indexOf(":");
          if (index2 === -1) {
            options2.ruleId = origin;
          } else {
            options2.source = origin.slice(0, index2);
            options2.ruleId = origin.slice(index2 + 1);
          }
        }
        if (!options2.place && options2.ancestors && options2.ancestors) {
          const parent = options2.ancestors[options2.ancestors.length - 1];
          if (parent) {
            options2.place = parent.position;
          }
        }
        const start2 = options2.place && "start" in options2.place ? options2.place.start : options2.place;
        this.ancestors = options2.ancestors || void 0;
        this.cause = options2.cause || void 0;
        this.column = start2 ? start2.column : void 0;
        this.fatal = void 0;
        this.file = "";
        this.message = reason;
        this.line = start2 ? start2.line : void 0;
        this.name = stringifyPosition(options2.place) || "1:1";
        this.place = options2.place || void 0;
        this.reason = this.message;
        this.ruleId = options2.ruleId || void 0;
        this.source = options2.source || void 0;
        this.stack = legacyCause && options2.cause && typeof options2.cause.stack === "string" ? options2.cause.stack : "";
        this.actual = void 0;
        this.expected = void 0;
        this.note = void 0;
        this.url = void 0;
      }
    };
    VFileMessage.prototype.file = "";
    VFileMessage.prototype.name = "";
    VFileMessage.prototype.reason = "";
    VFileMessage.prototype.message = "";
    VFileMessage.prototype.stack = "";
    VFileMessage.prototype.column = void 0;
    VFileMessage.prototype.line = void 0;
    VFileMessage.prototype.ancestors = void 0;
    VFileMessage.prototype.cause = void 0;
    VFileMessage.prototype.fatal = void 0;
    VFileMessage.prototype.place = void 0;
    VFileMessage.prototype.ruleId = void 0;
    VFileMessage.prototype.source = void 0;
  }
});

// node_modules/vfile-message/index.js
var init_vfile_message = __esm({
  "node_modules/vfile-message/index.js"() {
    init_lib5();
  }
});

// node_modules/hast-util-to-jsx-runtime/lib/index.js
function toJsxRuntime(tree, options2) {
  if (!options2 || options2.Fragment === void 0) {
    throw new TypeError("Expected `Fragment` in options");
  }
  const filePath = options2.filePath || void 0;
  let create3;
  if (options2.development) {
    if (typeof options2.jsxDEV !== "function") {
      throw new TypeError(
        "Expected `jsxDEV` in options when `development: true`"
      );
    }
    create3 = developmentCreate(filePath, options2.jsxDEV);
  } else {
    if (typeof options2.jsx !== "function") {
      throw new TypeError("Expected `jsx` in production options");
    }
    if (typeof options2.jsxs !== "function") {
      throw new TypeError("Expected `jsxs` in production options");
    }
    create3 = productionCreate(filePath, options2.jsx, options2.jsxs);
  }
  const state = {
    Fragment: options2.Fragment,
    ancestors: [],
    components: options2.components || {},
    create: create3,
    elementAttributeNameCase: options2.elementAttributeNameCase || "react",
    evaluater: options2.createEvaluater ? options2.createEvaluater() : void 0,
    filePath,
    ignoreInvalidStyle: options2.ignoreInvalidStyle || false,
    passKeys: options2.passKeys !== false,
    passNode: options2.passNode || false,
    schema: options2.space === "svg" ? svg2 : html2,
    stylePropertyNameCase: options2.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: options2.tableCellAlignToStyle !== false
  };
  const result = one(state, tree, void 0);
  if (result && typeof result !== "string") {
    return result;
  }
  return state.create(
    tree,
    state.Fragment,
    { children: result || void 0 },
    void 0
  );
}
function one(state, node2, key) {
  if (node2.type === "element") {
    return element(state, node2, key);
  }
  if (node2.type === "mdxFlowExpression" || node2.type === "mdxTextExpression") {
    return mdxExpression(state, node2);
  }
  if (node2.type === "mdxJsxFlowElement" || node2.type === "mdxJsxTextElement") {
    return mdxJsxElement(state, node2, key);
  }
  if (node2.type === "mdxjsEsm") {
    return mdxEsm(state, node2);
  }
  if (node2.type === "root") {
    return root(state, node2, key);
  }
  if (node2.type === "text") {
    return text(state, node2);
  }
}
function element(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.tagName.toLowerCase() === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = findComponentFromName(state, node2.tagName, false);
  const props = createElementProps(state, node2);
  let children = createChildren(state, node2);
  if (tableElements.has(node2.tagName)) {
    children = children.filter(function(child) {
      return typeof child === "string" ? !whitespace(child) : true;
    });
  }
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function mdxExpression(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    const program = node2.data.estree;
    const expression = program.body[0];
    ok(expression.type === "ExpressionStatement");
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateExpression(expression.expression)
    );
  }
  crashEstree(state, node2.position);
}
function mdxEsm(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateProgram(node2.data.estree)
    );
  }
  crashEstree(state, node2.position);
}
function mdxJsxElement(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.name === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = node2.name === null ? state.Fragment : findComponentFromName(state, node2.name, true);
  const props = createJsxElementProps(state, node2);
  const children = createChildren(state, node2);
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function root(state, node2, key) {
  const props = {};
  addChildren(props, createChildren(state, node2));
  return state.create(node2, state.Fragment, props, key);
}
function text(_3, node2) {
  return node2.value;
}
function addNode(state, props, type, node2) {
  if (typeof type !== "string" && type !== state.Fragment && state.passNode) {
    props.node = node2;
  }
}
function addChildren(props, children) {
  if (children.length > 0) {
    const value = children.length > 1 ? children : children[0];
    if (value) {
      props.children = value;
    }
  }
}
function productionCreate(_3, jsx88, jsxs70) {
  return create3;
  function create3(_4, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const fn = isStaticChildren ? jsxs70 : jsx88;
    return key ? fn(type, props, key) : fn(type, props);
  }
}
function developmentCreate(filePath, jsxDEV) {
  return create3;
  function create3(node2, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const point4 = pointStart(node2);
    return jsxDEV(
      type,
      props,
      key,
      isStaticChildren,
      {
        columnNumber: point4 ? point4.column - 1 : void 0,
        fileName: filePath,
        lineNumber: point4 ? point4.line : void 0
      },
      void 0
    );
  }
}
function createElementProps(state, node2) {
  const props = {};
  let alignValue;
  let prop;
  for (prop in node2.properties) {
    if (prop !== "children" && own.call(node2.properties, prop)) {
      const result = createProperty(state, prop, node2.properties[prop]);
      if (result) {
        const [key, value] = result;
        if (state.tableCellAlignToStyle && key === "align" && typeof value === "string" && tableCellElement.has(node2.tagName)) {
          alignValue = value;
        } else {
          props[key] = value;
        }
      }
    }
  }
  if (alignValue) {
    const style = (
      /** @type {Style} */
      props.style || (props.style = {})
    );
    style[state.stylePropertyNameCase === "css" ? "text-align" : "textAlign"] = alignValue;
  }
  return props;
}
function createJsxElementProps(state, node2) {
  const props = {};
  for (const attribute of node2.attributes) {
    if (attribute.type === "mdxJsxExpressionAttribute") {
      if (attribute.data && attribute.data.estree && state.evaluater) {
        const program = attribute.data.estree;
        const expression = program.body[0];
        ok(expression.type === "ExpressionStatement");
        const objectExpression = expression.expression;
        ok(objectExpression.type === "ObjectExpression");
        const property = objectExpression.properties[0];
        ok(property.type === "SpreadElement");
        Object.assign(
          props,
          state.evaluater.evaluateExpression(property.argument)
        );
      } else {
        crashEstree(state, node2.position);
      }
    } else {
      const name2 = attribute.name;
      let value;
      if (attribute.value && typeof attribute.value === "object") {
        if (attribute.value.data && attribute.value.data.estree && state.evaluater) {
          const program = attribute.value.data.estree;
          const expression = program.body[0];
          ok(expression.type === "ExpressionStatement");
          value = state.evaluater.evaluateExpression(expression.expression);
        } else {
          crashEstree(state, node2.position);
        }
      } else {
        value = attribute.value === null ? true : attribute.value;
      }
      props[name2] = /** @type {Props[keyof Props]} */
      value;
    }
  }
  return props;
}
function createChildren(state, node2) {
  const children = [];
  let index2 = -1;
  const countsByName = state.passKeys ? /* @__PURE__ */ new Map() : emptyMap;
  while (++index2 < node2.children.length) {
    const child = node2.children[index2];
    let key;
    if (state.passKeys) {
      const name2 = child.type === "element" ? child.tagName : child.type === "mdxJsxFlowElement" || child.type === "mdxJsxTextElement" ? child.name : void 0;
      if (name2) {
        const count = countsByName.get(name2) || 0;
        key = name2 + "-" + count;
        countsByName.set(name2, count + 1);
      }
    }
    const result = one(state, child, key);
    if (result !== void 0) children.push(result);
  }
  return children;
}
function createProperty(state, prop, value) {
  const info = find(state.schema, prop);
  if (value === null || value === void 0 || typeof value === "number" && Number.isNaN(value)) {
    return;
  }
  if (Array.isArray(value)) {
    value = info.commaSeparated ? stringify(value) : stringify2(value);
  }
  if (info.property === "style") {
    let styleObject = typeof value === "object" ? value : parseStyle(state, String(value));
    if (state.stylePropertyNameCase === "css") {
      styleObject = transformStylesToCssCasing(styleObject);
    }
    return ["style", styleObject];
  }
  return [
    state.elementAttributeNameCase === "react" && info.space ? hastToReact[info.property] || info.property : info.attribute,
    value
  ];
}
function parseStyle(state, value) {
  try {
    return (0, import_style_to_js.default)(value, { reactCompat: true });
  } catch (error44) {
    if (state.ignoreInvalidStyle) {
      return {};
    }
    const cause = (
      /** @type {Error} */
      error44
    );
    const message = new VFileMessage("Cannot parse `style` attribute", {
      ancestors: state.ancestors,
      cause,
      ruleId: "style",
      source: "hast-util-to-jsx-runtime"
    });
    message.file = state.filePath || void 0;
    message.url = docs + "#cannot-parse-style-attribute";
    throw message;
  }
}
function findComponentFromName(state, name2, allowExpression) {
  let result;
  if (!allowExpression) {
    result = { type: "Literal", value: name2 };
  } else if (name2.includes(".")) {
    const identifiers = name2.split(".");
    let index2 = -1;
    let node2;
    while (++index2 < identifiers.length) {
      const prop = name(identifiers[index2]) ? { type: "Identifier", name: identifiers[index2] } : { type: "Literal", value: identifiers[index2] };
      node2 = node2 ? {
        type: "MemberExpression",
        object: node2,
        property: prop,
        computed: Boolean(index2 && prop.type === "Literal"),
        optional: false
      } : prop;
    }
    ok(node2, "always a result");
    result = node2;
  } else {
    result = name(name2) && !/^[a-z]/.test(name2) ? { type: "Identifier", name: name2 } : { type: "Literal", value: name2 };
  }
  if (result.type === "Literal") {
    const name3 = (
      /** @type {string | number} */
      result.value
    );
    return own.call(state.components, name3) ? state.components[name3] : name3;
  }
  if (state.evaluater) {
    return state.evaluater.evaluateExpression(result);
  }
  crashEstree(state);
}
function crashEstree(state, place) {
  const message = new VFileMessage(
    "Cannot handle MDX estrees without `createEvaluater`",
    {
      ancestors: state.ancestors,
      place,
      ruleId: "mdx-estree",
      source: "hast-util-to-jsx-runtime"
    }
  );
  message.file = state.filePath || void 0;
  message.url = docs + "#cannot-handle-mdx-estrees-without-createevaluater";
  throw message;
}
function transformStylesToCssCasing(domCasing) {
  const cssCasing = {};
  let from;
  for (from in domCasing) {
    if (own.call(domCasing, from)) {
      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
    }
  }
  return cssCasing;
}
function transformStyleToCssCasing(from) {
  let to = from.replace(cap2, toDash);
  if (to.slice(0, 3) === "ms-") to = "-" + to;
  return to;
}
function toDash($0) {
  return "-" + $0.toLowerCase();
}
var import_style_to_js, own, emptyMap, cap2, tableElements, tableCellElement, docs;
var init_lib6 = __esm({
  "node_modules/hast-util-to-jsx-runtime/lib/index.js"() {
    init_comma_separated_tokens();
    init_default();
    init_estree_util_is_identifier_name();
    init_hast_util_whitespace();
    init_property_information();
    init_space_separated_tokens();
    import_style_to_js = __toESM(require_cjs2(), 1);
    init_unist_util_position();
    init_vfile_message();
    own = {}.hasOwnProperty;
    emptyMap = /* @__PURE__ */ new Map();
    cap2 = /[A-Z]/g;
    tableElements = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]);
    tableCellElement = /* @__PURE__ */ new Set(["td", "th"]);
    docs = "https://github.com/syntax-tree/hast-util-to-jsx-runtime";
  }
});

// node_modules/hast-util-to-jsx-runtime/index.js
var init_hast_util_to_jsx_runtime = __esm({
  "node_modules/hast-util-to-jsx-runtime/index.js"() {
    init_lib6();
  }
});

// node_modules/html-url-attributes/lib/index.js
var urlAttributes;
var init_lib7 = __esm({
  "node_modules/html-url-attributes/lib/index.js"() {
    urlAttributes = {
      action: ["form"],
      cite: ["blockquote", "del", "ins", "q"],
      data: ["object"],
      formAction: ["button", "input"],
      href: ["a", "area", "base", "link"],
      icon: ["menuitem"],
      itemId: null,
      manifest: ["html"],
      ping: ["a", "area"],
      poster: ["video"],
      src: [
        "audio",
        "embed",
        "iframe",
        "img",
        "input",
        "script",
        "source",
        "track",
        "video"
      ]
    };
  }
});

// node_modules/html-url-attributes/index.js
var init_html_url_attributes = __esm({
  "node_modules/html-url-attributes/index.js"() {
    init_lib7();
  }
});

// node_modules/mdast-util-to-string/lib/index.js
function toString(value, options2) {
  const settings = options2 || emptyOptions2;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one2(value, includeImageAlt, includeHtml);
}
function one2(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values, includeImageAlt, includeHtml) {
  const result = [];
  let index2 = -1;
  while (++index2 < values.length) {
    result[index2] = one2(values[index2], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}
var emptyOptions2;
var init_lib8 = __esm({
  "node_modules/mdast-util-to-string/lib/index.js"() {
    emptyOptions2 = {};
  }
});

// node_modules/mdast-util-to-string/index.js
var init_mdast_util_to_string = __esm({
  "node_modules/mdast-util-to-string/index.js"() {
    init_lib8();
  }
});

// node_modules/decode-named-character-reference/index.dom.js
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element2.innerHTML = characterReference2;
  const character = element2.textContent;
  if (
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    character.charCodeAt(character.length - 1) === 59 && value !== "semi"
  ) {
    return false;
  }
  return character === characterReference2 ? false : character;
}
var element2;
var init_index_dom = __esm({
  "node_modules/decode-named-character-reference/index.dom.js"() {
    element2 = document.createElement("i");
  }
});

// node_modules/micromark-util-chunked/index.js
function splice(list3, start2, remove, items) {
  const end = list3.length;
  let chunkStart = 0;
  let parameters;
  if (start2 < 0) {
    start2 = -start2 > end ? 0 : end + start2;
  } else {
    start2 = start2 > end ? end : start2;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < 1e4) {
    parameters = Array.from(items);
    parameters.unshift(start2, remove);
    list3.splice(...parameters);
  } else {
    if (remove) list3.splice(start2, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 1e4);
      parameters.unshift(start2, 0);
      list3.splice(...parameters);
      chunkStart += 1e4;
      start2 += 1e4;
    }
  }
}
function push(list3, items) {
  if (list3.length > 0) {
    splice(list3, list3.length, 0, items);
    return list3;
  }
  return items;
}
var init_micromark_util_chunked = __esm({
  "node_modules/micromark-util-chunked/index.js"() {
  }
});

// node_modules/micromark-util-combine-extensions/index.js
function combineExtensions(extensions) {
  const all2 = {};
  let index2 = -1;
  while (++index2 < extensions.length) {
    syntaxExtension(all2, extensions[index2]);
  }
  return all2;
}
function syntaxExtension(all2, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
    const left = maybe || (all2[hook] = {});
    const right = extension2[hook];
    let code2;
    if (right) {
      for (code2 in right) {
        if (!hasOwnProperty.call(left, code2)) left[code2] = [];
        const value = right[code2];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code2],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list3) {
  let index2 = -1;
  const before = [];
  while (++index2 < list3.length) {
    ;
    (list3[index2].add === "after" ? existing : before).push(list3[index2]);
  }
  splice(existing, 0, 0, before);
}
var hasOwnProperty;
var init_micromark_util_combine_extensions = __esm({
  "node_modules/micromark-util-combine-extensions/index.js"() {
    init_micromark_util_chunked();
    hasOwnProperty = {}.hasOwnProperty;
  }
});

// node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base) {
  const code2 = Number.parseInt(value, base);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code2 < 9 || code2 === 11 || code2 > 13 && code2 < 32 || // Control character (DEL) of C0, and C1 controls.
    code2 > 126 && code2 < 160 || // Lone high surrogates and low surrogates.
    code2 > 55295 && code2 < 57344 || // Noncharacters.
    code2 > 64975 && code2 < 65008 || /* eslint-disable no-bitwise */
    (code2 & 65535) === 65535 || (code2 & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code2 > 1114111
  ) {
    return "\uFFFD";
  }
  return String.fromCodePoint(code2);
}
var init_micromark_util_decode_numeric_character_reference = __esm({
  "node_modules/micromark-util-decode-numeric-character-reference/index.js"() {
  }
});

// node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
var init_micromark_util_normalize_identifier = __esm({
  "node_modules/micromark-util-normalize-identifier/index.js"() {
  }
});

// node_modules/micromark-util-character/index.js
function asciiControl(code2) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code2 !== null && (code2 < 32 || code2 === 127)
  );
}
function markdownLineEnding(code2) {
  return code2 !== null && code2 < -2;
}
function markdownLineEndingOrSpace(code2) {
  return code2 !== null && (code2 < 0 || code2 === 32);
}
function markdownSpace(code2) {
  return code2 === -2 || code2 === -1 || code2 === 32;
}
function regexCheck(regex) {
  return check2;
  function check2(code2) {
    return code2 !== null && code2 > -1 && regex.test(String.fromCharCode(code2));
  }
}
var asciiAlpha, asciiAlphanumeric, asciiAtext, asciiDigit, asciiHexDigit, asciiPunctuation, unicodePunctuation, unicodeWhitespace;
var init_micromark_util_character = __esm({
  "node_modules/micromark-util-character/index.js"() {
    asciiAlpha = regexCheck(/[A-Za-z]/);
    asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
    asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
    asciiDigit = regexCheck(/\d/);
    asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
    asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
    unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
    unicodeWhitespace = regexCheck(/\s/);
  }
});

// node_modules/micromark-util-sanitize-uri/index.js
function normalizeUri(value) {
  const result = [];
  let index2 = -1;
  let start2 = 0;
  let skip = 0;
  while (++index2 < value.length) {
    const code2 = value.charCodeAt(index2);
    let replace2 = "";
    if (code2 === 37 && asciiAlphanumeric(value.charCodeAt(index2 + 1)) && asciiAlphanumeric(value.charCodeAt(index2 + 2))) {
      skip = 2;
    } else if (code2 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code2))) {
        replace2 = String.fromCharCode(code2);
      }
    } else if (code2 > 55295 && code2 < 57344) {
      const next = value.charCodeAt(index2 + 1);
      if (code2 < 56320 && next > 56319 && next < 57344) {
        replace2 = String.fromCharCode(code2, next);
        skip = 1;
      } else {
        replace2 = "\uFFFD";
      }
    } else {
      replace2 = String.fromCharCode(code2);
    }
    if (replace2) {
      result.push(value.slice(start2, index2), encodeURIComponent(replace2));
      start2 = index2 + skip + 1;
      replace2 = "";
    }
    if (skip) {
      index2 += skip;
      skip = 0;
    }
  }
  return result.join("") + value.slice(start2);
}
var init_micromark_util_sanitize_uri = __esm({
  "node_modules/micromark-util-sanitize-uri/index.js"() {
    init_micromark_util_character();
  }
});

// node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok3, type, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start2;
  function start2(code2) {
    if (markdownSpace(code2)) {
      effects.enter(type);
      return prefix(code2);
    }
    return ok3(code2);
  }
  function prefix(code2) {
    if (markdownSpace(code2) && size++ < limit) {
      effects.consume(code2);
      return prefix;
    }
    effects.exit(type);
    return ok3(code2);
  }
}
var init_micromark_factory_space = __esm({
  "node_modules/micromark-factory-space/index.js"() {
    init_micromark_util_character();
  }
});

// node_modules/micromark/lib/initialize/content.js
function initializeContent(effects) {
  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  let previous2;
  return contentStart;
  function afterContentStartConstruct(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }
  function paragraphInitial(code2) {
    effects.enter("paragraph");
    return lineStart(code2);
  }
  function lineStart(code2) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous2
    });
    if (previous2) {
      previous2.next = token;
    }
    previous2 = token;
    return data2(code2);
  }
  function data2(code2) {
    if (code2 === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code2);
      return;
    }
    if (markdownLineEnding(code2)) {
      effects.consume(code2);
      effects.exit("chunkText");
      return lineStart;
    }
    effects.consume(code2);
    return data2;
  }
}
var content;
var init_content = __esm({
  "node_modules/micromark/lib/initialize/content.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    content = {
      tokenize: initializeContent
    };
  }
});

// node_modules/micromark/lib/initialize/document.js
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start2;
  function start2(code2) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code2);
    }
    return checkNewContainers(code2);
  }
  function documentContinue(code2) {
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          point4 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);
      let index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = {
          ...point4
        };
        index2++;
      }
      splice(self2.events, indexBeforeFlow + 1, 0, self2.events.slice(indexBeforeExits));
      self2.events.length = index2;
      return checkNewContainers(code2);
    }
    return start2(code2);
  }
  function checkNewContainers(code2) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code2);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code2);
      }
      self2.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    }
    self2.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code2);
  }
  function thereIsANewContainer(code2) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code2);
  }
  function thereIsNoNewContainer(code2) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code2);
  }
  function documentContinued(code2) {
    self2.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code2);
  }
  function containerContinue(code2) {
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code2);
  }
  function flowStart(code2) {
    if (code2 === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code2);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter("chunkFlow", {
      _tokenizer: childFlow,
      contentType: "flow",
      previous: childToken
    });
    return flowContinue(code2);
  }
  function flowContinue(code2) {
    if (code2 === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code2);
      return;
    }
    if (markdownLineEnding(code2)) {
      effects.consume(code2);
      writeToChild(effects.exit("chunkFlow"));
      continued = 0;
      self2.interrupt = void 0;
      return start2;
    }
    effects.consume(code2);
    return flowContinue;
  }
  function writeToChild(token, endOfFile) {
    const stream = self2.sliceStream(token);
    if (endOfFile) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);
    if (self2.parser.lazy[token.start.line]) {
      let index2 = childFlow.events.length;
      while (index2--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index2][1].end || // …or ends after it.
          childFlow.events[index2][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point4 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);
      index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = {
          ...point4
        };
        index2++;
      }
      splice(self2.events, indexBeforeFlow + 1, 0, self2.events.slice(indexBeforeExits));
      self2.events.length = index2;
    }
  }
  function exitContainers(size) {
    let index2 = stack.length;
    while (index2-- > size) {
      const entry = stack[index2];
      self2.containerState = entry[1];
      entry[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok3, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}
var document2, containerConstruct;
var init_document = __esm({
  "node_modules/micromark/lib/initialize/document.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    init_micromark_util_chunked();
    document2 = {
      tokenize: initializeDocument
    };
    containerConstruct = {
      tokenize: tokenizeContainer
    };
  }
});

// node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code2) {
  if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
    return 1;
  }
  if (unicodePunctuation(code2)) {
    return 2;
  }
}
var init_micromark_util_classify_character = __esm({
  "node_modules/micromark-util-classify-character/index.js"() {
    init_micromark_util_character();
  }
});

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index2 = -1;
  while (++index2 < constructs2.length) {
    const resolve = constructs2[index2].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}
var init_micromark_util_resolve_all = __esm({
  "node_modules/micromark-util-resolve-all/index.js"() {
  }
});

// node_modules/micromark-core-commonmark/lib/attention.js
function resolveAllAttention(events, context) {
  let index2 = -1;
  let open;
  let group;
  let text5;
  let openingSequence;
  let closingSequence;
  let use2;
  let nextEvents;
  let offset;
  while (++index2 < events.length) {
    if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
      open = index2;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
            continue;
          }
          use2 = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
          const start2 = {
            ...events[open][1].end
          };
          const end = {
            ...events[index2][1].start
          };
          movePoint(start2, -use2);
          movePoint(end, use2);
          openingSequence = {
            type: use2 > 1 ? "strongSequence" : "emphasisSequence",
            start: start2,
            end: {
              ...events[open][1].end
            }
          };
          closingSequence = {
            type: use2 > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...events[index2][1].start
            },
            end
          };
          text5 = {
            type: use2 > 1 ? "strongText" : "emphasisText",
            start: {
              ...events[open][1].end
            },
            end: {
              ...events[index2][1].start
            }
          };
          group = {
            type: use2 > 1 ? "strong" : "emphasis",
            start: {
              ...openingSequence.start
            },
            end: {
              ...closingSequence.end
            }
          };
          events[open][1].end = {
            ...openingSequence.start
          };
          events[index2][1].start = {
            ...closingSequence.end
          };
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [["enter", events[open][1], context], ["exit", events[open][1], context]]);
          }
          nextEvents = push(nextEvents, [["enter", group, context], ["enter", openingSequence, context], ["exit", openingSequence, context], ["enter", text5, context]]);
          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
          nextEvents = push(nextEvents, [["exit", text5, context], ["enter", closingSequence, context], ["exit", closingSequence, context], ["exit", group, context]]);
          if (events[index2][1].end.offset - events[index2][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [["enter", events[index2][1], context], ["exit", events[index2][1], context]]);
          } else {
            offset = 0;
          }
          splice(events, open - 1, index2 - open + 3, nextEvents);
          index2 = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }
  index2 = -1;
  while (++index2 < events.length) {
    if (events[index2][1].type === "attentionSequence") {
      events[index2][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous2 = this.previous;
  const before = classifyCharacter(previous2);
  let marker;
  return start2;
  function start2(code2) {
    marker = code2;
    effects.enter("attentionSequence");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code2);
    const open = !after || after === 2 && before || attentionMarkers2.includes(code2);
    const close2 = !before || before === 2 && after || attentionMarkers2.includes(previous2);
    token._open = Boolean(marker === 42 ? open : open && (before || !close2));
    token._close = Boolean(marker === 42 ? close2 : close2 && (after || !open));
    return ok3(code2);
  }
}
function movePoint(point4, offset) {
  point4.column += offset;
  point4.offset += offset;
  point4._bufferIndex += offset;
}
var attention;
var init_attention = __esm({
  "node_modules/micromark-core-commonmark/lib/attention.js"() {
    init_micromark_util_chunked();
    init_micromark_util_classify_character();
    init_micromark_util_resolve_all();
    attention = {
      name: "attention",
      resolveAll: resolveAllAttention,
      tokenize: tokenizeAttention
    };
  }
});

// node_modules/micromark-core-commonmark/lib/autolink.js
function tokenizeAutolink(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code2) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code2);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }
  function open(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return schemeOrEmailAtext;
    }
    if (code2 === 64) {
      return nok(code2);
    }
    return emailAtext(code2);
  }
  function schemeOrEmailAtext(code2) {
    if (code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) {
      size = 1;
      return schemeInsideOrEmailAtext(code2);
    }
    return emailAtext(code2);
  }
  function schemeInsideOrEmailAtext(code2) {
    if (code2 === 58) {
      effects.consume(code2);
      size = 0;
      return urlInside;
    }
    if ((code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) && size++ < 32) {
      effects.consume(code2);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code2);
  }
  function urlInside(code2) {
    if (code2 === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    if (code2 === null || code2 === 32 || code2 === 60 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return urlInside;
  }
  function emailAtext(code2) {
    if (code2 === 64) {
      effects.consume(code2);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code2)) {
      effects.consume(code2);
      return emailAtext;
    }
    return nok(code2);
  }
  function emailAtSignOrDot(code2) {
    return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
  }
  function emailLabel(code2) {
    if (code2 === 46) {
      effects.consume(code2);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code2 === 62) {
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    return emailValue(code2);
  }
  function emailValue(code2) {
    if ((code2 === 45 || asciiAlphanumeric(code2)) && size++ < 63) {
      const next = code2 === 45 ? emailValue : emailLabel;
      effects.consume(code2);
      return next;
    }
    return nok(code2);
  }
}
var autolink;
var init_autolink = __esm({
  "node_modules/micromark-core-commonmark/lib/autolink.js"() {
    init_micromark_util_character();
    autolink = {
      name: "autolink",
      tokenize: tokenizeAutolink
    };
  }
});

// node_modules/micromark-core-commonmark/lib/blank-line.js
function tokenizeBlankLine(effects, ok3, nok) {
  return start2;
  function start2(code2) {
    return markdownSpace(code2) ? factorySpace(effects, after, "linePrefix")(code2) : after(code2);
  }
  function after(code2) {
    return code2 === null || markdownLineEnding(code2) ? ok3(code2) : nok(code2);
  }
}
var blankLine;
var init_blank_line = __esm({
  "node_modules/micromark-core-commonmark/lib/blank-line.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    blankLine = {
      partial: true,
      tokenize: tokenizeBlankLine
    };
  }
});

// node_modules/micromark-core-commonmark/lib/block-quote.js
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    if (code2 === 62) {
      const state = self2.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code2);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    if (markdownSpace(code2)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code2);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok3;
    }
    effects.exit("blockQuotePrefix");
    return ok3(code2);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  const self2 = this;
  return contStart;
  function contStart(code2) {
    if (markdownSpace(code2)) {
      return factorySpace(effects, contBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2);
    }
    return contBefore(code2);
  }
  function contBefore(code2) {
    return effects.attempt(blockQuote, ok3, nok)(code2);
  }
}
function exit(effects) {
  effects.exit("blockQuote");
}
var blockQuote;
var init_block_quote = __esm({
  "node_modules/micromark-core-commonmark/lib/block-quote.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    blockQuote = {
      continuation: {
        tokenize: tokenizeBlockQuoteContinuation
      },
      exit,
      name: "blockQuote",
      tokenize: tokenizeBlockQuoteStart
    };
  }
});

// node_modules/micromark-core-commonmark/lib/character-escape.js
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start2;
  function start2(code2) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code2);
    effects.exit("escapeMarker");
    return inside;
  }
  function inside(code2) {
    if (asciiPunctuation(code2)) {
      effects.enter("characterEscapeValue");
      effects.consume(code2);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok3;
    }
    return nok(code2);
  }
}
var characterEscape;
var init_character_escape = __esm({
  "node_modules/micromark-core-commonmark/lib/character-escape.js"() {
    init_micromark_util_character();
    characterEscape = {
      name: "characterEscape",
      tokenize: tokenizeCharacterEscape
    };
  }
});

// node_modules/micromark-core-commonmark/lib/character-reference.js
function tokenizeCharacterReference(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let max;
  let test;
  return start2;
  function start2(code2) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code2);
    effects.exit("characterReferenceMarker");
    return open;
  }
  function open(code2) {
    if (code2 === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code2);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max = 31;
    test = asciiAlphanumeric;
    return value(code2);
  }
  function numeric(code2) {
    if (code2 === 88 || code2 === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code2);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max = 6;
      test = asciiHexDigit;
      return value;
    }
    effects.enter("characterReferenceValue");
    max = 7;
    test = asciiDigit;
    return value(code2);
  }
  function value(code2) {
    if (code2 === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code2);
      }
      effects.enter("characterReferenceMarker");
      effects.consume(code2);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok3;
    }
    if (test(code2) && size++ < max) {
      effects.consume(code2);
      return value;
    }
    return nok(code2);
  }
}
var characterReference;
var init_character_reference = __esm({
  "node_modules/micromark-core-commonmark/lib/character-reference.js"() {
    init_index_dom();
    init_micromark_util_character();
    characterReference = {
      name: "characterReference",
      tokenize: tokenizeCharacterReference
    };
  }
});

// node_modules/micromark-core-commonmark/lib/code-fenced.js
function tokenizeCodeFenced(effects, ok3, nok) {
  const self2 = this;
  const closeStart = {
    partial: true,
    tokenize: tokenizeCloseStart
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start2;
  function start2(code2) {
    return beforeSequenceOpen(code2);
  }
  function beforeSequenceOpen(code2) {
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code2;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === marker) {
      sizeOpen++;
      effects.consume(code2);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code2);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code2) ? factorySpace(effects, infoBefore, "whitespace")(code2) : infoBefore(code2);
  }
  function infoBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFencedFence");
      return self2.interrupt ? ok3(code2) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code2);
  }
  function info(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code2);
    }
    if (code2 === 96 && code2 === marker) {
      return nok(code2);
    }
    effects.consume(code2);
    return info;
  }
  function metaBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return infoBefore(code2);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code2);
  }
  function meta(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code2);
    }
    if (code2 === 96 && code2 === marker) {
      return nok(code2);
    }
    effects.consume(code2);
    return meta;
  }
  function atNonLazyBreak(code2) {
    return effects.attempt(closeStart, after, contentBefore)(code2);
  }
  function contentBefore(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return contentStart;
  }
  function contentStart(code2) {
    return initialPrefix > 0 && markdownSpace(code2) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code2) : beforeContentChunk(code2);
  }
  function beforeContentChunk(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code2);
  }
  function contentChunk(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code2);
    }
    effects.consume(code2);
    return contentChunk;
  }
  function after(code2) {
    effects.exit("codeFenced");
    return ok3(code2);
  }
  function tokenizeCloseStart(effects2, ok4, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code2) {
      effects2.enter("lineEnding");
      effects2.consume(code2);
      effects2.exit("lineEnding");
      return start3;
    }
    function start3(code2) {
      effects2.enter("codeFencedFence");
      return markdownSpace(code2) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2) : beforeSequenceClose(code2);
    }
    function beforeSequenceClose(code2) {
      if (code2 === marker) {
        effects2.enter("codeFencedFenceSequence");
        return sequenceClose(code2);
      }
      return nok2(code2);
    }
    function sequenceClose(code2) {
      if (code2 === marker) {
        size++;
        effects2.consume(code2);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit("codeFencedFenceSequence");
        return markdownSpace(code2) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2) : sequenceCloseAfter(code2);
      }
      return nok2(code2);
    }
    function sequenceCloseAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects2.exit("codeFencedFence");
        return ok4(code2);
      }
      return nok2(code2);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return lineStart;
  }
  function lineStart(code2) {
    return self2.parser.lazy[self2.now().line] ? nok(code2) : ok3(code2);
  }
}
var nonLazyContinuation, codeFenced;
var init_code_fenced = __esm({
  "node_modules/micromark-core-commonmark/lib/code-fenced.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    nonLazyContinuation = {
      partial: true,
      tokenize: tokenizeNonLazyContinuation
    };
    codeFenced = {
      concrete: true,
      name: "codeFenced",
      tokenize: tokenizeCodeFenced
    };
  }
});

// node_modules/micromark-core-commonmark/lib/code-indented.js
function tokenizeCodeIndented(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    effects.enter("codeIndented");
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
  }
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code2) : nok(code2);
  }
  function atBreak(code2) {
    if (code2 === null) {
      return after(code2);
    }
    if (markdownLineEnding(code2)) {
      return effects.attempt(furtherStart, atBreak, after)(code2);
    }
    effects.enter("codeFlowValue");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("codeFlowValue");
      return atBreak(code2);
    }
    effects.consume(code2);
    return inside;
  }
  function after(code2) {
    effects.exit("codeIndented");
    return ok3(code2);
  }
}
function tokenizeFurtherStart(effects, ok3, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code2) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return furtherStart2;
    }
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
  }
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok3(code2) : markdownLineEnding(code2) ? furtherStart2(code2) : nok(code2);
  }
}
var codeIndented, furtherStart;
var init_code_indented = __esm({
  "node_modules/micromark-core-commonmark/lib/code-indented.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    codeIndented = {
      name: "codeIndented",
      tokenize: tokenizeCodeIndented
    };
    furtherStart = {
      partial: true,
      tokenize: tokenizeFurtherStart
    };
  }
});

// node_modules/micromark-core-commonmark/lib/code-text.js
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index2;
  let enter;
  if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
    index2 = headEnterIndex;
    while (++index2 < tailExitIndex) {
      if (events[index2][1].type === "codeTextData") {
        events[headEnterIndex][1].type = "codeTextPadding";
        events[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index2 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index2 <= tailExitIndex) {
    if (enter === void 0) {
      if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
        enter = index2;
      }
    } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
      events[enter][1].type = "codeTextData";
      if (index2 !== enter + 2) {
        events[enter][1].end = events[index2 - 1][1].end;
        events.splice(enter + 2, index2 - enter - 2);
        tailExitIndex -= index2 - enter - 2;
        index2 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code2) {
  return code2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok3, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start2;
  function start2(code2) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === 96) {
      effects.consume(code2);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between(code2);
  }
  function between(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 32) {
      effects.enter("space");
      effects.consume(code2);
      effects.exit("space");
      return between;
    }
    if (code2 === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return between;
    }
    effects.enter("codeTextData");
    return data2(code2);
  }
  function data2(code2) {
    if (code2 === null || code2 === 32 || code2 === 96 || markdownLineEnding(code2)) {
      effects.exit("codeTextData");
      return between(code2);
    }
    effects.consume(code2);
    return data2;
  }
  function sequenceClose(code2) {
    if (code2 === 96) {
      effects.consume(code2);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok3(code2);
    }
    token.type = "codeTextData";
    return data2(code2);
  }
}
var codeText;
var init_code_text = __esm({
  "node_modules/micromark-core-commonmark/lib/code-text.js"() {
    init_micromark_util_character();
    codeText = {
      name: "codeText",
      previous,
      resolve: resolveCodeText,
      tokenize: tokenizeCodeText
    };
  }
});

// node_modules/micromark-util-subtokenize/lib/splice-buffer.js
function chunkedPush(list3, right) {
  let chunkStart = 0;
  if (right.length < 1e4) {
    list3.push(...right);
  } else {
    while (chunkStart < right.length) {
      list3.push(...right.slice(chunkStart, chunkStart + 1e4));
      chunkStart += 1e4;
    }
  }
}
var SpliceBuffer;
var init_splice_buffer = __esm({
  "node_modules/micromark-util-subtokenize/lib/splice-buffer.js"() {
    SpliceBuffer = class {
      /**
       * @param {ReadonlyArray<T> | null | undefined} [initial]
       *   Initial items (optional).
       * @returns
       *   Splice buffer.
       */
      constructor(initial) {
        this.left = initial ? [...initial] : [];
        this.right = [];
      }
      /**
       * Array access;
       * does not move the cursor.
       *
       * @param {number} index
       *   Index.
       * @return {T}
       *   Item.
       */
      get(index2) {
        if (index2 < 0 || index2 >= this.left.length + this.right.length) {
          throw new RangeError("Cannot access index `" + index2 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
        }
        if (index2 < this.left.length) return this.left[index2];
        return this.right[this.right.length - index2 + this.left.length - 1];
      }
      /**
       * The length of the splice buffer, one greater than the largest index in the
       * array.
       */
      get length() {
        return this.left.length + this.right.length;
      }
      /**
       * Remove and return `list[0]`;
       * moves the cursor to `0`.
       *
       * @returns {T | undefined}
       *   Item, optional.
       */
      shift() {
        this.setCursor(0);
        return this.right.pop();
      }
      /**
       * Slice the buffer to get an array;
       * does not move the cursor.
       *
       * @param {number} start
       *   Start.
       * @param {number | null | undefined} [end]
       *   End (optional).
       * @returns {Array<T>}
       *   Array of items.
       */
      slice(start2, end) {
        const stop = end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
        if (stop < this.left.length) {
          return this.left.slice(start2, stop);
        }
        if (start2 > this.left.length) {
          return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start2 + this.left.length).reverse();
        }
        return this.left.slice(start2).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
      }
      /**
       * Mimics the behavior of Array.prototype.splice() except for the change of
       * interface necessary to avoid segfaults when patching in very large arrays.
       *
       * This operation moves cursor is moved to `start` and results in the cursor
       * placed after any inserted items.
       *
       * @param {number} start
       *   Start;
       *   zero-based index at which to start changing the array;
       *   negative numbers count backwards from the end of the array and values
       *   that are out-of bounds are clamped to the appropriate end of the array.
       * @param {number | null | undefined} [deleteCount=0]
       *   Delete count (default: `0`);
       *   maximum number of elements to delete, starting from start.
       * @param {Array<T> | null | undefined} [items=[]]
       *   Items to include in place of the deleted items (default: `[]`).
       * @return {Array<T>}
       *   Any removed items.
       */
      splice(start2, deleteCount, items) {
        const count = deleteCount || 0;
        this.setCursor(Math.trunc(start2));
        const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
        if (items) chunkedPush(this.left, items);
        return removed.reverse();
      }
      /**
       * Remove and return the highest-numbered item in the array, so
       * `list[list.length - 1]`;
       * Moves the cursor to `length`.
       *
       * @returns {T | undefined}
       *   Item, optional.
       */
      pop() {
        this.setCursor(Number.POSITIVE_INFINITY);
        return this.left.pop();
      }
      /**
       * Inserts a single item to the high-numbered side of the array;
       * moves the cursor to `length`.
       *
       * @param {T} item
       *   Item.
       * @returns {undefined}
       *   Nothing.
       */
      push(item) {
        this.setCursor(Number.POSITIVE_INFINITY);
        this.left.push(item);
      }
      /**
       * Inserts many items to the high-numbered side of the array.
       * Moves the cursor to `length`.
       *
       * @param {Array<T>} items
       *   Items.
       * @returns {undefined}
       *   Nothing.
       */
      pushMany(items) {
        this.setCursor(Number.POSITIVE_INFINITY);
        chunkedPush(this.left, items);
      }
      /**
       * Inserts a single item to the low-numbered side of the array;
       * Moves the cursor to `0`.
       *
       * @param {T} item
       *   Item.
       * @returns {undefined}
       *   Nothing.
       */
      unshift(item) {
        this.setCursor(0);
        this.right.push(item);
      }
      /**
       * Inserts many items to the low-numbered side of the array;
       * moves the cursor to `0`.
       *
       * @param {Array<T>} items
       *   Items.
       * @returns {undefined}
       *   Nothing.
       */
      unshiftMany(items) {
        this.setCursor(0);
        chunkedPush(this.right, items.reverse());
      }
      /**
       * Move the cursor to a specific position in the array. Requires
       * time proportional to the distance moved.
       *
       * If `n < 0`, the cursor will end up at the beginning.
       * If `n > length`, the cursor will end up at the end.
       *
       * @param {number} n
       *   Position.
       * @return {undefined}
       *   Nothing.
       */
      setCursor(n3) {
        if (n3 === this.left.length || n3 > this.left.length && this.right.length === 0 || n3 < 0 && this.left.length === 0) return;
        if (n3 < this.left.length) {
          const removed = this.left.splice(n3, Number.POSITIVE_INFINITY);
          chunkedPush(this.right, removed.reverse());
        } else {
          const removed = this.right.splice(this.left.length + this.right.length - n3, Number.POSITIVE_INFINITY);
          chunkedPush(this.left, removed.reverse());
        }
      }
    };
  }
});

// node_modules/micromark-util-subtokenize/index.js
function subtokenize(eventsArray) {
  const jumps = {};
  let index2 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index2 < events.length) {
    while (index2 in jumps) {
      index2 = jumps[index2];
    }
    event = events.get(index2);
    if (index2 && event[1].type === "chunkFlow" && events.get(index2 - 1)[1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index2));
        index2 = jumps[index2];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index2;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events.get(lineIndex)[1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else if (otherEvent[1].type === "linePrefix" || otherEvent[1].type === "listItemIndent") {
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = {
          ...events.get(lineIndex)[1].start
        };
        parameters = events.slice(lineIndex, index2);
        parameters.unshift(event);
        events.splice(lineIndex, index2 - lineIndex + 1, parameters);
      }
    }
  }
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  let tokenizer = token._tokenizer;
  if (!tokenizer) {
    tokenizer = context.parser[token.contentType](token.start);
    if (token._contentTypeTextTrailing) {
      tokenizer._contentTypeTextTrailing = true;
    }
  }
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous2;
  let index2 = -1;
  let current = token;
  let adjust = 0;
  let start2 = 0;
  const breaks = [start2];
  while (current) {
    while (events.get(++startPosition)[1] !== current) {
    }
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(null);
      }
      if (previous2) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous2 = current;
    current = current.next;
  }
  current = token;
  while (++index2 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
    ) {
      start2 = index2 + 1;
      breaks.push(start2);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
  } else {
    breaks.pop();
  }
  index2 = breaks.length;
  while (index2--) {
    const slice2 = childEvents.slice(breaks[index2], breaks[index2 + 1]);
    const start3 = startPositions.pop();
    jumps.push([start3, start3 + slice2.length - 1]);
    events.splice(start3, 2, slice2);
  }
  jumps.reverse();
  index2 = -1;
  while (++index2 < jumps.length) {
    gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
    adjust += jumps[index2][1] - jumps[index2][0] - 1;
  }
  return gaps;
}
var init_micromark_util_subtokenize = __esm({
  "node_modules/micromark-util-subtokenize/index.js"() {
    init_micromark_util_chunked();
    init_splice_buffer();
  }
});

// node_modules/micromark-core-commonmark/lib/content.js
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous2;
  return chunkStart;
  function chunkStart(code2) {
    effects.enter("content");
    previous2 = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code2);
  }
  function chunkInside(code2) {
    if (code2 === null) {
      return contentEnd(code2);
    }
    if (markdownLineEnding(code2)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code2);
    }
    effects.consume(code2);
    return chunkInside;
  }
  function contentEnd(code2) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok3(code2);
  }
  function contentContinue(code2) {
    effects.consume(code2);
    effects.exit("chunkContent");
    previous2.next = effects.enter("chunkContent", {
      contentType: "content",
      previous: previous2
    });
    previous2 = previous2.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code2) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }
  function prefixed(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return nok(code2);
    }
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok3(code2);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code2);
  }
}
var content2, continuationConstruct;
var init_content2 = __esm({
  "node_modules/micromark-core-commonmark/lib/content.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    init_micromark_util_subtokenize();
    content2 = {
      resolve: resolveContent,
      tokenize: tokenizeContent
    };
    continuationConstruct = {
      partial: true,
      tokenize: tokenizeContinuation
    };
  }
});

// node_modules/micromark-factory-destination/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start2;
  function start2(code2) {
    if (code2 === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code2);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code2 === null || code2 === 32 || code2 === 41 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code2);
  }
  function enclosedBefore(code2) {
    if (code2 === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code2);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code2);
  }
  function enclosed(code2) {
    if (code2 === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code2);
    }
    if (code2 === null || code2 === 60 || markdownLineEnding(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code2) {
    if (code2 === 60 || code2 === 62 || code2 === 92) {
      effects.consume(code2);
      return enclosed;
    }
    return enclosed(code2);
  }
  function raw(code2) {
    if (!balance && (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code2);
    }
    if (balance < limit && code2 === 40) {
      effects.consume(code2);
      balance++;
      return raw;
    }
    if (code2 === 41) {
      effects.consume(code2);
      balance--;
      return raw;
    }
    if (code2 === null || code2 === 32 || code2 === 40 || asciiControl(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? rawEscape : raw;
  }
  function rawEscape(code2) {
    if (code2 === 40 || code2 === 41 || code2 === 92) {
      effects.consume(code2);
      return raw;
    }
    return raw(code2);
  }
}
var init_micromark_factory_destination = __esm({
  "node_modules/micromark-factory-destination/index.js"() {
    init_micromark_util_character();
  }
});

// node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start2;
  function start2(code2) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code2);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code2) {
    if (size > 999 || code2 === null || code2 === 91 || code2 === 93 && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code2 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code2);
  }
  function labelInside(code2) {
    if (code2 === null || code2 === 91 || code2 === 93 || markdownLineEnding(code2) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code2);
    }
    effects.consume(code2);
    if (!seen) seen = !markdownSpace(code2);
    return code2 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code2) {
    if (code2 === 91 || code2 === 92 || code2 === 93) {
      effects.consume(code2);
      size++;
      return labelInside;
    }
    return labelInside(code2);
  }
}
var init_micromark_factory_label = __esm({
  "node_modules/micromark-factory-label/index.js"() {
    init_micromark_util_character();
  }
});

// node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start2;
  function start2(code2) {
    if (code2 === 34 || code2 === 39 || code2 === 40) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      marker = code2 === 40 ? 41 : code2;
      return begin;
    }
    return nok(code2);
  }
  function begin(code2) {
    if (code2 === marker) {
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atBreak(code2);
  }
  function atBreak(code2) {
    if (code2 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code2 === null) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
      effects.exit("chunkString");
      return atBreak(code2);
    }
    effects.consume(code2);
    return code2 === 92 ? escape2 : inside;
  }
  function escape2(code2) {
    if (code2 === marker || code2 === 92) {
      effects.consume(code2);
      return inside;
    }
    return inside(code2);
  }
}
var init_micromark_factory_title = __esm({
  "node_modules/micromark-factory-title/index.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
  }
});

// node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start2;
  function start2(code2) {
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      seen = true;
      return start2;
    }
    if (markdownSpace(code2)) {
      return factorySpace(effects, start2, seen ? "linePrefix" : "lineSuffix")(code2);
    }
    return ok3(code2);
  }
}
var init_micromark_factory_whitespace = __esm({
  "node_modules/micromark-factory-whitespace/index.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
  }
});

// node_modules/micromark-core-commonmark/lib/definition.js
function tokenizeDefinition(effects, ok3, nok) {
  const self2 = this;
  let identifier;
  return start2;
  function start2(code2) {
    effects.enter("definition");
    return before(code2);
  }
  function before(code2) {
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(code2);
  }
  function labelAfter(code2) {
    identifier = normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1));
    if (code2 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code2);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code2);
  }
  function markerAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, destinationBefore)(code2) : destinationBefore(code2);
  }
  function destinationBefore(code2) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(code2);
  }
  function destinationAfter(code2) {
    return effects.attempt(titleBefore, after, after)(code2);
  }
  function after(code2) {
    return markdownSpace(code2) ? factorySpace(effects, afterWhitespace, "whitespace")(code2) : afterWhitespace(code2);
  }
  function afterWhitespace(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("definition");
      self2.parser.defined.push(identifier);
      return ok3(code2);
    }
    return nok(code2);
  }
}
function tokenizeTitleBefore(effects, ok3, nok) {
  return titleBefore2;
  function titleBefore2(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, beforeMarker)(code2) : nok(code2);
  }
  function beforeMarker(code2) {
    return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code2);
  }
  function titleAfter(code2) {
    return markdownSpace(code2) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code2) : titleAfterOptionalWhitespace(code2);
  }
  function titleAfterOptionalWhitespace(code2) {
    return code2 === null || markdownLineEnding(code2) ? ok3(code2) : nok(code2);
  }
}
var definition, titleBefore;
var init_definition = __esm({
  "node_modules/micromark-core-commonmark/lib/definition.js"() {
    init_micromark_factory_destination();
    init_micromark_factory_label();
    init_micromark_factory_space();
    init_micromark_factory_title();
    init_micromark_factory_whitespace();
    init_micromark_util_character();
    init_micromark_util_normalize_identifier();
    definition = {
      name: "definition",
      tokenize: tokenizeDefinition
    };
    titleBefore = {
      partial: true,
      tokenize: tokenizeTitleBefore
    };
  }
});

// node_modules/micromark-core-commonmark/lib/hard-break-escape.js
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start2;
  function start2(code2) {
    effects.enter("hardBreakEscape");
    effects.consume(code2);
    return after;
  }
  function after(code2) {
    if (markdownLineEnding(code2)) {
      effects.exit("hardBreakEscape");
      return ok3(code2);
    }
    return nok(code2);
  }
}
var hardBreakEscape;
var init_hard_break_escape = __esm({
  "node_modules/micromark-core-commonmark/lib/hard-break-escape.js"() {
    init_micromark_util_character();
    hardBreakEscape = {
      name: "hardBreakEscape",
      tokenize: tokenizeHardBreakEscape
    };
  }
});

// node_modules/micromark-core-commonmark/lib/heading-atx.js
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text5;
  if (events[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: "atxHeadingText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text5 = {
      type: "chunkText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: "text"
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [["enter", content3, context], ["enter", text5, context], ["exit", text5, context], ["exit", content3, context]]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code2) {
    effects.enter("atxHeading");
    return before(code2);
  }
  function before(code2) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code2);
  }
  function sequenceOpen(code2) {
    if (code2 === 35 && size++ < 6) {
      effects.consume(code2);
      return sequenceOpen;
    }
    if (code2 === null || markdownLineEndingOrSpace(code2)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code2);
    }
    return nok(code2);
  }
  function atBreak(code2) {
    if (code2 === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("atxHeading");
      return ok3(code2);
    }
    if (markdownSpace(code2)) {
      return factorySpace(effects, atBreak, "whitespace")(code2);
    }
    effects.enter("atxHeadingText");
    return data2(code2);
  }
  function sequenceFurther(code2) {
    if (code2 === 35) {
      effects.consume(code2);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code2);
  }
  function data2(code2) {
    if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
      effects.exit("atxHeadingText");
      return atBreak(code2);
    }
    effects.consume(code2);
    return data2;
  }
}
var headingAtx;
var init_heading_atx = __esm({
  "node_modules/micromark-core-commonmark/lib/heading-atx.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    init_micromark_util_chunked();
    headingAtx = {
      name: "headingAtx",
      resolve: resolveHeadingAtx,
      tokenize: tokenizeHeadingAtx
    };
  }
});

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames, htmlRawNames;
var init_micromark_util_html_tag_name = __esm({
  "node_modules/micromark-util-html-tag-name/index.js"() {
    htmlBlockNames = [
      "address",
      "article",
      "aside",
      "base",
      "basefont",
      "blockquote",
      "body",
      "caption",
      "center",
      "col",
      "colgroup",
      "dd",
      "details",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "legend",
      "li",
      "link",
      "main",
      "menu",
      "menuitem",
      "nav",
      "noframes",
      "ol",
      "optgroup",
      "option",
      "p",
      "param",
      "search",
      "section",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "title",
      "tr",
      "track",
      "ul"
    ];
    htmlRawNames = ["pre", "script", "style", "textarea"];
  }
});

// node_modules/micromark-core-commonmark/lib/html-flow.js
function resolveToHtmlFlow(events) {
  let index2 = events.length;
  while (index2--) {
    if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
      break;
    }
  }
  if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
    events[index2][1].start = events[index2 - 2][1].start;
    events[index2 + 1][1].start = events[index2 - 2][1].start;
    events.splice(index2 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer;
  let index2;
  let markerB;
  return start2;
  function start2(code2) {
    return before(code2);
  }
  function before(code2) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code2);
    return open;
  }
  function open(code2) {
    if (code2 === 33) {
      effects.consume(code2);
      return declarationOpen;
    }
    if (code2 === 47) {
      effects.consume(code2);
      closingTag = true;
      return tagCloseStart;
    }
    if (code2 === 63) {
      effects.consume(code2);
      marker = 3;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      buffer = String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function declarationOpen(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      marker = 2;
      return commentOpenInside;
    }
    if (code2 === 91) {
      effects.consume(code2);
      marker = 5;
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      marker = 4;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code2);
  }
  function commentOpenInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code2);
  }
  function cdataOpenInside(code2) {
    const value = "CDATA[";
    if (code2 === value.charCodeAt(index2++)) {
      effects.consume(code2);
      if (index2 === value.length) {
        return self2.interrupt ? ok3 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code2);
  }
  function tagCloseStart(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      buffer = String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function tagName(code2) {
    if (code2 === null || code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      const slash = code2 === 47;
      const name2 = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name2)) {
        marker = 1;
        return self2.interrupt ? ok3(code2) : continuation(code2);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = 6;
        if (slash) {
          effects.consume(code2);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok3(code2) : continuation(code2);
      }
      marker = 7;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code2) : closingTag ? completeClosingTagAfter(code2) : completeAttributeNameBefore(code2);
    }
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      buffer += String.fromCharCode(code2);
      return tagName;
    }
    return nok(code2);
  }
  function basicSelfClosing(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return self2.interrupt ? ok3 : continuation;
    }
    return nok(code2);
  }
  function completeClosingTagAfter(code2) {
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeClosingTagAfter;
    }
    return completeEnd(code2);
  }
  function completeAttributeNameBefore(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      return completeEnd;
    }
    if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
      effects.consume(code2);
      return completeAttributeName;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeNameBefore;
    }
    return completeEnd(code2);
  }
  function completeAttributeName(code2) {
    if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code2);
  }
  function completeAttributeNameAfter(code2) {
    if (code2 === 61) {
      effects.consume(code2);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code2);
  }
  function completeAttributeValueBefore(code2) {
    if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 34 || code2 === 39) {
      effects.consume(code2);
      markerB = code2;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code2);
  }
  function completeAttributeValueQuoted(code2) {
    if (code2 === markerB) {
      effects.consume(code2);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code2 === null || markdownLineEnding(code2)) {
      return nok(code2);
    }
    effects.consume(code2);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code2) {
    if (code2 === null || code2 === 34 || code2 === 39 || code2 === 47 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96 || markdownLineEndingOrSpace(code2)) {
      return completeAttributeNameAfter(code2);
    }
    effects.consume(code2);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code2) {
    if (code2 === 47 || code2 === 62 || markdownSpace(code2)) {
      return completeAttributeNameBefore(code2);
    }
    return nok(code2);
  }
  function completeEnd(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return completeAfter;
    }
    return nok(code2);
  }
  function completeAfter(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return continuation(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return completeAfter;
    }
    return nok(code2);
  }
  function continuation(code2) {
    if (code2 === 45 && marker === 2) {
      effects.consume(code2);
      return continuationCommentInside;
    }
    if (code2 === 60 && marker === 1) {
      effects.consume(code2);
      return continuationRawTagOpen;
    }
    if (code2 === 62 && marker === 4) {
      effects.consume(code2);
      return continuationClose;
    }
    if (code2 === 63 && marker === 3) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    if (code2 === 93 && marker === 5) {
      effects.consume(code2);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code2);
    }
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("htmlFlowData");
      return continuationStart(code2);
    }
    effects.consume(code2);
    return continuation;
  }
  function continuationStart(code2) {
    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code2);
  }
  function continuationStartNonLazy(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return continuationBefore;
  }
  function continuationBefore(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      return continuationStart(code2);
    }
    effects.enter("htmlFlowData");
    return continuation(code2);
  }
  function continuationCommentInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationRawTagOpen(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      buffer = "";
      return continuationRawEndTag;
    }
    return continuation(code2);
  }
  function continuationRawEndTag(code2) {
    if (code2 === 62) {
      const name2 = buffer.toLowerCase();
      if (htmlRawNames.includes(name2)) {
        effects.consume(code2);
        return continuationClose;
      }
      return continuation(code2);
    }
    if (asciiAlpha(code2) && buffer.length < 8) {
      effects.consume(code2);
      buffer += String.fromCharCode(code2);
      return continuationRawEndTag;
    }
    return continuation(code2);
  }
  function continuationCdataInside(code2) {
    if (code2 === 93) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationDeclarationInside(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      return continuationClose;
    }
    if (code2 === 45 && marker === 2) {
      effects.consume(code2);
      return continuationDeclarationInside;
    }
    return continuation(code2);
  }
  function continuationClose(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code2);
    }
    effects.consume(code2);
    return continuationClose;
  }
  function continuationAfter(code2) {
    effects.exit("htmlFlow");
    return ok3(code2);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    if (markdownLineEnding(code2)) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    return self2.parser.lazy[self2.now().line] ? nok(code2) : ok3(code2);
  }
}
function tokenizeBlankLineBefore(effects, ok3, nok) {
  return start2;
  function start2(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok3, nok);
  }
}
var htmlFlow, blankLineBefore, nonLazyContinuationStart;
var init_html_flow = __esm({
  "node_modules/micromark-core-commonmark/lib/html-flow.js"() {
    init_micromark_util_character();
    init_micromark_util_html_tag_name();
    init_blank_line();
    htmlFlow = {
      concrete: true,
      name: "htmlFlow",
      resolveTo: resolveToHtmlFlow,
      tokenize: tokenizeHtmlFlow
    };
    blankLineBefore = {
      partial: true,
      tokenize: tokenizeBlankLineBefore
    };
    nonLazyContinuationStart = {
      partial: true,
      tokenize: tokenizeNonLazyContinuationStart
    };
  }
});

// node_modules/micromark-core-commonmark/lib/html-text.js
function tokenizeHtmlText(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let index2;
  let returnState;
  return start2;
  function start2(code2) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code2);
    return open;
  }
  function open(code2) {
    if (code2 === 33) {
      effects.consume(code2);
      return declarationOpen;
    }
    if (code2 === 47) {
      effects.consume(code2);
      return tagCloseStart;
    }
    if (code2 === 63) {
      effects.consume(code2);
      return instruction;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return tagOpen;
    }
    return nok(code2);
  }
  function declarationOpen(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentOpenInside;
    }
    if (code2 === 91) {
      effects.consume(code2);
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return declaration;
    }
    return nok(code2);
  }
  function commentOpenInside(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentEnd;
    }
    return nok(code2);
  }
  function comment(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 45) {
      effects.consume(code2);
      return commentClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = comment;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return comment;
  }
  function commentClose(code2) {
    if (code2 === 45) {
      effects.consume(code2);
      return commentEnd;
    }
    return comment(code2);
  }
  function commentEnd(code2) {
    return code2 === 62 ? end(code2) : code2 === 45 ? commentClose(code2) : comment(code2);
  }
  function cdataOpenInside(code2) {
    const value = "CDATA[";
    if (code2 === value.charCodeAt(index2++)) {
      effects.consume(code2);
      return index2 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code2);
  }
  function cdata(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 93) {
      effects.consume(code2);
      return cdataClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = cdata;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return cdata;
  }
  function cdataClose(code2) {
    if (code2 === 93) {
      effects.consume(code2);
      return cdataEnd;
    }
    return cdata(code2);
  }
  function cdataEnd(code2) {
    if (code2 === 62) {
      return end(code2);
    }
    if (code2 === 93) {
      effects.consume(code2);
      return cdataEnd;
    }
    return cdata(code2);
  }
  function declaration(code2) {
    if (code2 === null || code2 === 62) {
      return end(code2);
    }
    if (markdownLineEnding(code2)) {
      returnState = declaration;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return declaration;
  }
  function instruction(code2) {
    if (code2 === null) {
      return nok(code2);
    }
    if (code2 === 63) {
      effects.consume(code2);
      return instructionClose;
    }
    if (markdownLineEnding(code2)) {
      returnState = instruction;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return instruction;
  }
  function instructionClose(code2) {
    return code2 === 62 ? end(code2) : instruction(code2);
  }
  function tagCloseStart(code2) {
    if (asciiAlpha(code2)) {
      effects.consume(code2);
      return tagClose;
    }
    return nok(code2);
  }
  function tagClose(code2) {
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagClose;
    }
    return tagCloseBetween(code2);
  }
  function tagCloseBetween(code2) {
    if (markdownLineEnding(code2)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagCloseBetween;
    }
    return end(code2);
  }
  function tagOpen(code2) {
    if (code2 === 45 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagOpen;
    }
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    return nok(code2);
  }
  function tagOpenBetween(code2) {
    if (code2 === 47) {
      effects.consume(code2);
      return end;
    }
    if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
      effects.consume(code2);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenBetween;
    }
    return end(code2);
  }
  function tagOpenAttributeName(code2) {
    if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
      effects.consume(code2);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code2);
  }
  function tagOpenAttributeNameAfter(code2) {
    if (code2 === 61) {
      effects.consume(code2);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code2);
  }
  function tagOpenAttributeValueBefore(code2) {
    if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 34 || code2 === 39) {
      effects.consume(code2);
      marker = code2;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code2);
    }
    if (markdownSpace(code2)) {
      effects.consume(code2);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code2);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code2 === null) {
      return nok(code2);
    }
    if (markdownLineEnding(code2)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code2);
    }
    effects.consume(code2);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code2) {
    if (code2 === null || code2 === 34 || code2 === 39 || code2 === 60 || code2 === 61 || code2 === 96) {
      return nok(code2);
    }
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    effects.consume(code2);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code2) {
    if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
      return tagOpenBetween(code2);
    }
    return nok(code2);
  }
  function end(code2) {
    if (code2 === 62) {
      effects.consume(code2);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok3;
    }
    return nok(code2);
  }
  function lineEndingBefore(code2) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }
  function lineEndingAfter(code2) {
    return markdownSpace(code2) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2) : lineEndingAfterPrefix(code2);
  }
  function lineEndingAfterPrefix(code2) {
    effects.enter("htmlTextData");
    return returnState(code2);
  }
}
var htmlText;
var init_html_text = __esm({
  "node_modules/micromark-core-commonmark/lib/html-text.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    htmlText = {
      name: "htmlText",
      tokenize: tokenizeHtmlText
    };
  }
});

// node_modules/micromark-core-commonmark/lib/label-end.js
function resolveAllLabelEnd(events) {
  let index2 = -1;
  const newEvents = [];
  while (++index2 < events.length) {
    const token = events[index2][1];
    newEvents.push(events[index2]);
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      const offset = token.type === "labelImage" ? 4 : 2;
      token.type = "data";
      index2 += offset;
    }
  }
  if (events.length !== newEvents.length) {
    splice(events, 0, events.length, newEvents);
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index2 = events.length;
  let offset = 0;
  let token;
  let open;
  let close2;
  let media;
  while (index2--) {
    token = events[index2][1];
    if (open) {
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }
      if (events[index2][0] === "enter" && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close2) {
      if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index2;
        if (token.type !== "labelLink") {
          offset = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close2 = index2;
    }
  }
  const group = {
    type: events[open][1].type === "labelLink" ? "link" : "image",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  const label = {
    type: "label",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[close2][1].end
    }
  };
  const text5 = {
    type: "labelText",
    start: {
      ...events[open + offset + 2][1].end
    },
    end: {
      ...events[close2 - 2][1].start
    }
  };
  media = [["enter", group, context], ["enter", label, context]];
  media = push(media, events.slice(open + 1, open + offset + 3));
  media = push(media, [["enter", text5, context]]);
  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close2 - 3), context));
  media = push(media, [["exit", text5, context], events[close2 - 2], events[close2 - 1], ["exit", label, context]]);
  media = push(media, events.slice(close2 + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self2 = this;
  let index2 = self2.events.length;
  let labelStart;
  let defined;
  while (index2--) {
    if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
      labelStart = self2.events[index2][1];
      break;
    }
  }
  return start2;
  function start2(code2) {
    if (!labelStart) {
      return nok(code2);
    }
    if (labelStart._inactive) {
      return labelEndNok(code2);
    }
    defined = self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize({
      start: labelStart.end,
      end: self2.now()
    })));
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code2);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }
  function after(code2) {
    if (code2 === 40) {
      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code2);
    }
    if (code2 === 91) {
      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code2);
    }
    return defined ? labelEndOk(code2) : labelEndNok(code2);
  }
  function referenceNotFull(code2) {
    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code2);
  }
  function labelEndOk(code2) {
    return ok3(code2);
  }
  function labelEndNok(code2) {
    labelStart._balanced = true;
    return nok(code2);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return resourceStart;
  function resourceStart(code2) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code2);
    effects.exit("resourceMarker");
    return resourceBefore;
  }
  function resourceBefore(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceOpen)(code2) : resourceOpen(code2);
  }
  function resourceOpen(code2) {
    if (code2 === 41) {
      return resourceEnd(code2);
    }
    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code2);
  }
  function resourceDestinationAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceBetween)(code2) : resourceEnd(code2);
  }
  function resourceDestinationMissing(code2) {
    return nok(code2);
  }
  function resourceBetween(code2) {
    if (code2 === 34 || code2 === 39 || code2 === 40) {
      return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code2);
    }
    return resourceEnd(code2);
  }
  function resourceTitleAfter(code2) {
    return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceEnd)(code2) : resourceEnd(code2);
  }
  function resourceEnd(code2) {
    if (code2 === 41) {
      effects.enter("resourceMarker");
      effects.consume(code2);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok3;
    }
    return nok(code2);
  }
}
function tokenizeReferenceFull(effects, ok3, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code2) {
    return factoryLabel.call(self2, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code2);
  }
  function referenceFullAfter(code2) {
    return self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1))) ? ok3(code2) : nok(code2);
  }
  function referenceFullMissing(code2) {
    return nok(code2);
  }
}
function tokenizeReferenceCollapsed(effects, ok3, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code2) {
    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code2);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code2) {
    if (code2 === 93) {
      effects.enter("referenceMarker");
      effects.consume(code2);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok3;
    }
    return nok(code2);
  }
}
var labelEnd, resourceConstruct, referenceFullConstruct, referenceCollapsedConstruct;
var init_label_end = __esm({
  "node_modules/micromark-core-commonmark/lib/label-end.js"() {
    init_micromark_factory_destination();
    init_micromark_factory_label();
    init_micromark_factory_title();
    init_micromark_factory_whitespace();
    init_micromark_util_character();
    init_micromark_util_chunked();
    init_micromark_util_normalize_identifier();
    init_micromark_util_resolve_all();
    labelEnd = {
      name: "labelEnd",
      resolveAll: resolveAllLabelEnd,
      resolveTo: resolveToLabelEnd,
      tokenize: tokenizeLabelEnd
    };
    resourceConstruct = {
      tokenize: tokenizeResource
    };
    referenceFullConstruct = {
      tokenize: tokenizeReferenceFull
    };
    referenceCollapsedConstruct = {
      tokenize: tokenizeReferenceCollapsed
    };
  }
});

// node_modules/micromark-core-commonmark/lib/label-start-image.js
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code2);
    effects.exit("labelImageMarker");
    return open;
  }
  function open(code2) {
    if (code2 === 91) {
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code2);
  }
  function after(code2) {
    return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok3(code2);
  }
}
var labelStartImage;
var init_label_start_image = __esm({
  "node_modules/micromark-core-commonmark/lib/label-start-image.js"() {
    init_label_end();
    labelStartImage = {
      name: "labelStartImage",
      resolveAll: labelEnd.resolveAll,
      tokenize: tokenizeLabelStartImage
    };
  }
});

// node_modules/micromark-core-commonmark/lib/label-start-link.js
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code2) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code2);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }
  function after(code2) {
    return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok3(code2);
  }
}
var labelStartLink;
var init_label_start_link = __esm({
  "node_modules/micromark-core-commonmark/lib/label-start-link.js"() {
    init_label_end();
    labelStartLink = {
      name: "labelStartLink",
      resolveAll: labelEnd.resolveAll,
      tokenize: tokenizeLabelStartLink
    };
  }
});

// node_modules/micromark-core-commonmark/lib/line-ending.js
function tokenizeLineEnding(effects, ok3) {
  return start2;
  function start2(code2) {
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    return factorySpace(effects, ok3, "linePrefix");
  }
}
var lineEnding;
var init_line_ending = __esm({
  "node_modules/micromark-core-commonmark/lib/line-ending.js"() {
    init_micromark_factory_space();
    lineEnding = {
      name: "lineEnding",
      tokenize: tokenizeLineEnding
    };
  }
});

// node_modules/micromark-core-commonmark/lib/thematic-break.js
function tokenizeThematicBreak(effects, ok3, nok) {
  let size = 0;
  let marker;
  return start2;
  function start2(code2) {
    effects.enter("thematicBreak");
    return before(code2);
  }
  function before(code2) {
    marker = code2;
    return atBreak(code2);
  }
  function atBreak(code2) {
    if (code2 === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code2);
    }
    if (size >= 3 && (code2 === null || markdownLineEnding(code2))) {
      effects.exit("thematicBreak");
      return ok3(code2);
    }
    return nok(code2);
  }
  function sequence(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code2) ? factorySpace(effects, atBreak, "whitespace")(code2) : atBreak(code2);
  }
}
var thematicBreak;
var init_thematic_break = __esm({
  "node_modules/micromark-core-commonmark/lib/thematic-break.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    thematicBreak = {
      name: "thematicBreak",
      tokenize: tokenizeThematicBreak
    };
  }
});

// node_modules/micromark-core-commonmark/lib/list.js
function tokenizeListStart(effects, ok3, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start2;
  function start2(code2) {
    const kind = self2.containerState.type || (code2 === 42 || code2 === 43 || code2 === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self2.containerState.marker || code2 === self2.containerState.marker : asciiDigit(code2)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code2 === 42 || code2 === 45 ? effects.check(thematicBreak, nok, atMarker)(code2) : atMarker(code2);
      }
      if (!self2.interrupt || code2 === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code2);
      }
    }
    return nok(code2);
  }
  function inside(code2) {
    if (asciiDigit(code2) && ++size < 10) {
      effects.consume(code2);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code2 === self2.containerState.marker : code2 === 41 || code2 === 46)) {
      effects.exit("listItemValue");
      return atMarker(code2);
    }
    return nok(code2);
  }
  function atMarker(code2) {
    effects.enter("listItemMarker");
    effects.consume(code2);
    effects.exit("listItemMarker");
    self2.containerState.marker = self2.containerState.marker || code2;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
    );
  }
  function onBlank(code2) {
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code2);
  }
  function otherPrefix(code2) {
    if (markdownSpace(code2)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code2);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code2);
  }
  function endOfPrefix(code2) {
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok3(code2);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self2 = this;
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code2) {
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(effects, ok3, "listItemIndent", self2.containerState.size + 1)(code2);
  }
  function notBlank(code2) {
    if (self2.containerState.furtherBlankLines || !markdownSpace(code2)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code2);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code2);
  }
  function notInCurrentItem(code2) {
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    return factorySpace(effects, effects.attempt(list, ok3, nok), "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemIndent", self2.containerState.size + 1);
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code2) : nok(code2);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1);
  function afterPrefix(code2) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code2) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok3(code2) : nok(code2);
  }
}
var list, listItemPrefixWhitespaceConstruct, indentConstruct;
var init_list = __esm({
  "node_modules/micromark-core-commonmark/lib/list.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    init_blank_line();
    init_thematic_break();
    list = {
      continuation: {
        tokenize: tokenizeListContinuation
      },
      exit: tokenizeListEnd,
      name: "list",
      tokenize: tokenizeListStart
    };
    listItemPrefixWhitespaceConstruct = {
      partial: true,
      tokenize: tokenizeListItemPrefixWhitespace
    };
    indentConstruct = {
      partial: true,
      tokenize: tokenizeIndent
    };
  }
});

// node_modules/micromark-core-commonmark/lib/setext-underline.js
function resolveToSetextUnderline(events, context) {
  let index2 = events.length;
  let content3;
  let text5;
  let definition2;
  while (index2--) {
    if (events[index2][0] === "enter") {
      if (events[index2][1].type === "content") {
        content3 = index2;
        break;
      }
      if (events[index2][1].type === "paragraph") {
        text5 = index2;
      }
    } else {
      if (events[index2][1].type === "content") {
        events.splice(index2, 1);
      }
      if (!definition2 && events[index2][1].type === "definition") {
        definition2 = index2;
      }
    }
  }
  const heading2 = {
    type: "setextHeading",
    start: {
      ...events[content3][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  events[text5][1].type = "setextHeadingText";
  if (definition2) {
    events.splice(text5, 0, ["enter", heading2, context]);
    events.splice(definition2 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = {
      ...events[definition2][1].end
    };
  } else {
    events[content3][1] = heading2;
  }
  events.push(["exit", heading2, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self2 = this;
  let marker;
  return start2;
  function start2(code2) {
    let index2 = self2.events.length;
    let paragraph2;
    while (index2--) {
      if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
        paragraph2 = self2.events[index2][1].type === "paragraph";
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
      effects.enter("setextHeadingLine");
      marker = code2;
      return before(code2);
    }
    return nok(code2);
  }
  function before(code2) {
    effects.enter("setextHeadingLineSequence");
    return inside(code2);
  }
  function inside(code2) {
    if (code2 === marker) {
      effects.consume(code2);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code2) ? factorySpace(effects, after, "lineSuffix")(code2) : after(code2);
  }
  function after(code2) {
    if (code2 === null || markdownLineEnding(code2)) {
      effects.exit("setextHeadingLine");
      return ok3(code2);
    }
    return nok(code2);
  }
}
var setextUnderline;
var init_setext_underline = __esm({
  "node_modules/micromark-core-commonmark/lib/setext-underline.js"() {
    init_micromark_factory_space();
    init_micromark_util_character();
    setextUnderline = {
      name: "setextUnderline",
      resolveTo: resolveToSetextUnderline,
      tokenize: tokenizeSetextUnderline
    };
  }
});

// node_modules/micromark-core-commonmark/index.js
var init_micromark_core_commonmark = __esm({
  "node_modules/micromark-core-commonmark/index.js"() {
    init_attention();
    init_autolink();
    init_blank_line();
    init_block_quote();
    init_character_escape();
    init_character_reference();
    init_code_fenced();
    init_code_indented();
    init_code_text();
    init_content2();
    init_definition();
    init_hard_break_escape();
    init_heading_atx();
    init_html_flow();
    init_html_text();
    init_label_end();
    init_label_start_image();
    init_label_start_link();
    init_line_ending();
    init_list();
    init_setext_underline();
    init_thematic_break();
  }
});

// node_modules/micromark/lib/initialize/flow.js
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content2, afterConstruct)), "linePrefix"))
  );
  return initial;
  function atBlankEnding(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code2);
    effects.exit("lineEndingBlank");
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code2) {
    if (code2 === null) {
      effects.consume(code2);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code2);
    effects.exit("lineEnding");
    self2.currentConstruct = void 0;
    return initial;
  }
}
var flow;
var init_flow = __esm({
  "node_modules/micromark/lib/initialize/flow.js"() {
    init_micromark_core_commonmark();
    init_micromark_factory_space();
    flow = {
      tokenize: initializeFlow
    };
  }
});

// node_modules/micromark/lib/initialize/text.js
function initializeFactory(field) {
  return {
    resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : void 0),
    tokenize: initializeText
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text5 = effects.attempt(constructs2, start2, notText);
    return start2;
    function start2(code2) {
      return atBreak(code2) ? text5(code2) : notText(code2);
    }
    function notText(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("data");
      effects.consume(code2);
      return data2;
    }
    function data2(code2) {
      if (atBreak(code2)) {
        effects.exit("data");
        return text5(code2);
      }
      effects.consume(code2);
      return data2;
    }
    function atBreak(code2) {
      if (code2 === null) {
        return true;
      }
      const list3 = constructs2[code2];
      let index2 = -1;
      if (list3) {
        while (++index2 < list3.length) {
          const item = list3[index2];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index2 = -1;
    let enter;
    while (++index2 <= events.length) {
      if (enter === void 0) {
        if (events[index2] && events[index2][1].type === "data") {
          enter = index2;
          index2++;
        }
      } else if (!events[index2] || events[index2][1].type !== "data") {
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
      const data2 = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data2);
      let index2 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index2--) {
        const chunk = chunks[index2];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) {
        } else {
          index2++;
          break;
        }
      }
      if (context._contentTypeTextTrailing && eventIndex === events.length) {
        size = 0;
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: index2 ? bufferIndex : data2.start._bufferIndex + bufferIndex,
            _index: data2.start._index + index2,
            line: data2.end.line,
            column: data2.end.column - size,
            offset: data2.end.offset - size
          },
          end: {
            ...data2.end
          }
        };
        data2.end = {
          ...token.start
        };
        if (data2.start.offset === data2.end.offset) {
          Object.assign(data2, token);
        } else {
          events.splice(eventIndex, 0, ["enter", token, context], ["exit", token, context]);
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}
var resolver, string4, text2;
var init_text = __esm({
  "node_modules/micromark/lib/initialize/text.js"() {
    resolver = {
      resolveAll: createResolver()
    };
    string4 = initializeFactory("string");
    text2 = initializeFactory("text");
  }
});

// node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable2,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string5,
  text: () => text3
});
var document3, contentInitial, flowInitial, flow2, string5, text3, insideSpan, attentionMarkers, disable2;
var init_constructs = __esm({
  "node_modules/micromark/lib/constructs.js"() {
    init_micromark_core_commonmark();
    init_text();
    document3 = {
      [42]: list,
      [43]: list,
      [45]: list,
      [48]: list,
      [49]: list,
      [50]: list,
      [51]: list,
      [52]: list,
      [53]: list,
      [54]: list,
      [55]: list,
      [56]: list,
      [57]: list,
      [62]: blockQuote
    };
    contentInitial = {
      [91]: definition
    };
    flowInitial = {
      [-2]: codeIndented,
      [-1]: codeIndented,
      [32]: codeIndented
    };
    flow2 = {
      [35]: headingAtx,
      [42]: thematicBreak,
      [45]: [setextUnderline, thematicBreak],
      [60]: htmlFlow,
      [61]: setextUnderline,
      [95]: thematicBreak,
      [96]: codeFenced,
      [126]: codeFenced
    };
    string5 = {
      [38]: characterReference,
      [92]: characterEscape
    };
    text3 = {
      [-5]: lineEnding,
      [-4]: lineEnding,
      [-3]: lineEnding,
      [33]: labelStartImage,
      [38]: characterReference,
      [42]: attention,
      [60]: [autolink, htmlText],
      [91]: labelStartLink,
      [92]: [hardBreakEscape, characterEscape],
      [93]: labelEnd,
      [95]: attention,
      [96]: codeText
    };
    insideSpan = {
      null: [attention, resolver]
    };
    attentionMarkers = {
      null: [42, 95]
    };
    disable2 = {
      null: []
    };
  }
});

// node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from) {
  let point4 = {
    _bufferIndex: -1,
    _index: 0,
    line: from && from.line || 1,
    column: from && from.column || 1,
    offset: from && from.offset || 0
  };
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    consume,
    enter,
    exit: exit2,
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  const context = {
    code: null,
    containerState: {},
    defineSkip,
    events: [],
    now,
    parser,
    previous: null,
    sliceSerialize,
    sliceStream,
    write
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write(slice2) {
    chunks = push(chunks, slice2);
    main();
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    } = point4;
    return {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    while (point4._index < chunks.length) {
      const chunk = chunks[point4._index];
      if (typeof chunk === "string") {
        chunkIndex = point4._index;
        if (point4._bufferIndex < 0) {
          point4._bufferIndex = 0;
        }
        while (point4._index === chunkIndex && point4._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point4._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code2) {
    consumed = void 0;
    expectedCode = code2;
    state = state(code2);
  }
  function consume(code2) {
    if (markdownLineEnding(code2)) {
      point4.line++;
      point4.column = 1;
      point4.offset += code2 === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code2 !== -1) {
      point4.column++;
      point4.offset++;
    }
    if (point4._bufferIndex < 0) {
      point4._index++;
    } else {
      point4._bufferIndex++;
      if (point4._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
      // strings.
      /** @type {string} */
      chunks[point4._index].length) {
        point4._bufferIndex = -1;
        point4._index++;
      }
    }
    context.previous = code2;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit2(type) {
    const token = stack.pop();
    token.end = now();
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_3, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // Looks like a construct.
        handleListOfConstructs([
          /** @type {Construct} */
          constructs2
        ])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map2) {
        return start2;
        function start2(code2) {
          const left = code2 !== null && map2[code2];
          const all2 = code2 !== null && map2.null;
          const list3 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(left) ? left : left ? [left] : [],
            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
          ];
          return handleListOfConstructs(list3)(code2);
        }
      }
      function handleListOfConstructs(list3) {
        listOfConstructs = list3;
        constructIndex = 0;
        if (list3.length === 0) {
          return bogusState;
        }
        return handleConstruct(list3[constructIndex]);
      }
      function handleConstruct(construct) {
        return start2;
        function start2(code2) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code2);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code2);
        }
      }
      function ok3(code2) {
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code2) {
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(context.events, from2, context.events.length - from2, construct.resolve(context.events.slice(from2), context));
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      from: startEventsIndex,
      restore
    };
    function restore() {
      point4 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    if (point4.line in columnStart && point4.column < 2) {
      point4.column = columnStart[point4.line];
      point4.offset += columnStart[point4.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index2 = -1;
  const result = [];
  let atTab;
  while (++index2 < chunks.length) {
    const chunk = chunks[index2];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else switch (chunk) {
      case -5: {
        value = "\r";
        break;
      }
      case -4: {
        value = "\n";
        break;
      }
      case -3: {
        value = "\r\n";
        break;
      }
      case -2: {
        value = expandTabs ? " " : "	";
        break;
      }
      case -1: {
        if (!expandTabs && atTab) continue;
        value = " ";
        break;
      }
      default: {
        value = String.fromCharCode(chunk);
      }
    }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join("");
}
var init_create_tokenizer = __esm({
  "node_modules/micromark/lib/create-tokenizer.js"() {
    init_micromark_util_character();
    init_micromark_util_chunked();
    init_micromark_util_resolve_all();
  }
});

// node_modules/micromark/lib/parse.js
function parse3(options2) {
  const settings = options2 || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    constructs: constructs2,
    content: create3(content),
    defined: [],
    document: create3(document2),
    flow: create3(flow),
    lazy: {},
    string: create3(string4),
    text: create3(text2)
  };
  return parser;
  function create3(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}
var init_parse3 = __esm({
  "node_modules/micromark/lib/parse.js"() {
    init_micromark_util_combine_extensions();
    init_content();
    init_document();
    init_flow();
    init_text();
    init_constructs();
    init_create_tokenizer();
  }
});

// node_modules/micromark/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}
var init_postprocess = __esm({
  "node_modules/micromark/lib/postprocess.js"() {
    init_micromark_util_subtokenize();
  }
});

// node_modules/micromark/lib/preprocess.js
function preprocess2() {
  let column = 1;
  let buffer = "";
  let start2 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code2;
    value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
    startPosition = 0;
    buffer = "";
    if (start2) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start2 = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code2 = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code2) {
          case 0: {
            chunks.push(65533);
            column++;
            break;
          }
          case 9: {
            next = Math.ceil(column / 4) * 4;
            chunks.push(-2);
            while (column++ < next) chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }
    return chunks;
  }
}
var search;
var init_preprocess = __esm({
  "node_modules/micromark/lib/preprocess.js"() {
    search = /[\0\t\n\r]/g;
  }
});

// node_modules/micromark/index.js
var init_micromark = __esm({
  "node_modules/micromark/index.js"() {
    init_parse3();
    init_postprocess();
    init_preprocess();
  }
});

// node_modules/micromark-util-decode-string/index.js
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $22) {
  if ($1) {
    return $1;
  }
  const head = $22.charCodeAt(0);
  if (head === 35) {
    const head2 = $22.charCodeAt(1);
    const hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference($22.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($22) || $0;
}
var characterEscapeOrReference;
var init_micromark_util_decode_string = __esm({
  "node_modules/micromark-util-decode-string/index.js"() {
    init_index_dom();
    init_micromark_util_decode_numeric_character_reference();
    characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  }
});

// node_modules/mdast-util-from-markdown/lib/index.js
function fromMarkdown(value, encoding, options2) {
  if (typeof encoding !== "string") {
    options2 = encoding;
    encoding = void 0;
  }
  return compiler(options2)(postprocess(parse3(options2).document().write(preprocess2()(value, encoding, true))));
}
function compiler(options2) {
  const config2 = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link2),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading2),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText2, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition2),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis2),
      hardBreakEscape: opener(hardBreak2),
      hardBreakTrailing: opener(hardBreak2),
      htmlFlow: opener(html4, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html4, buffer),
      htmlTextData: onenterdata,
      image: opener(image2),
      label: buffer,
      link: opener(link2),
      listItem: opener(listItem2),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list3, onenterlistordered),
      listUnordered: opener(list3),
      paragraph: opener(paragraph2),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading2),
      strong: opener(strong2),
      thematicBreak: opener(thematicBreak3)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config2, (options2 || {}).mdastExtensions || []);
  const data2 = {};
  return compile;
  function compile(events) {
    let tree = {
      type: "root",
      children: []
    };
    const context = {
      stack: [tree],
      tokenStack: [],
      config: config2,
      enter,
      exit: exit2,
      buffer,
      resume,
      data: data2
    };
    const listStack = [];
    let index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
        if (events[index2][0] === "enter") {
          listStack.push(index2);
        } else {
          const tail = listStack.pop();
          index2 = prepareList(events, tail, index2);
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      const handler = config2[events[index2][0]];
      if (own2.call(handler, events[index2][1].type)) {
        handler[events[index2][1].type].call(Object.assign({
          sliceSerialize: events[index2][2].sliceSerialize
        }, context), events[index2][1]);
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point3(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point3(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };
    index2 = -1;
    while (++index2 < config2.transforms.length) {
      tree = config2.transforms[index2](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start2, length) {
    let index2 = start2 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem3;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index2 <= length) {
      const event = events[index2];
      switch (event[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
          break;
        }
        case "lineEndingBlank": {
          if (event[0] === "enter") {
            if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace": {
          break;
        }
        default: {
          atMarker = void 0;
        }
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem3) {
          let tailIndex = index2;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem3._spread = true;
          }
          listItem3.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index2, 0, ["exit", listItem3, event[2]]);
          index2++;
          length++;
        }
        if (event[1].type === "listItemPrefix") {
          const item = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          listItem3 = item;
          events.splice(index2, 0, ["enter", item, event[2]]);
          index2++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start2][1]._spread = listSpread;
    return length;
  }
  function opener(create3, and) {
    return open;
    function open(token) {
      enter.call(this, create3(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent.children;
    siblings.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler || void 0]);
    node2.position = {
      start: point3(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function closer(and) {
    return close2;
    function close2(token) {
      if (and) and.call(this, token);
      exit2.call(this, token);
    }
  }
  function exit2(token, onExitError) {
    const node2 = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
        start: token.start,
        end: token.end
      }) + "): it\u2019s not open");
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    node2.position.end = point3(token.end);
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      this.data.expectingFirstListItemValue = void 0;
    }
  }
  function onexitcodefencedfenceinfo() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.lang = data3;
  }
  function onexitcodefencedfencemeta() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.meta = data3;
  }
  function onexitcodefencedfence() {
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }
  function onexitcodefenced() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    this.data.flowCodeInside = void 0;
  }
  function onexitcodeindented() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data3;
  }
  function onexitdefinitiondestinationstring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data3;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    const siblings = node2.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text5();
      tail.position = {
        start: point3(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: void 0
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point3(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const tail = context.children[context.children.length - 1];
      tail.position.end = point3(token.end);
      this.data.atHardBreak = void 0;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config2.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    this.data.atHardBreak = true;
  }
  function onexithtmlflow() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexithtmltext() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexitcodetext() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitlabeltext(token) {
    const string6 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ancestor.label = decodeString(string6);
    ancestor.identifier = normalizeIdentifier(string6).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    this.data.inReference = true;
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data3;
  }
  function onexitresourcetitlestring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data3;
  }
  function onexitresource() {
    this.data.inReference = void 0;
  }
  function onenterreference() {
    this.data.referenceType = "collapsed";
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    this.data.referenceType = "full";
  }
  function onexitcharacterreferencemarker(token) {
    this.data.characterReferenceType = token.type;
  }
  function onexitcharacterreferencevalue(token) {
    const data3 = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    let value;
    if (type) {
      value = decodeNumericCharacterReference(data3, type === "characterReferenceMarkerNumeric" ? 10 : 16);
      this.data.characterReferenceType = void 0;
    } else {
      const result = decodeNamedCharacterReference(data3);
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    tail.value += value;
  }
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    tail.position.end = point3(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function definition2() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis2() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function heading2() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function hardBreak2() {
    return {
      type: "break"
    };
  }
  function html4() {
    return {
      type: "html",
      value: ""
    };
  }
  function image2() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function link2() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function list3(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem2(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph2() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function strong2() {
    return {
      type: "strong",
      children: []
    };
  }
  function text5() {
    return {
      type: "text",
      value: ""
    };
  }
  function thematicBreak3() {
    return {
      type: "thematicBreak"
    };
  }
}
function point3(d3) {
  return {
    line: d3.line,
    column: d3.column,
    offset: d3.offset
  };
}
function configure(combined, extensions) {
  let index2 = -1;
  while (++index2 < extensions.length) {
    const value = extensions[index2];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own2.call(extension2, key)) {
      switch (key) {
        case "canContainEols": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "transforms": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "enter":
        case "exit": {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
          break;
        }
      }
    }
  }
}
function defaultOnError(left, right) {
  if (left) {
    throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
      start: left.start,
      end: left.end
    }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is open");
  } else {
    throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is still open");
  }
}
var own2;
var init_lib9 = __esm({
  "node_modules/mdast-util-from-markdown/lib/index.js"() {
    init_mdast_util_to_string();
    init_micromark();
    init_micromark_util_decode_numeric_character_reference();
    init_micromark_util_decode_string();
    init_micromark_util_normalize_identifier();
    init_index_dom();
    init_unist_util_stringify_position();
    own2 = {}.hasOwnProperty;
  }
});

// node_modules/mdast-util-from-markdown/index.js
var init_mdast_util_from_markdown = __esm({
  "node_modules/mdast-util-from-markdown/index.js"() {
    init_lib9();
  }
});

// node_modules/remark-parse/lib/index.js
function remarkParse(options2) {
  const self2 = this;
  self2.parser = parser;
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self2.data("settings"),
      ...options2,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self2.data("micromarkExtensions") || [],
      mdastExtensions: self2.data("fromMarkdownExtensions") || []
    });
  }
}
var init_lib10 = __esm({
  "node_modules/remark-parse/lib/index.js"() {
    init_mdast_util_from_markdown();
  }
});

// node_modules/remark-parse/index.js
var init_remark_parse = __esm({
  "node_modules/remark-parse/index.js"() {
    init_lib10();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(state, node2) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node2), true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_blockquote = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/blockquote.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node2) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node2, result);
  return [state.applyData(node2, result), { type: "text", value: "\n" }];
}
var init_break = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/break.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(state, node2) {
  const value = node2.value ? node2.value + "\n" : "";
  const properties = {};
  if (node2.lang) {
    properties.className = ["language-" + node2.lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node2.meta) {
    result.data = { meta: node2.meta };
  }
  state.patch(node2, result);
  result = state.applyData(node2, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node2, result);
  return result;
}
var init_code = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/code.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node2) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_delete = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/delete.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node2) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_emphasis = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/emphasis.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(state, node2) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const id = String(node2.identifier).toUpperCase();
  const safeId = normalizeUri(id.toLowerCase());
  const index2 = state.footnoteOrder.indexOf(id);
  let counter;
  let reuseCounter = state.footnoteCounts.get(id);
  if (reuseCounter === void 0) {
    reuseCounter = 0;
    state.footnoteOrder.push(id);
    counter = state.footnoteOrder.length;
  } else {
    counter = index2 + 1;
  }
  reuseCounter += 1;
  state.footnoteCounts.set(id, reuseCounter);
  const link2 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + clobberPrefix + "fn-" + safeId,
      id: clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node2, link2);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link2]
  };
  state.patch(node2, sup);
  return state.applyData(node2, sup);
}
var init_footnote_reference = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js"() {
    init_micromark_util_sanitize_uri();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(state, node2) {
  const result = {
    type: "element",
    tagName: "h" + node2.depth,
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_heading = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/heading.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html3(state, node2) {
  if (state.options.allowDangerousHtml) {
    const result = { type: "raw", value: node2.value };
    state.patch(node2, result);
    return state.applyData(node2, result);
  }
  return void 0;
}
var init_html2 = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/html.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node2) {
  const subtype = node2.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node2.label || node2.identifier) + "]";
  }
  if (node2.type === "imageReference") {
    return [{ type: "text", value: "![" + node2.alt + suffix }];
  }
  const contents = state.all(node2);
  const head = contents[0];
  if (head && head.type === "text") {
    head.value = "[" + head.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}
var init_revert = __esm({
  "node_modules/mdast-util-to-hast/lib/revert.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition2 = state.definitionById.get(id);
  if (!definition2) {
    return revert(state, node2);
  }
  const properties = { src: normalizeUri(definition2.url || ""), alt: node2.alt };
  if (definition2.title !== null && definition2.title !== void 0) {
    properties.title = definition2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_image_reference = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/image-reference.js"() {
    init_micromark_util_sanitize_uri();
    init_revert();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node2) {
  const properties = { src: normalizeUri(node2.url) };
  if (node2.alt !== null && node2.alt !== void 0) {
    properties.alt = node2.alt;
  }
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_image = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/image.js"() {
    init_micromark_util_sanitize_uri();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(state, node2) {
  const text5 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node2, text5);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text5]
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_inline_code = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition2 = state.definitionById.get(id);
  if (!definition2) {
    return revert(state, node2);
  }
  const properties = { href: normalizeUri(definition2.url || "") };
  if (definition2.title !== null && definition2.title !== void 0) {
    properties.title = definition2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_link_reference = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/link-reference.js"() {
    init_micromark_util_sanitize_uri();
    init_revert();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node2) {
  const properties = { href: normalizeUri(node2.url) };
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_link = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/link.js"() {
    init_micromark_util_sanitize_uri();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(state, node2, parent) {
  const results = state.all(node2);
  const loose = parent ? listLoose(parent) : listItemLoose(node2);
  const properties = {};
  const children = [];
  if (typeof node2.checked === "boolean") {
    const head = results[0];
    let paragraph2;
    if (head && head.type === "element" && head.tagName === "p") {
      paragraph2 = head;
    } else {
      paragraph2 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph2);
    }
    if (paragraph2.children.length > 0) {
      paragraph2.children.unshift({ type: "text", value: " " });
    }
    paragraph2.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node2.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index2 = -1;
  while (++index2 < results.length) {
    const child = results[index2];
    if (loose || index2 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function listLoose(node2) {
  let loose = false;
  if (node2.type === "list") {
    loose = node2.spread || false;
    const children = node2.children;
    let index2 = -1;
    while (!loose && ++index2 < children.length) {
      loose = listItemLoose(children[index2]);
    }
  }
  return loose;
}
function listItemLoose(node2) {
  const spread = node2.spread;
  return spread === null || spread === void 0 ? node2.children.length > 1 : spread;
}
var init_list_item = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/list-item.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(state, node2) {
  const properties = {};
  const results = state.all(node2);
  let index2 = -1;
  if (typeof node2.start === "number" && node2.start !== 1) {
    properties.start = node2.start;
  }
  while (++index2 < results.length) {
    const child = results[index2];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node2.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_list2 = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/list.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node2) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_paragraph = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/paragraph.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root2(state, node2) {
  const result = { type: "root", children: state.wrap(state.all(node2)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_root = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/root.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(state, node2) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_strong = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/strong.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(state, node2) {
  const rows = state.all(node2);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node2.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    const body = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start2 = pointStart(node2.children[1]);
    const end = pointEnd(node2.children[node2.children.length - 1]);
    if (start2 && end) body.position = { start: start2, end };
    tableContent.push(body);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_table = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/table.js"() {
    init_unist_util_position();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow(state, node2, parent) {
  const siblings = parent ? parent.children : void 0;
  const rowIndex = siblings ? siblings.indexOf(node2) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length = align ? align.length : node2.children.length;
  let cellIndex = -1;
  const cells = [];
  while (++cellIndex < length) {
    const cell = node2.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell) {
      result2.children = state.all(cell);
      state.patch(cell, result2);
      result2 = state.applyData(cell, result2);
    }
    cells.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_table_row = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/table-row.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell(state, node2) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_table_cell = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/table-cell.js"() {
    "";
  }
});

// node_modules/trim-lines/index.js
function trimLines(value) {
  const source = String(value);
  const search2 = /\r?\n|\r/g;
  let match = search2.exec(source);
  let last = 0;
  const lines = [];
  while (match) {
    lines.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );
    last = match.index + match[0].length;
    match = search2.exec(source);
  }
  lines.push(trimLine(source.slice(last), last > 0, false));
  return lines.join("");
}
function trimLine(value, start2, end) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start2) {
    let code2 = value.codePointAt(startIndex);
    while (code2 === tab || code2 === space) {
      startIndex++;
      code2 = value.codePointAt(startIndex);
    }
  }
  if (end) {
    let code2 = value.codePointAt(endIndex - 1);
    while (code2 === tab || code2 === space) {
      endIndex--;
      code2 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}
var tab, space;
var init_trim_lines = __esm({
  "node_modules/trim-lines/index.js"() {
    tab = 9;
    space = 32;
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text4(state, node2) {
  const result = { type: "text", value: trimLines(String(node2.value)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_text2 = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/text.js"() {
    init_trim_lines();
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node2) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
var init_thematic_break2 = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js"() {
    "";
  }
});

// node_modules/mdast-util-to-hast/lib/handlers/index.js
function ignore() {
  return void 0;
}
var handlers2;
var init_handlers = __esm({
  "node_modules/mdast-util-to-hast/lib/handlers/index.js"() {
    init_blockquote();
    init_break();
    init_code();
    init_delete();
    init_emphasis();
    init_footnote_reference();
    init_heading();
    init_html2();
    init_image_reference();
    init_image();
    init_inline_code();
    init_link_reference();
    init_link();
    init_list_item();
    init_list2();
    init_paragraph();
    init_root();
    init_strong();
    init_table();
    init_table_row();
    init_table_cell();
    init_text2();
    init_thematic_break2();
    handlers2 = {
      blockquote,
      break: hardBreak,
      code,
      delete: strikethrough,
      emphasis,
      footnoteReference,
      heading,
      html: html3,
      imageReference,
      image,
      inlineCode,
      linkReference,
      link,
      listItem,
      list: list2,
      paragraph,
      // @ts-expect-error: root is different, but hard to type.
      root: root2,
      strong,
      table,
      tableCell,
      tableRow,
      text: text4,
      thematicBreak: thematicBreak2,
      toml: ignore,
      yaml: ignore,
      definition: ignore,
      footnoteDefinition: ignore
    };
  }
});

// node_modules/@ungap/structured-clone/esm/types.js
var VOID, PRIMITIVE, ARRAY, OBJECT, DATE, REGEXP, MAP, SET, ERROR, BIGINT;
var init_types2 = __esm({
  "node_modules/@ungap/structured-clone/esm/types.js"() {
    VOID = -1;
    PRIMITIVE = 0;
    ARRAY = 1;
    OBJECT = 2;
    DATE = 3;
    REGEXP = 4;
    MAP = 5;
    SET = 6;
    ERROR = 7;
    BIGINT = 8;
  }
});

// node_modules/@ungap/structured-clone/esm/deserialize.js
var env, deserializer, deserialize;
var init_deserialize = __esm({
  "node_modules/@ungap/structured-clone/esm/deserialize.js"() {
    init_types2();
    env = typeof self === "object" ? self : globalThis;
    deserializer = ($3, _3) => {
      const as = (out, index2) => {
        $3.set(index2, out);
        return out;
      };
      const unpair = (index2) => {
        if ($3.has(index2))
          return $3.get(index2);
        const [type, value] = _3[index2];
        switch (type) {
          case PRIMITIVE:
          case VOID:
            return as(value, index2);
          case ARRAY: {
            const arr = as([], index2);
            for (const index3 of value)
              arr.push(unpair(index3));
            return arr;
          }
          case OBJECT: {
            const object2 = as({}, index2);
            for (const [key, index3] of value)
              object2[unpair(key)] = unpair(index3);
            return object2;
          }
          case DATE:
            return as(new Date(value), index2);
          case REGEXP: {
            const { source, flags } = value;
            return as(new RegExp(source, flags), index2);
          }
          case MAP: {
            const map2 = as(/* @__PURE__ */ new Map(), index2);
            for (const [key, index3] of value)
              map2.set(unpair(key), unpair(index3));
            return map2;
          }
          case SET: {
            const set2 = as(/* @__PURE__ */ new Set(), index2);
            for (const index3 of value)
              set2.add(unpair(index3));
            return set2;
          }
          case ERROR: {
            const { name: name2, message } = value;
            return as(new env[name2](message), index2);
          }
          case BIGINT:
            return as(BigInt(value), index2);
          case "BigInt":
            return as(Object(BigInt(value)), index2);
          case "ArrayBuffer":
            return as(new Uint8Array(value).buffer, value);
          case "DataView": {
            const { buffer } = new Uint8Array(value);
            return as(new DataView(buffer), value);
          }
        }
        return as(new env[type](value), index2);
      };
      return unpair;
    };
    deserialize = (serialized) => deserializer(/* @__PURE__ */ new Map(), serialized)(0);
  }
});

// node_modules/@ungap/structured-clone/esm/serialize.js
var EMPTY, toString2, keys, typeOf, shouldSkip, serializer, serialize;
var init_serialize = __esm({
  "node_modules/@ungap/structured-clone/esm/serialize.js"() {
    init_types2();
    EMPTY = "";
    ({ toString: toString2 } = {});
    ({ keys } = Object);
    typeOf = (value) => {
      const type = typeof value;
      if (type !== "object" || !value)
        return [PRIMITIVE, type];
      const asString = toString2.call(value).slice(8, -1);
      switch (asString) {
        case "Array":
          return [ARRAY, EMPTY];
        case "Object":
          return [OBJECT, EMPTY];
        case "Date":
          return [DATE, EMPTY];
        case "RegExp":
          return [REGEXP, EMPTY];
        case "Map":
          return [MAP, EMPTY];
        case "Set":
          return [SET, EMPTY];
        case "DataView":
          return [ARRAY, asString];
      }
      if (asString.includes("Array"))
        return [ARRAY, asString];
      if (asString.includes("Error"))
        return [ERROR, asString];
      return [OBJECT, asString];
    };
    shouldSkip = ([TYPE, type]) => TYPE === PRIMITIVE && (type === "function" || type === "symbol");
    serializer = (strict, json2, $3, _3) => {
      const as = (out, value) => {
        const index2 = _3.push(out) - 1;
        $3.set(value, index2);
        return index2;
      };
      const pair = (value) => {
        if ($3.has(value))
          return $3.get(value);
        let [TYPE, type] = typeOf(value);
        switch (TYPE) {
          case PRIMITIVE: {
            let entry = value;
            switch (type) {
              case "bigint":
                TYPE = BIGINT;
                entry = value.toString();
                break;
              case "function":
              case "symbol":
                if (strict)
                  throw new TypeError("unable to serialize " + type);
                entry = null;
                break;
              case "undefined":
                return as([VOID], value);
            }
            return as([TYPE, entry], value);
          }
          case ARRAY: {
            if (type) {
              let spread = value;
              if (type === "DataView") {
                spread = new Uint8Array(value.buffer);
              } else if (type === "ArrayBuffer") {
                spread = new Uint8Array(value);
              }
              return as([type, [...spread]], value);
            }
            const arr = [];
            const index2 = as([TYPE, arr], value);
            for (const entry of value)
              arr.push(pair(entry));
            return index2;
          }
          case OBJECT: {
            if (type) {
              switch (type) {
                case "BigInt":
                  return as([type, value.toString()], value);
                case "Boolean":
                case "Number":
                case "String":
                  return as([type, value.valueOf()], value);
              }
            }
            if (json2 && "toJSON" in value)
              return pair(value.toJSON());
            const entries = [];
            const index2 = as([TYPE, entries], value);
            for (const key of keys(value)) {
              if (strict || !shouldSkip(typeOf(value[key])))
                entries.push([pair(key), pair(value[key])]);
            }
            return index2;
          }
          case DATE:
            return as([TYPE, value.toISOString()], value);
          case REGEXP: {
            const { source, flags } = value;
            return as([TYPE, { source, flags }], value);
          }
          case MAP: {
            const entries = [];
            const index2 = as([TYPE, entries], value);
            for (const [key, entry] of value) {
              if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
                entries.push([pair(key), pair(entry)]);
            }
            return index2;
          }
          case SET: {
            const entries = [];
            const index2 = as([TYPE, entries], value);
            for (const entry of value) {
              if (strict || !shouldSkip(typeOf(entry)))
                entries.push(pair(entry));
            }
            return index2;
          }
        }
        const { message } = value;
        return as([TYPE, { name: type, message }], value);
      };
      return pair;
    };
    serialize = (value, { json: json2, lossy } = {}) => {
      const _3 = [];
      return serializer(!(json2 || lossy), !!json2, /* @__PURE__ */ new Map(), _3)(value), _3;
    };
  }
});

// node_modules/@ungap/structured-clone/esm/index.js
var esm_default;
var init_esm2 = __esm({
  "node_modules/@ungap/structured-clone/esm/index.js"() {
    init_deserialize();
    init_serialize();
    esm_default = typeof structuredClone === "function" ? (
      /* c8 ignore start */
      (any2, options2) => options2 && ("json" in options2 || "lossy" in options2) ? deserialize(serialize(any2, options2)) : structuredClone(any2)
    ) : (any2, options2) => deserialize(serialize(any2, options2));
  }
});

// node_modules/mdast-util-to-hast/lib/footer.js
function defaultFootnoteBackContent(_3, rereferenceIndex) {
  const result = [{ type: "text", value: "\u21A9" }];
  if (rereferenceIndex > 1) {
    result.push({
      type: "element",
      tagName: "sup",
      properties: {},
      children: [{ type: "text", value: String(rereferenceIndex) }]
    });
  }
  return result;
}
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
  return "Back to reference " + (referenceIndex + 1) + (rereferenceIndex > 1 ? "-" + rereferenceIndex : "");
}
function footer(state) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;
  const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;
  const footnoteLabel = state.options.footnoteLabel || "Footnotes";
  const footnoteLabelTagName = state.options.footnoteLabelTagName || "h2";
  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  const listItems = [];
  let referenceIndex = -1;
  while (++referenceIndex < state.footnoteOrder.length) {
    const definition2 = state.footnoteById.get(
      state.footnoteOrder[referenceIndex]
    );
    if (!definition2) {
      continue;
    }
    const content3 = state.all(definition2);
    const id = String(definition2.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    let rereferenceIndex = 0;
    const backReferences = [];
    const counts = state.footnoteCounts.get(id);
    while (counts !== void 0 && ++rereferenceIndex <= counts) {
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      let children = typeof footnoteBackContent === "string" ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);
      if (typeof children === "string") {
        children = { type: "text", value: children };
      }
      backReferences.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + clobberPrefix + "fnref-" + safeId + (rereferenceIndex > 1 ? "-" + rereferenceIndex : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof footnoteBackLabel === "string" ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(children) ? children : [children]
      });
    }
    const tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content3.push(...backReferences);
    }
    const listItem2 = {
      type: "element",
      tagName: "li",
      properties: { id: clobberPrefix + "fn-" + safeId },
      children: state.wrap(content3, true)
    };
    state.patch(definition2, listItem2);
    listItems.push(listItem2);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: footnoteLabelTagName,
        properties: {
          ...esm_default(footnoteLabelProperties),
          id: "footnote-label"
        },
        children: [{ type: "text", value: footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}
var init_footer = __esm({
  "node_modules/mdast-util-to-hast/lib/footer.js"() {
    init_esm2();
    init_micromark_util_sanitize_uri();
  }
});

// node_modules/unist-util-is/lib/index.js
function anyFactory(tests) {
  const checks2 = [];
  let index2 = -1;
  while (++index2 < tests.length) {
    checks2[index2] = convert(tests[index2]);
  }
  return castFactory(any2);
  function any2(...parameters) {
    let index3 = -1;
    while (++index3 < checks2.length) {
      if (checks2[index3].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check2) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check2
  );
  return castFactory(all2);
  function all2(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check2) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check2) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check2;
  }
}
function castFactory(testFunction) {
  return check2;
  function check2(value, index2, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index2 === "number" ? index2 : void 0,
        parent || void 0
      )
    );
  }
}
function ok2() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}
var convert;
var init_lib11 = __esm({
  "node_modules/unist-util-is/lib/index.js"() {
    convert = // Note: overloads in JSDoc can’t yet use different `@template`s.
    /**
     * @type {(
     *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
     *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
     *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
     *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
     *   ((test?: Test) => Check)
     * )}
     */
    /**
     * @param {Test} [test]
     * @returns {Check}
     */
    function(test) {
      if (test === null || test === void 0) {
        return ok2;
      }
      if (typeof test === "function") {
        return castFactory(test);
      }
      if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      throw new Error("Expected function, string, or object as test");
    };
  }
});

// node_modules/unist-util-is/index.js
var init_unist_util_is = __esm({
  "node_modules/unist-util-is/index.js"() {
    init_lib11();
  }
});

// node_modules/unist-util-visit-parents/lib/color.js
function color(d3) {
  return d3;
}
var init_color = __esm({
  "node_modules/unist-util-visit-parents/lib/color.js"() {
  }
});

// node_modules/unist-util-visit-parents/lib/index.js
function visitParents(tree, test, visitor, reverse) {
  let check2;
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
  } else {
    check2 = test;
  }
  const is2 = convert(check2);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index2, parents) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name2 = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit3, "name", {
        value: "node (" + color(node2.type + (name2 ? "<" + name2 + ">" : "")) + ")"
      });
    }
    return visit3;
    function visit3() {
      let result = empty2;
      let subresult;
      let offset;
      let grandparents;
      if (!test || is2(node2, index2, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset > -1 && offset < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset];
            subresult = factory(child, offset, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return value === null || value === void 0 ? empty2 : [value];
}
var empty2, CONTINUE, EXIT, SKIP;
var init_lib12 = __esm({
  "node_modules/unist-util-visit-parents/lib/index.js"() {
    init_unist_util_is();
    init_color();
    empty2 = [];
    CONTINUE = true;
    EXIT = false;
    SKIP = "skip";
  }
});

// node_modules/unist-util-visit-parents/index.js
var init_unist_util_visit_parents = __esm({
  "node_modules/unist-util-visit-parents/index.js"() {
    init_lib12();
  }
});

// node_modules/unist-util-visit/lib/index.js
function visit2(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test;
  let visitor;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test = void 0;
    visitor = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test = testOrVisitor;
    visitor = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index2 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor(node2, index2, parent);
  }
}
var init_lib13 = __esm({
  "node_modules/unist-util-visit/lib/index.js"() {
    init_unist_util_visit_parents();
  }
});

// node_modules/unist-util-visit/index.js
var init_unist_util_visit = __esm({
  "node_modules/unist-util-visit/index.js"() {
    init_lib13();
  }
});

// node_modules/mdast-util-to-hast/lib/state.js
function createState(tree, options2) {
  const settings = options2 || emptyOptions3;
  const definitionById = /* @__PURE__ */ new Map();
  const footnoteById = /* @__PURE__ */ new Map();
  const footnoteCounts = /* @__PURE__ */ new Map();
  const handlers3 = { ...handlers2, ...settings.handlers };
  const state = {
    all: all2,
    applyData,
    definitionById,
    footnoteById,
    footnoteCounts,
    footnoteOrder: [],
    handlers: handlers3,
    one: one3,
    options: settings,
    patch,
    wrap: wrap2
  };
  visit2(tree, function(node2) {
    if (node2.type === "definition" || node2.type === "footnoteDefinition") {
      const map2 = node2.type === "definition" ? definitionById : footnoteById;
      const id = String(node2.identifier).toUpperCase();
      if (!map2.has(id)) {
        map2.set(id, node2);
      }
    }
  });
  return state;
  function one3(node2, parent) {
    const type = node2.type;
    const handle = state.handlers[type];
    if (own3.call(state.handlers, type) && handle) {
      return handle(state, node2, parent);
    }
    if (state.options.passThrough && state.options.passThrough.includes(type)) {
      if ("children" in node2) {
        const { children, ...shallow } = node2;
        const result = esm_default(shallow);
        result.children = state.all(node2);
        return result;
      }
      return esm_default(node2);
    }
    const unknown2 = state.options.unknownHandler || defaultUnknownHandler;
    return unknown2(state, node2, parent);
  }
  function all2(parent) {
    const values = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index2 = -1;
      while (++index2 < nodes.length) {
        const result = state.one(nodes[index2], parent);
        if (result) {
          if (index2 && nodes[index2 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = trimMarkdownSpaceStart(result.value);
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = trimMarkdownSpaceStart(head.value);
              }
            }
          }
          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }
    return values;
  }
}
function patch(from, to) {
  if (from.position) to.position = position(from);
}
function applyData(from, to) {
  let result = to;
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        const children = "children" in result ? result.children : [result];
        result = { type: "element", tagName: hName, properties: {}, children };
      }
    }
    if (result.type === "element" && hProperties) {
      Object.assign(result.properties, esm_default(hProperties));
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function defaultUnknownHandler(state, node2) {
  const data2 = node2.data || {};
  const result = "value" in node2 && !(own3.call(data2, "hProperties") || own3.call(data2, "hChildren")) ? { type: "text", value: node2.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function wrap2(nodes, loose) {
  const result = [];
  let index2 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index2 < nodes.length) {
    if (index2) result.push({ type: "text", value: "\n" });
    result.push(nodes[index2]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}
function trimMarkdownSpaceStart(value) {
  let index2 = 0;
  let code2 = value.charCodeAt(index2);
  while (code2 === 9 || code2 === 32) {
    index2++;
    code2 = value.charCodeAt(index2);
  }
  return value.slice(index2);
}
var own3, emptyOptions3;
var init_state = __esm({
  "node_modules/mdast-util-to-hast/lib/state.js"() {
    init_esm2();
    init_unist_util_visit();
    init_unist_util_position();
    init_handlers();
    own3 = {}.hasOwnProperty;
    emptyOptions3 = {};
  }
});

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options2) {
  const state = createState(tree, options2);
  const node2 = state.one(tree, void 0);
  const foot = footer(state);
  const result = Array.isArray(node2) ? { type: "root", children: node2 } : node2 || { type: "root", children: [] };
  if (foot) {
    ok("children" in result);
    result.children.push({ type: "text", value: "\n" }, foot);
  }
  return result;
}
var init_lib14 = __esm({
  "node_modules/mdast-util-to-hast/lib/index.js"() {
    init_default();
    init_footer();
    init_state();
  }
});

// node_modules/mdast-util-to-hast/index.js
var init_mdast_util_to_hast = __esm({
  "node_modules/mdast-util-to-hast/index.js"() {
    init_lib14();
  }
});

// node_modules/remark-rehype/lib/index.js
function remarkRehype(destination, options2) {
  if (destination && "run" in destination) {
    return async function(tree, file2) {
      const hastTree = (
        /** @type {HastRoot} */
        toHast(tree, { file: file2, ...options2 })
      );
      await destination.run(hastTree, file2);
    };
  }
  return function(tree, file2) {
    return (
      /** @type {HastRoot} */
      toHast(tree, { file: file2, ...destination || options2 })
    );
  };
}
var init_lib15 = __esm({
  "node_modules/remark-rehype/lib/index.js"() {
    init_mdast_util_to_hast();
  }
});

// node_modules/remark-rehype/index.js
var init_remark_rehype = __esm({
  "node_modules/remark-rehype/index.js"() {
    init_lib15();
  }
});

// node_modules/bail/index.js
function bail(error44) {
  if (error44) {
    throw error44;
  }
}
var init_bail = __esm({
  "node_modules/bail/index.js"() {
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject4 = function isPlainObject5(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options2) {
      if (defineProperty && options2.name === "__proto__") {
        defineProperty(target, options2.name, {
          enumerable: true,
          configurable: true,
          value: options2.newValue,
          writable: true
        });
      } else {
        target[options2.name] = options2.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name2) {
      if (name2 === "__proto__") {
        if (!hasOwn.call(obj, name2)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name2).value;
        }
      }
      return obj[name2];
    };
    module.exports = function extend3() {
      var options2, name2, src, copy2, copyIsArray, clone2;
      var target = arguments[0];
      var i3 = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i3 = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i3 < length; ++i3) {
        options2 = arguments[i3];
        if (options2 != null) {
          for (name2 in options2) {
            src = getProperty(target, name2);
            copy2 = getProperty(options2, name2);
            if (target !== copy2) {
              if (deep && copy2 && (isPlainObject4(copy2) || (copyIsArray = isArray(copy2)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone2 = src && isArray(src) ? src : [];
                } else {
                  clone2 = src && isPlainObject4(src) ? src : {};
                }
                setProperty(target, { name: name2, newValue: extend3(deep, clone2, copy2) });
              } else if (typeof copy2 !== "undefined") {
                setProperty(target, { name: name2, newValue: copy2 });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/is-plain-obj/index.js
function isPlainObject3(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}
var init_is_plain_obj = __esm({
  "node_modules/is-plain-obj/index.js"() {
  }
});

// node_modules/trough/lib/index.js
function trough() {
  const fns = [];
  const pipeline = { run, use: use2 };
  return pipeline;
  function run(...values) {
    let middlewareIndex = -1;
    const callback = values.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values);
    function next(error44, ...output) {
      const fn = fns[++middlewareIndex];
      let index2 = -1;
      if (error44) {
        callback(error44);
        return;
      }
      while (++index2 < values.length) {
        if (output[index2] === null || output[index2] === void 0) {
          output[index2] = values[index2];
        }
      }
      values = output;
      if (fn) {
        wrap3(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use2(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap3(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error44) {
      const exception = (
        /** @type {Error} */
        error44
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === "function") {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error44, ...output) {
    if (!called) {
      called = true;
      callback(error44, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}
var init_lib16 = __esm({
  "node_modules/trough/lib/index.js"() {
  }
});

// node_modules/trough/index.js
var init_trough = __esm({
  "node_modules/trough/index.js"() {
    init_lib16();
  }
});

// node_modules/vfile/lib/minpath.browser.js
function basename(path2, extname2) {
  if (extname2 !== void 0 && typeof extname2 !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path2);
  let start2 = 0;
  let end = -1;
  let index2 = path2.length;
  let seenNonSlash;
  if (extname2 === void 0 || extname2.length === 0 || extname2.length > path2.length) {
    while (index2--) {
      if (path2.codePointAt(index2) === 47) {
        if (seenNonSlash) {
          start2 = index2 + 1;
          break;
        }
      } else if (end < 0) {
        seenNonSlash = true;
        end = index2 + 1;
      }
    }
    return end < 0 ? "" : path2.slice(start2, end);
  }
  if (extname2 === path2) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extnameIndex = extname2.length - 1;
  while (index2--) {
    if (path2.codePointAt(index2) === 47) {
      if (seenNonSlash) {
        start2 = index2 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index2 + 1;
      }
      if (extnameIndex > -1) {
        if (path2.codePointAt(index2) === extname2.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            end = index2;
          }
        } else {
          extnameIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }
  if (start2 === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path2.length;
  }
  return path2.slice(start2, end);
}
function dirname(path2) {
  assertPath(path2);
  if (path2.length === 0) {
    return ".";
  }
  let end = -1;
  let index2 = path2.length;
  let unmatchedSlash;
  while (--index2) {
    if (path2.codePointAt(index2) === 47) {
      if (unmatchedSlash) {
        end = index2;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end < 0 ? path2.codePointAt(0) === 47 ? "/" : "." : end === 1 && path2.codePointAt(0) === 47 ? "//" : path2.slice(0, end);
}
function extname(path2) {
  assertPath(path2);
  let index2 = path2.length;
  let end = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index2--) {
    const code2 = path2.codePointAt(index2);
    if (code2 === 47) {
      if (unmatchedSlash) {
        startPart = index2 + 1;
        break;
      }
      continue;
    }
    if (end < 0) {
      unmatchedSlash = true;
      end = index2 + 1;
    }
    if (code2 === 46) {
      if (startDot < 0) {
        startDot = index2;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path2.slice(startDot, end);
}
function join(...segments) {
  let index2 = -1;
  let joined;
  while (++index2 < segments.length) {
    assertPath(segments[index2]);
    if (segments[index2]) {
      joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
    }
  }
  return joined === void 0 ? "." : normalize3(joined);
}
function normalize3(path2) {
  assertPath(path2);
  const absolute = path2.codePointAt(0) === 47;
  let value = normalizeString(path2, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path2.codePointAt(path2.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path2, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index2 = -1;
  let code2;
  let lastSlashIndex;
  while (++index2 <= path2.length) {
    if (index2 < path2.length) {
      code2 = path2.codePointAt(index2);
    } else if (code2 === 47) {
      break;
    } else {
      code2 = 47;
    }
    if (code2 === 47) {
      if (lastSlash === index2 - 1 || dots === 1) {
      } else if (lastSlash !== index2 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index2;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path2.slice(lastSlash + 1, index2);
        } else {
          result = path2.slice(lastSlash + 1, index2);
        }
        lastSegmentLength = index2 - lastSlash - 1;
      }
      lastSlash = index2;
      dots = 0;
    } else if (code2 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path2)
    );
  }
}
var minpath;
var init_minpath_browser = __esm({
  "node_modules/vfile/lib/minpath.browser.js"() {
    minpath = { basename, dirname, extname, join, sep: "/" };
  }
});

// node_modules/vfile/lib/minproc.browser.js
function cwd() {
  return "/";
}
var minproc;
var init_minproc_browser = __esm({
  "node_modules/vfile/lib/minproc.browser.js"() {
    minproc = { cwd };
  }
});

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === void 0
  );
}
var init_minurl_shared = __esm({
  "node_modules/vfile/lib/minurl.shared.js"() {
  }
});

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path2) {
  if (typeof path2 === "string") {
    path2 = new URL(path2);
  } else if (!isUrl(path2)) {
    const error44 = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path2 + "`"
    );
    error44.code = "ERR_INVALID_ARG_TYPE";
    throw error44;
  }
  if (path2.protocol !== "file:") {
    const error44 = new TypeError("The URL must be of scheme file");
    error44.code = "ERR_INVALID_URL_SCHEME";
    throw error44;
  }
  return getPathFromURLPosix(path2);
}
function getPathFromURLPosix(url2) {
  if (url2.hostname !== "") {
    const error44 = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error44.code = "ERR_INVALID_FILE_URL_HOST";
    throw error44;
  }
  const pathname = url2.pathname;
  let index2 = -1;
  while (++index2 < pathname.length) {
    if (pathname.codePointAt(index2) === 37 && pathname.codePointAt(index2 + 1) === 50) {
      const third = pathname.codePointAt(index2 + 2);
      if (third === 70 || third === 102) {
        const error44 = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error44.code = "ERR_INVALID_FILE_URL_PATH";
        throw error44;
      }
    }
  }
  return decodeURIComponent(pathname);
}
var init_minurl_browser = __esm({
  "node_modules/vfile/lib/minurl.browser.js"() {
    init_minurl_shared();
    init_minurl_shared();
  }
});

// node_modules/vfile/lib/index.js
function assertPart(part, name2) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      "`" + name2 + "` cannot be a path: did not expect `" + minpath.sep + "`"
    );
  }
}
function assertNonEmpty(part, name2) {
  if (!part) {
    throw new Error("`" + name2 + "` cannot be empty");
  }
}
function assertPath2(path2, name2) {
  if (!path2) {
    throw new Error("Setting `" + name2 + "` requires `path` to be set too");
  }
}
function isUint8Array(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}
var order2, VFile;
var init_lib17 = __esm({
  "node_modules/vfile/lib/index.js"() {
    init_vfile_message();
    init_minpath_browser();
    init_minproc_browser();
    init_minurl_browser();
    order2 = /** @type {const} */
    [
      "history",
      "path",
      "basename",
      "stem",
      "extname",
      "dirname"
    ];
    VFile = class {
      /**
       * Create a new virtual file.
       *
       * `options` is treated as:
       *
       * *   `string` or `Uint8Array` — `{value: options}`
       * *   `URL` — `{path: options}`
       * *   `VFile` — shallow copies its data over to the new file
       * *   `object` — all fields are shallow copied over to the new file
       *
       * Path related fields are set in the following order (least specific to
       * most specific): `history`, `path`, `basename`, `stem`, `extname`,
       * `dirname`.
       *
       * You cannot set `dirname` or `extname` without setting either `history`,
       * `path`, `basename`, or `stem` too.
       *
       * @param {Compatible | null | undefined} [value]
       *   File value.
       * @returns
       *   New instance.
       */
      constructor(value) {
        let options2;
        if (!value) {
          options2 = {};
        } else if (isUrl(value)) {
          options2 = { path: value };
        } else if (typeof value === "string" || isUint8Array(value)) {
          options2 = { value };
        } else {
          options2 = value;
        }
        this.cwd = "cwd" in options2 ? "" : minproc.cwd();
        this.data = {};
        this.history = [];
        this.messages = [];
        this.value;
        this.map;
        this.result;
        this.stored;
        let index2 = -1;
        while (++index2 < order2.length) {
          const field2 = order2[index2];
          if (field2 in options2 && options2[field2] !== void 0 && options2[field2] !== null) {
            this[field2] = field2 === "history" ? [...options2[field2]] : options2[field2];
          }
        }
        let field;
        for (field in options2) {
          if (!order2.includes(field)) {
            this[field] = options2[field];
          }
        }
      }
      /**
       * Get the basename (including extname) (example: `'index.min.js'`).
       *
       * @returns {string | undefined}
       *   Basename.
       */
      get basename() {
        return typeof this.path === "string" ? minpath.basename(this.path) : void 0;
      }
      /**
       * Set basename (including extname) (`'index.min.js'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be nullified (use `file.path = file.dirname` instead).
       *
       * @param {string} basename
       *   Basename.
       * @returns {undefined}
       *   Nothing.
       */
      set basename(basename2) {
        assertNonEmpty(basename2, "basename");
        assertPart(basename2, "basename");
        this.path = minpath.join(this.dirname || "", basename2);
      }
      /**
       * Get the parent path (example: `'~'`).
       *
       * @returns {string | undefined}
       *   Dirname.
       */
      get dirname() {
        return typeof this.path === "string" ? minpath.dirname(this.path) : void 0;
      }
      /**
       * Set the parent path (example: `'~'`).
       *
       * Cannot be set if there’s no `path` yet.
       *
       * @param {string | undefined} dirname
       *   Dirname.
       * @returns {undefined}
       *   Nothing.
       */
      set dirname(dirname2) {
        assertPath2(this.basename, "dirname");
        this.path = minpath.join(dirname2 || "", this.basename);
      }
      /**
       * Get the extname (including dot) (example: `'.js'`).
       *
       * @returns {string | undefined}
       *   Extname.
       */
      get extname() {
        return typeof this.path === "string" ? minpath.extname(this.path) : void 0;
      }
      /**
       * Set the extname (including dot) (example: `'.js'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be set if there’s no `path` yet.
       *
       * @param {string | undefined} extname
       *   Extname.
       * @returns {undefined}
       *   Nothing.
       */
      set extname(extname2) {
        assertPart(extname2, "extname");
        assertPath2(this.dirname, "extname");
        if (extname2) {
          if (extname2.codePointAt(0) !== 46) {
            throw new Error("`extname` must start with `.`");
          }
          if (extname2.includes(".", 1)) {
            throw new Error("`extname` cannot contain multiple dots");
          }
        }
        this.path = minpath.join(this.dirname, this.stem + (extname2 || ""));
      }
      /**
       * Get the full path (example: `'~/index.min.js'`).
       *
       * @returns {string}
       *   Path.
       */
      get path() {
        return this.history[this.history.length - 1];
      }
      /**
       * Set the full path (example: `'~/index.min.js'`).
       *
       * Cannot be nullified.
       * You can set a file URL (a `URL` object with a `file:` protocol) which will
       * be turned into a path with `url.fileURLToPath`.
       *
       * @param {URL | string} path
       *   Path.
       * @returns {undefined}
       *   Nothing.
       */
      set path(path2) {
        if (isUrl(path2)) {
          path2 = urlToPath(path2);
        }
        assertNonEmpty(path2, "path");
        if (this.path !== path2) {
          this.history.push(path2);
        }
      }
      /**
       * Get the stem (basename w/o extname) (example: `'index.min'`).
       *
       * @returns {string | undefined}
       *   Stem.
       */
      get stem() {
        return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : void 0;
      }
      /**
       * Set the stem (basename w/o extname) (example: `'index.min'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be nullified (use `file.path = file.dirname` instead).
       *
       * @param {string} stem
       *   Stem.
       * @returns {undefined}
       *   Nothing.
       */
      set stem(stem) {
        assertNonEmpty(stem, "stem");
        assertPart(stem, "stem");
        this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
      }
      // Normal prototypal methods.
      /**
       * Create a fatal message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `true` (error; file not usable)
       * and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {never}
       *   Never.
       * @throws {VFileMessage}
       *   Message.
       */
      fail(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = true;
        throw message;
      }
      /**
       * Create an info message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `undefined` (info; change
       * likely not needed) and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {VFileMessage}
       *   Message.
       */
      info(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
        message.fatal = void 0;
        return message;
      }
      /**
       * Create a message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `false` (warning; change may be
       * needed) and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {VFileMessage}
       *   Message.
       */
      message(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = new VFileMessage(
          // @ts-expect-error: the overloads are fine.
          causeOrReason,
          optionsOrParentOrPlace,
          origin
        );
        if (this.path) {
          message.name = this.path + ":" + message.name;
          message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
      }
      /**
       * Serialize the file.
       *
       * > **Note**: which encodings are supported depends on the engine.
       * > For info on Node.js, see:
       * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
       *
       * @param {string | null | undefined} [encoding='utf8']
       *   Character encoding to understand `value` as when it’s a `Uint8Array`
       *   (default: `'utf-8'`).
       * @returns {string}
       *   Serialized file.
       */
      toString(encoding) {
        if (this.value === void 0) {
          return "";
        }
        if (typeof this.value === "string") {
          return this.value;
        }
        const decoder = new TextDecoder(encoding || void 0);
        return decoder.decode(this.value);
      }
    };
  }
});

// node_modules/vfile/index.js
var init_vfile = __esm({
  "node_modules/vfile/index.js"() {
    init_lib17();
  }
});

// node_modules/unified/lib/callable-instance.js
var CallableInstance;
var init_callable_instance = __esm({
  "node_modules/unified/lib/callable-instance.js"() {
    CallableInstance = /**
     * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
     */
    /** @type {unknown} */
    /**
     * @this {Function}
     * @param {string | symbol} property
     * @returns {(...parameters: Array<unknown>) => unknown}
     */
    function(property) {
      const self2 = this;
      const constr = self2.constructor;
      const proto = (
        /** @type {Record<string | symbol, Function>} */
        // Prototypes do exist.
        // type-coverage:ignore-next-line
        constr.prototype
      );
      const value = proto[property];
      const apply = function() {
        return value.apply(apply, arguments);
      };
      Object.setPrototypeOf(apply, proto);
      return apply;
    };
  }
});

// node_modules/unified/lib/index.js
function assertParser(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `parser`");
  }
}
function assertCompiler(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `compiler`");
  }
}
function assertUnfrozen(name2, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject3(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name2, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAValue(value) {
  return typeof value === "string" || isUint8Array2(value);
}
function isUint8Array2(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}
var import_extend, own4, Processor, unified;
var init_lib18 = __esm({
  "node_modules/unified/lib/index.js"() {
    init_bail();
    import_extend = __toESM(require_extend(), 1);
    init_default();
    init_is_plain_obj();
    init_trough();
    init_vfile();
    init_callable_instance();
    own4 = {}.hasOwnProperty;
    Processor = class _Processor extends CallableInstance {
      /**
       * Create a processor.
       */
      constructor() {
        super("copy");
        this.Compiler = void 0;
        this.Parser = void 0;
        this.attachers = [];
        this.compiler = void 0;
        this.freezeIndex = -1;
        this.frozen = void 0;
        this.namespace = {};
        this.parser = void 0;
        this.transformers = trough();
      }
      /**
       * Copy a processor.
       *
       * @deprecated
       *   This is a private internal method and should not be used.
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   New *unfrozen* processor ({@linkcode Processor}) that is
       *   configured to work the same as its ancestor.
       *   When the descendant processor is configured in the future it does not
       *   affect the ancestral processor.
       */
      copy() {
        const destination = (
          /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
          new _Processor()
        );
        let index2 = -1;
        while (++index2 < this.attachers.length) {
          const attacher = this.attachers[index2];
          destination.use(...attacher);
        }
        destination.data((0, import_extend.default)(true, {}, this.namespace));
        return destination;
      }
      /**
       * Configure the processor with info available to all plugins.
       * Information is stored in an object.
       *
       * Typically, options can be given to a specific plugin, but sometimes it
       * makes sense to have information shared with several plugins.
       * For example, a list of HTML elements that are self-closing, which is
       * needed during all phases.
       *
       * > **Note**: setting information cannot occur on *frozen* processors.
       * > Call the processor first to create a new unfrozen processor.
       *
       * > **Note**: to register custom data in TypeScript, augment the
       * > {@linkcode Data} interface.
       *
       * @example
       *   This example show how to get and set info:
       *
       *   ```js
       *   import {unified} from 'unified'
       *
       *   const processor = unified().data('alpha', 'bravo')
       *
       *   processor.data('alpha') // => 'bravo'
       *
       *   processor.data() // => {alpha: 'bravo'}
       *
       *   processor.data({charlie: 'delta'})
       *
       *   processor.data() // => {charlie: 'delta'}
       *   ```
       *
       * @template {keyof Data} Key
       *
       * @overload
       * @returns {Data}
       *
       * @overload
       * @param {Data} dataset
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {Key} key
       * @returns {Data[Key]}
       *
       * @overload
       * @param {Key} key
       * @param {Data[Key]} value
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @param {Data | Key} [key]
       *   Key to get or set, or entire dataset to set, or nothing to get the
       *   entire dataset (optional).
       * @param {Data[Key]} [value]
       *   Value to set (optional).
       * @returns {unknown}
       *   The current processor when setting, the value at `key` when getting, or
       *   the entire dataset when getting without key.
       */
      data(key, value) {
        if (typeof key === "string") {
          if (arguments.length === 2) {
            assertUnfrozen("data", this.frozen);
            this.namespace[key] = value;
            return this;
          }
          return own4.call(this.namespace, key) && this.namespace[key] || void 0;
        }
        if (key) {
          assertUnfrozen("data", this.frozen);
          this.namespace = key;
          return this;
        }
        return this.namespace;
      }
      /**
       * Freeze a processor.
       *
       * Frozen processors are meant to be extended and not to be configured
       * directly.
       *
       * When a processor is frozen it cannot be unfrozen.
       * New processors working the same way can be created by calling the
       * processor.
       *
       * It’s possible to freeze processors explicitly by calling `.freeze()`.
       * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
       * `.stringify()`, `.process()`, or `.processSync()` are called.
       *
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   The current processor.
       */
      freeze() {
        if (this.frozen) {
          return this;
        }
        const self2 = (
          /** @type {Processor} */
          /** @type {unknown} */
          this
        );
        while (++this.freezeIndex < this.attachers.length) {
          const [attacher, ...options2] = this.attachers[this.freezeIndex];
          if (options2[0] === false) {
            continue;
          }
          if (options2[0] === true) {
            options2[0] = void 0;
          }
          const transformer = attacher.call(self2, ...options2);
          if (typeof transformer === "function") {
            this.transformers.use(transformer);
          }
        }
        this.frozen = true;
        this.freezeIndex = Number.POSITIVE_INFINITY;
        return this;
      }
      /**
       * Parse text to a syntax tree.
       *
       * > **Note**: `parse` freezes the processor if not already *frozen*.
       *
       * > **Note**: `parse` performs the parse phase, not the run phase or other
       * > phases.
       *
       * @param {Compatible | undefined} [file]
       *   file to parse (optional); typically `string` or `VFile`; any value
       *   accepted as `x` in `new VFile(x)`.
       * @returns {ParseTree extends undefined ? Node : ParseTree}
       *   Syntax tree representing `file`.
       */
      parse(file2) {
        this.freeze();
        const realFile = vfile(file2);
        const parser = this.parser || this.Parser;
        assertParser("parse", parser);
        return parser(String(realFile), realFile);
      }
      /**
       * Process the given file as configured on the processor.
       *
       * > **Note**: `process` freezes the processor if not already *frozen*.
       *
       * > **Note**: `process` performs the parse, run, and stringify phases.
       *
       * @overload
       * @param {Compatible | undefined} file
       * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
       * @returns {undefined}
       *
       * @overload
       * @param {Compatible | undefined} [file]
       * @returns {Promise<VFileWithOutput<CompileResult>>}
       *
       * @param {Compatible | undefined} [file]
       *   File (optional); typically `string` or `VFile`]; any value accepted as
       *   `x` in `new VFile(x)`.
       * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
       *   Callback (optional).
       * @returns {Promise<VFile> | undefined}
       *   Nothing if `done` is given.
       *   Otherwise a promise, rejected with a fatal error or resolved with the
       *   processed file.
       *
       *   The parsed, transformed, and compiled value is available at
       *   `file.value` (see note).
       *
       *   > **Note**: unified typically compiles by serializing: most
       *   > compilers return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@linkcode CompileResultMap}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      process(file2, done) {
        const self2 = this;
        this.freeze();
        assertParser("process", this.parser || this.Parser);
        assertCompiler("process", this.compiler || this.Compiler);
        return done ? executor(void 0, done) : new Promise(executor);
        function executor(resolve, reject) {
          const realFile = vfile(file2);
          const parseTree = (
            /** @type {HeadTree extends undefined ? Node : HeadTree} */
            /** @type {unknown} */
            self2.parse(realFile)
          );
          self2.run(parseTree, realFile, function(error44, tree, file3) {
            if (error44 || !tree || !file3) {
              return realDone(error44);
            }
            const compileTree = (
              /** @type {CompileTree extends undefined ? Node : CompileTree} */
              /** @type {unknown} */
              tree
            );
            const compileResult = self2.stringify(compileTree, file3);
            if (looksLikeAValue(compileResult)) {
              file3.value = compileResult;
            } else {
              file3.result = compileResult;
            }
            realDone(
              error44,
              /** @type {VFileWithOutput<CompileResult>} */
              file3
            );
          });
          function realDone(error44, file3) {
            if (error44 || !file3) {
              reject(error44);
            } else if (resolve) {
              resolve(file3);
            } else {
              ok(done, "`done` is defined if `resolve` is not");
              done(void 0, file3);
            }
          }
        }
      }
      /**
       * Process the given file as configured on the processor.
       *
       * An error is thrown if asynchronous transforms are configured.
       *
       * > **Note**: `processSync` freezes the processor if not already *frozen*.
       *
       * > **Note**: `processSync` performs the parse, run, and stringify phases.
       *
       * @param {Compatible | undefined} [file]
       *   File (optional); typically `string` or `VFile`; any value accepted as
       *   `x` in `new VFile(x)`.
       * @returns {VFileWithOutput<CompileResult>}
       *   The processed file.
       *
       *   The parsed, transformed, and compiled value is available at
       *   `file.value` (see note).
       *
       *   > **Note**: unified typically compiles by serializing: most
       *   > compilers return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@linkcode CompileResultMap}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      processSync(file2) {
        let complete = false;
        let result;
        this.freeze();
        assertParser("processSync", this.parser || this.Parser);
        assertCompiler("processSync", this.compiler || this.Compiler);
        this.process(file2, realDone);
        assertDone("processSync", "process", complete);
        ok(result, "we either bailed on an error or have a tree");
        return result;
        function realDone(error44, file3) {
          complete = true;
          bail(error44);
          result = file3;
        }
      }
      /**
       * Run *transformers* on a syntax tree.
       *
       * > **Note**: `run` freezes the processor if not already *frozen*.
       *
       * > **Note**: `run` performs the run phase, not other phases.
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
       * @returns {undefined}
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {Compatible | undefined} file
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
       * @returns {undefined}
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {Compatible | undefined} [file]
       * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
       *
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       *   Tree to transform and inspect.
       * @param {(
       *   RunCallback<TailTree extends undefined ? Node : TailTree> |
       *   Compatible
       * )} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
       *   Callback (optional).
       * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
       *   Nothing if `done` is given.
       *   Otherwise, a promise rejected with a fatal error or resolved with the
       *   transformed tree.
       */
      run(tree, file2, done) {
        assertNode(tree);
        this.freeze();
        const transformers = this.transformers;
        if (!done && typeof file2 === "function") {
          done = file2;
          file2 = void 0;
        }
        return done ? executor(void 0, done) : new Promise(executor);
        function executor(resolve, reject) {
          ok(
            typeof file2 !== "function",
            "`file` can\u2019t be a `done` anymore, we checked"
          );
          const realFile = vfile(file2);
          transformers.run(tree, realFile, realDone);
          function realDone(error44, outputTree, file3) {
            const resultingTree = (
              /** @type {TailTree extends undefined ? Node : TailTree} */
              outputTree || tree
            );
            if (error44) {
              reject(error44);
            } else if (resolve) {
              resolve(resultingTree);
            } else {
              ok(done, "`done` is defined if `resolve` is not");
              done(void 0, resultingTree, file3);
            }
          }
        }
      }
      /**
       * Run *transformers* on a syntax tree.
       *
       * An error is thrown if asynchronous transforms are configured.
       *
       * > **Note**: `runSync` freezes the processor if not already *frozen*.
       *
       * > **Note**: `runSync` performs the run phase, not other phases.
       *
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       *   Tree to transform and inspect.
       * @param {Compatible | undefined} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @returns {TailTree extends undefined ? Node : TailTree}
       *   Transformed tree.
       */
      runSync(tree, file2) {
        let complete = false;
        let result;
        this.run(tree, file2, realDone);
        assertDone("runSync", "run", complete);
        ok(result, "we either bailed on an error or have a tree");
        return result;
        function realDone(error44, tree2) {
          bail(error44);
          result = tree2;
          complete = true;
        }
      }
      /**
       * Compile a syntax tree.
       *
       * > **Note**: `stringify` freezes the processor if not already *frozen*.
       *
       * > **Note**: `stringify` performs the stringify phase, not the run phase
       * > or other phases.
       *
       * @param {CompileTree extends undefined ? Node : CompileTree} tree
       *   Tree to compile.
       * @param {Compatible | undefined} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @returns {CompileResult extends undefined ? Value : CompileResult}
       *   Textual representation of the tree (see note).
       *
       *   > **Note**: unified typically compiles by serializing: most compilers
       *   > return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@linkcode CompileResultMap}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      stringify(tree, file2) {
        this.freeze();
        const realFile = vfile(file2);
        const compiler2 = this.compiler || this.Compiler;
        assertCompiler("stringify", compiler2);
        assertNode(tree);
        return compiler2(tree, realFile);
      }
      /**
       * Configure the processor to use a plugin, a list of usable values, or a
       * preset.
       *
       * If the processor is already using a plugin, the previous plugin
       * configuration is changed based on the options that are passed in.
       * In other words, the plugin is not added a second time.
       *
       * > **Note**: `use` cannot be called on *frozen* processors.
       * > Call the processor first to create a new unfrozen processor.
       *
       * @example
       *   There are many ways to pass plugins to `.use()`.
       *   This example gives an overview:
       *
       *   ```js
       *   import {unified} from 'unified'
       *
       *   unified()
       *     // Plugin with options:
       *     .use(pluginA, {x: true, y: true})
       *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
       *     .use(pluginA, {y: false, z: true})
       *     // Plugins:
       *     .use([pluginB, pluginC])
       *     // Two plugins, the second with options:
       *     .use([pluginD, [pluginE, {}]])
       *     // Preset with plugins and settings:
       *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
       *     // Settings only:
       *     .use({settings: {position: false}})
       *   ```
       *
       * @template {Array<unknown>} [Parameters=[]]
       * @template {Node | string | undefined} [Input=undefined]
       * @template [Output=Input]
       *
       * @overload
       * @param {Preset | null | undefined} [preset]
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {PluggableList} list
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {Plugin<Parameters, Input, Output>} plugin
       * @param {...(Parameters | [boolean])} parameters
       * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
       *
       * @param {PluggableList | Plugin | Preset | null | undefined} value
       *   Usable value.
       * @param {...unknown} parameters
       *   Parameters, when a plugin is given as a usable value.
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   Current processor.
       */
      use(value, ...parameters) {
        const attachers = this.attachers;
        const namespace = this.namespace;
        assertUnfrozen("use", this.frozen);
        if (value === null || value === void 0) {
        } else if (typeof value === "function") {
          addPlugin(value, parameters);
        } else if (typeof value === "object") {
          if (Array.isArray(value)) {
            addList(value);
          } else {
            addPreset(value);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value + "`");
        }
        return this;
        function add(value2) {
          if (typeof value2 === "function") {
            addPlugin(value2, []);
          } else if (typeof value2 === "object") {
            if (Array.isArray(value2)) {
              const [plugin, ...parameters2] = (
                /** @type {PluginTuple<Array<unknown>>} */
                value2
              );
              addPlugin(plugin, parameters2);
            } else {
              addPreset(value2);
            }
          } else {
            throw new TypeError("Expected usable value, not `" + value2 + "`");
          }
        }
        function addPreset(result) {
          if (!("plugins" in result) && !("settings" in result)) {
            throw new Error(
              "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
            );
          }
          addList(result.plugins);
          if (result.settings) {
            namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
          }
        }
        function addList(plugins) {
          let index2 = -1;
          if (plugins === null || plugins === void 0) {
          } else if (Array.isArray(plugins)) {
            while (++index2 < plugins.length) {
              const thing = plugins[index2];
              add(thing);
            }
          } else {
            throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
          }
        }
        function addPlugin(plugin, parameters2) {
          let index2 = -1;
          let entryIndex = -1;
          while (++index2 < attachers.length) {
            if (attachers[index2][0] === plugin) {
              entryIndex = index2;
              break;
            }
          }
          if (entryIndex === -1) {
            attachers.push([plugin, ...parameters2]);
          } else if (parameters2.length > 0) {
            let [primary, ...rest] = parameters2;
            const currentPrimary = attachers[entryIndex][1];
            if (isPlainObject3(currentPrimary) && isPlainObject3(primary)) {
              primary = (0, import_extend.default)(true, currentPrimary, primary);
            }
            attachers[entryIndex] = [plugin, primary, ...rest];
          }
        }
      }
    };
    unified = new Processor().freeze();
  }
});

// node_modules/unified/index.js
var init_unified = __esm({
  "node_modules/unified/index.js"() {
    init_lib18();
  }
});

// node_modules/react-markdown/lib/index.js
function Markdown(options2) {
  const processor = createProcessor(options2);
  const file2 = createFile(options2);
  return post(processor.runSync(processor.parse(file2), file2), options2);
}
async function MarkdownAsync(options2) {
  const processor = createProcessor(options2);
  const file2 = createFile(options2);
  const tree = await processor.run(processor.parse(file2), file2);
  return post(tree, options2);
}
function MarkdownHooks(options2) {
  const processor = createProcessor(options2);
  const [error44, setError] = (0, import_react33.useState)(
    /** @type {Error | undefined} */
    void 0
  );
  const [tree, setTree] = (0, import_react33.useState)(
    /** @type {Root | undefined} */
    void 0
  );
  (0, import_react33.useEffect)(
    /* c8 ignore next 7 -- hooks are client-only. */
    function() {
      const file2 = createFile(options2);
      processor.run(processor.parse(file2), file2, function(error45, tree2) {
        setError(error45);
        setTree(tree2);
      });
    },
    [
      options2.children,
      options2.rehypePlugins,
      options2.remarkPlugins,
      options2.remarkRehypeOptions
    ]
  );
  if (error44) throw error44;
  return tree ? post(tree, options2) : (0, import_react33.createElement)(import_jsx_runtime24.Fragment);
}
function createProcessor(options2) {
  const rehypePlugins = options2.rehypePlugins || emptyPlugins;
  const remarkPlugins = options2.remarkPlugins || emptyPlugins;
  const remarkRehypeOptions = options2.remarkRehypeOptions ? { ...options2.remarkRehypeOptions, ...emptyRemarkRehypeOptions } : emptyRemarkRehypeOptions;
  const processor = unified().use(remarkParse).use(remarkPlugins).use(remarkRehype, remarkRehypeOptions).use(rehypePlugins);
  return processor;
}
function createFile(options2) {
  const children = options2.children || "";
  const file2 = new VFile();
  if (typeof children === "string") {
    file2.value = children;
  } else {
    unreachable(
      "Unexpected value `" + children + "` for `children` prop, expected `string`"
    );
  }
  return file2;
}
function post(tree, options2) {
  const allowedElements = options2.allowedElements;
  const allowElement = options2.allowElement;
  const components = options2.components;
  const disallowedElements = options2.disallowedElements;
  const skipHtml = options2.skipHtml;
  const unwrapDisallowed = options2.unwrapDisallowed;
  const urlTransform = options2.urlTransform || defaultUrlTransform;
  for (const deprecation of deprecations) {
    if (Object.hasOwn(options2, deprecation.from)) {
      unreachable(
        "Unexpected `" + deprecation.from + "` prop, " + (deprecation.to ? "use `" + deprecation.to + "` instead" : "remove it") + " (see <" + changelog + "#" + deprecation.id + "> for more info)"
      );
    }
  }
  if (allowedElements && disallowedElements) {
    unreachable(
      "Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other"
    );
  }
  if (options2.className) {
    tree = {
      type: "element",
      tagName: "div",
      properties: { className: options2.className },
      // Assume no doctypes.
      children: (
        /** @type {Array<ElementContent>} */
        tree.type === "root" ? tree.children : [tree]
      )
    };
  }
  visit2(tree, transform2);
  return toJsxRuntime(tree, {
    Fragment: import_jsx_runtime24.Fragment,
    // @ts-expect-error
    // React components are allowed to return numbers,
    // but not according to the types in hast-util-to-jsx-runtime
    components,
    ignoreInvalidStyle: true,
    jsx: import_jsx_runtime24.jsx,
    jsxs: import_jsx_runtime24.jsxs,
    passKeys: true,
    passNode: true
  });
  function transform2(node2, index2, parent) {
    if (node2.type === "raw" && parent && typeof index2 === "number") {
      if (skipHtml) {
        parent.children.splice(index2, 1);
      } else {
        parent.children[index2] = { type: "text", value: node2.value };
      }
      return index2;
    }
    if (node2.type === "element") {
      let key;
      for (key in urlAttributes) {
        if (Object.hasOwn(urlAttributes, key) && Object.hasOwn(node2.properties, key)) {
          const value = node2.properties[key];
          const test = urlAttributes[key];
          if (test === null || test.includes(node2.tagName)) {
            node2.properties[key] = urlTransform(String(value || ""), key, node2);
          }
        }
      }
    }
    if (node2.type === "element") {
      let remove = allowedElements ? !allowedElements.includes(node2.tagName) : disallowedElements ? disallowedElements.includes(node2.tagName) : false;
      if (!remove && allowElement && typeof index2 === "number") {
        remove = !allowElement(node2, index2, parent);
      }
      if (remove && parent && typeof index2 === "number") {
        if (unwrapDisallowed && node2.children) {
          parent.children.splice(index2, 1, ...node2.children);
        } else {
          parent.children.splice(index2, 1);
        }
        return index2;
      }
    }
  }
}
function defaultUrlTransform(value) {
  const colon = value.indexOf(":");
  const questionMark = value.indexOf("?");
  const numberSign = value.indexOf("#");
  const slash = value.indexOf("/");
  if (
    // If there is no protocol, it’s relative.
    colon === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    slash !== -1 && colon > slash || questionMark !== -1 && colon > questionMark || numberSign !== -1 && colon > numberSign || // It is a protocol, it should be allowed.
    safeProtocol.test(value.slice(0, colon))
  ) {
    return value;
  }
  return "";
}
var import_jsx_runtime24, import_react33, changelog, emptyPlugins, emptyRemarkRehypeOptions, safeProtocol, deprecations;
var init_lib19 = __esm({
  "node_modules/react-markdown/lib/index.js"() {
    init_default();
    init_hast_util_to_jsx_runtime();
    init_html_url_attributes();
    import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
    import_react33 = __toESM(require_react(), 1);
    init_remark_parse();
    init_remark_rehype();
    init_unified();
    init_unist_util_visit();
    init_vfile();
    changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
    emptyPlugins = [];
    emptyRemarkRehypeOptions = { allowDangerousHtml: true };
    safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;
    deprecations = [
      { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
      { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
      {
        from: "allowNode",
        id: "replace-allownode-allowedtypes-and-disallowedtypes",
        to: "allowElement"
      },
      {
        from: "allowedTypes",
        id: "replace-allownode-allowedtypes-and-disallowedtypes",
        to: "allowedElements"
      },
      {
        from: "disallowedTypes",
        id: "replace-allownode-allowedtypes-and-disallowedtypes",
        to: "disallowedElements"
      },
      { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
      { from: "includeElementIndex", id: "#remove-includeelementindex" },
      {
        from: "includeNodeIndex",
        id: "change-includenodeindex-to-includeelementindex"
      },
      { from: "linkTarget", id: "remove-linktarget" },
      { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
      { from: "rawSourcePos", id: "#remove-rawsourcepos" },
      { from: "renderers", id: "change-renderers-to-components", to: "components" },
      { from: "source", id: "change-source-to-children", to: "children" },
      { from: "sourcePos", id: "#remove-sourcepos" },
      { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
      { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
    ];
  }
});

// node_modules/react-markdown/index.js
var react_markdown_exports = {};
__export(react_markdown_exports, {
  MarkdownAsync: () => MarkdownAsync,
  MarkdownHooks: () => MarkdownHooks,
  default: () => Markdown,
  defaultUrlTransform: () => defaultUrlTransform
});
var init_react_markdown = __esm({
  "node_modules/react-markdown/index.js"() {
    init_lib19();
  }
});

// src/components/LazyMarkdown.tsx
var import_react34, import_jsx_runtime25, ReactMarkdown, OptimizedImage, OptimizedLink, LazyMarkdown, MarkdownRenderer;
var init_LazyMarkdown = __esm({
  "src/components/LazyMarkdown.tsx"() {
    "use strict";
    import_react34 = __toESM(require_react());
    init_sanitizeHtml();
    import_jsx_runtime25 = __toESM(require_jsx_runtime());
    ReactMarkdown = (0, import_react34.lazy)(() => Promise.resolve().then(() => (init_react_markdown(), react_markdown_exports)));
    OptimizedImage = (props) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      "img",
      {
        ...props,
        alt: props.alt || "Content image",
        style: { maxWidth: "100%", height: "auto" },
        loading: "lazy"
      }
    );
    OptimizedLink = ({ children, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("a", { ...props, target: "_blank", rel: "noopener noreferrer", children });
    LazyMarkdown = ({
      children,
      className = "",
      placeholder,
      autoLoad = false
    }) => {
      const [shouldLoad, setShouldLoad] = (0, import_react34.useState)(autoLoad);
      const [isLoading, setIsLoading] = (0, import_react34.useState)(false);
      const renderSimpleMarkdown = (text5) => {
        return safeMarkdownToHtml(text5);
      };
      const handleLoadMarkdown = () => {
        setIsLoading(true);
        setShouldLoad(true);
      };
      if (!shouldLoad) {
        return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: `lazy-markdown-placeholder ${className}`, children: placeholder || /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
          "button",
          {
            onClick: handleLoadMarkdown,
            style: {
              cursor: "pointer",
              background: "none",
              border: "none",
              padding: "0",
              textAlign: "left",
              width: "100%"
            },
            "aria-label": "Load full markdown content",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
                "div",
                {
                  dangerouslySetInnerHTML: {
                    __html: renderSimpleMarkdown(children.substring(0, 200) + (children.length > 200 ? "..." : ""))
                  }
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
                "div",
                {
                  className: "load-markdown-btn",
                  style: {
                    marginTop: "8px",
                    padding: "4px 8px",
                    background: "#007acc",
                    color: "white",
                    border: "none",
                    borderRadius: "4px",
                    fontSize: "12px",
                    cursor: "pointer",
                    display: "inline-block"
                  },
                  children: "Load Full Content"
                }
              )
            ]
          }
        ) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        import_react34.Suspense,
        {
          fallback: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "markdown-loading", children: [
            isLoading && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { children: "Loading enhanced formatting..." }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { dangerouslySetInnerHTML: { __html: renderSimpleMarkdown(children) } })
          ] }),
          children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(MarkdownRenderer, { className, children })
        }
      );
    };
    MarkdownRenderer = ({
      children,
      className
    }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        ReactMarkdown,
        {
          className,
          components: {
            img: OptimizedImage,
            a: OptimizedLink
          },
          children
        }
      );
    };
  }
});

// src/utils/formatTimeAgo.ts
var formatTimeAgo, formatChatTimestamp;
var init_formatTimeAgo = __esm({
  "src/utils/formatTimeAgo.ts"() {
    "use strict";
    formatTimeAgo = (timestamp) => {
      const now = /* @__PURE__ */ new Date();
      const past = new Date(timestamp);
      const seconds = Math.floor((now.getTime() - past.getTime()) / 1e3);
      if (seconds < 60) return `${Math.floor(seconds)}s ago`;
      const minutes = seconds / 60;
      if (minutes < 60) return `${Math.floor(minutes)}m ago`;
      const hours = minutes / 60;
      if (hours < 24) return `${Math.floor(hours)}h ago`;
      const days = hours / 24;
      if (days < 30) return `${Math.floor(days)}d ago`;
      const months = days / 30;
      if (months < 12) return `${Math.floor(months)}mo ago`;
      const years = days / 365;
      return `${Math.floor(years)}y ago`;
    };
    formatChatTimestamp = (timestamp) => {
      const messageDate = new Date(timestamp);
      const now = /* @__PURE__ */ new Date();
      const isToday = messageDate.getDate() === now.getDate() && messageDate.getMonth() === now.getMonth() && messageDate.getFullYear() === now.getFullYear();
      if (isToday) {
        return messageDate.toLocaleTimeString(navigator.language, { hour: "numeric", minute: "2-digit" });
      }
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const isYesterday = messageDate.getDate() === yesterday.getDate() && messageDate.getMonth() === yesterday.getMonth() && messageDate.getFullYear() === yesterday.getFullYear();
      if (isYesterday) {
        return `Yesterday at ${messageDate.toLocaleTimeString(navigator.language, { hour: "numeric", minute: "2-digit" })}`;
      }
      return messageDate.toLocaleDateString(navigator.language, { year: "numeric", month: "short", day: "numeric" });
    };
  }
});

// src/hooks/useSwipeGesture.ts
var import_react35, useSwipeGesture, useSwipeRef, usePullToRefresh;
var init_useSwipeGesture = __esm({
  "src/hooks/useSwipeGesture.ts"() {
    "use strict";
    import_react35 = __toESM(require_react());
    useSwipeGesture = (options2 = {}) => {
      const {
        threshold = 50,
        velocityThreshold = 0.3,
        preventDefaultTouchMove = false,
        onSwipeLeft,
        onSwipeRight,
        onSwipeUp,
        onSwipeDown,
        onSwipe
      } = options2;
      const touchStartRef = (0, import_react35.useRef)(null);
      const touchEndRef = (0, import_react35.useRef)(null);
      const startTimeRef = (0, import_react35.useRef)(0);
      const [isTracking, setIsTracking] = (0, import_react35.useState)(false);
      const handleTouchStart = (e4) => {
        if (e4.touches.length !== 1) return;
        const touch = e4.touches[0];
        touchStartRef.current = { x: touch.clientX, y: touch.clientY };
        startTimeRef.current = Date.now();
        setIsTracking(true);
      };
      const handleTouchMove = (e4) => {
        if (!isTracking || !touchStartRef.current) return;
        if (preventDefaultTouchMove) {
          e4.preventDefault();
        }
        const touch = e4.touches[0];
        touchEndRef.current = { x: touch.clientX, y: touch.clientY };
      };
      const handleTouchEnd = () => {
        if (!touchStartRef.current || !touchEndRef.current || !isTracking) {
          setIsTracking(false);
          return;
        }
        const deltaX = touchEndRef.current.x - touchStartRef.current.x;
        const deltaY = touchEndRef.current.y - touchStartRef.current.y;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const duration3 = Date.now() - startTimeRef.current;
        const velocity = distance / duration3;
        setIsTracking(false);
        touchStartRef.current = null;
        touchEndRef.current = null;
        if (distance < threshold || velocity < velocityThreshold) {
          return;
        }
        const absDeltaX = Math.abs(deltaX);
        const absDeltaY = Math.abs(deltaY);
        let direction = null;
        if (absDeltaX > absDeltaY) {
          direction = deltaX > 0 ? "right" : "left";
        } else {
          direction = deltaY > 0 ? "down" : "up";
        }
        const gesture = {
          direction,
          distance,
          velocity,
          duration: duration3
        };
        onSwipe?.(gesture);
        switch (direction) {
          case "left":
            onSwipeLeft?.(gesture);
            break;
          case "right":
            onSwipeRight?.(gesture);
            break;
          case "up":
            onSwipeUp?.(gesture);
            break;
          case "down":
            onSwipeDown?.(gesture);
            break;
        }
      };
      const attachListeners = (element3) => {
        element3.addEventListener("touchstart", handleTouchStart, { passive: true });
        element3.addEventListener("touchmove", handleTouchMove, { passive: !preventDefaultTouchMove });
        element3.addEventListener("touchend", handleTouchEnd, { passive: true });
      };
      const detachListeners = (element3) => {
        element3.removeEventListener("touchstart", handleTouchStart);
        element3.removeEventListener("touchmove", handleTouchMove);
        element3.removeEventListener("touchend", handleTouchEnd);
      };
      return {
        attachListeners,
        detachListeners,
        isTracking
      };
    };
    useSwipeRef = (options2 = {}) => {
      const elementRef = (0, import_react35.useRef)(null);
      const { attachListeners, detachListeners, isTracking } = useSwipeGesture(options2);
      (0, import_react35.useEffect)(() => {
        const element3 = elementRef.current;
        if (!element3) return;
        attachListeners(element3);
        return () => {
          detachListeners(element3);
        };
      }, [attachListeners, detachListeners]);
      return {
        ref: elementRef,
        isTracking
      };
    };
    usePullToRefresh = (onRefresh, options2 = {}) => {
      const { threshold = 80, resistance = 0.5, enabled = true } = options2;
      const [isPulling, setIsPulling] = (0, import_react35.useState)(false);
      const [pullDistance, setPullDistance] = (0, import_react35.useState)(0);
      const [isRefreshing, setIsRefreshing] = (0, import_react35.useState)(false);
      const elementRef = (0, import_react35.useRef)(null);
      const touchStartRef = (0, import_react35.useRef)(null);
      const touchMoveRef = (0, import_react35.useRef)(null);
      (0, import_react35.useEffect)(() => {
        const element3 = elementRef.current;
        if (!element3 || !enabled) return;
        const handleTouchStart = (e4) => {
          if (e4.touches.length !== 1) return;
          const touch = e4.touches[0];
          const scrollTop = element3.scrollTop || window.scrollY;
          if (scrollTop <= 0) {
            touchStartRef.current = {
              x: touch.clientX,
              y: touch.clientY,
              scrollTop
            };
          }
        };
        const handleTouchMove = (e4) => {
          if (!touchStartRef.current || isRefreshing) return;
          const touch = e4.touches[0];
          touchMoveRef.current = { x: touch.clientX, y: touch.clientY };
          const deltaY = touch.clientY - touchStartRef.current.y;
          const scrollTop = element3.scrollTop || window.scrollY;
          if (scrollTop <= 0 && deltaY > 0) {
            const distance = Math.min(deltaY * resistance, threshold * 1.5);
            setPullDistance(distance);
            setIsPulling(distance > 10);
            if (distance > 20) {
              e4.preventDefault();
            }
          }
        };
        const handleTouchEnd = async () => {
          if (!touchStartRef.current || !touchMoveRef.current || isRefreshing) {
            resetPull();
            return;
          }
          if (pullDistance >= threshold && !isRefreshing) {
            setIsRefreshing(true);
            try {
              await onRefresh();
            } finally {
              setIsRefreshing(false);
              resetPull();
            }
          } else {
            resetPull();
          }
        };
        const resetPull = () => {
          setPullDistance(0);
          setIsPulling(false);
          touchStartRef.current = null;
          touchMoveRef.current = null;
        };
        element3.addEventListener("touchstart", handleTouchStart, { passive: true });
        element3.addEventListener("touchmove", handleTouchMove, { passive: false });
        element3.addEventListener("touchend", handleTouchEnd, { passive: true });
        element3.addEventListener("touchcancel", resetPull, { passive: true });
        return () => {
          element3.removeEventListener("touchstart", handleTouchStart);
          element3.removeEventListener("touchmove", handleTouchMove);
          element3.removeEventListener("touchend", handleTouchEnd);
          element3.removeEventListener("touchcancel", resetPull);
        };
      }, [enabled, threshold, resistance, onRefresh, pullDistance, isRefreshing]);
      return {
        ref: elementRef,
        isPulling,
        pullDistance,
        isRefreshing,
        pullProgress: Math.min(pullDistance / threshold, 1)
      };
    };
  }
});

// src/components/PostCard.tsx
var import_react36, import_jsx_runtime26, getColorIndex, PostCardComponent, PostCard;
var init_PostCard = __esm({
  "src/components/PostCard.tsx"() {
    "use strict";
    import_react36 = __toESM(require_react());
    init_LazyMarkdown();
    init_icons_dynamic();
    init_formatTimeAgo();
    init_AppButton();
    init_Card();
    init_useSwipeGesture();
    import_jsx_runtime26 = __toESM(require_jsx_runtime());
    getColorIndex = (str) => {
      let hash2 = 0;
      for (let i3 = 0; i3 < str.length; i3++) {
        hash2 = str.charCodeAt(i3) + ((hash2 << 5) - hash2);
      }
      return Math.abs(hash2 % 8);
    };
    PostCardComponent = (props) => {
      const {
        dilemma,
        onToggleSupport,
        onStartChat,
        onStartVideoChat,
        onReport,
        onDismissReport,
        onRemovePost,
        onAcceptDilemma,
        onDeclineRequest,
        onResolve,
        onSummarize,
        hasUnread,
        isHelperView,
        isMyPostView,
        filteredCategories = [],
        aiMatchReason
      } = props;
      const [isRevealed, setIsRevealed] = (0, import_react36.useState)(false);
      const [isSummaryVisible, setIsSummaryVisible] = (0, import_react36.useState)(false);
      const [isAnimatingSupport, setIsAnimatingSupport] = (0, import_react36.useState)(false);
      const [swipeAction, setSwipeAction] = (0, import_react36.useState)(null);
      const isFiltered = filteredCategories.includes(dilemma.category) && !isRevealed;
      const { ref: swipeRef } = useSwipeRef({
        threshold: 100,
        velocityThreshold: 0.5,
        onSwipeLeft: () => {
          if (!isHelperView && !isMyPostView) {
            setSwipeAction("support");
            setTimeout(() => {
              handleSupportClick({});
              setSwipeAction(null);
            }, 150);
          }
        },
        onSwipeRight: () => {
          if (isHelperView && dilemma.status === "active") {
            setSwipeAction("accept");
            setTimeout(() => {
              onAcceptDilemma?.(dilemma.id);
              setSwipeAction(null);
            }, 150);
          }
        }
      });
      (0, import_react36.useEffect)(() => {
        setIsRevealed(false);
      }, [filteredCategories]);
      const handleSupportClick = (e4) => {
        e4.stopPropagation();
        if (onToggleSupport && !dilemma.isSupported) {
          onToggleSupport(dilemma.id);
          setIsAnimatingSupport(true);
          setTimeout(() => setIsAnimatingSupport(false), 300);
        }
        if (onStartChat) {
          onStartChat(dilemma.id);
        }
      };
      if (isFiltered) {
        return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(Card, { className: "post-card", style: { filter: "blur(8px)", cursor: "pointer" }, onClick: () => setIsRevealed(true), children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-user-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: `avatar avatar-color-${getColorIndex(dilemma.userToken)}` }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "username", children: "Anonymous User" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-meta", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "post-category", children: dilemma.category }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "post-timestamp", children: formatTimeAgo(dilemma.timestamp) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-content markdown-content", style: { textAlign: "center", fontWeight: "bold", color: "var(--text-secondary)" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { children: "Content hidden based on your filter preferences." }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { children: "Click to reveal." })
          ] })
        ] });
      }
      const renderHelperActions = () => {
        if (dilemma.status === "direct_request") {
          return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "form-actions-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "success", className: "btn-sm", onClick: () => onAcceptDilemma?.(dilemma.id), children: "Accept Request" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "danger", className: "btn-sm", onClick: () => onDeclineRequest?.(dilemma.id), children: "Decline" })
          ] });
        }
        if (dilemma.status === "in_progress") {
          return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "form-actions-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "secondary", className: `btn-sm`, onClick: () => onStartChat?.(dilemma.id), icon: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(HeartIcon2, {}), children: "Chat with User" }),
            onStartVideoChat && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "secondary", className: "btn-sm", onClick: () => onStartVideoChat(dilemma.id), icon: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(VideoIcon, {}), children: "Video Chat" })
          ] });
        }
        if (dilemma.isReported) {
          return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "form-actions-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "danger", className: "btn-sm", onClick: () => onRemovePost?.(dilemma.id), children: "Remove Post" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "secondary", className: "btn-sm", onClick: () => onDismissReport?.(dilemma.id), children: "Dismiss Report" })
          ] });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "form-actions-group", children: [
          !dilemma.summary && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "ghost", className: "btn-sm", onClick: () => onSummarize?.(dilemma.id), isLoading: dilemma.summaryLoading, children: "Summarize" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "success", className: "btn-sm", onClick: () => onAcceptDilemma?.(dilemma.id), icon: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ThumbsUpIcon, {}), children: "Accept Dilemma" })
        ] });
      };
      return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
        "div",
        {
          ref: swipeRef,
          className: `post-card-container touch-optimized ${swipeAction ? "swipe-" + swipeAction : ""}`,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(Card, { className: "post-card", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-header", children: [
                /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-user-info", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: `avatar avatar-color-${getColorIndex(dilemma.userToken)}` }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "username", children: "Anonymous User" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "post-meta", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "post-category", children: dilemma.category }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "post-timestamp", children: formatTimeAgo(dilemma.timestamp) })
                ] })
              ] }),
              dilemma.isReported && isHelperView && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "report-reason-display", children: [
                "Reported for: ",
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("strong", { children: dilemma.reportReason })
              ] }),
              aiMatchReason && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "ai-match-reason", children: [
                "\u2728 ",
                aiMatchReason
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "post-content markdown-content", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(LazyMarkdown, { className: "post-markdown", autoLoad: true, children: dilemma.content }) }),
              isHelperView && dilemma.summary && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "summary-container", children: [
                /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
                  "button",
                  {
                    onClick: () => setIsSummaryVisible(!isSummaryVisible),
                    className: "btn touch-optimized",
                    style: {
                      cursor: "pointer",
                      background: "none",
                      border: "none",
                      padding: "12px 0",
                      font: "inherit",
                      fontSize: "1.1em",
                      fontWeight: "bold",
                      minHeight: "44px"
                    },
                    "aria-expanded": isSummaryVisible,
                    children: [
                      "AI Summary ",
                      isSummaryVisible ? "\u25BC" : "\u25BA"
                    ]
                  }
                ),
                isSummaryVisible && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "summary-content markdown-content", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(LazyMarkdown, { className: "summary-markdown", children: dilemma.summary }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "post-actions", children: isHelperView ? renderHelperActions() : /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "form-actions-group", style: { width: "100%", justifyContent: "space-between" }, children: [
                /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(AppButton, { variant: "secondary", className: `btn-sm btn-support ${dilemma.isSupported ? "supported" : ""} ${isAnimatingSupport ? "anim-pop" : ""}`, onClick: handleSupportClick, icon: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(HeartIcon2, {}), children: [
                  hasUnread && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "notification-dot-small" }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "support-text", children: isMyPostView ? "View Chat" : "Offer Support" }),
                  !isMyPostView && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "support-count", children: dilemma.supportCount > 0 ? dilemma.supportCount : "" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { style: { display: "flex", gap: "0.5rem" }, children: [
                  isMyPostView && dilemma.status === "in_progress" && onResolve && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "success", className: "btn-sm", onClick: () => onResolve(dilemma.id), children: "Mark as Resolved" }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppButton, { variant: "secondary", className: `btn-sm btn-report ${dilemma.isReported ? "reported" : ""}`, onClick: (e4) => {
                    e4.stopPropagation();
                    onReport?.(dilemma.id);
                  }, disabled: dilemma.isReported, children: dilemma.isReported ? "Reported" : "Report" })
                ] })
              ] }) })
            ] }),
            swipeAction && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: `swipe-hint swipe-hint-${swipeAction}`, children: [
              swipeAction === "support" && "\u{1F49D} Offering Support",
              swipeAction === "accept" && "\u2705 Accepting Dilemma"
            ] })
          ]
        }
      );
    };
    PostCard = import_react36.default.memo(PostCardComponent);
  }
});

// src/components/SkeletonPostCard.tsx
var import_jsx_runtime27, SkeletonPostCard;
var init_SkeletonPostCard = __esm({
  "src/components/SkeletonPostCard.tsx"() {
    "use strict";
    import_jsx_runtime27 = __toESM(require_jsx_runtime());
    SkeletonPostCard = () => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("li", { className: "post-card skeleton", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "post-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "post-user-info", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "avatar" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "username-skeleton" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "post-meta", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "category-skeleton" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "content-skeleton line-1" }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "content-skeleton line-2" }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "content-skeleton line-3" })
    ] });
  }
});

// src/services/authService.ts
var _updateHelperProfile, authService;
var init_authService = __esm({
  "src/services/authService.ts"() {
    "use strict";
    authService = {
      setUpdater(updater) {
        _updateHelperProfile = updater;
      },
      updateHelperProfile(profile) {
        if (_updateHelperProfile) {
          _updateHelperProfile(profile);
        } else {
          console.error("AuthService updater not set. Cannot update helper profile.");
        }
      }
    };
  }
});

// src/stores/sessionStore.ts
var useSessionStore;
var init_sessionStore = __esm({
  "src/stores/sessionStore.ts"() {
    "use strict";
    init_esm();
    init_ApiClient();
    init_AuthContext();
    init_notificationService();
    init_authService();
    useSessionStore = create((set2, get2) => ({
      helpSessions: [],
      videoChatDilemmaId: null,
      pendingVideoChatDilemmaId: null,
      isVideoConsentModalOpen: false,
      fetchHelpSessions: async () => {
        const userId = authState.user?.sub || authState.userToken;
        if (!userId) return;
        try {
          const sessions = await ApiClient.helpSessions.getForUser(userId);
          set2({ helpSessions: sessions });
        } catch (error44) {
          console.error("Failed to load help sessions:", error44);
        }
      },
      getHelpSessionByDilemmaId: (dilemmaId) => {
        return get2().helpSessions.find((s3) => s3.dilemmaId === dilemmaId);
      },
      toggleFavorite: async (sessionId) => {
        const seekerId = authState.userToken;
        if (!seekerId) return;
        const updatedSession = await ApiClient.helpSessions.toggleFavorite(sessionId, seekerId);
        set2((state) => ({
          helpSessions: state.helpSessions.map((s3) => s3.id === updatedSession.id ? updatedSession : s3)
        }));
      },
      sendKudos: async (sessionId) => {
        const seekerId = authState.userToken;
        if (!seekerId) return;
        set2((state) => ({
          helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, kudosGiven: true } : s3)
        }));
        try {
          const result = await ApiClient.helpSessions.sendKudos(sessionId, seekerId);
          if (result && result.updatedHelper) {
            authService.updateHelperProfile(result.updatedHelper);
          }
          if (result && result.newAchievements && result.newAchievements.length > 0) {
            result.newAchievements.forEach((ach) => {
              notificationService.addToast(`\u{1F3C6} Achievement Unlocked: ${ach.name}!`, "success");
            });
          }
        } catch (error44) {
          console.error("Failed to send kudos:", error44);
          set2((state) => ({
            helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, kudosGiven: false } : s3)
          }));
        }
      },
      generateSeekerSummary: async (sessionId) => {
        const session = get2().helpSessions.find((s3) => s3.id === sessionId);
        if (!session) return;
        set2((state) => ({
          helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, summaryLoading: true } : s3)
        }));
        try {
          const messages = await ApiClient.chat.getMessages(session.dilemmaId);
          const transcript = messages.map((m3) => `${m3.sender === "poster" ? "Seeker" : "Helper"}: ${m3.text}`).join("\n");
          const summary = await ApiClient.ai.summarizeChat(transcript);
          set2((state) => ({
            helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, summary, summaryLoading: false } : s3)
          }));
        } catch (err) {
          console.error("Failed to generate seeker summary:", err);
          set2((state) => ({
            helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, summaryLoading: false } : s3)
          }));
          throw err;
        }
      },
      generateHelperPerformanceSummary: async (sessionId) => {
        set2((state) => ({ helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, helperSummaryLoading: true } : s3) }));
        try {
          const summary = await ApiClient.ai.summarizeHelperPerformance("");
          set2((state) => ({ helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, helperSummary: summary, helperSummaryLoading: false } : s3) }));
        } catch (err) {
          console.error("Failed to generate helper summary:", err);
          set2((state) => ({ helpSessions: state.helpSessions.map((s3) => s3.id === sessionId ? { ...s3, helperSummaryLoading: false } : s3) }));
        }
      },
      // --- Video Chat Implementation ---
      startVideoChat: (dilemmaId) => {
        set2({ pendingVideoChatDilemmaId: dilemmaId, isVideoConsentModalOpen: true });
      },
      acceptVideoConsent: () => {
        const pendingId = get2().pendingVideoChatDilemmaId;
        if (pendingId) {
          set2({
            videoChatDilemmaId: pendingId,
            pendingVideoChatDilemmaId: null,
            isVideoConsentModalOpen: false
          });
        }
      },
      declineVideoConsent: () => {
        set2({ pendingVideoChatDilemmaId: null, isVideoConsentModalOpen: false });
      },
      endVideoChat: () => {
        set2({ videoChatDilemmaId: null });
      }
    }));
  }
});

// src/stores/chatStore.ts
var useChatStore;
var init_chatStore = __esm({
  "src/stores/chatStore.ts"() {
    "use strict";
    init_esm();
    init_ApiClient();
    init_AuthContext();
    init_dilemmaStore();
    init_sessionStore();
    useChatStore = create((set2, get2) => ({
      chatSessions: {},
      activeChatId: null,
      lastChatDilemmaId: null,
      guidance: null,
      isFeedbackModalOpen: false,
      get activeChat() {
        const { activeChatId, chatSessions } = get2();
        return activeChatId ? chatSessions[activeChatId] : null;
      },
      get hasUnreadNotifications() {
        return Object.values(get2().chatSessions).some((s3) => s3.unread);
      },
      openFeedbackModal: () => set2({ isFeedbackModalOpen: true }),
      closeFeedbackModal: () => set2({ isFeedbackModalOpen: false }),
      startChat: async (dilemmaId, perspective) => {
        try {
          const messages = await ApiClient.chat.getMessages(dilemmaId);
          const helpSession = useSessionStore.getState().getHelpSessionByDilemmaId(dilemmaId);
          const dilemma = useDilemmaStore.getState().getDilemmaById(dilemmaId);
          const helperId = dilemma?.assignedHelperId;
          const helper = helperId ? await ApiClient.helpers.getById(helperId) : void 0;
          set2((state) => ({
            ...state,
            chatSessions: {
              ...state.chatSessions,
              [dilemmaId]: {
                dilemmaId,
                messages,
                unread: false,
                isTyping: false,
                perspective,
                helpSessionId: helpSession?.id,
                helper: helper || void 0
              }
            },
            activeChatId: dilemmaId
          }));
        } catch (error44) {
          console.error("Failed to start chat:", error44);
        }
      },
      closeChat: (dilemmaId) => {
        const { chatSessions } = get2();
        const chatSession = chatSessions[dilemmaId];
        if (chatSession?.helpSessionId) {
        }
        set2({
          activeChatId: null,
          lastChatDilemmaId: dilemmaId,
          isFeedbackModalOpen: true,
          guidance: null
        });
      },
      sendMessage: async (dilemmaId, text5) => {
        const { activeChat } = get2();
        const dilemma = useDilemmaStore.getState().getDilemmaById(dilemmaId);
        const sender = activeChat?.perspective === "seeker" ? "poster" : "user";
        const senderId = activeChat?.perspective === "seeker" ? dilemma?.userToken : authState.helperProfile?.id;
        if (!senderId) {
          console.error("Could not determine sender ID for chat message.");
          return;
        }
        const optimisticMessage = {
          id: crypto.randomUUID(),
          sender,
          text: text5,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        };
        set2((state) => ({
          chatSessions: {
            ...state.chatSessions,
            [dilemmaId]: {
              ...state.chatSessions[dilemmaId],
              messages: [...state.chatSessions[dilemmaId]?.messages ?? [], optimisticMessage]
            }
          }
        }));
        const savedMessage = await ApiClient.chat.sendMessage(dilemmaId, text5, sender, senderId);
        set2((state) => ({
          chatSessions: {
            ...state.chatSessions,
            [dilemmaId]: {
              ...state.chatSessions[dilemmaId],
              messages: state.chatSessions[dilemmaId].messages.map((m3) => m3.id === optimisticMessage.id ? savedMessage : m3)
            }
          }
        }));
        if (sender === "poster" && activeChat?.perspective === "helper") {
          try {
            const guidanceResult = await ApiClient.ai.getHelperGuidance(text5);
            if (guidanceResult.isCrisis || guidanceResult.flagReason && guidanceResult.flagReason !== "none") {
              set2({ guidance: { ...guidanceResult, dilemmaId } });
            }
          } catch (error44) {
            console.error("Failed to get AI helper guidance:", error44);
          }
        }
      },
      setTyping: (dilemmaId, isTyping) => {
        set2((state) => ({
          chatSessions: {
            ...state.chatSessions,
            [dilemmaId]: { ...state.chatSessions[dilemmaId], isTyping }
          }
        }));
      },
      submitFeedback: async (wasHelpful) => {
        const { lastChatDilemmaId } = get2();
        if (lastChatDilemmaId) {
          const dilemma = useDilemmaStore.getState().getDilemmaById(lastChatDilemmaId);
          if (dilemma?.assignedHelperId) {
            await ApiClient.feedback.submitFeedback(dilemma.id, dilemma.assignedHelperId, wasHelpful);
          }
        }
        set2({ lastChatDilemmaId: null, isFeedbackModalOpen: false });
      },
      dismissGuidance: () => set2({ guidance: null })
    }));
  }
});

// src/stores/dilemmaStore.ts
var POSTS_PER_PAGE, useDilemmaStore;
var init_dilemmaStore = __esm({
  "src/stores/dilemmaStore.ts"() {
    "use strict";
    init_esm();
    init_ApiClient();
    init_AuthContext();
    init_chatStore();
    init_notificationService();
    init_authService();
    POSTS_PER_PAGE = 10;
    useDilemmaStore = create((set2, get2) => {
      const calculateDerivedState = (state) => {
        const { allDilemmas, filter, sort, searchTerm, currentPage, blockedUserIds } = state;
        const reportedDilemmas = allDilemmas.filter((d3) => d3.isReported && d3.status !== "removed_by_moderator");
        let filteredDilemmas = allDilemmas.filter(
          (d3) => d3.status === "active" && !d3.assignedHelperId && !d3.isReported && !blockedUserIds.has(d3.userToken)
        );
        if (filter !== "All") {
          filteredDilemmas = filteredDilemmas.filter((d3) => d3.category === filter);
        }
        if (searchTerm) {
          const lowerCaseSearchTerm = searchTerm.toLowerCase();
          filteredDilemmas = filteredDilemmas.filter((d3) => d3.content.toLowerCase().includes(lowerCaseSearchTerm));
        }
        switch (sort) {
          case "newest":
            filteredDilemmas.sort((a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime());
            break;
          case "most-support":
            filteredDilemmas.sort((a3, b3) => b3.supportCount - a3.supportCount);
            break;
          case "needs-support":
            filteredDilemmas.sort((a3, b3) => a3.supportCount - b3.supportCount);
            break;
        }
        const paginatedDilemmas = filteredDilemmas.slice(0, currentPage * POSTS_PER_PAGE);
        const hasMore = paginatedDilemmas.length < filteredDilemmas.length;
        return {
          reportedDilemmas,
          visibleDilemmas: paginatedDilemmas,
          hasMore
        };
      };
      return {
        allDilemmas: [],
        forYouDilemmas: [],
        isLoading: true,
        filter: "All",
        sort: "newest",
        searchTerm: "",
        currentPage: 1,
        reportingDilemmaId: null,
        isReportModalOpen: false,
        blockedUserIds: /* @__PURE__ */ new Set(),
        reportedDilemmas: [],
        visibleDilemmas: [],
        hasMore: false,
        fetchDilemmas: async () => {
          set2({ isLoading: true });
          try {
            const dilemmas = await ApiClient.dilemmas.getDilemmas();
            set2((state) => ({
              ...state,
              allDilemmas: dilemmas,
              isLoading: false,
              ...calculateDerivedState({ ...state, allDilemmas: dilemmas })
            }));
          } catch (error44) {
            console.error("Failed to fetch dilemmas:", error44);
            const sampleCommunityPosts = [
              {
                id: "community-1",
                userToken: "user-abc123",
                content: "I've been struggling with social anxiety for months. Every time I need to speak up in meetings, my heart races and I freeze up. Has anyone found effective ways to manage this?",
                category: "Anxiety",
                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1e3).toISOString(),
                // 1 hour ago
                supportCount: 12,
                isSupported: false,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: void 0,
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system"
                }
              },
              {
                id: "community-2",
                userToken: "user-def456",
                content: "Going through a difficult breakup after 3 years together. The loneliness hits hardest in the evenings. Looking for healthy coping strategies that have worked for others.",
                category: "Relationships",
                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1e3).toISOString(),
                // 3 hours ago
                supportCount: 8,
                isSupported: true,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: void 0,
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system"
                }
              },
              {
                id: "community-3",
                userToken: "user-ghi789",
                content: "Started a new exercise routine to help with depression. Week 2 and already feeling more energy. For anyone considering it - even 15 minutes of walking helps!",
                category: "Coping Strategies",
                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1e3).toISOString(),
                // 5 hours ago
                supportCount: 25,
                isSupported: false,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: void 0,
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system"
                }
              }
            ];
            set2((state) => ({
              ...state,
              allDilemmas: sampleCommunityPosts,
              isLoading: false,
              ...calculateDerivedState({ ...state, allDilemmas: sampleCommunityPosts })
            }));
          }
        },
        fetchForYouFeed: async () => {
          const userToken = authState.userToken;
          if (!userToken) return;
          try {
            const dilemmas = await ApiClient.dilemmas.getForYouFeed(userToken);
            set2({ forYouDilemmas: Array.isArray(dilemmas) ? dilemmas : [] });
          } catch (error44) {
            console.error("Failed to load For You feed:", error44);
            const sampleForYouPosts = [
              {
                id: "sample-1",
                userToken: "sample-user-1",
                content: "\u{1F31F} Just wanted to share that I completed my first week of daily meditation! Started with just 5 minutes and it's already helping with my anxiety. Small steps really do add up. Anyone else trying mindfulness practices?",
                category: "Anxiety",
                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
                // 2 hours ago
                supportCount: 23,
                isSupported: false,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: "User celebrating meditation progress and encouraging others",
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system",
                  flagged: false,
                  approved: true,
                  reviewedBy: "system",
                  reviewedAt: (/* @__PURE__ */ new Date()).toISOString()
                },
                aiMatchReason: "Positive mental health progress post"
              },
              {
                id: "sample-2",
                userToken: "sample-user-2",
                content: "\u{1F499} Today marks 30 days since I started therapy. I was so scared to take that first step, but it's been life-changing. For anyone considering it - you deserve support and healing. The hardest part is just beginning.",
                category: "Depression",
                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
                // 4 hours ago
                supportCount: 47,
                isSupported: true,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: "Celebrating therapy milestone and encouraging others",
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "mod-sarah",
                  flagged: false,
                  approved: true,
                  reviewedBy: "mod-sarah",
                  reviewedAt: (/* @__PURE__ */ new Date()).toISOString()
                },
                aiMatchReason: "Inspiring recovery story"
              },
              {
                id: "sample-3",
                userToken: "sample-user-3",
                content: "\u{1F331} Quick reminder: healing isn't linear. I had a tough day yesterday but today I'm feeling more hopeful. Be gentle with yourself through the ups and downs. You're doing better than you think. \u2728",
                category: "Coping Strategies",
                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1e3).toISOString(),
                // 6 hours ago
                supportCount: 31,
                isSupported: false,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: "Encouraging post about non-linear healing process",
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system",
                  flagged: false,
                  approved: true,
                  reviewedBy: "system",
                  reviewedAt: (/* @__PURE__ */ new Date()).toISOString()
                },
                aiMatchReason: "Supportive community message"
              },
              {
                id: "sample-4",
                userToken: "sample-user-4",
                content: "\u{1F3A8} Art therapy has been my safe space lately. When words feel too heavy, colors and shapes help me express what I'm feeling. What creative outlets help you process emotions? Would love to hear your experiences!",
                category: "Coping Strategies",
                timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
                // 8 hours ago
                supportCount: 18,
                isSupported: true,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: "Sharing art therapy benefits and asking for community input",
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "mod-alex",
                  flagged: false,
                  approved: true,
                  reviewedBy: "mod-alex",
                  reviewedAt: (/* @__PURE__ */ new Date()).toISOString()
                },
                aiMatchReason: "Creative coping strategy discussion"
              },
              {
                id: "sample-5",
                userToken: "sample-user-5",
                content: "\u{1F33F} Grateful for this community. Three months ago I felt so alone in my struggles. Now I have a support network of people who truly understand. Thank you for being here and sharing your stories. We're stronger together. \u{1F49A}",
                category: "Gratitude",
                timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
                // 12 hours ago
                supportCount: 56,
                isSupported: false,
                isReported: false,
                reportReason: void 0,
                status: "active",
                assignedHelperId: void 0,
                resolved_by_seeker: false,
                requestedHelperId: void 0,
                summary: "Expressing gratitude for community support",
                summaryLoading: false,
                moderation: {
                  action: "dismissed",
                  timestamp: (/* @__PURE__ */ new Date()).toISOString(),
                  moderatorId: "system",
                  flagged: false,
                  approved: true,
                  reviewedBy: "system",
                  reviewedAt: (/* @__PURE__ */ new Date()).toISOString()
                },
                aiMatchReason: "Community appreciation post"
              }
            ];
            set2({ forYouDilemmas: sampleForYouPosts });
          }
        },
        setFilter: (filter) => set2((state) => {
          const newState = { ...state, filter, currentPage: 1 };
          return { ...newState, ...calculateDerivedState(newState) };
        }),
        setSort: (sort) => set2((state) => {
          const newState = { ...state, sort };
          return { ...newState, ...calculateDerivedState(newState) };
        }),
        setSearchTerm: (term) => set2((state) => {
          const newState = { ...state, searchTerm: term, currentPage: 1 };
          return { ...newState, ...calculateDerivedState(newState) };
        }),
        loadMore: () => set2((state) => {
          const newState = { ...state, currentPage: state.currentPage + 1 };
          return { ...newState, ...calculateDerivedState(newState) };
        }),
        openReportModal: (dilemmaId) => set2({ reportingDilemmaId: dilemmaId, isReportModalOpen: true }),
        closeReportModal: () => set2({ reportingDilemmaId: null, isReportModalOpen: false }),
        getDilemmaById: (id) => get2().allDilemmas.find((d3) => d3.id === id),
        postDilemma: async (data2, userToken) => {
          await ApiClient.dilemmas.postDilemma(data2, userToken);
          await get2().fetchDilemmas();
        },
        createDirectRequest: async (data2, userToken, requestedHelperId) => {
          await ApiClient.dilemmas.createDirectRequest(data2, userToken, requestedHelperId);
          await get2().fetchDilemmas();
        },
        toggleSupport: async (dilemmaId) => {
          const updated = await ApiClient.dilemmas.toggleSupport(dilemmaId);
          set2((state) => {
            const newAllDilemmas = state.allDilemmas.map((d3) => d3.id === updated.id ? updated : d3);
            const newState = { ...state, allDilemmas: newAllDilemmas };
            return { ...newState, ...calculateDerivedState(newState) };
          });
        },
        reportDilemma: async (reason) => {
          const { reportingDilemmaId } = get2();
          if (!reportingDilemmaId) return;
          const updated = await ApiClient.dilemmas.report(reportingDilemmaId, reason);
          set2((state) => {
            const newAllDilemmas = state.allDilemmas.map((d3) => d3.id === updated.id ? updated : d3);
            const newState = { ...state, allDilemmas: newAllDilemmas, reportingDilemmaId: null };
            return { ...newState, ...calculateDerivedState(newState) };
          });
        },
        acceptDilemma: async (dilemmaId) => {
          const helper = authState.helperProfile;
          if (!helper) throw new Error("Helper profile not found");
          const result = await ApiClient.dilemmas.acceptDilemma(dilemmaId, helper.id);
          set2((state) => {
            const newAllDilemmas = state.allDilemmas.map((d3) => d3.id === result.dilemma.id ? result.dilemma : d3);
            const newState = { ...state, allDilemmas: newAllDilemmas };
            return { ...newState, ...calculateDerivedState(newState) };
          });
          if (result.updatedHelper) {
            authService.updateHelperProfile(result.updatedHelper);
          }
          if (result.newAchievements && result.newAchievements.length > 0) {
            result.newAchievements.forEach((ach) => {
              notificationService.addToast(`\u{1F3C6} Achievement Unlocked: ${ach.name}!`, "success");
            });
          }
          useChatStore.getState().startChat(result.dilemma.id, "helper");
        },
        declineRequest: async (dilemmaId) => {
          const helper = authState.helperProfile;
          if (!helper) throw new Error("Helper profile not found");
          const updatedDilemma = await ApiClient.dilemmas.declineRequest(dilemmaId, helper.id);
          set2((state) => {
            const newAllDilemmas = state.allDilemmas.map((d3) => d3.id === updatedDilemma.id ? updatedDilemma : d3);
            const newState = { ...state, allDilemmas: newAllDilemmas };
            return { ...newState, ...calculateDerivedState(newState) };
          });
        },
        resolveDilemma: async (dilemmaId, userToken) => {
          const updated = await ApiClient.dilemmas.resolveBySeeker(dilemmaId, userToken);
          set2((state) => {
            const newAllDilemmas = state.allDilemmas.map((d3) => d3.id === updated.id ? updated : d3);
            const newState = { ...state, allDilemmas: newAllDilemmas };
            return { ...newState, ...calculateDerivedState(newState) };
          });
        },
        summarizeDilemma: async (dilemmaId) => {
          const dilemma = get2().allDilemmas.find((d3) => d3.id === dilemmaId);
          if (!dilemma) return;
          set2((state) => ({ allDilemmas: state.allDilemmas.map((d3) => d3.id === dilemmaId ? { ...d3, summaryLoading: true } : d3) }));
          try {
            const summary = await ApiClient.ai.summarizeDilemma(dilemma.content);
            set2((state) => ({ allDilemmas: state.allDilemmas.map((d3) => d3.id === dilemmaId ? { ...d3, summary, summaryLoading: false } : d3) }));
          } catch (err) {
            console.error("Failed to summarize dilemma", err);
            set2((state) => ({ allDilemmas: state.allDilemmas.map((d3) => d3.id === dilemmaId ? { ...d3, summaryLoading: false } : d3) }));
          }
        },
        dismissReport: async (dilemmaId) => {
          const helper = authState.helperProfile;
          if (!helper) throw new Error("Moderator profile not found");
          await ApiClient.moderation.dismissReport(dilemmaId, helper);
          await get2().fetchDilemmas();
        },
        removePost: async (dilemmaId) => {
          const helper = authState.helperProfile;
          if (!helper) throw new Error("Moderator profile not found");
          await ApiClient.moderation.removePost(dilemmaId, helper);
          await get2().fetchDilemmas();
        }
      };
    });
    useDilemmaStore.getState().fetchDilemmas();
  }
});

// src/components/ErrorState.tsx
var import_jsx_runtime28, AlertTriangleIcon, ErrorState, ErrorState_default;
var init_ErrorState = __esm({
  "src/components/ErrorState.tsx"() {
    "use strict";
    import_jsx_runtime28 = __toESM(require_jsx_runtime());
    AlertTriangleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
      "svg",
      {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M12 9v4" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "m12 17 .01 0" })
        ]
      }
    );
    ErrorState = ({
      title = "Something went wrong",
      message = "We encountered an unexpected error. Please try again.",
      onRetry,
      showRetry = true,
      className = "",
      isRetrying = false
    }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: `error-state ${className}`, role: "alert", "aria-live": "polite", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "error-state-icon", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(AlertTriangleIcon, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h3", { className: "error-state-title", children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "error-state-message", children: message }),
        showRetry && onRetry && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "error-state-actions", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "button",
          {
            className: "retry-button",
            onClick: onRetry,
            disabled: isRetrying,
            "aria-label": "Retry the previous action",
            children: isRetrying ? "Retrying..." : "Try Again"
          }
        ) })
      ] });
    };
    ErrorState_default = ErrorState;
  }
});

// src/views/FeedView.tsx
var FeedView_exports = {};
__export(FeedView_exports, {
  FeedView: () => FeedView,
  default: () => FeedView_default
});
var import_react37, import_jsx_runtime29, FeedView, FeedView_default;
var init_FeedView = __esm({
  "src/views/FeedView.tsx"() {
    "use strict";
    import_react37 = __toESM(require_react());
    init_PostCard();
    init_SkeletonPostCard();
    init_icons_dynamic();
    init_constants();
    init_AppButton();
    init_dilemmaStore();
    init_chatStore();
    init_ViewHeader();
    init_ErrorState();
    init_Card();
    init_preferenceStore();
    init_useSwipeGesture();
    import_jsx_runtime29 = __toESM(require_jsx_runtime());
    FeedView = () => {
      const {
        visibleDilemmas,
        forYouDilemmas,
        isLoading,
        toggleSupport,
        filter,
        setFilter,
        sort,
        setSort,
        searchTerm,
        setSearchTerm,
        loadMore,
        hasMore,
        openReportModal,
        fetchDilemmas,
        fetchForYouFeed
      } = useDilemmaStore();
      const { chatSessions, startChat } = useChatStore();
      const { contentFilters } = usePreferenceStore();
      const [activeTab, setActiveTab] = (0, import_react37.useState)("forYou");
      const dilemmasToDisplay = activeTab === "forYou" ? forYouDilemmas : visibleDilemmas;
      const handleRefresh = (0, import_react37.useCallback)(async () => {
        try {
          if (activeTab === "forYou") {
            await fetchForYouFeed();
          } else {
            await fetchDilemmas();
          }
        } catch (error44) {
          console.error("Failed to refresh feed:", error44);
        }
      }, [activeTab, fetchForYouFeed, fetchDilemmas]);
      const {
        ref: pullToRefreshRef,
        isPulling,
        isRefreshing,
        pullProgress
      } = usePullToRefresh(handleRefresh, {
        threshold: 80,
        enabled: !isLoading
      });
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { ref: pullToRefreshRef, className: "feed-view-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "div",
          {
            className: `pull-to-refresh ${isPulling ? "active" : ""} ${isRefreshing ? "refreshing" : ""}`,
            style: { opacity: pullProgress },
            children: isRefreshing ? "\u27F3" : "\u2193"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          ViewHeader,
          {
            title: "Community Feed",
            subtitle: "A place to connect and find support."
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "dashboard-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AppButton, { className: activeTab === "forYou" ? "active" : "", onClick: () => setActiveTab("forYou"), children: "For You" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(AppButton, { className: activeTab === "community" ? "active" : "", onClick: () => setActiveTab("community"), children: "Community" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "card filter-sort-bar", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "search-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SearchIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
              "input",
              {
                type: "search",
                placeholder: "Search posts...",
                className: "search-input",
                value: searchTerm,
                onChange: (e4) => setSearchTerm(e4.target.value)
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "filter-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("label", { children: "Filter by:" }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "filter-buttons", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { className: filter === "All" ? "active" : "", onClick: () => setFilter("All"), children: "All" }),
              CATEGORIES.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { className: filter === cat ? "active" : "", onClick: () => setFilter(cat), children: cat }, cat))
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "sort-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("label", { htmlFor: "sort-select", children: "Sort by:" }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("select", { id: "sort-select", value: sort, onChange: (e4) => setSort(e4.target.value), children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { value: "newest", children: "Newest" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { value: "most-support", children: "Most Support" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("option", { value: "needs-support", children: "Needs Support" })
            ] })
          ] })
        ] }),
        isLoading ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("ul", { className: "posts-list", children: [...Array(3)].map((_3, i3) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(SkeletonPostCard, {}, i3)) }) : dilemmasToDisplay.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("ul", { className: "posts-list", children: dilemmasToDisplay.map((dilemma) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          PostCard,
          {
            dilemma,
            onToggleSupport: toggleSupport,
            onStartChat: (dilemmaId) => startChat(dilemmaId, "seeker"),
            onReport: openReportModal,
            hasUnread: chatSessions[dilemma.id]?.unread ?? false,
            filteredCategories: contentFilters
          },
          dilemma.id
        )) }) : /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          ErrorState,
          {
            title: "No Posts Found",
            message: "Try adjusting your search or filter settings to find what you're looking for."
          }
        ) }),
        hasMore && !isLoading && activeTab === "community" && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "load-more-container", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("button", { className: "btn btn-secondary", onClick: loadMore, children: "Load More" }) })
      ] });
    };
    FeedView_default = FeedView;
  }
});

// src/views/CommunityView.tsx
var CommunityView_exports = {};
__export(CommunityView_exports, {
  default: () => CommunityView_default
});
var import_react38, import_jsx_runtime30, CommunityView, CommunityView_default;
var init_CommunityView = __esm({
  "src/views/CommunityView.tsx"() {
    "use strict";
    import_react38 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime30 = __toESM(require_jsx_runtime());
    CommunityView = () => {
      const [activeTab, setActiveTab] = (0, import_react38.useState)("feed");
      const [posts, setPosts] = (0, import_react38.useState)([]);
      const [helpers, setHelpers] = (0, import_react38.useState)([]);
      (0, import_react38.useEffect)(() => {
        setPosts([
          {
            id: "1",
            author: "Anonymous Friend",
            content: "Had a really tough day but managed to use some breathing techniques I learned here. Small wins count too! \u{1F499}",
            timestamp: "2 hours ago",
            likes: 12,
            responses: 3,
            isAnonymous: true,
            category: "celebration"
          },
          {
            id: "2",
            author: "MindfulMoments",
            content: "Does anyone have tips for managing anxiety at work? I've been struggling with presentations lately.",
            timestamp: "4 hours ago",
            likes: 8,
            responses: 7,
            isAnonymous: false,
            category: "question"
          },
          {
            id: "3",
            author: "HealingJourney",
            content: "Sharing this article about mindfulness techniques that really helped me: [link would be here]",
            timestamp: "6 hours ago",
            likes: 15,
            responses: 2,
            isAnonymous: false,
            category: "resource"
          }
        ]);
        setHelpers([
          {
            id: "1",
            name: "Sarah M.",
            expertise: ["Anxiety", "Mindfulness", "Work Stress"],
            rating: 4.9,
            helpedCount: 127,
            isOnline: true,
            isCertified: true
          },
          {
            id: "2",
            name: "Alex R.",
            expertise: ["Depression", "Life Transitions", "LGBTQ+ Support"],
            rating: 4.8,
            helpedCount: 89,
            isOnline: false,
            isCertified: true
          },
          {
            id: "3",
            name: "Jordan T.",
            expertise: ["Students", "Academic Stress", "Social Anxiety"],
            rating: 4.7,
            helpedCount: 64,
            isOnline: true,
            isCertified: false
          }
        ]);
      }, []);
      const getCategoryColor = (category) => {
        const colors = {
          support: "text-blue-600 bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400",
          celebration: "text-green-600 bg-green-100 dark:bg-green-900/20 dark:text-green-400",
          question: "text-purple-600 bg-purple-100 dark:bg-purple-900/20 dark:text-purple-400",
          resource: "text-orange-600 bg-orange-100 dark:bg-orange-900/20 dark:text-orange-400"
        };
        return colors[category] || colors.support;
      };
      const getCategoryLabel = (category) => {
        const labels = {
          support: "Support",
          celebration: "Celebration",
          question: "Question",
          resource: "Resource"
        };
        return labels[category] || "Support";
      };
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2", children: "Community Support" }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-lg", children: "Connect with others on their mental health journey" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "grid gap-4 md:grid-cols-4 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(UsersIcon, { className: "w-8 h-8 text-blue-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "1,247" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Active Members" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(HeartIcon2, { className: "w-8 h-8 text-pink-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "89" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Certified Helpers" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(MessageCircleIcon, { className: "w-8 h-8 text-green-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "3,456" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Conversations" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ShieldIcon, { className: "w-8 h-8 text-purple-500 mx-auto mb-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: "24/7" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Crisis Support" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex border-b border-gray-200 dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "feed" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("feed"),
              children: "Community Feed"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "helpers" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("helpers"),
              children: "Find Helpers"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "button",
            {
              className: `px-6 py-4 text-sm font-medium ${activeTab === "groups" ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"}`,
              onClick: () => setActiveTab("groups"),
              children: "Support Groups"
            }
          )
        ] }) }),
        activeTab === "feed" && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-gray-600 dark:text-gray-400 font-semibold", children: "You" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "flex-1 text-left px-4 py-3 bg-gray-100 dark:bg-gray-700 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors", children: "Share your thoughts, ask for support, or celebrate a win..." }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PlusIcon, { className: "w-5 h-5" }) })
          ] }) }),
          posts.map((post2) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-start space-x-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-gray-600 dark:text-gray-400 font-semibold text-sm", children: post2.author.charAt(0) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "font-medium text-gray-900 dark:text-gray-100", children: post2.author }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: `text-xs px-2 py-1 rounded-full ${getCategoryColor(post2.category)}`, children: getCategoryLabel(post2.category) }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-sm text-gray-500 dark:text-gray-400", children: post2.timestamp })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-700 dark:text-gray-300 mb-4", children: post2.content }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-6 text-sm text-gray-500 dark:text-gray-400", children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("button", { className: "flex items-center space-x-1 hover:text-pink-500 transition-colors", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(HeartIcon2, { className: "w-4 h-4" }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { children: post2.likes })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("button", { className: "flex items-center space-x-1 hover:text-blue-500 transition-colors", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(MessageCircleIcon, { className: "w-4 h-4" }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { children: post2.responses })
                ] })
              ] })
            ] })
          ] }) }, post2.id))
        ] }),
        activeTab === "helpers" && /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "grid gap-6 md:grid-cols-2 lg:grid-cols-3", children: helpers.map((helper) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "w-12 h-12 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-gray-600 dark:text-gray-400 font-semibold", children: helper.name.charAt(0) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100", children: helper.name }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(StarIcon, { className: "w-4 h-4 text-yellow-400" }),
                    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-sm text-gray-600 dark:text-gray-400", children: helper.rating })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-sm text-gray-400", children: "\u2022" }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("span", { className: "text-sm text-gray-600 dark:text-gray-400", children: [
                    helper.helpedCount,
                    " helped"
                  ] })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex flex-col items-end space-y-1", children: [
              helper.isCertified && /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-xs bg-green-100 dark:bg-green-900/20 text-green-600 dark:text-green-400 px-2 py-1 rounded", children: "Certified" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: `w-3 h-3 rounded-full ${helper.isOnline ? "bg-green-400" : "bg-gray-400"}` })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-2", children: "Specializes in:" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "flex flex-wrap gap-1", children: helper.expertise.map((skill) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "span",
              {
                className: "text-xs bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 px-2 py-1 rounded",
                children: skill
              },
              `${helper.id}-${skill}`
            )) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors", children: "Connect" })
        ] }, helper.id)) }),
        activeTab === "groups" && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "grid gap-6 md:grid-cols-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Anxiety Support Circle" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm mb-4", children: "A safe space to share experiences and coping strategies for anxiety management." }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { children: "47 members \u2022 Daily check-ins" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-colors", children: "Join Group" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Student Mental Health" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm mb-4", children: "Support for students dealing with academic stress, transitions, and campus life." }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { children: "23 members \u2022 Weekly sessions" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-colors", children: "Join Group" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "mt-8 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-center space-x-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ShieldIcon, { className: "w-6 h-6 text-red-600 dark:text-red-400" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "text-lg font-semibold text-red-800 dark:text-red-200", children: "Crisis Support Available" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-red-700 dark:text-red-300 text-sm", children: "If you're in crisis, trained counselors are available 24/7" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors", children: "Get Crisis Help" })
        ] }) })
      ] }) });
    };
    CommunityView_default = CommunityView;
  }
});

// src/components/TypingIndicator.tsx
var import_jsx_runtime31, TypingIndicator;
var init_TypingIndicator = __esm({
  "src/components/TypingIndicator.tsx"() {
    "use strict";
    import_jsx_runtime31 = __toESM(require_jsx_runtime());
    TypingIndicator = ({
      className = "",
      style,
      message = "Typing",
      size = "medium"
    }) => {
      const sizeClasses = {
        small: "typing-indicator-small",
        medium: "typing-indicator-medium",
        large: "typing-indicator-large"
      };
      const classes = [
        "typing-indicator",
        sizeClasses[size],
        className
      ].filter(Boolean).join(" ");
      return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
        "div",
        {
          className: classes,
          style,
          role: "status",
          "aria-live": "polite",
          "aria-label": `${message}...`,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "typing-indicator-dots", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "typing-dot", "aria-hidden": "true" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "typing-dot", "aria-hidden": "true" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "typing-dot", "aria-hidden": "true" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("span", { className: "sr-only", children: [
              message,
              "..."
            ] })
          ]
        }
      );
    };
  }
});

// src/components/GuidancePanel.tsx
var import_jsx_runtime32, GuidancePanel;
var init_GuidancePanel = __esm({
  "src/components/GuidancePanel.tsx"() {
    "use strict";
    import_jsx_runtime32 = __toESM(require_jsx_runtime());
    GuidancePanel = ({
      guidance,
      onDismiss,
      className = ""
    }) => {
      const variant = guidance.isCrisis ? "warning" : "info";
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: `guidance-panel guidance-panel-${variant} ${className}`, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "guidance-panel-content", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "guidance-panel-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h4", { children: "AI Guidance" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: onDismiss, className: "guidance-panel-close", children: "\xD7" })
        ] }),
        guidance.isCrisis && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("p", { className: "guidance-panel-crisis-warning", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("strong", { children: "Crisis Detected:" }),
          " ",
          guidance.flagReason
        ] }),
        guidance.suggestedResponses.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "guidance-panel-responses", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h5", { children: "Suggested Responses:" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("ul", { children: guidance.suggestedResponses.map((response, index2) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("li", { children: response }, index2)) })
        ] }),
        guidance.suggestedResources.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "guidance-panel-resources", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h5", { children: "Recommended Resources:" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("ul", { children: guidance.suggestedResources.map((resource, index2) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("li", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("strong", { children: resource.title }),
            ": ",
            resource.contact
          ] }, index2)) })
        ] })
      ] }) });
    };
  }
});

// src/components/MobileKeyboardHandler.tsx
var import_react39, import_jsx_runtime33, useMobileViewport, MobileAppInput, MobileChatComposer;
var init_MobileKeyboardHandler = __esm({
  "src/components/MobileKeyboardHandler.tsx"() {
    "use strict";
    import_react39 = __toESM(require_react());
    import_jsx_runtime33 = __toESM(require_jsx_runtime());
    useMobileViewport = () => {
      const [isMobile, setIsMobile] = (0, import_react39.useState)(false);
      const [isKeyboardOpen, setIsKeyboardOpen] = (0, import_react39.useState)(false);
      const [viewportHeight, setViewportHeight] = (0, import_react39.useState)(0);
      const [keyboardHeight, setKeyboardHeight] = (0, import_react39.useState)(0);
      (0, import_react39.useEffect)(() => {
        const checkMobile = () => {
          const mobile = window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          setIsMobile(mobile);
        };
        const updateViewportHeight = () => {
          const vh = window.innerHeight * 0.01;
          document.documentElement.style.setProperty("--vh", `${vh}px`);
          document.documentElement.style.setProperty("--mobile-vh", `${window.innerHeight}px`);
          setViewportHeight(window.innerHeight);
        };
        const detectKeyboard = () => {
          const currentHeight = window.innerHeight;
          const windowHeight = window.screen.height;
          const keyboardThreshold = windowHeight * 0.25;
          if (windowHeight - currentHeight > keyboardThreshold) {
            const calculatedKeyboardHeight = windowHeight - currentHeight;
            setKeyboardHeight(calculatedKeyboardHeight);
            setIsKeyboardOpen(true);
            document.documentElement.style.setProperty("--keyboard-height", `${calculatedKeyboardHeight}px`);
            document.documentElement.style.setProperty("--is-keyboard-open", "1");
            document.body.classList.add("keyboard-open");
          } else {
            setKeyboardHeight(0);
            setIsKeyboardOpen(false);
            document.documentElement.style.setProperty("--keyboard-height", "0px");
            document.documentElement.style.setProperty("--is-keyboard-open", "0");
            document.body.classList.remove("keyboard-open");
          }
        };
        checkMobile();
        updateViewportHeight();
        detectKeyboard();
        window.addEventListener("resize", updateViewportHeight);
        window.addEventListener("resize", detectKeyboard);
        window.addEventListener("orientationchange", () => {
          setTimeout(() => {
            updateViewportHeight();
            detectKeyboard();
          }, 500);
        });
        if (window.visualViewport) {
          const handleVisualViewportChange = () => {
            if (window.visualViewport) {
              const heightDiff = window.innerHeight - window.visualViewport.height;
              if (heightDiff > 150) {
                setKeyboardHeight(heightDiff);
                setIsKeyboardOpen(true);
                document.documentElement.style.setProperty("--keyboard-height", `${heightDiff}px`);
                document.body.classList.add("keyboard-open");
              } else {
                setKeyboardHeight(0);
                setIsKeyboardOpen(false);
                document.documentElement.style.setProperty("--keyboard-height", "0px");
                document.body.classList.remove("keyboard-open");
              }
            }
          };
          window.visualViewport.addEventListener("resize", handleVisualViewportChange);
          return () => {
            window.removeEventListener("resize", updateViewportHeight);
            window.removeEventListener("resize", detectKeyboard);
            window.visualViewport?.removeEventListener("resize", handleVisualViewportChange);
          };
        }
        return () => {
          window.removeEventListener("resize", updateViewportHeight);
          window.removeEventListener("resize", detectKeyboard);
        };
      }, []);
      const scrollIntoView = (0, import_react39.useCallback)((element3, options2 = {}) => {
        if (!isMobile) return;
        const defaultOptions2 = {
          behavior: "smooth",
          block: "center",
          ...options2
        };
        element3.scrollIntoView(defaultOptions2);
      }, [isMobile]);
      return {
        isMobile,
        isKeyboardOpen,
        viewportHeight,
        keyboardHeight,
        scrollIntoView
      };
    };
    MobileAppInput = ({
      value,
      onChange,
      onKeyDown,
      placeholder = "Type your message...",
      className = "",
      containerStyle = {},
      style = {},
      autoFocus = false,
      type = "text"
    }) => {
      const inputRef = (0, import_react39.useRef)(null);
      const { isMobile, scrollIntoView } = useMobileViewport();
      const handleFocus = (0, import_react39.useCallback)((e4) => {
        if (!isMobile) return;
        e4.target.classList.add("mobile-focused");
        setTimeout(() => {
          if (inputRef.current) {
            scrollIntoView(inputRef.current, { block: "end" });
          }
        }, 300);
      }, [isMobile, scrollIntoView]);
      const handleBlur = (0, import_react39.useCallback)((e4) => {
        e4.target.classList.remove("mobile-focused");
      }, []);
      const handleTouchStart = (0, import_react39.useCallback)((e4) => {
        if (isMobile && inputRef.current && inputRef.current !== document.activeElement) {
          e4.preventDefault();
          inputRef.current.focus();
        }
      }, [isMobile]);
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { style: { flexGrow: 1, marginBottom: 0, ...containerStyle }, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        "input",
        {
          ref: inputRef,
          type,
          value,
          onChange,
          onKeyDown,
          onFocus: handleFocus,
          onBlur: handleBlur,
          onTouchStart: handleTouchStart,
          placeholder,
          className: `chat-input ${className}`,
          autoFocus,
          style: {
            fontSize: "16px",
            // Prevent zoom on iOS Safari
            padding: "12px 16px",
            borderRadius: "20px",
            border: "1px solid var(--border-color)",
            backgroundColor: "var(--bg-tertiary)",
            minHeight: "44px",
            // WCAG touch target size
            width: "100%",
            outline: "none",
            transition: "all 0.2s ease",
            // Enhanced mobile optimizations
            WebkitTapHighlightColor: "transparent",
            // Remove tap highlights
            WebkitAppearance: "none",
            // Remove native styling
            WebkitUserSelect: "text",
            // Allow text selection
            resize: "none",
            // Prevent textarea resize
            // Prevent zoom on focus for iOS Safari
            WebkitTextSizeAdjust: "100%",
            ...style
          },
          "aria-label": placeholder,
          autoComplete: "off",
          autoCorrect: "off",
          autoCapitalize: "sentences",
          spellCheck: "true",
          inputMode: "text",
          enterKeyHint: "send",
          "data-mobile-input": "true"
        }
      ) });
    };
    MobileChatComposer = ({
      children,
      className = "",
      style = {}
    }) => {
      const { isMobile } = useMobileViewport();
      const composerStyle = {
        position: "fixed",
        bottom: 0,
        left: isMobile ? 0 : "280px",
        // Full width on mobile, account for sidebar on desktop
        right: 0,
        padding: "1rem",
        background: "rgba(255, 255, 255, 0.98)",
        backdropFilter: "blur(20px)",
        borderTop: "1px solid var(--border-color)",
        boxShadow: "0 -4px 20px rgba(0, 0, 0, 0.1)",
        zIndex: 1e3,
        // Safe area adjustments for iPhone
        paddingBottom: isMobile ? "max(1rem, env(safe-area-inset-bottom))" : "1rem",
        // Smooth transition when keyboard appears
        transition: "transform 0.2s ease-out",
        ...style
      };
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        "div",
        {
          className: `chat-composer ${className} ${isMobile ? "mobile-composer" : ""}`,
          style: composerStyle,
          children
        }
      );
    };
  }
});

// src/views/ChatView.tsx
var import_react40, import_jsx_runtime34, ChatView, ChatView_default;
var init_ChatView = __esm({
  "src/views/ChatView.tsx"() {
    "use strict";
    import_react40 = __toESM(require_react());
    init_LazyMarkdown();
    init_icons_dynamic();
    init_TypingIndicator();
    init_formatTimeAgo();
    init_GuidancePanel();
    init_AppButton();
    init_MobileKeyboardHandler();
    init_ApiClient();
    init_AuthContext();
    init_CulturalCrisisAlert2();
    init_NotificationContext();
    init_chatStore();
    init_sessionStore();
    import_jsx_runtime34 = __toESM(require_jsx_runtime());
    ChatView = ({ session, dilemma, onViewHelperProfile }) => {
      const [newMessage, setNewMessage] = (0, import_react40.useState)("");
      const messagesEndRef = (0, import_react40.useRef)(null);
      const { userToken, helperProfile } = useAuth();
      const [showBreakPrompt, setShowBreakPrompt] = (0, import_react40.useState)(false);
      const { addToast, showConfirmationModal } = useNotification();
      const { sendMessage, setTyping, closeChat, guidance, dismissGuidance } = useChatStore();
      const { helpSessions, toggleFavorite } = useSessionStore();
      useMobileViewport();
      const perspective = session.perspective;
      const helperForChat = session.helper;
      const helpSessionDetails = helpSessions.find((hs) => hs.id === session.helpSessionId);
      const isFavorited = helpSessionDetails?.isFavorited ?? false;
      const [, setIsHolding] = (0, import_react40.useState)(false);
      const [holdProgress, setHoldProgress] = (0, import_react40.useState)(0);
      const holdTimerRef = (0, import_react40.useRef)(null);
      const animationFrameRef = (0, import_react40.useRef)(null);
      (0, import_react40.useEffect)(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
        if (session.messages.length > 20 && session.messages.length % 10 === 0) {
          setShowBreakPrompt(true);
          setTimeout(() => setShowBreakPrompt(false), 1e4);
        }
      }, [session.messages, session.isTyping]);
      const handleSend = () => {
        if (!newMessage.trim()) return;
        sendMessage(session.dilemmaId, newMessage);
        setNewMessage("");
        setTyping(session.dilemmaId, false);
      };
      const handleBlockUser = async () => {
        const blockerId = perspective === "helper" ? helperProfile?.id : userToken;
        const blockedId = perspective === "helper" ? dilemma.userToken : dilemma.assignedHelperId;
        if (!blockerId || !blockedId) {
          addToast("Could not identify users to block.", "error");
          return;
        }
        showConfirmationModal({
          title: "Block User?",
          message: "Are you sure you want to block this user? You will no longer see their posts or messages.",
          confirmText: "Block",
          confirmVariant: "danger",
          onConfirm: async () => {
            try {
              await ApiClient.userBlocking.blockUser(blockerId, blockedId);
              addToast("User has been blocked. This chat will now close.", "info");
              closeChat(dilemma.id);
            } catch (err) {
              addToast(err.message || "Failed to block user.", "error");
            }
          }
        });
      };
      const handleFavoriteClick = () => {
        if (session.helpSessionId) {
          toggleFavorite(session.helpSessionId);
        }
      };
      const triggerEmergency = () => {
        showConfirmationModal({
          title: "Confirm Emergency",
          message: "Are you in immediate danger? This will attempt to get your location and send an alert.",
          confirmText: "YES, SEND ALERT",
          confirmVariant: "danger",
          onConfirm: () => {
            navigator.geolocation.getCurrentPosition(
              (position3) => {
                const { latitude, longitude } = position3.coords;
                ApiClient.emergency.trigger(dilemma.id, { latitude, longitude });
                addToast("Emergency alert sent with your approximate location.", "success");
              },
              (error44) => {
                let errorMessage = "Could not get your location. ";
                switch (error44.code) {
                  case error44.PERMISSION_DENIED:
                    errorMessage += "Location access was denied. Please enable location permissions in your browser settings.";
                    break;
                  case error44.POSITION_UNAVAILABLE:
                    errorMessage += "Location information is unavailable. Your device may not support location services.";
                    break;
                  case error44.TIMEOUT:
                    errorMessage += "Location request timed out. Please check your internet connection.";
                    break;
                  default:
                    errorMessage += "An unknown error occurred while getting your location.";
                }
                console.error("Geolocation error:", error44.code, error44.message);
                showConfirmationModal({
                  title: "Location Access Issue",
                  message: `${errorMessage}

Would you like to send the emergency alert without location data?`,
                  confirmText: "Yes, Send Anyway",
                  cancelText: "Cancel",
                  confirmVariant: "danger",
                  onConfirm: () => {
                    ApiClient.emergency.trigger(dilemma.id).then(() => {
                      addToast("Emergency alert sent successfully without location data.", "warning");
                    }).catch((err) => {
                      console.error("Failed to send emergency alert:", err);
                      addToast("Failed to send emergency alert. Please try again or call 911.", "error");
                    });
                  }
                });
              },
              { enableHighAccuracy: true, timeout: 1e4, maximumAge: 0 }
            );
          }
        });
      };
      const startHold = () => {
        if (holdTimerRef.current) clearTimeout(holdTimerRef.current);
        if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);
        setIsHolding(true);
        const startTime = Date.now();
        const duration3 = 3e3;
        const animateProgress = () => {
          const elapsed = Date.now() - startTime;
          const progress = Math.min(elapsed / duration3, 1);
          setHoldProgress(progress);
          if (progress < 1) {
            animationFrameRef.current = requestAnimationFrame(animateProgress);
          }
        };
        animationFrameRef.current = requestAnimationFrame(animateProgress);
        holdTimerRef.current = window.setTimeout(() => {
          triggerEmergency();
          endHold();
        }, duration3);
      };
      const endHold = () => {
        setIsHolding(false);
        setHoldProgress(0);
        if (holdTimerRef.current) {
          clearTimeout(holdTimerRef.current);
          holdTimerRef.current = null;
        }
        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
          animationFrameRef.current = null;
        }
      };
      const getHeaderTitle = () => {
        if (perspective === "helper") return "Chat with Seeker";
        if (helperForChat) return `Chat with ${helperForChat.displayName}`;
        return "Waiting for a helper...";
      };
      const getHeaderSubTitle = () => {
        if (perspective === "helper") return `About: "${dilemma.content.substring(0, 30)}..."`;
        if (helperForChat) return `Reputation: ${helperForChat.reputation.toFixed(1)}/5.0`;
        return `Your conversation about "${dilemma.content.substring(0, 30)}..."`;
      };
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "chat-view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "chat-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("button", { onClick: () => closeChat(dilemma.id), className: "back-btn", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(BackIcon, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "chat-header-info", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h2", { children: helperForChat && perspective !== "helper" ? /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
              "button",
              {
                type: "button",
                onClick: () => onViewHelperProfile(helperForChat.id),
                style: {
                  background: "none",
                  border: "none",
                  color: "inherit",
                  textDecoration: "underline",
                  cursor: "pointer",
                  font: "inherit",
                  padding: 0
                },
                children: getHeaderTitle()
              }
            ) : getHeaderTitle() }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { children: getHeaderSubTitle() })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "chat-header-actions", style: { display: "flex", gap: "1rem", alignItems: "center" }, children: [
            perspective === "seeker" && session.helpSessionId && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
              AppButton,
              {
                variant: "ghost",
                className: `btn-sm btn-support ${isFavorited ? "supported" : ""}`,
                onClick: handleFavoriteClick,
                style: { padding: "0.5rem" },
                "aria-label": isFavorited ? "Unfavorite this helper" : "Favorite this helper",
                icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(HeartIcon2, {})
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(AppButton, { variant: "secondary", onClick: handleBlockUser, className: "btn-sm", children: "Block User" })
          ] })
        ] }),
        showBreakPrompt && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { style: { padding: "0.5rem 1rem", backgroundColor: "var(--accent-warning)", color: "var(--bg-primary)", textAlign: "center" }, children: "This is a long conversation. Remember to take breaks!" }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "chat-messages", children: [
          guidance?.isCrisis && perspective === "seeker" && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
            CulturalCrisisAlert_default,
            {
              analysisText: session.messages.slice(-3).map((m3) => m3.text).join(" "),
              show: true,
              userType: "seeker",
              onCrisisDetected: (_result) => {
              },
              onDismiss: () => dismissGuidance()
            }
          ),
          session.messages.map((msg) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: `message-group ${msg.sender}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "message-bubble-wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "message-bubble markdown-content", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LazyMarkdown, { className: "chat-message", autoLoad: true, children: msg.text }) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "message-timestamp", children: formatChatTimestamp(msg.timestamp) })
          ] }, msg.id)),
          session.isTyping && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(TypingIndicator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { ref: messagesEndRef })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(MobileChatComposer, { style: { position: "relative" }, children: [
          perspective === "seeker" && /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
            "button",
            {
              className: "btn btn-danger",
              onMouseDown: startHold,
              onMouseUp: endHold,
              onTouchStart: startHold,
              onTouchEnd: endHold,
              style: {
                position: "absolute",
                right: "calc(100% + 1rem)",
                /* Position left of the input area */
                top: "50%",
                transform: "translateY(-50%)",
                width: "auto",
                padding: "0.75rem 1rem",
                display: "flex",
                alignItems: "center",
                gap: "0.5rem",
                overflow: "hidden",
                minHeight: "44px",
                // Touch target size
                borderRadius: "20px"
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { style: { position: "absolute", left: 0, top: 0, bottom: 0, background: "rgba(255,255,255,0.3)", width: `${holdProgress * 100}%` } }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(CrisisIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { style: { position: "relative" }, children: "Emergency" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
            MobileAppInput,
            {
              type: "text",
              placeholder: "Type your message...",
              value: newMessage,
              onChange: (e4) => {
                setNewMessage(e4.target.value);
                if (e4.target.value) {
                  setTyping(session.dilemmaId, true);
                } else {
                  setTyping(session.dilemmaId, false);
                }
              },
              onKeyDown: (e4) => {
                if (e4.key === "Enter" && !e4.shiftKey) {
                  e4.preventDefault();
                  handleSend();
                }
              },
              className: "chat-input",
              containerStyle: { flexGrow: 1, marginBottom: 0 },
              style: {
                fontSize: "16px",
                // Prevent zoom on iOS
                padding: "12px 16px",
                borderRadius: "20px"
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
            AppButton,
            {
              onClick: handleSend,
              disabled: !newMessage.trim(),
              className: "chat-send-btn",
              style: {
                minWidth: "44px",
                minHeight: "44px",
                borderRadius: "50%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                padding: 0,
                marginLeft: "8px"
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SendIcon, {})
            }
          )
        ] }),
        perspective === "helper" && guidance && guidance.dilemmaId === session.dilemmaId && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(GuidancePanel, { guidance, onDismiss: dismissGuidance })
      ] });
    };
    ChatView_default = ChatView;
  }
});

// src/routes/ChatRoute.tsx
var ChatRoute_exports = {};
__export(ChatRoute_exports, {
  default: () => ChatRoute_default
});
var import_react41, import_jsx_runtime35, ChatRoute, ChatRoute_default;
var init_ChatRoute = __esm({
  "src/routes/ChatRoute.tsx"() {
    "use strict";
    import_react41 = __toESM(require_react());
    init_ChatView();
    init_AuthContext();
    import_jsx_runtime35 = __toESM(require_jsx_runtime());
    ChatRoute = () => {
      const { user } = useAuth();
      const [session, setSession] = (0, import_react41.useState)(null);
      const [dilemma, setDilemma] = (0, import_react41.useState)(null);
      (0, import_react41.useEffect)(() => {
        if (!session && user) {
          const defaultSession = {
            dilemmaId: `dilemma-${Date.now()}`,
            messages: [],
            unread: false,
            isTyping: false,
            perspective: "seeker",
            helpSessionId: void 0,
            helper: void 0
          };
          setSession(defaultSession);
        }
      }, [user, session]);
      (0, import_react41.useEffect)(() => {
        if (!dilemma) {
          const defaultDilemma = {
            id: `dilemma-${Date.now()}`,
            content: "General support conversation",
            category: "general",
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            userToken: user?.sub || "",
            supportCount: 0,
            isSupported: false,
            isReported: false,
            reportReason: "",
            status: "active",
            assignedHelperId: void 0,
            resolved_by_seeker: false,
            requestedHelperId: void 0,
            summary: void 0,
            summaryLoading: false,
            moderation: void 0,
            aiMatchReason: void 0
          };
          setDilemma(defaultDilemma);
        }
      }, [dilemma, user]);
      const handleViewHelperProfile = (helperId) => {
        console.log("Viewing helper profile:", helperId);
      };
      if (!session || !dilemma) {
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { children: "Loading chat..." });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
        ChatView_default,
        {
          session,
          dilemma,
          onViewHelperProfile: handleViewHelperProfile
        }
      );
    };
    ChatRoute_default = ChatRoute;
  }
});

// src/components/AIAssistanceIndicator.tsx
var import_jsx_runtime36, AIAssistanceIndicator;
var init_AIAssistanceIndicator = __esm({
  "src/components/AIAssistanceIndicator.tsx"() {
    "use strict";
    import_jsx_runtime36 = __toESM(require_jsx_runtime());
    AIAssistanceIndicator = ({
      isActive = true,
      className = "",
      style,
      message = "AI assistance active",
      variant = "default"
    }) => {
      const baseClass = "ai-assistance-indicator";
      const variantClass = variant !== "default" ? `ai-assistance-indicator-${variant}` : "";
      const activeClass = isActive ? "ai-assistance-active" : "ai-assistance-inactive";
      const classes = [
        baseClass,
        variantClass,
        activeClass,
        className
      ].filter(Boolean).join(" ");
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
        "div",
        {
          className: classes,
          style,
          role: "status",
          "aria-live": "polite",
          "aria-label": isActive ? message : "AI assistance inactive",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "ai-indicator-icon", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: "ai-indicator-pulse" }) }),
            variant !== "minimal" && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: "ai-indicator-text", children: isActive ? message : "AI assistance inactive" })
          ]
        }
      );
    };
  }
});

// src/components/TherapistSelector.tsx
var import_react42, import_jsx_runtime37, therapists, TherapistSelector;
var init_TherapistSelector = __esm({
  "src/components/TherapistSelector.tsx"() {
    "use strict";
    import_react42 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime37 = __toESM(require_jsx_runtime());
    therapists = [
      {
        id: "1",
        name: "Dr. Sarah Chen",
        avatar: "\u{1F469}\u200D\u2695\uFE0F",
        specialty: "Anxiety & Stress Management",
        bio: "Specializes in helping people manage anxiety and stress through mindfulness and cognitive techniques.",
        approach: "CBT & Mindfulness",
        languages: ["English", "Mandarin"],
        availability: "always",
        tags: ["Anxiety", "Stress", "Mindfulness", "Work-Life Balance"]
      },
      {
        id: "2",
        name: "Dr. Marcus Johnson",
        avatar: "\u{1F468}\u200D\u2695\uFE0F",
        specialty: "Depression & Mood Support",
        bio: "Focused on supporting individuals through depression and mood challenges with empathy and understanding.",
        approach: "Person-Centered Therapy",
        languages: ["English"],
        availability: "always",
        tags: ["Depression", "Mood", "Self-Esteem", "Motivation"]
      },
      {
        id: "3",
        name: "Dr. Elena Rodriguez",
        avatar: "\u{1F469}\u200D\u{1F9B0}",
        specialty: "Relationship & Social Issues",
        bio: "Helps navigate relationship challenges and social difficulties with practical, compassionate guidance.",
        approach: "Systemic Therapy",
        languages: ["English", "Spanish"],
        availability: "always",
        tags: ["Relationships", "Communication", "Family", "Boundaries"]
      },
      {
        id: "4",
        name: "Dr. Aisha Patel",
        avatar: "\u{1F469}\u{1F3FD}\u200D\u2695\uFE0F",
        specialty: "Trauma & PTSD Recovery",
        bio: "Experienced in trauma-informed care, helping individuals process and heal from difficult experiences.",
        approach: "EMDR & Somatic Therapy",
        languages: ["English", "Hindi"],
        availability: "always",
        tags: ["Trauma", "PTSD", "Healing", "Safety"]
      },
      {
        id: "5",
        name: "Dr. James Kim",
        avatar: "\u{1F468}\u{1F3FB}\u200D\u2695\uFE0F",
        specialty: "LGBTQ+ Support & Identity",
        bio: "Provides affirming support for LGBTQ+ individuals navigating identity, relationships, and acceptance.",
        approach: "Affirmative Therapy",
        languages: ["English", "Korean"],
        availability: "always",
        tags: ["LGBTQ+", "Identity", "Coming Out", "Acceptance"]
      },
      {
        id: "6",
        name: "Dr. Fatima Al-Rashid",
        avatar: "\u{1F9D5}",
        specialty: "Cultural & Spiritual Wellness",
        bio: "Integrates cultural sensitivity and spiritual perspectives in mental health support.",
        approach: "Culturally-Responsive Therapy",
        languages: ["English", "Arabic"],
        availability: "always",
        tags: ["Culture", "Spirituality", "Faith", "Identity"]
      },
      {
        id: "7",
        name: "Dr. Michael Thompson",
        avatar: "\u{1F468}\u200D\u2695\uFE0F",
        specialty: "Addiction & Recovery Support",
        bio: "Supports individuals in addiction recovery with compassion and evidence-based strategies.",
        approach: "Motivational Interviewing",
        languages: ["English"],
        availability: "always",
        tags: ["Addiction", "Recovery", "Sobriety", "Coping"]
      },
      {
        id: "8",
        name: "Dr. Luna Nakamura",
        avatar: "\u{1F469}\u{1F3FB}\u200D\u{1F4BC}",
        specialty: "Teen & Young Adult Issues",
        bio: "Specializes in supporting teens and young adults through life transitions and challenges.",
        approach: "DBT & Art Therapy",
        languages: ["English", "Japanese"],
        availability: "always",
        tags: ["Teens", "School", "Peer Pressure", "Identity"]
      },
      {
        id: "9",
        name: "Dr. Robert Stone",
        avatar: "\u{1F468}\u200D\u{1F9B3}",
        specialty: "Grief & Loss Counseling",
        bio: "Provides gentle support for those experiencing grief, loss, and life transitions.",
        approach: "Grief Counseling",
        languages: ["English"],
        availability: "always",
        tags: ["Grief", "Loss", "Bereavement", "Healing"]
      },
      {
        id: "10",
        name: "Dr. Sofia Andersson",
        avatar: "\u{1F469}\u200D\u{1F52C}",
        specialty: "Neurodivergent Support",
        bio: "Supports individuals with ADHD, autism, and other neurodivergent conditions.",
        approach: "Neurodiversity-Affirming",
        languages: ["English", "Swedish"],
        availability: "always",
        tags: ["ADHD", "Autism", "Neurodiversity", "Executive Function"]
      },
      {
        id: "11",
        name: "Dr. David Chen-Williams",
        avatar: "\u{1F468}\u{1F3FD}\u200D\u2695\uFE0F",
        specialty: "Men's Mental Health",
        bio: "Focuses on men's mental health issues including emotional expression and masculine identity.",
        approach: "Gender-Aware Therapy",
        languages: ["English"],
        availability: "always",
        tags: ["Men's Health", "Emotions", "Masculinity", "Vulnerability"]
      },
      {
        id: "12",
        name: "Dr. Maria Santos",
        avatar: "\u{1F469}\u{1F3FD}\u200D\u{1F4BC}",
        specialty: "Workplace & Career Stress",
        bio: "Helps professionals manage burnout, career transitions, and workplace challenges.",
        approach: "Solution-Focused Therapy",
        languages: ["English", "Portuguese"],
        availability: "always",
        tags: ["Career", "Burnout", "Work Stress", "Leadership"]
      }
    ];
    TherapistSelector = ({
      onSelectTherapist,
      selectedTherapist
    }) => {
      const [searchTerm, setSearchTerm] = (0, import_react42.useState)("");
      const [selectedTag, setSelectedTag] = (0, import_react42.useState)(null);
      const allTags = Array.from(new Set(therapists.flatMap((t4) => t4.tags || [])));
      const filteredTherapists = therapists.filter((therapist) => {
        const matchesSearch = searchTerm === "" || therapist.name.toLowerCase().includes(searchTerm.toLowerCase()) || therapist.specialty.toLowerCase().includes(searchTerm.toLowerCase()) || therapist.bio.toLowerCase().includes(searchTerm.toLowerCase()) || therapist.tags?.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()));
        const matchesTag = !selectedTag || therapist.tags?.includes(selectedTag);
        return matchesSearch && matchesTag;
      });
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("style", { children: `
        .therapist-selector {
          padding: 1.5rem;
          max-width: 1200px;
          margin: 0 auto;
        }

        .therapist-selector-header {
          text-align: center;
          margin-bottom: 2rem;
        }

        .therapist-selector-header h2 {
          font-size: 2rem;
          margin-bottom: 0.5rem;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .therapist-selector-header p {
          color: var(--text-secondary);
          font-size: 1.1rem;
        }

        .therapist-search {
          margin-bottom: 1.5rem;
        }

        .search-input {
          width: 100%;
          padding: 1rem;
          border: 2px solid var(--border-color);
          border-radius: 12px;
          font-size: 1rem;
          background: var(--bg-secondary);
          color: var(--text-primary);
          transition: all 0.3s ease;
        }

        .search-input:focus {
          outline: none;
          border-color: var(--accent-primary);
          box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .therapist-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
          margin-bottom: 2rem;
        }

        .tag-filter {
          padding: 0.5rem 1rem;
          border-radius: 20px;
          background: var(--bg-secondary);
          color: var(--text-secondary);
          border: 1px solid var(--border-color);
          cursor: pointer;
          transition: all 0.3s ease;
          font-size: 0.9rem;
        }

        .tag-filter:hover {
          border-color: var(--accent-primary);
          color: var(--accent-primary);
        }

        .tag-filter.active {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border-color: transparent;
        }

        .therapist-list {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
          gap: 1.5rem;
        }

        .therapist-card {
          background: var(--card-bg);
          border-radius: 16px;
          padding: 1.5rem;
          cursor: pointer;
          transition: all 0.3s ease;
          border: 2px solid transparent;
          position: relative;
          overflow: hidden;
        }

        .therapist-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(90deg, #667eea, #764ba2, #f27121, #e94057);
          opacity: 0;
          transition: opacity 0.3s ease;
        }

        .therapist-card:hover {
          transform: translateY(-4px);
          box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
          border-color: var(--accent-primary);
        }

        .therapist-card:hover::before {
          opacity: 1;
        }

        .therapist-card.selected {
          border-color: var(--accent-primary);
          background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        }

        .therapist-card.selected::before {
          opacity: 1;
        }

        .therapist-card-header {
          display: flex;
          align-items: center;
          margin-bottom: 1rem;
        }

        .therapist-avatar {
          width: 60px;
          height: 60px;
          border-radius: 50%;
          background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
          display: flex;
          align-items: center;
          justify-content: center;
          margin-right: 1rem;
          position: relative;
        }

        .therapist-emoji {
          font-size: 2rem;
        }

        .availability-badge {
          position: absolute;
          bottom: -2px;
          right: -2px;
          width: 16px;
          height: 16px;
          background: #10b981;
          border-radius: 50%;
          border: 2px solid var(--card-bg);
        }

        .therapist-info {
          flex: 1;
        }

        .therapist-info h3 {
          margin: 0 0 0.25rem 0;
          font-size: 1.1rem;
          color: var(--text-primary);
        }

        .therapist-specialty {
          color: var(--accent-primary);
          font-weight: 600;
          font-size: 0.9rem;
          margin-bottom: 0.5rem;
        }

        .therapist-bio {
          color: var(--text-secondary);
          line-height: 1.5;
          font-size: 0.95rem;
          margin-bottom: 0.75rem;
        }

        .therapist-approach {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: var(--text-secondary);
          font-size: 0.85rem;
          margin-bottom: 0.5rem;
        }

        .therapist-languages {
          display: flex;
          gap: 0.5rem;
          flex-wrap: wrap;
          margin-bottom: 0.75rem;
        }

        .language-badge {
          padding: 0.25rem 0.5rem;
          background: rgba(102, 126, 234, 0.1);
          color: var(--accent-primary);
          border-radius: 8px;
          font-size: 0.8rem;
        }

        .therapist-tags-list {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
        }

        .therapist-tag {
          padding: 0.25rem 0.75rem;
          background: var(--bg-secondary);
          color: var(--text-secondary);
          border-radius: 12px;
          font-size: 0.8rem;
        }

        .no-results {
          text-align: center;
          padding: 3rem;
          color: var(--text-secondary);
        }

        .no-results h3 {
          margin-bottom: 1rem;
          color: var(--text-primary);
        }

        @media (max-width: 768px) {
          .therapist-list {
            grid-template-columns: 1fr;
          }

          .therapist-selector-header h2 {
            font-size: 1.5rem;
          }
        }
      ` }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-selector", children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-selector-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h2", { children: "Choose Your AI Companion" }),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { children: "Select a specialized AI therapist that matches your current needs" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "therapist-search", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
            "input",
            {
              type: "text",
              className: "search-input",
              placeholder: "Search by name, specialty, or concern...",
              value: searchTerm,
              onChange: (e4) => setSearchTerm(e4.target.value)
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-tags", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              "button",
              {
                className: `tag-filter ${!selectedTag ? "active" : ""}`,
                onClick: () => setSelectedTag(null),
                children: "All Specialties"
              }
            ),
            allTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              "button",
              {
                className: `tag-filter ${selectedTag === tag ? "active" : ""}`,
                onClick: () => setSelectedTag(tag === selectedTag ? null : tag),
                children: tag
              },
              tag
            ))
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "therapist-list", children: filteredTherapists.length > 0 ? filteredTherapists.map((therapist) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
            "div",
            {
              className: `therapist-card ${selectedTherapist?.id === therapist.id ? "selected" : ""}`,
              onClick: () => onSelectTherapist(therapist),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-card-header", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-avatar", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "therapist-emoji", children: therapist.avatar }),
                    therapist.availability === "always" && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "availability-badge" })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-info", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h3", { children: therapist.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "therapist-specialty", children: therapist.specialty })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "therapist-bio", children: therapist.bio }),
                therapist.approach && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "therapist-approach", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(SparkleIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { children: therapist.approach })
                ] }),
                therapist.languages && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "therapist-languages", children: therapist.languages.map((lang) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "language-badge", children: lang }, lang)) }),
                therapist.tags && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "therapist-tags-list", children: therapist.tags.slice(0, 3).map((tag) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "therapist-tag", children: tag }, tag)) })
              ]
            },
            therapist.id
          )) : /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "no-results", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h3", { children: "No therapists found" }),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { children: "Try adjusting your search or filters to find the right companion for you." })
          ] }) })
        ] })
      ] });
    };
  }
});

// src/views/AIChatView.tsx
var AIChatView_exports = {};
__export(AIChatView_exports, {
  AIChatRoute: () => AIChatRoute,
  AIChatView: () => AIChatView,
  default: () => AIChatView_default
});
var import_react43, import_jsx_runtime38, AIChatView, AIChatRoute, AIChatView_default;
var init_AIChatView = __esm({
  "src/views/AIChatView.tsx"() {
    "use strict";
    import_react43 = __toESM(require_react());
    init_LazyMarkdown();
    init_icons_dynamic();
    init_TypingIndicator();
    init_formatTimeAgo();
    init_AppButton();
    init_AppInput();
    init_AIAssistanceIndicator();
    init_TherapistSelector();
    import_jsx_runtime38 = __toESM(require_jsx_runtime());
    AIChatView = ({ session, onSendMessage, onClose }) => {
      const [newMessage, setNewMessage] = (0, import_react43.useState)("");
      const [isSending, setIsSending] = (0, import_react43.useState)(false);
      const messagesEndRef = (0, import_react43.useRef)(null);
      const [showDisclaimer, setShowDisclaimer] = (0, import_react43.useState)(true);
      const [selectedTherapist, setSelectedTherapist] = (0, import_react43.useState)(null);
      const [showTherapistSelector, setShowTherapistSelector] = (0, import_react43.useState)(false);
      (0, import_react43.useEffect)(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, [session.messages, session.isTyping]);
      const handleSend = async () => {
        if (!newMessage.trim()) return;
        setIsSending(true);
        const textToSend = newMessage;
        setNewMessage("");
        await onSendMessage(textToSend);
        setIsSending(false);
      };
      const handleAcceptDisclaimer = () => {
        setShowDisclaimer(false);
        setShowTherapistSelector(true);
      };
      const handleSelectTherapist = (therapist) => {
        setSelectedTherapist(therapist);
        setShowTherapistSelector(false);
      };
      const handleChangeTherapist = () => {
        setShowTherapistSelector(true);
      };
      if (showDisclaimer) {
        return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(import_jsx_runtime38.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("style", { children: `
                    .ai-disclaimer-overlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(0, 0, 0, 0.5);
                        backdrop-filter: blur(10px);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        padding: 2rem;
                        z-index: 10000;
                        animation: fadeIn 0.3s ease-out;
                    }
                    
                    .ai-disclaimer-modal {
                        background: var(--card-bg);
                        border-radius: 1.5rem;
                        padding: 2.5rem;
                        max-width: 560px;
                        width: 90%;
                        max-height: 90vh;
                        overflow-y: auto;
                        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
                        border: 1px solid var(--border-color);
                        animation: modalZoomIn 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
                    }
                    
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    
                    @keyframes modalZoomIn {
                        from {
                            transform: scale(0.9);
                            opacity: 0;
                        }
                        to {
                            transform: scale(1);
                            opacity: 1;
                        }
                    }
                    
                    .ai-disclaimer-header {
                        display: flex;
                        align-items: center;
                        gap: 1rem;
                        margin-bottom: 1.5rem;
                    }
                    
                    .ai-disclaimer-icon {
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border-radius: 1rem;
                        padding: 1rem;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        color: white;
                        font-size: 1.5rem;
                    }
                    
                    .ai-disclaimer-title {
                        flex: 1;
                    }
                    
                    .ai-disclaimer-title h2 {
                        margin: 0;
                        font-size: 1.5rem;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                    }
                    
                    .ai-disclaimer-subtitle {
                        color: var(--text-secondary);
                        font-size: 0.875rem;
                        margin-top: 0.25rem;
                    }
                    
                    .ai-disclaimer-body {
                        margin: 1.5rem 0;
                    }
                    
                    .ai-disclaimer-body p {
                        line-height: 1.6;
                        color: var(--text-primary);
                        margin-bottom: 1rem;
                    }
                    
                    .ai-disclaimer-list {
                        background: rgba(102, 126, 234, 0.05);
                        border-left: 3px solid #667eea;
                        padding: 1rem;
                        border-radius: 0.5rem;
                        margin: 1.5rem 0;
                    }
                    
                    .ai-disclaimer-list ul {
                        list-style: none;
                        padding: 0;
                        margin: 0;
                    }
                    
                    .ai-disclaimer-list li {
                        padding: 0.5rem 0;
                        color: var(--text-primary);
                        display: flex;
                        align-items: flex-start;
                    }
                    
                    .ai-disclaimer-list li:before {
                        content: '\u26A0';
                        color: #f59e0b;
                        margin-right: 0.75rem;
                        font-size: 1.1rem;
                    }
                    
                    .ai-disclaimer-warning {
                        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(239, 68, 68, 0.1));
                        border: 1px solid rgba(245, 158, 11, 0.3);
                        border-radius: 0.75rem;
                        padding: 1rem;
                        margin: 1.5rem 0;
                    }
                    
                    .ai-disclaimer-warning p {
                        margin: 0;
                        color: var(--text-primary);
                        font-size: 0.9rem;
                    }
                    
                    .ai-disclaimer-actions {
                        display: flex;
                        gap: 1rem;
                        margin-top: 2rem;
                    }
                    
                    .ai-disclaimer-actions button {
                        flex: 1;
                        padding: 0.75rem 1.5rem;
                        border-radius: 0.75rem;
                        font-weight: 600;
                        transition: all 0.2s ease;
                    }
                    
                    .ai-disclaimer-actions .btn-back {
                        background: var(--bg-secondary);
                        color: var(--text-primary);
                        border: 1px solid var(--border-color);
                    }
                    
                    .ai-disclaimer-actions .btn-back:hover {
                        background: var(--bg-tertiary);
                    }
                    
                    .ai-disclaimer-actions .btn-continue {
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        border: none;
                    }
                    
                    .ai-disclaimer-actions .btn-continue:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 10px 20px -5px rgba(102, 126, 234, 0.3);
                    }
                    
                    @media (max-width: 768px) {
                        .ai-disclaimer-overlay {
                            padding: 1rem;
                            justify-content: center;
                        }
                        
                        .ai-disclaimer-modal {
                            margin-right: 0;
                            padding: 1.5rem;
                        }
                        
                        .ai-disclaimer-actions {
                            flex-direction: column;
                        }
                    }
                ` }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-disclaimer-overlay", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-disclaimer-modal", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-disclaimer-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-disclaimer-icon", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AICompanionIcon, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-disclaimer-title", children: [
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h2", { children: "Astral AI Companion" }),
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-disclaimer-subtitle", children: "Your supportive AI listener" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-disclaimer-body", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { children: "You're about to connect with Astral AI, an automated companion designed to provide a safe, judgment-free space for you to express your thoughts and feelings." }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-disclaimer-list", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("ul", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { children: "This is an AI assistant, not a human or licensed therapist" }),
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { children: "Designed for supportive listening and emotional exploration" }),
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { children: "Cannot provide medical advice or handle crisis situations" })
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-disclaimer-warning", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("p", { children: [
                "\u{1F4A1} ",
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("strong", { children: "Need immediate help?" }),
                ' Please use our "Get Help Now" resources for crisis support and professional assistance.'
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { children: "By continuing, you acknowledge that you understand the nature and limitations of this AI companion." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-disclaimer-actions", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { className: "btn-back", onClick: onClose, children: "Go Back" }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { className: "btn-continue", onClick: handleAcceptDisclaimer, children: "I Understand, Continue" })
            ] })
          ] }) })
        ] });
      }
      if (showTherapistSelector) {
        return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "therapist-selection-container", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "therapist-selection-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              "button",
              {
                onClick: onClose,
                className: "back-button",
                "aria-label": "Go back",
                children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(BackIcon, {})
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h1", { children: "AI Therapy" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
            TherapistSelector,
            {
              onSelectTherapist: handleSelectTherapist,
              selectedTherapist
            }
          )
        ] });
      }
      if (!selectedTherapist) {
        setShowTherapistSelector(true);
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("button", { onClick: onClose, className: "ai-chat-back-btn", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(BackIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { children: "Back" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-header-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-avatar-wrapper", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-chat-avatar therapist-avatar-chat", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: "therapist-emoji-chat", children: selectedTherapist.avatar }) }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-chat-status-dot" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-header-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h2", { children: selectedTherapist.name }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("p", { className: "ai-chat-subtitle", children: [
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SparkleIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { children: selectedTherapist.specialty })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
            "button",
            {
              onClick: handleChangeTherapist,
              className: "change-therapist-btn",
              title: "Change therapist",
              children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SparkleIcon, {})
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AIAssistanceIndicator, { variant: "compact" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-chat-messages", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-messages-inner", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-safe-space", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(LockIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { children: "Safe & Confidential Space" })
          ] }),
          selectedTherapist && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-therapist-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-therapist-avatar", children: selectedTherapist.name.charAt(0) }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-therapist-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h3", { children: selectedTherapist.name }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { children: selectedTherapist.bio })
            ] })
          ] }),
          session.messages.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-welcome", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-chat-welcome-icon", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AICompanionIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h3", { children: "Welcome to your safe space" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { children: "I'm here to listen and help you explore your thoughts and feelings. Everything you share is private and judgment-free." }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-suggestions", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { className: "ai-chat-suggestion", onClick: () => onSendMessage("I'm feeling stressed"), children: "I'm feeling stressed" }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { className: "ai-chat-suggestion", onClick: () => onSendMessage("I need someone to talk to"), children: "I need someone to talk to" }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { className: "ai-chat-suggestion", onClick: () => onSendMessage("Help me understand my emotions"), children: "Help me understand my emotions" })
            ] })
          ] }),
          (session.messages || []).map((msg) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: `ai-message-group ${msg.sender}`, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-message-wrapper", children: [
            msg.sender === "ai" && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-message-avatar", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AICompanionIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-message-content", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-message-bubble markdown-content", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(LazyMarkdown, { className: "ai-message", autoLoad: true, children: msg.text }) }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: "ai-message-timestamp", children: formatChatTimestamp(msg.timestamp) })
            ] })
          ] }) }, msg.id)),
          session.isTyping && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-message-group ai", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-message-wrapper", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-message-avatar", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AICompanionIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "ai-message-content", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(TypingIndicator, {}) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { ref: messagesEndRef })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-composer", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "ai-chat-composer-inner", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              AppInput,
              {
                type: "text",
                placeholder: "Share what's on your mind...",
                value: newMessage,
                onChange: (e4) => setNewMessage(e4.target.value),
                onKeyPress: (e4) => e4.key === "Enter" && !isSending && handleSend(),
                disabled: isSending || session.isTyping,
                className: "ai-chat-input",
                containerStyle: { flexGrow: 1, marginBottom: 0 }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              AppButton,
              {
                onClick: handleSend,
                disabled: !newMessage.trim() || isSending || session.isTyping,
                isLoading: isSending,
                className: "ai-chat-send-btn",
                variant: "primary",
                children: !isSending && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SendIcon, {})
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("p", { className: "ai-chat-privacy-note", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(LockIcon, {}),
            "Your conversation is private and secure"
          ] })
        ] })
      ] });
    };
    AIChatRoute = () => {
      const [session, setSession] = (0, import_react43.useState)({
        messages: [],
        isTyping: false
      });
      const handleSendMessage = async (text5) => {
        const newMessage = {
          id: `msg-${Date.now()}`,
          sender: "user",
          text: text5,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        };
        setSession((prev) => ({
          ...prev,
          messages: [...prev.messages, newMessage]
        }));
      };
      const handleClose = () => {
        window.history.back();
      };
      return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
        AIChatView,
        {
          session,
          onSendMessage: handleSendMessage,
          onClose: handleClose
        }
      );
    };
    AIChatView_default = AIChatRoute;
  }
});

// src/views/AssessmentsView.tsx
var AssessmentsView_exports = {};
__export(AssessmentsView_exports, {
  AssessmentsView: () => AssessmentsView,
  default: () => AssessmentsView_default
});
var import_react44, import_jsx_runtime39, AssessmentsView, AssessmentsView_default;
var init_AssessmentsView = __esm({
  "src/views/AssessmentsView.tsx"() {
    "use strict";
    import_react44 = __toESM(require_react());
    init_Card();
    init_AppButton();
    init_ViewHeader();
    init_culturalContextService();
    import_jsx_runtime39 = __toESM(require_jsx_runtime());
    AssessmentsView = ({ setActiveView }) => {
      const [showCulturalOption, setShowCulturalOption] = (0, import_react44.useState)(false);
      const [selectedCulturalContext, setSelectedCulturalContext] = (0, import_react44.useState)(
        culturalContextService.getCulturalContext("en").region
      );
      const startAssessment = (type, cultural = false) => {
        setActiveView?.({
          view: "assessment-detail",
          params: {
            type,
            ...cultural && {
              culturalContext: selectedCulturalContext,
              cultural: true
            }
          }
        });
      };
      const culturalCardStyle = { marginBottom: "1rem", backgroundColor: "#eff6ff", border: "1px solid #bfdbfe" };
      const culturalContentStyle = { display: "flex", gap: "0.75rem", alignItems: "flex-start" };
      const culturalIconStyle = { fontSize: "1.25rem", marginTop: "0.125rem" };
      const culturalTextContainerStyle = { flex: 1 };
      const culturalTitleStyle = { margin: "0 0 0.5rem 0", color: "#1e40af" };
      const culturalDescriptionStyle = { color: "#1e40af", fontSize: "0.875rem", margin: "0 0 1rem 0" };
      const culturalButtonStyle = { fontSize: "0.875rem" };
      const culturalSelectionCardStyle = { marginBottom: "1rem", backgroundColor: "#f8fafc" };
      const culturalSelectionTitleStyle = { margin: "0 0 1rem 0", fontSize: "1rem" };
      const culturalButtonGridStyle = { display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(120px, 1fr))", gap: "0.5rem", marginBottom: "1rem" };
      const culturalContextButtonStyle = { fontSize: "0.875rem", padding: "0.5rem" };
      const culturalSelectionDescriptionStyle = { color: "var(--text-secondary)", fontSize: "0.875rem", margin: 0 };
      const assessmentListStyle = { marginTop: "1.5rem", display: "flex", flexDirection: "column", gap: "1rem" };
      const assessmentTitleStyle = { margin: 0 };
      const assessmentDescriptionStyle = { color: "var(--text-secondary)" };
      const culturalBadgeContainerStyle = { marginTop: "0.5rem", display: "flex", gap: "0.5rem" };
      const culturalBadgeStyle = {
        fontSize: "0.75rem",
        backgroundColor: "#e0f2fe",
        color: "#0369a1",
        padding: "0.25rem 0.5rem",
        borderRadius: "0.25rem"
      };
      const assessmentButtonContainerStyle = { display: "flex", flexDirection: "column", gap: "0.5rem" };
      const culturalAssessmentButtonStyle = { fontSize: "0.875rem" };
      const hrStyle = { margin: "1rem 0", border: "none", borderBottom: "1px solid var(--border-color)" };
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(import_jsx_runtime39.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
          ViewHeader,
          {
            title: "Mental Health Assessments",
            subtitle: "Private, evidence-based tools to help you understand your well-being."
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Card, { style: culturalCardStyle, children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { style: culturalContentStyle, children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { style: culturalIconStyle, children: "\u{1F30D}" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { style: culturalTextContainerStyle, children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { style: culturalTitleStyle, children: "Culturally-Adapted Assessments Available" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { style: culturalDescriptionStyle, children: "Get assessments adapted for your cultural context that respect cultural differences in mental health expression." }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => setShowCulturalOption(!showCulturalOption),
                style: culturalButtonStyle,
                children: [
                  showCulturalOption ? "Hide" : "Show",
                  " Cultural Options"
                ]
              }
            )
          ] })
        ] }) }),
        showCulturalOption && /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(Card, { style: culturalSelectionCardStyle, children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { style: culturalSelectionTitleStyle, children: "Select Cultural Context" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { style: culturalButtonGridStyle, children: culturalContextService.getCulturalRegions().map((context) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
            AppButton,
            {
              variant: context === selectedCulturalContext ? "primary" : "secondary",
              onClick: () => setSelectedCulturalContext(context),
              style: culturalContextButtonStyle,
              children: context
            },
            context
          )) }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { style: culturalSelectionDescriptionStyle, children: "Cultural adaptations include language-specific mental health expressions, cultural bias reduction, and culturally-appropriate recommendations." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h2", { children: "Available Assessments" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { children: "These are standardized, confidential screening tools. They are not a diagnosis but can be a helpful starting point for self-awareness or a conversation with a professional." }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "assessment-list", style: assessmentListStyle, children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "setting-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { style: assessmentTitleStyle, children: "PHQ-9 (Depression)" }),
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { style: assessmentDescriptionStyle, children: "Screens for and measures the severity of depression." }),
                showCulturalOption && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { style: culturalBadgeContainerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("span", { style: culturalBadgeStyle, children: [
                  "Cultural Adaptation: ",
                  selectedCulturalContext
                ] }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { style: assessmentButtonContainerStyle, children: [
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AppButton, { onClick: () => startAssessment("phq-9", false), children: "Standard Assessment" }),
                showCulturalOption && /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
                  AppButton,
                  {
                    variant: "secondary",
                    onClick: () => startAssessment("phq-9", true),
                    style: culturalAssessmentButtonStyle,
                    children: [
                      "Cultural Assessment (",
                      selectedCulturalContext,
                      ")"
                    ]
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("hr", { style: hrStyle }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "setting-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { style: assessmentTitleStyle, children: "GAD-7 (Anxiety)" }),
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { style: assessmentDescriptionStyle, children: "Screens for and measures the severity of generalized anxiety disorder." }),
                showCulturalOption && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { style: culturalBadgeContainerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("span", { style: culturalBadgeStyle, children: [
                  "Cultural Adaptation: ",
                  selectedCulturalContext
                ] }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { style: assessmentButtonContainerStyle, children: [
                /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AppButton, { onClick: () => startAssessment("gad-7", false), children: "Standard Assessment" }),
                showCulturalOption && /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
                  AppButton,
                  {
                    variant: "secondary",
                    onClick: () => startAssessment("gad-7", true),
                    style: culturalAssessmentButtonStyle,
                    children: [
                      "Cultural Assessment (",
                      selectedCulturalContext,
                      ")"
                    ]
                  }
                )
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "setting-item", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { children: "View your past assessment results to track your progress over time." }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(AppButton, { variant: "secondary", onClick: () => setActiveView?.({ view: "assessment-history" }), children: "View History" })
        ] }) })
      ] });
    };
    AssessmentsView_default = AssessmentsView;
  }
});

// src/components/AppTextArea.tsx
var import_jsx_runtime40, AppTextArea2;
var init_AppTextArea = __esm({
  "src/components/AppTextArea.tsx"() {
    "use strict";
    import_jsx_runtime40 = __toESM(require_jsx_runtime());
    AppTextArea2 = ({
      label,
      error: error44,
      helperText,
      className = "",
      id,
      ...props
    }) => {
      const textareaId = id || `textarea-${Math.random().toString(36).substr(2, 9)}`;
      return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "form-group", children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { htmlFor: textareaId, className: "form-label", children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "textarea",
          {
            id: textareaId,
            className: `form-textarea${error44 ? " error" : ""} ${className}`,
            "aria-invalid": !!error44,
            "aria-describedby": error44 ? `${textareaId}-error` : helperText ? `${textareaId}-helper` : void 0,
            ...props
          }
        ),
        error44 && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { id: `${textareaId}-error`, className: "form-error", role: "alert", children: error44 }),
        helperText && !error44 && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("span", { id: `${textareaId}-helper`, className: "form-helper", children: helperText })
      ] });
    };
  }
});

// src/stores/reflectionStore.ts
var useReflectionStore;
var init_reflectionStore = __esm({
  "src/stores/reflectionStore.ts"() {
    "use strict";
    init_esm();
    useReflectionStore = create((set2) => ({
      reflections: [],
      isLoading: false,
      error: null,
      setReflections: (reflections) => set2({ reflections }),
      addReflection: (reflection) => set2((state) => ({
        reflections: [reflection, ...state.reflections]
      })),
      updateReaction: (reflectionId, reactionType, userReaction) => set2((state) => ({
        reflections: state.reflections.map((r3) => {
          if (r3.id === reflectionId) {
            const updatedReactions = { ...r3.reactions };
            if (userReaction && !r3.myReaction) {
              updatedReactions[reactionType] = (updatedReactions[reactionType] || 0) + 1;
            }
            return {
              ...r3,
              reactions: updatedReactions,
              myReaction: userReaction || r3.myReaction
            };
          }
          return r3;
        })
      })),
      setLoading: (loading) => set2({ isLoading: loading }),
      setError: (error44) => set2({ error: error44 })
    }));
  }
});

// src/views/ReflectionsView.tsx
var ReflectionsView_exports = {};
__export(ReflectionsView_exports, {
  ReflectionsView: () => ReflectionsView,
  default: () => ReflectionsView_default
});
var import_react45, import_jsx_runtime41, sampleReflections, inspirationalPrompts, ReflectionsView, ReflectionsView_default;
var init_ReflectionsView = __esm({
  "src/views/ReflectionsView.tsx"() {
    "use strict";
    import_react45 = __toESM(require_react());
    init_ApiClient();
    init_AppButton();
    init_AppTextArea();
    init_Card();
    init_icons_dynamic();
    init_reflectionStore();
    init_AuthContext();
    import_jsx_runtime41 = __toESM(require_jsx_runtime());
    sampleReflections = [
      {
        id: "sample-1",
        content: "Today I practiced gratitude by writing down three things that made me smile. It's amazing how focusing on small joys can shift your entire perspective. \u{1F31F}",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 42, star: 18, lightbulb: 7 },
        myReaction: void 0,
        userToken: "anon-token-001"
      },
      {
        id: "sample-2",
        content: "Meditation has become my morning anchor. Just 10 minutes of mindfulness sets a peaceful tone for the entire day. The chaos doesn't disappear, but I handle it better.",
        timestamp: new Date(Date.now() - 5 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 67, star: 23, lightbulb: 15 },
        myReaction: "heart",
        userToken: "anon-token-002"
      },
      {
        id: "sample-3",
        content: "Learned that it's okay to rest without guilt. Rest is not a reward for finishing everything; it's a necessity for being able to continue. Taking care of myself IS productive.",
        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 89, star: 31, lightbulb: 22 },
        myReaction: void 0,
        userToken: "anon-token-003"
      },
      {
        id: "sample-4",
        content: "Walking in nature today reminded me that growth takes time. Trees don't rush to bloom, and neither should I. Progress is progress, no matter how small.",
        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 124, star: 45, lightbulb: 28 },
        myReaction: "star",
        userToken: "anon-token-004"
      },
      {
        id: "sample-5",
        content: "Called an old friend today. Connection is medicine for the soul. We laughed, we cried, we remembered why friendship matters. Reach out to someone you miss.",
        timestamp: new Date(Date.now() - 36 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 156, star: 52, lightbulb: 34 },
        myReaction: void 0,
        userToken: "anon-token-005"
      },
      {
        id: "sample-6",
        content: "Journaling breakthrough: I realized I've been so focused on who I should be that I forgot to appreciate who I am. Self-acceptance is a daily practice, not a destination.",
        timestamp: new Date(Date.now() - 48 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 203, star: 71, lightbulb: 48 },
        myReaction: "lightbulb",
        userToken: "anon-token-006"
      },
      {
        id: "sample-7",
        content: "Boundaries are not walls; they're bridges to healthier relationships. Said no to something that didn't serve me today, and it felt liberating.",
        timestamp: new Date(Date.now() - 72 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 178, star: 59, lightbulb: 41 },
        myReaction: void 0,
        userToken: "anon-token-007"
      },
      {
        id: "sample-8",
        content: "The sunset tonight was a reminder that endings can be beautiful too. Every day gets a fresh start tomorrow. What a gift.",
        timestamp: new Date(Date.now() - 96 * 60 * 60 * 1e3).toISOString(),
        reactions: { heart: 145, star: 67, lightbulb: 19 },
        myReaction: "heart",
        userToken: "anon-token-008"
      }
    ];
    inspirationalPrompts = [
      "What made you smile today?",
      "Share a moment of peace you experienced",
      "What are you grateful for right now?",
      "Describe a small victory from today",
      "What lesson did today teach you?",
      "Share something beautiful you noticed",
      "What act of kindness did you witness or perform?",
      "How did you take care of yourself today?"
    ];
    ReflectionsView = ({ userToken: propUserToken }) => {
      const { userToken: contextUserToken } = useAuth();
      const userToken = propUserToken ?? contextUserToken;
      const [reflections, setReflections] = (0, import_react45.useState)([]);
      const [newReflection, setNewReflection] = (0, import_react45.useState)("");
      const [isLoading, setIsLoading] = (0, import_react45.useState)(true);
      const [isSubmitting, setIsSubmitting] = (0, import_react45.useState)(false);
      const [activeFilter, setActiveFilter] = (0, import_react45.useState)("all");
      const [currentPrompt, setCurrentPrompt] = (0, import_react45.useState)(inspirationalPrompts[0]);
      const MAX_REFLECTION_LENGTH = 280;
      const { setReflections: updateStore } = useReflectionStore();
      (0, import_react45.useEffect)(() => {
        setIsLoading(true);
        ApiClient.reflections.getReflections().then((data2) => {
          const reflectionsData = data2.length > 0 ? data2 : sampleReflections;
          setReflections(reflectionsData);
          updateStore(reflectionsData);
        }).catch((err) => {
          console.error("Failed to load reflections:", err);
          setReflections(sampleReflections);
          updateStore(sampleReflections);
        }).finally(() => setIsLoading(false));
      }, []);
      (0, import_react45.useEffect)(() => {
        const interval = setInterval(() => {
          setCurrentPrompt((prev) => {
            const currentIndex = inspirationalPrompts.indexOf(prev);
            return inspirationalPrompts[(currentIndex + 1) % inspirationalPrompts.length];
          });
        }, 1e4);
        return () => clearInterval(interval);
      }, []);
      const getFilteredReflections = () => {
        let filtered = [...reflections];
        switch (activeFilter) {
          case "popular":
            return filtered.sort((a3, b3) => {
              const totalA = Object.values(a3.reactions).reduce((sum, val) => sum + val, 0);
              const totalB = Object.values(b3.reactions).reduce((sum, val) => sum + val, 0);
              return totalB - totalA;
            });
          case "recent":
            return filtered.sort(
              (a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime()
            );
          default:
            return filtered;
        }
      };
      const handleSubmit = async (e4) => {
        e4.preventDefault();
        if (!newReflection.trim() || !userToken) return;
        setIsSubmitting(true);
        try {
          const posted = await ApiClient.reflections.postReflection(userToken, newReflection.trim());
          setReflections((prev) => [posted, ...prev]);
          setNewReflection("");
        } catch (err) {
          console.error(err);
          alert("Could not post your reflection. Please try again.");
        } finally {
          setIsSubmitting(false);
        }
      };
      const handleReact = (reflectionId, reactionType) => {
        if (!userToken) {
          alert("You must have a user token to react.");
          return;
        }
        setReflections((prev) => prev.map((r3) => {
          if (r3.id === reflectionId && !r3.myReaction) {
            return {
              ...r3,
              reactions: { ...r3.reactions, [reactionType]: (r3.reactions[reactionType] || 0) + 1 },
              myReaction: reactionType
            };
          }
          return r3;
        }));
        ApiClient.reflections.addReaction(reflectionId, reactionType, userToken).catch((err) => {
          console.error("Failed to save reaction:", err);
          setReflections((prev) => prev.map((r3) => {
            if (r3.id === reflectionId) {
              return {
                ...r3,
                reactions: { ...r3.reactions, [reactionType]: r3.reactions[reactionType] - 1 },
                myReaction: void 0
              };
            }
            return r3;
          }));
        });
      };
      const filteredReflections = getFilteredReflections();
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("style", { children: `
                .reflections-container {
                    max-width: 900px;
                    margin: 0 auto;
                    padding: 2rem;
                    animation: fadeIn 0.5s ease-out;
                }

                @keyframes fadeIn {
                    from {
                        opacity: 0;
                        transform: translateY(10px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }

                .reflections-header {
                    text-align: center;
                    padding: 3rem 2rem;
                    background: linear-gradient(135deg, rgba(168, 85, 247, 0.05) 0%, rgba(236, 72, 153, 0.05) 100%);
                    border-radius: 20px;
                    margin-bottom: 2rem;
                    position: relative;
                    overflow: hidden;
                }

                .reflections-header::before {
                    content: '';
                    position: absolute;
                    top: -50%;
                    right: -50%;
                    width: 200%;
                    height: 200%;
                    background: radial-gradient(circle, rgba(168, 85, 247, 0.1) 0%, transparent 70%);
                    animation: float 20s ease-in-out infinite;
                }

                @keyframes float {
                    0%, 100% { transform: translate(0, 0) rotate(0deg); }
                    33% { transform: translate(30px, -30px) rotate(120deg); }
                    66% { transform: translate(-20px, 20px) rotate(240deg); }
                }

                .reflections-header h1 {
                    font-size: 2.5rem;
                    margin-bottom: 0.5rem;
                    background: linear-gradient(135deg, #a855f7 0%, #ec4899 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                    position: relative;
                    z-index: 1;
                }

                .reflections-header p {
                    color: var(--text-secondary);
                    font-size: 1.1rem;
                    position: relative;
                    z-index: 1;
                }

                .reflection-stats {
                    display: flex;
                    justify-content: center;
                    gap: 2rem;
                    margin-top: 1.5rem;
                    position: relative;
                    z-index: 1;
                }

                .stat-item {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                }

                .stat-number {
                    font-size: 1.8rem;
                    font-weight: bold;
                    color: var(--text-primary);
                }

                .stat-label {
                    font-size: 0.9rem;
                    color: var(--text-secondary);
                }

                .compose-section {
                    background: var(--card-bg);
                    border-radius: 16px;
                    padding: 2rem;
                    margin-bottom: 2rem;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
                    border: 1px solid var(--border-color);
                }

                .prompt-banner {
                    background: linear-gradient(135deg, rgba(168, 85, 247, 0.1) 0%, rgba(236, 72, 153, 0.1) 100%);
                    border-radius: 12px;
                    padding: 1rem 1.5rem;
                    margin-bottom: 1.5rem;
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                    border: 1px solid rgba(168, 85, 247, 0.2);
                }

                .prompt-icon {
                    color: #a855f7;
                    font-size: 1.5rem;
                }

                .prompt-text {
                    flex: 1;
                    color: var(--text-primary);
                    font-style: italic;
                    animation: fadeInOut 10s ease-in-out infinite;
                }

                @keyframes fadeInOut {
                    0%, 90% { opacity: 1; }
                    95%, 100% { opacity: 0; }
                }

                .compose-form {
                    display: flex;
                    flex-direction: column;
                    gap: 1rem;
                }

                .textarea-wrapper {
                    position: relative;
                }

                .character-count {
                    position: absolute;
                    bottom: 0.5rem;
                    right: 0.5rem;
                    font-size: 0.85rem;
                    color: var(--text-secondary);
                    background: var(--bg-primary);
                    padding: 0.25rem 0.5rem;
                    border-radius: 12px;
                }

                .character-count.warning {
                    color: #f59e0b;
                }

                .character-count.error {
                    color: #ef4444;
                }

                .filter-tabs {
                    display: flex;
                    gap: 0.5rem;
                    margin-bottom: 2rem;
                    padding: 0.5rem;
                    background: var(--card-bg);
                    border-radius: 12px;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                }

                .filter-tab {
                    flex: 1;
                    padding: 0.75rem;
                    border: none;
                    background: transparent;
                    color: var(--text-secondary);
                    border-radius: 8px;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 0.5rem;
                    font-weight: 500;
                }

                .filter-tab:hover {
                    background: var(--bg-secondary);
                    color: var(--text-primary);
                }

                .filter-tab.active {
                    background: linear-gradient(135deg, #a855f7 0%, #ec4899 100%);
                    color: white;
                    box-shadow: 0 4px 12px rgba(168, 85, 247, 0.3);
                }

                .reflections-grid {
                    display: grid;
                    gap: 1.5rem;
                    animation: fadeInUp 0.5s ease-out;
                }

                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }

                .reflection-card {
                    background: var(--card-bg);
                    border-radius: 16px;
                    padding: 1.5rem;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                    border: 1px solid var(--border-color);
                    transition: all 0.3s ease;
                }

                .reflection-card:hover {
                    transform: translateY(-3px);
                    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
                    border-color: rgba(168, 85, 247, 0.3);
                }

                .reflection-content {
                    color: var(--text-primary);
                    line-height: 1.6;
                    margin-bottom: 1rem;
                    font-size: 1.05rem;
                }

                .reflection-meta {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding-top: 1rem;
                    border-top: 1px solid var(--border-color);
                }

                .reflection-time {
                    color: var(--text-secondary);
                    font-size: 0.9rem;
                }

                .reaction-buttons {
                    display: flex;
                    gap: 0.75rem;
                }

                .reaction-btn {
                    display: flex;
                    align-items: center;
                    gap: 0.25rem;
                    padding: 0.5rem 0.75rem;
                    background: var(--bg-secondary);
                    border: 1px solid var(--border-color);
                    border-radius: 20px;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    color: var(--text-secondary);
                }

                .reaction-btn:hover {
                    background: linear-gradient(135deg, rgba(168, 85, 247, 0.1) 0%, rgba(236, 72, 153, 0.1) 100%);
                    border-color: #a855f7;
                    transform: scale(1.05);
                }

                .reaction-btn.active {
                    background: linear-gradient(135deg, #a855f7 0%, #ec4899 100%);
                    color: white;
                    border-color: transparent;
                }

                .reaction-icon {
                    font-size: 1.1rem;
                }

                .reaction-count {
                    font-size: 0.9rem;
                    font-weight: 500;
                }

                .empty-reflections {
                    text-align: center;
                    padding: 4rem 2rem;
                    background: var(--card-bg);
                    border-radius: 16px;
                }

                .empty-icon {
                    font-size: 4rem;
                    margin-bottom: 1rem;
                    opacity: 0.5;
                }

                .empty-reflections h3 {
                    color: var(--text-primary);
                    margin-bottom: 0.5rem;
                }

                .empty-reflections p {
                    color: var(--text-secondary);
                }

                @media (max-width: 768px) {
                    .reflections-container {
                        padding: 1rem;
                    }

                    .reflections-header {
                        padding: 2rem 1rem;
                    }

                    .reflections-header h1 {
                        font-size: 2rem;
                    }

                    .reflection-stats {
                        gap: 1rem;
                    }

                    .filter-tabs {
                        flex-direction: column;
                    }

                    .compose-section {
                        padding: 1.5rem;
                    }
                }
            ` }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reflections-container", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reflections-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h1", { children: "Astral Reflections" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { children: "A sanctuary for positive thoughts, gratitude, and shared wisdom" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reflection-stats", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "stat-item", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-number", children: reflections.length }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-label", children: "Reflections" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "stat-item", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-number", children: reflections.reduce((sum, r3) => sum + Object.values(r3.reactions).reduce((a3, b3) => a3 + b3, 0), 0) }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-label", children: "Reactions" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "stat-item", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-number", children: "\u2728" }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "stat-label", children: "Growing Daily" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "compose-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "prompt-banner", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "prompt-icon", children: "\u{1F4AD}" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "prompt-text", children: currentPrompt })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("form", { onSubmit: handleSubmit, className: "compose-form", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "textarea-wrapper", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                  AppTextArea2,
                  {
                    label: "Share your reflection",
                    placeholder: "Write something positive, inspiring, or grateful...",
                    value: newReflection,
                    onChange: (e4) => setNewReflection(e4.target.value),
                    maxLength: MAX_REFLECTION_LENGTH,
                    rows: 4
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("span", { className: `character-count ${newReflection.length > MAX_REFLECTION_LENGTH * 0.9 ? "warning" : ""} ${newReflection.length >= MAX_REFLECTION_LENGTH ? "error" : ""}`, children: [
                  newReflection.length,
                  " / ",
                  MAX_REFLECTION_LENGTH
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "form-actions", style: { justifyContent: "flex-end" }, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                AppButton,
                {
                  type: "submit",
                  onClick: () => {
                  },
                  isLoading: isSubmitting,
                  disabled: isSubmitting || !newReflection.trim(),
                  variant: "primary",
                  enhanced: true,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SendIcon, {}),
                    "Share Reflection"
                  ]
                }
              ) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "filter-tabs", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
              "button",
              {
                className: activeFilter === "all" ? "filter-tab active" : "filter-tab",
                onClick: () => setActiveFilter("all"),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(StarIcon, {}),
                  "All Reflections"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
              "button",
              {
                className: activeFilter === "popular" ? "filter-tab active" : "filter-tab",
                onClick: () => setActiveFilter("popular"),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(HeartIcon2, {}),
                  "Most Loved"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
              "button",
              {
                className: activeFilter === "recent" ? "filter-tab active" : "filter-tab",
                onClick: () => setActiveFilter("recent"),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SparkleIcon, {}),
                  "Recent"
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "reflections-grid", children: isLoading ? [...Array(3)].map((_3, i3) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Card, { className: "reflection-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "content-skeleton", style: { height: "60px", marginBottom: "1rem" } }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "content-skeleton", style: { height: "20px", width: "30%" } })
          ] }, i3)) : filteredReflections.length > 0 ? filteredReflections.map((reflection) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reflection-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "reflection-content", children: reflection.content }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reflection-meta", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reflection-time", children: new Date(reflection.timestamp).toLocaleDateString("en-US", {
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit"
              }) }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "reaction-buttons", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                  "button",
                  {
                    className: reflection.myReaction === "heart" ? "reaction-btn active" : "reaction-btn",
                    onClick: () => handleReact(reflection.id, "heart"),
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-icon", children: "\u2764\uFE0F" }),
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-count", children: reflection.reactions.heart || 0 })
                    ]
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                  "button",
                  {
                    className: reflection.myReaction === "star" ? "reaction-btn active" : "reaction-btn",
                    onClick: () => handleReact(reflection.id, "star"),
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-icon", children: "\u2B50" }),
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-count", children: reflection.reactions.star || 0 })
                    ]
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                  "button",
                  {
                    className: reflection.myReaction === "lightbulb" ? "reaction-btn active" : "reaction-btn",
                    onClick: () => handleReact(reflection.id, "lightbulb"),
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-icon", children: "\u{1F4A1}" }),
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "reaction-count", children: reflection.reactions.lightbulb || 0 })
                    ]
                  }
                )
              ] })
            ] })
          ] }, reflection.id)) : /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "empty-reflections", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "empty-icon", children: "\u{1F31F}" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h3", { children: "No reflections yet" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { children: "Be the first to share a positive thought or moment of gratitude" })
          ] }) })
        ] })
      ] });
    };
    ReflectionsView_default = ReflectionsView;
  }
});

// src/views/SafetyPlanView.tsx
var SafetyPlanView_exports = {};
__export(SafetyPlanView_exports, {
  SafetyPlanView: () => SafetyPlanView,
  default: () => SafetyPlanView_default
});
var import_react46, import_jsx_runtime42, defaultPlan, demoPlan, defaultHotlines, copingStrategySuggestions, warningSignsSuggestions, SafetyPlanView, SafetyPlanView_default;
var init_SafetyPlanView = __esm({
  "src/views/SafetyPlanView.tsx"() {
    "use strict";
    import_react46 = __toESM(require_react());
    init_AppButton();
    init_AppInput();
    init_Card();
    init_ApiClient();
    init_NotificationContext();
    init_icons_dynamic();
    init_AuthContext();
    import_jsx_runtime42 = __toESM(require_jsx_runtime());
    defaultPlan = {
      triggers: "",
      copingStrategies: "",
      supportContacts: "",
      safePlaces: ""
    };
    demoPlan = {
      triggers: "Feeling overwhelmed or hopeless, Increased anxiety or panic, Difficulty sleeping, Isolating from others",
      copingStrategies: "\u{1F3B5} Listen to calming music, \u{1F6B6} Take a walk outside, \u{1F9D8} Practice deep breathing, \u{1F4DD} Write in a journal, \u{1F4DE} Call a friend",
      supportContacts: "Best friend Sarah: (555) 123-4567\nTherapist Dr. Johnson: (555) 987-6543\nSister Emily: (555) 456-7890\nCrisis Hotline: 988",
      safePlaces: "Local library - quiet and peaceful\nCoffee shop on Main Street\nCity park walking trail\nBest friend's house"
    };
    defaultHotlines = [
      { name: "988 Suicide & Crisis Lifeline", contact: "988", description: "24/7 support for crisis situations" },
      { name: "Crisis Text Line", contact: "Text HOME to 741741", description: "Free 24/7 text support" },
      { name: "SAMHSA National Helpline", contact: "1-800-662-4357", description: "Treatment referral and information" },
      { name: "NAMI HelpLine", contact: "1-800-950-6264", description: "Mon-Fri, 10am-10pm ET" }
    ];
    copingStrategySuggestions = [
      "\u{1F3B5} Listen to calming music",
      "\u{1F6B6} Take a walk outside",
      "\u{1F9D8} Practice deep breathing",
      "\u{1F4DD} Write in a journal",
      "\u{1F3A8} Draw or create art",
      "\u{1F415} Spend time with pets",
      "\u{1F331} Garden or care for plants",
      "\u{1F4DE} Call a friend",
      "\u{1F6C1} Take a warm bath",
      "\u2615 Make a cup of tea",
      "\u{1F9E9} Do a puzzle or game",
      "\u{1F4D6} Read a favorite book"
    ];
    warningSignsSuggestions = [
      "Feeling overwhelmed or hopeless",
      "Increased anxiety or panic",
      "Difficulty sleeping",
      "Isolating from others",
      "Changes in appetite",
      "Increased irritability",
      "Difficulty concentrating",
      "Physical tension or pain"
    ];
    SafetyPlanView = ({ userToken: propUserToken }) => {
      const { userToken: contextUserToken } = useAuth();
      const userToken = propUserToken ?? contextUserToken;
      const [plan, setPlan] = (0, import_react46.useState)(defaultPlan);
      const [isEditing, setIsEditing] = (0, import_react46.useState)(false);
      const [isLoading, setIsLoading] = (0, import_react46.useState)(true);
      const { addToast } = useNotification();
      (0, import_react46.useEffect)(() => {
        if (!userToken) {
          setIsLoading(false);
          return;
        }
        setIsLoading(true);
        ApiClient.safetyPlan.get(userToken).then((savedPlan) => {
          if (savedPlan) {
            setPlan(savedPlan);
            setIsEditing(false);
          } else {
            setIsEditing(true);
          }
        }).catch((error44) => {
          console.error("Failed to load safety plan:", error44);
          addToast("Could not load your safety plan.", "error");
        }).finally(() => {
          setIsLoading(false);
        });
      }, [addToast, userToken]);
      const handleSave = async () => {
        if (!userToken) {
          addToast("Cannot save plan without a user session.", "error");
          return;
        }
        setIsLoading(true);
        try {
          await ApiClient.safetyPlan.save(plan, userToken);
          setIsEditing(false);
          addToast("Your safety plan has been saved!", "success");
        } catch (error44) {
          console.error("Failed to save safety plan:", error44);
          addToast("Could not save your safety plan.", "error");
        } finally {
          setIsLoading(false);
        }
      };
      const handleInputChange = (e4) => {
        setPlan({
          ...plan,
          [e4.target.name]: e4.target.value
        });
      };
      const loadDemoData = () => {
        setPlan(demoPlan);
        addToast("Demo safety plan loaded! Feel free to customize it.", "success");
      };
      if (isLoading) {
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "loading-spinner", style: { margin: "5rem auto" } });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(import_jsx_runtime42.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "view-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h1", { children: "My Astral Safety Plan" }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "view-subheader", children: "Your personalized crisis prevention toolkit - always here when you need it" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Card, { className: "emergency-resources-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "emergency-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ShieldIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { children: "Immediate Help Available 24/7" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "hotlines-grid", children: defaultHotlines.map((hotline) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "hotline-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(PhoneIcon2, {}),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "hotline-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h3", { children: hotline.name }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "hotline-contact", children: hotline.contact }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "hotline-description", children: hotline.description })
            ] })
          ] }, hotline.name)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Card, { className: "safety-plan-card", children: [
          !isEditing && /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "safety-plan-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(AppButton, { variant: "primary", onClick: () => setIsEditing(true), children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(BookmarkIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: "Edit My Plan" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppButton, { variant: "secondary", onClick: () => window.print(), children: "Print Plan" })
          ] }),
          isEditing && (!plan.triggers && !plan.copingStrategies && !plan.supportContacts && !plan.safePlaces) && /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "demo-data-prompt", style: { textAlign: "center", padding: "1rem", background: "linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%)", borderRadius: "12px", marginBottom: "1.5rem" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { style: { marginBottom: "1rem", color: "#5a6c7d" }, children: "New to safety planning? Start with our example template!" }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(AppButton, { variant: "primary", onClick: loadDemoData, children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(SparkleIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: "Load Example Safety Plan" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "safety-plan-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("h2", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(SparkleIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: "Warning Signs" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "safety-plan-prompt", children: "What changes in thoughts, feelings, or behaviors signal that you might need to use your safety plan?" }),
            isEditing ? /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(import_jsx_runtime42.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppTextArea, { name: "triggers", value: plan.triggers, onChange: handleInputChange, placeholder: "Describe warning signs that indicate you're struggling..." }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "suggestion-chips", children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "suggestion-label", children: "Common warning signs:" }),
                warningSignsSuggestions.map((sign, index2) => /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                  "button",
                  {
                    className: "suggestion-chip",
                    onClick: () => setPlan({ ...plan, triggers: plan.triggers + (plan.triggers ? ", " : "") + sign }),
                    children: sign
                  },
                  index2
                ))
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "safety-plan-content", children: plan.triggers || "No warning signs listed." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "safety-plan-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("h2", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(HeartIcon2, {}),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: "My Coping Strategies" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "safety-plan-prompt", children: "Healthy activities that help you feel better when you're struggling" }),
            isEditing ? /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(import_jsx_runtime42.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppTextArea, { name: "copingStrategies", value: plan.copingStrategies, onChange: handleInputChange, placeholder: "List activities that help you cope with difficult emotions..." }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "suggestion-chips", children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "suggestion-label", children: "Try these coping strategies:" }),
                copingStrategySuggestions.map((strategy, index2) => /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                  "button",
                  {
                    className: "suggestion-chip",
                    onClick: () => setPlan({ ...plan, copingStrategies: plan.copingStrategies + (plan.copingStrategies ? "\n" : "") + strategy }),
                    children: strategy
                  },
                  index2
                ))
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "safety-plan-content", children: plan.copingStrategies || "No strategies listed." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "safety-plan-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { children: "My Support Team" }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "safety-plan-prompt", children: "Who are some trusted people you can contact for support?" }),
            isEditing ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppTextArea, { name: "supportContacts", value: plan.supportContacts, onChange: handleInputChange, placeholder: "e.g., My friend Alex (555-1234), my sister Sarah, my therapist's office..." }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "safety-plan-content", children: plan.supportContacts || "No contacts listed." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "safety-plan-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { children: "My Safe Places" }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "safety-plan-prompt", children: "Where can you go to feel safe and calm?" }),
            isEditing ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppTextArea, { name: "safePlaces", value: plan.safePlaces, onChange: handleInputChange, placeholder: "e.g., My bedroom, the local park, the library..." }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "safety-plan-content", children: plan.safePlaces || "No safe places listed." })
          ] }),
          isEditing && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "safety-plan-actions", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppButton, { variant: "success", onClick: handleSave, isLoading, children: "Save My Plan" }) })
        ] })
      ] });
    };
    SafetyPlanView_default = SafetyPlanView;
  }
});

// src/components/CalmingBackground.css
var init_CalmingBackground = __esm({
  "src/components/CalmingBackground.css"() {
  }
});

// src/components/CalmingBackground.tsx
var import_react47, import_jsx_runtime43, CalmingBackground;
var init_CalmingBackground2 = __esm({
  "src/components/CalmingBackground.tsx"() {
    "use strict";
    import_react47 = __toESM(require_react());
    init_CalmingBackground();
    import_jsx_runtime43 = __toESM(require_jsx_runtime());
    CalmingBackground = ({
      theme = "ocean",
      intensity = 0.5
    }) => {
      const canvasRef = (0, import_react47.useRef)(null);
      (0, import_react47.useEffect)(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext("2d");
        if (!ctx) return;
        const resizeCanvas = () => {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        };
        resizeCanvas();
        window.addEventListener("resize", resizeCanvas);
        let animationId;
        let time3 = 0;
        class Particle {
          x;
          y;
          size;
          speedX;
          speedY;
          opacity;
          hue;
          constructor() {
            this.x = Math.random() * (canvas?.width || window.innerWidth);
            this.y = Math.random() * (canvas?.height || window.innerHeight);
            this.size = Math.random() * 3 + 1;
            this.speedX = (Math.random() - 0.5) * 0.5;
            this.speedY = (Math.random() - 0.5) * 0.5;
            this.opacity = Math.random() * 0.5 + 0.2;
            this.hue = theme === "ocean" ? 200 : theme === "forest" ? 120 : theme === "sky" ? 210 : 280;
          }
          update() {
            this.x += this.speedX;
            this.y += this.speedY;
            const width = canvas?.width || window.innerWidth;
            const height = canvas?.height || window.innerHeight;
            if (this.x < 0) this.x = width;
            if (this.x > width) this.x = 0;
            if (this.y < 0) this.y = height;
            if (this.y > height) this.y = 0;
            this.y += Math.sin(time3 * 1e-3 + this.x * 0.01) * 0.2;
          }
          draw() {
            if (!ctx) return;
            ctx.save();
            ctx.globalAlpha = this.opacity * intensity;
            ctx.fillStyle = `hsla(${this.hue}, 70%, 60%, ${this.opacity})`;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
            const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size * 3);
            gradient.addColorStop(0, `hsla(${this.hue}, 70%, 60%, ${this.opacity * 0.3})`);
            gradient.addColorStop(1, "transparent");
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size * 3, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
          }
        }
        const particles = [];
        const particleCount = 50;
        for (let i3 = 0; i3 < particleCount; i3++) {
          particles.push(new Particle());
        }
        const drawWaves = () => {
          if (theme !== "ocean" && theme !== "sky") return;
          ctx.save();
          ctx.globalAlpha = 0.1 * intensity;
          for (let i3 = 0; i3 < 3; i3++) {
            ctx.beginPath();
            ctx.strokeStyle = theme === "ocean" ? `hsla(200, 70%, 50%, ${0.2 - i3 * 0.05})` : `hsla(210, 60%, 70%, ${0.2 - i3 * 0.05})`;
            ctx.lineWidth = 2;
            for (let x3 = 0; x3 < canvas.width; x3++) {
              const y3 = canvas.height / 2 + Math.sin(x3 * 0.01 + time3 * 1e-3 + i3 * 2) * 50 * (i3 + 1) + Math.sin(x3 * 0.02 + time3 * 2e-3) * 20;
              if (x3 === 0) {
                ctx.moveTo(x3, y3);
              } else {
                ctx.lineTo(x3, y3);
              }
            }
            ctx.stroke();
          }
          ctx.restore();
        };
        const drawAurora = () => {
          if (theme !== "aurora") return;
          ctx.save();
          ctx.globalAlpha = 0.15 * intensity;
          for (let i3 = 0; i3 < 5; i3++) {
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            const hueShift = time3 * 0.01 + i3 * 60;
            gradient.addColorStop(0, `hsla(${120 + hueShift % 360}, 70%, 50%, 0.3)`);
            gradient.addColorStop(0.5, `hsla(${280 + hueShift % 360}, 70%, 50%, 0.3)`);
            gradient.addColorStop(1, `hsla(${200 + hueShift % 360}, 70%, 50%, 0.3)`);
            ctx.fillStyle = gradient;
            ctx.beginPath();
            for (let x3 = 0; x3 <= canvas.width; x3 += 10) {
              const y3 = canvas.height * 0.3 + Math.sin(x3 * 5e-3 + time3 * 2e-3 + i3) * 100 + Math.sin(x3 * 0.01 + time3 * 1e-3 + i3 * 2) * 50;
              if (x3 === 0) {
                ctx.moveTo(x3, y3);
              } else {
                ctx.lineTo(x3, y3);
              }
            }
            ctx.lineTo(canvas.width, 0);
            ctx.lineTo(0, 0);
            ctx.closePath();
            ctx.fill();
          }
          ctx.restore();
        };
        const animate = () => {
          ctx.fillStyle = "rgba(0, 0, 0, 0.02)";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          drawWaves();
          drawAurora();
          particles.forEach((particle) => {
            particle.update();
            particle.draw();
          });
          time3++;
          animationId = requestAnimationFrame(animate);
        };
        animate();
        return () => {
          cancelAnimationFrame(animationId);
          window.removeEventListener("resize", resizeCanvas);
        };
      }, [theme, intensity]);
      return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "calming-background-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "canvas",
          {
            ref: canvasRef,
            className: "calming-canvas",
            "aria-hidden": "true"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: `background-overlay theme-${theme}` })
      ] });
    };
  }
});

// src/components/MeditationTimer.css
var init_MeditationTimer = __esm({
  "src/components/MeditationTimer.css"() {
  }
});

// src/components/MeditationTimer.tsx
var import_react48, import_jsx_runtime44, PRESET_TIMES, AMBIENT_SOUNDS, MeditationTimer;
var init_MeditationTimer2 = __esm({
  "src/components/MeditationTimer.tsx"() {
    "use strict";
    import_react48 = __toESM(require_react());
    init_icons_dynamic();
    init_MeditationTimer();
    import_jsx_runtime44 = __toESM(require_jsx_runtime());
    PRESET_TIMES = [
      { minutes: 3, label: "3 min", description: "Quick reset" },
      { minutes: 5, label: "5 min", description: "Brief meditation" },
      { minutes: 10, label: "10 min", description: "Standard session" },
      { minutes: 15, label: "15 min", description: "Deep relaxation" },
      { minutes: 20, label: "20 min", description: "Extended practice" },
      { minutes: 30, label: "30 min", description: "Full session" }
    ];
    AMBIENT_SOUNDS = [
      { id: "none", name: "Silence", emoji: "\u{1F507}" },
      { id: "rain", name: "Rain", emoji: "\u{1F327}\uFE0F" },
      { id: "ocean", name: "Ocean Waves", emoji: "\u{1F30A}" },
      { id: "forest", name: "Forest", emoji: "\u{1F332}" },
      { id: "bells", name: "Tibetan Bowls", emoji: "\u{1F514}" },
      { id: "white", name: "White Noise", emoji: "\u{1F4FB}" }
    ];
    MeditationTimer = ({ onComplete }) => {
      const [selectedTime, setSelectedTime] = (0, import_react48.useState)(10);
      const [timeRemaining, setTimeRemaining] = (0, import_react48.useState)(10 * 60);
      const [isRunning, setIsRunning] = (0, import_react48.useState)(false);
      const [selectedSound, setSelectedSound] = (0, import_react48.useState)("none");
      const [showGuidance, setShowGuidance] = (0, import_react48.useState)(true);
      const intervalRef = (0, import_react48.useRef)();
      const audioContextRef = (0, import_react48.useRef)();
      const oscillatorRef = (0, import_react48.useRef)();
      const gainNodeRef = (0, import_react48.useRef)();
      (0, import_react48.useEffect)(() => {
        setTimeRemaining(selectedTime * 60);
      }, [selectedTime]);
      (0, import_react48.useEffect)(() => {
        if (isRunning && timeRemaining > 0) {
          intervalRef.current = setInterval(() => {
            setTimeRemaining((prev) => {
              if (prev <= 1) {
                setIsRunning(false);
                playCompletionSound();
                onComplete?.();
                return 0;
              }
              return prev - 1;
            });
          }, 1e3);
        } else {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
        }
        return () => {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
        };
      }, [isRunning, timeRemaining, onComplete]);
      (0, import_react48.useEffect)(() => {
        if (typeof window !== "undefined" && !audioContextRef.current) {
          audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
        }
        return () => {
          stopAmbientSound();
        };
      }, []);
      (0, import_react48.useEffect)(() => {
        if (isRunning && selectedSound !== "none") {
          playAmbientSound();
        } else {
          stopAmbientSound();
        }
      }, [isRunning, selectedSound]);
      const playAmbientSound = () => {
        if (!audioContextRef.current) return;
        stopAmbientSound();
        const ctx = audioContextRef.current;
        oscillatorRef.current = ctx.createOscillator();
        gainNodeRef.current = ctx.createGain();
        oscillatorRef.current.connect(gainNodeRef.current);
        gainNodeRef.current.connect(ctx.destination);
        switch (selectedSound) {
          case "rain":
            oscillatorRef.current.type = "square";
            oscillatorRef.current.frequency.value = 100;
            gainNodeRef.current.gain.value = 0.01;
            break;
          case "ocean":
            oscillatorRef.current.type = "sine";
            oscillatorRef.current.frequency.value = 50;
            gainNodeRef.current.gain.value = 0.02;
            oscillatorRef.current.frequency.setValueCurveAtTime(
              new Float32Array([50, 60, 50, 40, 50]),
              ctx.currentTime,
              5
            );
            break;
          case "forest":
            oscillatorRef.current.type = "triangle";
            oscillatorRef.current.frequency.value = 200;
            gainNodeRef.current.gain.value = 5e-3;
            break;
          case "bells":
            oscillatorRef.current.type = "sine";
            oscillatorRef.current.frequency.value = 528;
            gainNodeRef.current.gain.value = 0.02;
            break;
          case "white":
            const bufferSize = 2 * ctx.sampleRate;
            const noiseBuffer = ctx.createBuffer(1, bufferSize, ctx.sampleRate);
            const output = noiseBuffer.getChannelData(0);
            for (let i3 = 0; i3 < bufferSize; i3++) {
              output[i3] = Math.random() * 2 - 1;
            }
            const whiteNoise = ctx.createBufferSource();
            whiteNoise.buffer = noiseBuffer;
            whiteNoise.loop = true;
            whiteNoise.connect(gainNodeRef.current);
            gainNodeRef.current.gain.value = 0.01;
            whiteNoise.start();
            return;
        }
        oscillatorRef.current.start();
      };
      const stopAmbientSound = () => {
        if (oscillatorRef.current) {
          oscillatorRef.current.stop();
          oscillatorRef.current = void 0;
        }
      };
      const playCompletionSound = () => {
        if (!audioContextRef.current) return;
        const ctx = audioContextRef.current;
        const osc = ctx.createOscillator();
        const gain = ctx.createGain();
        osc.connect(gain);
        gain.connect(ctx.destination);
        osc.frequency.setValueAtTime(523.25, ctx.currentTime);
        osc.frequency.setValueAtTime(659.25, ctx.currentTime + 0.2);
        osc.frequency.setValueAtTime(783.99, ctx.currentTime + 0.4);
        gain.gain.setValueAtTime(0.3, ctx.currentTime);
        gain.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 1);
        osc.start(ctx.currentTime);
        osc.stop(ctx.currentTime + 1);
      };
      const toggleTimer = () => {
        setIsRunning(!isRunning);
      };
      const resetTimer = () => {
        setIsRunning(false);
        setTimeRemaining(selectedTime * 60);
        stopAmbientSound();
      };
      const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
      };
      const getProgress = () => {
        return (selectedTime * 60 - timeRemaining) / (selectedTime * 60) * 100;
      };
      const getGuidanceMessage = () => {
        const progress = getProgress();
        if (progress < 10) return "Find a comfortable position and close your eyes...";
        if (progress < 30) return "Focus on your breath, in and out...";
        if (progress < 50) return "Let thoughts pass like clouds in the sky...";
        if (progress < 70) return "Return to your breath when your mind wanders...";
        if (progress < 90) return "You're doing great, stay present...";
        return "Gently prepare to return...";
      };
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "meditation-timer-card", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "timer-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h3", { className: "timer-title", children: "Meditation Timer" }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "timer-subtitle", children: "Find your inner peace" })
        ] }),
        !isRunning && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "time-presets", children: PRESET_TIMES.map((preset) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
          "button",
          {
            className: `preset-btn ${selectedTime === preset.minutes ? "active" : ""}`,
            onClick: () => setSelectedTime(preset.minutes),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: "preset-label", children: preset.label }),
              /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: "preset-description", children: preset.description })
            ]
          },
          preset.minutes
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "timer-display-container", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "timer-circle", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("svg", { className: "timer-svg", viewBox: "0 0 200 200", children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "circle",
              {
                className: "timer-circle-bg",
                cx: "100",
                cy: "100",
                r: "90",
                fill: "none",
                stroke: "rgba(102, 126, 234, 0.1)",
                strokeWidth: "8"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "circle",
              {
                className: "timer-circle-progress",
                cx: "100",
                cy: "100",
                r: "90",
                fill: "none",
                stroke: "url(#timerGradient)",
                strokeWidth: "8",
                strokeDasharray: `${getProgress() * 5.65} 565`,
                strokeLinecap: "round",
                transform: "rotate(-90 100 100)"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("linearGradient", { id: "timerGradient", x1: "0%", y1: "0%", x2: "100%", y2: "100%", children: [
              /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("stop", { offset: "0%", stopColor: "#667eea" }),
              /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("stop", { offset: "100%", stopColor: "#764ba2" })
            ] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "timer-display", children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "timer-time", children: formatTime(timeRemaining) }),
            isRunning && showGuidance && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "timer-guidance", children: getGuidanceMessage() })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "ambient-sounds", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("h4", { className: "sounds-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(VolumeIcon, { className: "sounds-icon" }),
            "Ambient Sound"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "sound-options", children: AMBIENT_SOUNDS.map((sound) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
            "button",
            {
              className: `sound-btn ${selectedSound === sound.id ? "active" : ""}`,
              onClick: () => setSelectedSound(sound.id),
              disabled: isRunning,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: "sound-emoji", children: sound.emoji }),
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: "sound-name", children: sound.name })
              ]
            },
            sound.id
          )) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "timer-controls", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
            "button",
            {
              className: "timer-btn primary",
              onClick: toggleTimer,
              children: [
                isRunning ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(PauseIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(PlayIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { children: isRunning ? "Pause" : "Start" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
            "button",
            {
              className: "timer-btn secondary",
              onClick: resetTimer,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(RefreshIcon2, {}),
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { children: "Reset" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "timer-settings", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("label", { className: "setting-toggle", children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
            "input",
            {
              type: "checkbox",
              checked: showGuidance,
              onChange: (e4) => setShowGuidance(e4.target.checked)
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { children: "Show guidance messages" })
        ] }) })
      ] });
    };
  }
});

// src/views/QuietSpaceView.css
var init_QuietSpaceView = __esm({
  "src/views/QuietSpaceView.css"() {
  }
});

// src/views/QuietSpaceView.tsx
var QuietSpaceView_exports = {};
__export(QuietSpaceView_exports, {
  QuietSpaceView: () => QuietSpaceView,
  default: () => QuietSpaceView_default
});
var import_react49, import_jsx_runtime45, breathingPatterns2, stressReliefResources, QuietSpaceView, QuietSpaceView_default;
var init_QuietSpaceView2 = __esm({
  "src/views/QuietSpaceView.tsx"() {
    "use strict";
    import_react49 = __toESM(require_react());
    init_icons_dynamic();
    init_AppButton();
    init_Card();
    init_CalmingBackground2();
    init_MeditationTimer2();
    init_BreathingWidget2();
    init_QuietSpaceView();
    import_jsx_runtime45 = __toESM(require_jsx_runtime());
    breathingPatterns2 = [
      {
        name: "4-7-8 Breathing",
        description: "Calming technique for anxiety and sleep",
        phases: [
          { phase: "inhale", duration: 4e3, text: "Inhale... 4" },
          { phase: "hold", duration: 7e3, text: "Hold... 7" },
          { phase: "exhale", duration: 8e3, text: "Exhale... 8" },
          { phase: "pause", duration: 2e3, text: "Rest" }
        ]
      },
      {
        name: "Box Breathing",
        description: "Navy SEAL technique for focus and calm",
        phases: [
          { phase: "inhale", duration: 4e3, text: "Inhale... 4" },
          { phase: "hold", duration: 4e3, text: "Hold... 4" },
          { phase: "exhale", duration: 4e3, text: "Exhale... 4" },
          { phase: "pause", duration: 4e3, text: "Hold... 4" }
        ]
      },
      {
        name: "Coherent Breathing",
        description: "Balance your nervous system",
        phases: [
          { phase: "inhale", duration: 5e3, text: "Inhale... 5" },
          { phase: "exhale", duration: 5e3, text: "Exhale... 5" }
        ]
      }
    ];
    stressReliefResources = [
      {
        title: "Headspace",
        description: "Guided meditation and mindfulness",
        url: "https://www.headspace.com",
        icon: "\u{1F9D8}"
      },
      {
        title: "Calm",
        description: "Sleep stories and relaxation",
        url: "https://www.calm.com",
        icon: "\u{1F634}"
      },
      {
        title: "Insight Timer",
        description: "Free meditation community",
        url: "https://insighttimer.com",
        icon: "\u23F0"
      },
      {
        title: "Progressive Muscle Relaxation",
        description: "Physical tension release technique",
        url: "https://www.healthline.com/health/progressive-muscle-relaxation",
        icon: "\u{1F4AA}"
      },
      {
        title: "7 Cups",
        description: "Anonymous emotional support",
        url: "https://www.7cups.com",
        icon: "\u2615"
      },
      {
        title: "Nature Sounds",
        description: "Calming ambient sounds",
        url: "https://www.noisli.com",
        icon: "\u{1F33F}"
      }
    ];
    QuietSpaceView = () => {
      const [isPlaying, setIsPlaying] = (0, import_react49.useState)(false);
      const [selectedPattern, setSelectedPattern] = (0, import_react49.useState)(0);
      const [showChimes, setShowChimes] = (0, import_react49.useState)(true);
      const chimeRef = (0, import_react49.useRef)(null);
      const [breathingPhase, setBreathingPhase] = (0, import_react49.useState)("pause");
      const [breathingText, setBreathingText] = (0, import_react49.useState)("Begin");
      const [phaseProgress, setPhaseProgress] = (0, import_react49.useState)(0);
      const intervalRef = (0, import_react49.useRef)(null);
      const phaseTimeoutRef = (0, import_react49.useRef)(null);
      const [backgroundTheme, setBackgroundTheme] = (0, import_react49.useState)("ocean");
      const [showMeditation, setShowMeditation] = (0, import_react49.useState)(false);
      (0, import_react49.useEffect)(() => {
        if (!chimeRef.current && typeof AudioContext !== "undefined") {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          const createChime = () => {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            oscillator.frequency.value = 800;
            oscillator.type = "sine";
            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.5);
          };
          window.playChime = createChime;
        }
        return () => {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
          if (phaseTimeoutRef.current) {
            clearTimeout(phaseTimeoutRef.current);
          }
        };
      }, []);
      const toggleBreathing = () => {
        if (isPlaying) {
          stopBreathing();
        } else {
          startBreathingCycle();
        }
        setIsPlaying(!isPlaying);
      };
      const stopBreathing = () => {
        if (intervalRef.current) clearInterval(intervalRef.current);
        if (phaseTimeoutRef.current) clearTimeout(phaseTimeoutRef.current);
        setBreathingPhase("pause");
        setBreathingText("Begin");
        setPhaseProgress(0);
      };
      const startBreathingCycle = () => {
        const pattern = breathingPatterns2[selectedPattern];
        let currentPhaseIndex = 0;
        const runPhase = () => {
          const currentPhase = pattern.phases[currentPhaseIndex];
          setBreathingPhase(currentPhase.phase);
          setBreathingText(currentPhase.text);
          setPhaseProgress(0);
          if (showChimes && window.playChime) {
            window.playChime();
          }
          let progress = 0;
          const progressInterval = 50;
          const steps = currentPhase.duration / progressInterval;
          const increment2 = 100 / steps;
          intervalRef.current = window.setInterval(() => {
            progress += increment2;
            setPhaseProgress(Math.min(progress, 100));
            if (progress >= 100) {
              clearInterval(intervalRef.current);
            }
          }, progressInterval);
          phaseTimeoutRef.current = window.setTimeout(() => {
            currentPhaseIndex = (currentPhaseIndex + 1) % pattern.phases.length;
            runPhase();
          }, currentPhase.duration);
        };
        runPhase();
      };
      return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "quiet-space-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(CalmingBackground, { theme: backgroundTheme, intensity: 0.3 }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "view-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h1", { children: "Astral Quiet Space" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "view-subheader", children: "Your sanctuary for calm and mindfulness" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "theme-selector", style: {
            display: "flex",
            alignItems: "center",
            gap: "1rem",
            justifyContent: "center",
            marginTop: "1rem"
          }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { style: { color: "#7f8c8d", fontSize: "0.9rem" }, children: "Ambiance:" }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { style: { display: "flex", gap: "0.5rem" }, children: [
              { theme: "ocean", emoji: "\u{1F30A}", title: "Ocean waves" },
              { theme: "forest", emoji: "\u{1F332}", title: "Forest" },
              { theme: "sky", emoji: "\u2601\uFE0F", title: "Sky" },
              { theme: "aurora", emoji: "\u{1F30C}", title: "Aurora" }
            ].map(({ theme, emoji: emoji3, title }) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "button",
              {
                className: `theme-btn ${backgroundTheme === theme ? "active" : ""}`,
                onClick: () => setBackgroundTheme(theme),
                title,
                style: {
                  width: "40px",
                  height: "40px",
                  borderRadius: "50%",
                  border: backgroundTheme === theme ? "2px solid #667eea" : "2px solid transparent",
                  background: backgroundTheme === theme ? "white" : "rgba(255, 255, 255, 0.8)",
                  cursor: "pointer",
                  fontSize: "1.25rem",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  boxShadow: backgroundTheme === theme ? "0 4px 12px rgba(102, 126, 234, 0.3)" : "none",
                  transition: "all 0.3s ease"
                },
                children: emoji3
              },
              theme
            )) })
          ] })
        ] }),
        showMeditation && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(MeditationTimer, { onComplete: () => setShowMeditation(false) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { style: { textAlign: "center", marginBottom: "2rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          "button",
          {
            onClick: () => setShowMeditation(!showMeditation),
            style: {
              padding: "0.75rem 1.5rem",
              background: "linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%)",
              color: "white",
              border: "none",
              borderRadius: "25px",
              cursor: "pointer",
              fontSize: "1rem",
              fontWeight: "500",
              transition: "all 0.3s ease"
            },
            children: showMeditation ? "\u{1F9D8} Hide Meditation Timer" : "\u{1F9D8} Open Meditation Timer"
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { style: { marginBottom: "2rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(BreathingWidget, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Card, { className: "breathing-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("h2", { className: "section-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(SparkleIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: "Breathing Exercises" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "breathing-patterns", children: breathingPatterns2.map((pattern, index2) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
            "button",
            {
              className: `pattern-card ${selectedPattern === index2 ? "active" : ""}`,
              onClick: () => {
                setSelectedPattern(index2);
                if (isPlaying) {
                  stopBreathing();
                }
                const allCards = document.querySelectorAll(".pattern-card");
                allCards.forEach((card) => card.classList.add("transitioning"));
                setTimeout(() => {
                  allCards.forEach((card) => card.classList.remove("transitioning"));
                }, 300);
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { children: pattern.name }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { children: pattern.description })
              ]
            },
            index2
          )) }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "breathing-circle-container", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: `breathing-circle ${breathingPhase}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "breathing-text", children: breathingText }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "phase-progress", style: {
              width: `${phaseProgress}%`,
              transition: "width 0.1s linear"
            } })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "quiet-space-instructions", children: isPlaying ? `Following ${breathingPatterns2[selectedPattern].name} pattern` : "Select a pattern and press start to begin" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "breathing-controls", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
              AppButton,
              {
                className: "quiet-space-button",
                onClick: toggleBreathing,
                variant: "primary",
                children: [
                  isPlaying ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PauseIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PlayIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("span", { children: [
                    isPlaying ? "Stop" : "Start",
                    " Breathing"
                  ] })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("label", { className: "chime-toggle", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "input",
                {
                  type: "checkbox",
                  checked: showChimes,
                  onChange: (e4) => setShowChimes(e4.target.checked)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: "Play chimes" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Card, { className: "resources-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("h2", { className: "section-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(HeartIcon2, {}),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: "Stress Relief Resources" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "section-description", children: "Explore these helpful tools and communities for additional support" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "resource-grid", children: stressReliefResources.map((resource, index2) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
            "a",
            {
              href: resource.url,
              target: "_blank",
              rel: "noopener noreferrer",
              className: "resource-card",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "resource-icon", children: resource.icon }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "resource-info", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { children: resource.title }),
                  /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { children: resource.description })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "resource-arrow", children: "\u2192" })
              ]
            },
            index2
          )) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Card, { className: "additional-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("h2", { className: "section-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(BookIcon, {}),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: "Learn More" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "learn-more-buttons", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => window.open("https://www.healthline.com/health/breathing-exercises-for-anxiety", "_blank"),
                children: "Breathing Techniques Guide"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => window.open("https://www.mindful.org/meditation/mindfulness-getting-started/", "_blank"),
                children: "Mindfulness for Beginners"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => window.open("https://www.sleepfoundation.org/sleep-hygiene", "_blank"),
                children: "Better Sleep Tips"
              }
            )
          ] })
        ] })
      ] });
    };
    QuietSpaceView_default = QuietSpaceView;
  }
});

// src/views/CrisisView.tsx
var CrisisView_exports = {};
__export(CrisisView_exports, {
  default: () => CrisisView_default
});
var import_react50, import_jsx_runtime46, CrisisView, CrisisView_default;
var init_CrisisView = __esm({
  "src/views/CrisisView.tsx"() {
    "use strict";
    import_react50 = __toESM(require_react());
    init_icons_dynamic();
    import_jsx_runtime46 = __toESM(require_jsx_runtime());
    CrisisView = () => {
      const [emergencyContacted, setEmergencyContacted] = (0, import_react50.useState)(false);
      const crisisResources = [
        {
          id: "suicide-prevention",
          name: "988 Suicide & Crisis Lifeline",
          phone: "988",
          description: "Free and confidential emotional support 24/7",
          available24h: true
        },
        {
          id: "crisis-text",
          name: "Crisis Text Line",
          phone: "Text HOME to 741741",
          description: "Text-based crisis support",
          available24h: true
        },
        {
          id: "emergency",
          name: "Emergency Services",
          phone: "911",
          description: "For immediate medical emergencies",
          available24h: true
        }
      ];
      const handleEmergencyCall = (phone) => {
        if (phone === "911" || phone === "988") {
          setEmergencyContacted(true);
          window.open(`tel:${phone}`, "_self");
        } else if (phone.includes("741741")) {
          window.open("sms:741741?body=HOME", "_self");
        }
      };
      (0, import_react50.useEffect)(() => {
        console.log("Crisis view accessed at:", (/* @__PURE__ */ new Date()).toISOString());
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "min-h-screen bg-red-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "bg-red-100 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(AlertIcon, { className: "w-8 h-8 text-red-600 dark:text-red-400 mr-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h1", { className: "text-2xl font-bold text-red-800 dark:text-red-200", children: "Crisis Support Resources" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-red-700 dark:text-red-300 text-lg", children: "If you're experiencing a mental health crisis, you're not alone. Help is available 24/7." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ShieldIcon, { className: "w-6 h-6 text-blue-600 dark:text-blue-400 mr-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100", children: "Immediate Support" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "grid gap-4 md:grid-cols-1 lg:grid-cols-3", children: crisisResources.map((resource) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
            "div",
            {
              className: "border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:shadow-lg transition-shadow",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-2", children: resource.name }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm mb-3", children: resource.description }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { className: "text-lg font-bold text-blue-600 dark:text-blue-400", children: resource.phone }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
                    "button",
                    {
                      onClick: () => handleEmergencyCall(resource.phone),
                      className: "bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors",
                      children: [
                        resource.phone.includes("Text") ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MessageCircleIcon, { className: "w-4 h-4" }) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PhoneIcon2, { className: "w-4 h-4" }),
                        resource.phone.includes("Text") ? "Text" : "Call"
                      ]
                    }
                  )
                ] }),
                resource.available24h && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "mt-2 text-xs text-green-600 dark:text-green-400", children: "\u2713 Available 24/7" })
              ]
            },
            resource.id
          )) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(HeartIcon2, { className: "w-6 h-6 text-pink-600 dark:text-pink-400 mr-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100", children: "Safety & Coping Strategies" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "grid gap-6 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-3", children: "Immediate Coping Techniques" }),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("ul", { className: "space-y-2 text-gray-600 dark:text-gray-400", children: [
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Take slow, deep breaths" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Ground yourself - notice 5 things you can see, 4 you can touch, 3 you can hear" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Call a trusted friend or family member" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Remove yourself from harmful situations" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Use ice or cold water on your face/hands" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-3", children: "When to Seek Emergency Help" }),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("ul", { className: "space-y-2 text-gray-600 dark:text-gray-400", children: [
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Thoughts of hurting yourself or others" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Unable to care for yourself" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Severe panic or anxiety attacks" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Hearing voices or seeing things" }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Feeling completely hopeless" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "text-xl font-semibold text-blue-800 dark:text-blue-200 mb-4", children: "Follow-up Support" }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-blue-700 dark:text-blue-300 mb-4", children: "After the immediate crisis passes, consider these ongoing support options:" }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("ul", { className: "space-y-2 text-blue-600 dark:text-blue-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Schedule an appointment with a mental health professional" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Contact your primary care doctor" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Join a support group in your area" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Use the Astral Core wellness tracking features" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("li", { children: "\u2022 Create a safety plan with your support network" })
          ] })
        ] }),
        emergencyContacted && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg", children: "Help is on the way. Stay safe." })
      ] }) });
    };
    CrisisView_default = CrisisView;
  }
});

// src/components/CrisisSupportWidget.css
var init_CrisisSupportWidget = __esm({
  "src/components/CrisisSupportWidget.css"() {
  }
});

// src/components/CrisisSupportWidget.tsx
var import_react51, import_jsx_runtime47, CrisisSupportWidget;
var init_CrisisSupportWidget2 = __esm({
  "src/components/CrisisSupportWidget.tsx"() {
    "use strict";
    import_react51 = __toESM(require_react());
    init_icons_dynamic();
    init_CrisisSupportWidget();
    import_jsx_runtime47 = __toESM(require_jsx_runtime());
    CrisisSupportWidget = () => {
      const [activeExercise, setActiveExercise] = (0, import_react51.useState)(null);
      const [showGrounding, setShowGrounding] = (0, import_react51.useState)(false);
      const [groundingStep, setGroundingStep] = (0, import_react51.useState)(0);
      const groundingSteps = [
        { sense: "See", count: 5, prompt: "Name 5 things you can see around you", icon: "\u{1F441}\uFE0F" },
        { sense: "Touch", count: 4, prompt: "Touch 4 things and describe their texture", icon: "\u270B" },
        { sense: "Hear", count: 3, prompt: "Listen for 3 sounds you can hear", icon: "\u{1F442}" },
        { sense: "Smell", count: 2, prompt: "Notice 2 things you can smell", icon: "\u{1F443}" },
        { sense: "Taste", count: 1, prompt: "Focus on 1 thing you can taste", icon: "\u{1F445}" }
      ];
      const quickHelpOptions = [
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(PhoneIcon2, {}),
          title: "Call 988",
          description: "Immediate crisis support",
          action: () => window.open("tel:988", "_blank"),
          type: "call",
          priority: true
        },
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChatIcon, {}),
          title: "Text HOME to 741741",
          description: "Crisis text support",
          action: () => window.open("sms:741741?body=HOME", "_blank"),
          type: "text",
          priority: true
        },
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(HeartIcon2, {}),
          title: "Breathing Exercise",
          description: "Calm your anxiety",
          action: () => setActiveExercise("breathing"),
          type: "exercise",
          priority: false
        },
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(SparkleIcon, {}),
          title: "Grounding Exercise",
          description: "5-4-3-2-1 technique",
          action: () => {
            setShowGrounding(true);
            setGroundingStep(0);
          },
          type: "exercise",
          priority: false
        },
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ShieldIcon, {}),
          title: "My Safety Plan",
          description: "Access your personal plan",
          action: () => window.location.href = "#/safety-plan",
          type: "navigate",
          priority: false
        },
        {
          icon: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ClockIcon, {}),
          title: "Quiet Space",
          description: "Find a moment of peace",
          action: () => window.location.href = "#/quiet-space",
          type: "navigate",
          priority: false
        }
      ];
      const affirmations = [
        "You are stronger than you know",
        "This feeling will pass",
        "You deserve support and care",
        "It's okay to ask for help",
        "You matter and you belong",
        "Tomorrow is a new day",
        "You've survived difficult times before",
        "Your feelings are valid"
      ];
      const [currentAffirmation, setCurrentAffirmation] = (0, import_react51.useState)(0);
      const nextAffirmation = () => {
        setCurrentAffirmation((prev) => (prev + 1) % affirmations.length);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "crisis-support-widget", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "widget-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "pulse-indicator", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "pulse-dot" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("h2", { className: "widget-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(HeartIcon2, { className: "widget-icon" }),
            "You're Not Alone"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "affirmation-banner", onClick: nextAffirmation, children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("p", { className: "affirmation-text", children: [
            "\u{1F499} ",
            affirmations[currentAffirmation]
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "affirmation-hint", children: "Tap for another" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "quick-help-grid", children: quickHelpOptions.map((option, index2) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
          "button",
          {
            className: `quick-help-btn ${option.priority ? "priority" : ""} ${option.type}`,
            onClick: option.action,
            style: { animationDelay: `${index2 * 0.1}s` },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "btn-icon", children: option.icon }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "btn-content", children: [
                /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h3", { children: option.title }),
                /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { children: option.description })
              ] }),
              option.priority && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "urgent-badge", children: "Immediate" })
            ]
          },
          index2
        )) }),
        showGrounding && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "grounding-overlay", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "grounding-modal", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h3", { children: "Grounding Exercise" }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "grounding-step", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "step-icon", children: groundingSteps[groundingStep].icon }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "step-content", children: [
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h4", { children: groundingSteps[groundingStep].sense }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { children: groundingSteps[groundingStep].prompt }),
              /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "step-counter", children: Array.from({ length: groundingSteps[groundingStep].count }, (_3, i3) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", { className: "count-dot" }, i3)) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "grounding-actions", children: [
            groundingStep < groundingSteps.length - 1 ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              "button",
              {
                className: "next-step-btn",
                onClick: () => setGroundingStep(groundingStep + 1),
                children: "Next Step \u2192"
              }
            ) : /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              "button",
              {
                className: "complete-btn",
                onClick: () => {
                  setShowGrounding(false);
                  setGroundingStep(0);
                },
                children: "Complete \u2713"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
              "button",
              {
                className: "close-btn",
                onClick: () => {
                  setShowGrounding(false);
                  setGroundingStep(0);
                },
                children: "Close"
              }
            )
          ] })
        ] }) }),
        activeExercise === "breathing" && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "breathing-mini-widget", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "breathing-animation", children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "breath-circle" }),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { className: "breath-instruction", children: "Breathe with the circle" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            "button",
            {
              className: "close-exercise",
              onClick: () => setActiveExercise(null),
              children: "Close"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "remember-section", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("p", { className: "remember-text", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ShieldIcon, { className: "remember-icon" }),
          "Remember: Reaching out for help is a sign of strength, not weakness."
        ] }) })
      ] });
    };
  }
});

// src/styles/crisis-resources.css
var init_crisis_resources = __esm({
  "src/styles/crisis-resources.css"() {
  }
});

// src/views/CrisisResourcesView.tsx
var CrisisResourcesView_exports = {};
__export(CrisisResourcesView_exports, {
  CrisisResourcesView: () => CrisisResourcesView,
  default: () => CrisisResourcesView_default
});
var import_react52, import_jsx_runtime48, RESOURCE_CATEGORIES, DEMOGRAPHIC_RESOURCES, EMERGENCY_NUMBERS, EmergencyNumberCard, ResourceCard, SafetyPlanAccess, CrisisResourcesView, CrisisResourcesView_default;
var init_CrisisResourcesView = __esm({
  "src/views/CrisisResourcesView.tsx"() {
    "use strict";
    import_react52 = __toESM(require_react());
    init_ApiClient();
    init_icons_dynamic();
    init_Card();
    init_AppButton();
    init_CrisisSupportWidget2();
    init_BreathingWidget2();
    init_crisis_resources();
    import_jsx_runtime48 = __toESM(require_jsx_runtime());
    RESOURCE_CATEGORIES = ["All", "Emergency Help", "Text Support", "Youth & Students", "Veterans", "LGBTQ+", "Coping Strategies"];
    DEMOGRAPHIC_RESOURCES = {
      "Youth & Students": {
        icon: UserIcon,
        color: "#3B82F6",
        description: "Specialized support for young people and students"
      },
      "Veterans": {
        icon: HomeIcon2,
        color: "#10B981",
        description: "Resources specifically for military veterans"
      },
      "LGBTQ+": {
        icon: HeartIcon2,
        color: "#F59E0B",
        description: "Safe spaces and support for LGBTQ+ individuals"
      }
    };
    EMERGENCY_NUMBERS = [
      {
        name: "National Suicide Prevention Lifeline",
        number: "988",
        description: "24/7 free and confidential support",
        type: "crisis"
      },
      {
        name: "Crisis Text Line",
        number: "741741",
        description: "Text HOME for immediate support",
        type: "text"
      },
      {
        name: "Emergency Services",
        number: "911",
        description: "Life-threatening emergencies",
        type: "emergency"
      }
    ];
    EmergencyNumberCard = ({ emergency }) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Card, { className: `emergency-card ${emergency.type}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "emergency-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(PhoneIcon2, { className: "emergency-icon" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "emergency-info", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { children: emergency.name }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: emergency.description })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "emergency-actions", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
        AppButton,
        {
          variant: "primary",
          className: "call-button",
          onClick: () => {
            if (emergency.type === "text") {
              window.open(`sms:${emergency.number}?body=HOME`, "_blank");
            } else {
              window.open(`tel:${emergency.number}`, "_blank");
            }
          },
          children: emergency.type === "text" ? `Text ${emergency.number}` : `Call ${emergency.number}`
        }
      ) })
    ] });
    ResourceCard = ({ resource, priority }) => {
      const categoryInfo = DEMOGRAPHIC_RESOURCES[resource.category];
      const IconComponent = categoryInfo?.icon || ShieldIcon;
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Card, { className: `resource-card ${priority ? "priority-resource" : ""} ${resource.category.toLowerCase().replace(/[^a-z0-9]/g, "-")}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "resource-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "resource-title-section", children: [
            categoryInfo && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(IconComponent, { className: "category-icon", style: { color: categoryInfo.color } }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { children: resource.title })
          ] }),
          priority && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "priority-badge", children: "Immediate Help" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "resource-description", children: resource.description }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "resource-contact", children: resource.contact ? /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "contact-info", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(PhoneIcon2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("strong", { children: resource.contact }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
            AppButton,
            {
              variant: "secondary",
              size: "sm",
              onClick: () => {
                const phoneNumber = resource.contact?.replace(/[^\d]/g, "");
                if (phoneNumber) {
                  window.open(`tel:${phoneNumber}`, "_blank");
                }
              },
              className: "quick-call-btn",
              children: "Call Now"
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          AppButton,
          {
            variant: "secondary",
            onClick: () => window.open(resource.link, "_blank"),
            className: "resource-button",
            children: "Learn More"
          }
        ) })
      ] });
    };
    SafetyPlanAccess = () => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Card, { className: "safety-plan-card", children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "safety-plan-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ShieldIcon, { className: "safety-icon" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "safety-plan-info", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { children: "Personal Safety Plan" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: "Quick access to your personalized crisis management plan" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "safety-plan-actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          AppButton,
          {
            variant: "primary",
            onClick: () => window.location.href = "#/safety-plan",
            className: "safety-plan-btn",
            children: "View My Safety Plan"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          AppButton,
          {
            variant: "secondary",
            onClick: () => window.location.href = "#/create-safety-plan",
            className: "create-safety-plan-btn",
            children: "Create Safety Plan"
          }
        )
      ] })
    ] });
    CrisisResourcesView = () => {
      const [resources, setResources] = (0, import_react52.useState)([]);
      const [filteredResources, setFilteredResources] = (0, import_react52.useState)([]);
      const [isLoading, setIsLoading] = (0, import_react52.useState)(true);
      const [activeCategory, setActiveCategory] = (0, import_react52.useState)("All");
      const [searchTerm, setSearchTerm] = (0, import_react52.useState)("");
      (0, import_react52.useEffect)(() => {
        setIsLoading(true);
        ApiClient.resources.getResources().then((data2) => {
          setResources(Array.isArray(data2) ? data2 : []);
          setFilteredResources(Array.isArray(data2) ? data2 : []);
        }).catch((error44) => {
          console.error("Failed to load resources:", error44);
          const fallbackResources = [
            // Emergency Help
            {
              id: "crisis-1",
              title: "National Suicide Prevention Lifeline",
              description: "24/7 free and confidential support for people in distress and prevention resources.",
              category: "Emergency Help",
              contact: "988",
              link: "https://suicidepreventionlifeline.org"
            },
            {
              id: "crisis-2",
              title: "Emergency Services",
              description: "For immediate life-threatening emergencies requiring police, fire, or medical response.",
              category: "Emergency Help",
              contact: "911",
              link: ""
            },
            {
              id: "crisis-3",
              title: "SAMHSA National Helpline",
              description: "Treatment referral and information service for mental health and substance use disorders.",
              category: "Emergency Help",
              contact: "1-800-662-4357",
              link: "https://samhsa.gov"
            },
            // Text Support
            {
              id: "text-1",
              title: "Crisis Text Line",
              description: "Free, 24/7 crisis support via text message. Trained counselors available immediately.",
              category: "Text Support",
              contact: "Text HOME to 741741",
              link: "https://crisistextline.org"
            },
            {
              id: "text-2",
              title: "Teen Line Text Support",
              description: "Text support specifically for teenagers, by trained teen volunteers.",
              category: "Text Support",
              contact: "Text TEEN to 839863",
              link: "https://teenlineonline.org"
            },
            // Youth & Students
            {
              id: "youth-1",
              title: "National Suicide Prevention Lifeline (Youth)",
              description: "Specialized support for young people experiencing suicidal thoughts.",
              category: "Youth & Students",
              contact: "988",
              link: "https://suicidepreventionlifeline.org"
            },
            {
              id: "youth-2",
              title: "JED Campus Mental Health",
              description: "Mental health resources and support specifically designed for college students.",
              category: "Youth & Students",
              contact: "",
              link: "https://jedcampus.org"
            },
            // Veterans
            {
              id: "veterans-1",
              title: "Veterans Crisis Line",
              description: "24/7 confidential support for Veterans and their families, even if not enrolled in VA.",
              category: "Veterans",
              contact: "1-800-273-8255 Press 1",
              link: "https://veteranscrisisline.net"
            },
            {
              id: "veterans-2",
              title: "Veterans Text Support",
              description: "Text support for Veterans experiencing crisis or emotional distress.",
              category: "Veterans",
              contact: "Text 838255",
              link: "https://veteranscrisisline.net"
            },
            // LGBTQ+
            {
              id: "lgbtq-1",
              title: "The Trevor Project",
              description: "24/7 crisis support services to LGBTQ young people under 25.",
              category: "LGBTQ+",
              contact: "1-866-488-7386",
              link: "https://thetrevorproject.org"
            },
            {
              id: "lgbtq-2",
              title: "Trans Lifeline",
              description: "Crisis hotline staffed by transgender people for transgender people.",
              category: "LGBTQ+",
              contact: "877-565-8860",
              link: "https://translifeline.org"
            },
            // Coping Strategies
            {
              id: "coping-1",
              title: "Breathing Techniques for Anxiety",
              description: "Learn the 4-7-8 breathing technique and box breathing to manage anxiety attacks.",
              category: "Coping Strategies",
              contact: "",
              link: "#/quiet-space"
            },
            {
              id: "coping-2",
              title: "Grounding Exercises (5-4-3-2-1)",
              description: "Use your senses to ground yourself: 5 things you see, 4 you touch, 3 you hear, 2 you smell, 1 you taste.",
              category: "Coping Strategies",
              contact: "",
              link: "#/quiet-space"
            },
            {
              id: "coping-3",
              title: "Progressive Muscle Relaxation",
              description: "Systematic tensing and relaxing of muscle groups to reduce physical tension.",
              category: "Coping Strategies",
              contact: "",
              link: "#/quiet-space"
            },
            {
              id: "coping-4",
              title: "Mindfulness Meditation",
              description: "Simple mindfulness exercises to help center yourself in the present moment.",
              category: "Coping Strategies",
              contact: "",
              link: "#/quiet-space"
            }
          ];
          setResources(fallbackResources);
          setFilteredResources(fallbackResources);
        }).finally(() => setIsLoading(false));
      }, []);
      (0, import_react52.useEffect)(() => {
        let results = resources;
        if (activeCategory !== "All") {
          results = results.filter((r3) => r3.category === activeCategory);
        }
        if (searchTerm) {
          const lowerCaseSearchTerm = searchTerm.toLowerCase();
          results = results.filter(
            (r3) => r3.title.toLowerCase().includes(lowerCaseSearchTerm) || r3.description.toLowerCase().includes(lowerCaseSearchTerm)
          );
        }
        setFilteredResources(results);
      }, [activeCategory, searchTerm, resources]);
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "crisis-resources-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "calm-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h1", { children: "Crisis Support & Resources" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: "You're not alone. Here you'll find helpful resources and immediate support when you need it most." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(CrisisSupportWidget, {}),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "emergency-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("h2", { className: "section-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(PhoneIcon2, { className: "section-icon" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: "Emergency Contact Numbers" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "emergency-grid", children: EMERGENCY_NUMBERS.map((emergency) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(EmergencyNumberCard, { emergency }, emergency.number)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "quick-access-section", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "quick-access-grid", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
            AppButton,
            {
              variant: "primary",
              size: "lg",
              onClick: () => window.location.href = "#/quiet-space",
              className: "quick-access-btn breathing-btn",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(HeartIcon2, {}),
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: "Quiet Space & Breathing" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
            AppButton,
            {
              variant: "secondary",
              size: "lg",
              onClick: () => window.location.href = "#/crisis-chat",
              className: "quick-access-btn chat-btn",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ShieldIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: "Crisis Chat Support" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
            AppButton,
            {
              variant: "secondary",
              size: "lg",
              onClick: () => window.location.href = "#/safety-plan",
              className: "quick-access-btn safety-btn",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ClockIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: "My Safety Plan" })
              ]
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { style: { marginBottom: "2rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(BreathingWidget, { embedded: false }) }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SafetyPlanAccess, {}),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "search-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "search-wrapper", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SearchIcon, { className: "search-icon" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
              "input",
              {
                type: "search",
                placeholder: "Search for specific topics or resources...",
                className: "search-input",
                value: searchTerm,
                onChange: (e4) => setSearchTerm(e4.target.value)
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "category-filters", children: RESOURCE_CATEGORIES.map((cat) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
            "button",
            {
              className: `category-btn ${activeCategory === cat ? "active" : ""}`,
              onClick: () => setActiveCategory(cat),
              children: cat
            },
            cat
          )) })
        ] }),
        isLoading ? /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "loading-state", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SparkleIcon, { className: "loading-icon" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: "Loading resources..." })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(import_jsx_runtime48.Fragment, { children: filteredResources.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "resources-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("h2", { className: "section-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(UserIcon, { className: "section-icon" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { children: activeCategory === "All" ? "All Resources" : activeCategory })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "resources-grid", children: filteredResources.map((resource) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
            ResourceCard,
            {
              resource,
              priority: resource.category === "Emergency Help"
            },
            resource.id
          )) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "empty-state", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(HeartIcon2, { className: "empty-icon" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { children: "No resources found" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { children: "Try adjusting your search or filters to find what you're looking for." }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
            AppButton,
            {
              variant: "secondary",
              onClick: () => {
                setSearchTerm("");
                setActiveCategory("All");
              },
              children: "Clear Filters"
            }
          )
        ] }) })
      ] });
    };
    CrisisResourcesView_default = CrisisResourcesView;
  }
});

// src/views/AboutView.tsx
var AboutView_exports = {};
__export(AboutView_exports, {
  default: () => AboutView_default
});
var import_jsx_runtime49, AboutView, AboutView_default;
var init_AboutView = __esm({
  "src/views/AboutView.tsx"() {
    "use strict";
    init_icons_dynamic();
    import_jsx_runtime49 = __toESM(require_jsx_runtime());
    AboutView = () => {
      const features = [
        {
          icon: HeartIcon2,
          title: "Wellness Tracking",
          description: "Monitor your mental health with daily check-ins and mood tracking"
        },
        {
          icon: UsersIcon,
          title: "Peer Support",
          description: "Connect with trained helpers and supportive community members"
        },
        {
          icon: SparkleIcon,
          title: "AI Companion",
          description: "Get support from our intelligent mental health assistant"
        },
        {
          icon: ShieldIcon,
          title: "Crisis Support",
          description: "24/7 access to crisis resources and emergency contacts"
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "container mx-auto px-4 py-8 max-w-4xl", children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center mb-12", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h1", { className: "text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4", children: "About Astral Core" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto", children: "A safe, anonymous platform dedicated to mental health support and peer-to-peer care" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-4", children: "Our Mission" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-gray-700 dark:text-gray-300 text-lg leading-relaxed", children: "Astral Core exists to provide a safe, supportive space where people can seek help, share experiences, and support each other through mental health challenges. We believe that everyone deserves access to mental health resources and a community that cares." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "grid gap-8 md:grid-cols-2 mb-8", children: features.map((feature) => {
          const IconComponent = feature.icon;
          return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex items-center space-x-4 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(IconComponent, { className: "w-6 h-6 text-blue-600 dark:text-blue-400" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100", children: feature.title })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-gray-600 dark:text-gray-400", children: feature.description })
          ] }, feature.title);
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-8 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-2xl font-semibold text-blue-800 dark:text-blue-200 mb-4", children: "Privacy & Safety First" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "grid gap-6 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-medium text-blue-800 dark:text-blue-200 mb-2", children: "Anonymous by Design" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-blue-700 dark:text-blue-300", children: "Your identity is protected at every level. No real names required, no identifying information stored." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-medium text-blue-800 dark:text-blue-200 mb-2", children: "Crisis Detection" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-blue-700 dark:text-blue-300", children: "Our AI systems monitor for crisis indicators and immediately connect users with appropriate resources." })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "Our Values" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "grid gap-6 md:grid-cols-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(HeartIcon2, { className: "w-12 h-12 text-pink-500 mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Compassion" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "Every interaction is guided by empathy and understanding" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ShieldIcon, { className: "w-12 h-12 text-green-500 mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Safety" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "User safety and privacy are our highest priorities" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(UsersIcon, { className: "w-12 h-12 text-blue-500 mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Community" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "Together, we create a supportive network of care" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-4", children: "Get Help or Get Involved" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "grid gap-6 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Need Immediate Help?" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "space-y-2 text-gray-600 dark:text-gray-400", children: [
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Crisis Support: Available 24/7 in the app" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 National Suicide Prevention Lifeline: 988" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Crisis Text Line: Text HOME to 741741" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Emergency Services: 911" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-gray-100 mb-3", children: "Want to Help Others?" }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "space-y-2 text-gray-600 dark:text-gray-400", children: [
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Become a peer support helper" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Join our volunteer crisis response team" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Share your story to help others" }),
                /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "\u2022 Provide feedback to improve the platform" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center mt-8 text-gray-500 dark:text-gray-400 text-sm", children: [
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "Astral Core v1.0.0" }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { children: "Built with care for mental health support" })
        ] })
      ] }) });
    };
    AboutView_default = AboutView;
  }
});

// src/views/HelpView.tsx
var HelpView_exports = {};
__export(HelpView_exports, {
  default: () => HelpView_default
});
var import_jsx_runtime50, HelpView, HelpView_default;
var init_HelpView = __esm({
  "src/views/HelpView.tsx"() {
    "use strict";
    init_icons_dynamic();
    import_jsx_runtime50 = __toESM(require_jsx_runtime());
    HelpView = () => {
      const helpSections = [
        {
          title: "Getting Started",
          icon: HeartIcon2,
          topics: [
            "Creating your anonymous profile",
            "Taking your first wellness check-in",
            "Understanding safety features",
            "Navigating the community"
          ]
        },
        {
          title: "Community Support",
          icon: MessageCircleIcon,
          topics: [
            "How to find peer helpers",
            "Posting in community feed",
            "Joining support groups",
            "Giving support to others"
          ]
        },
        {
          title: "Crisis Resources",
          icon: ShieldIcon,
          topics: [
            "When to use crisis support",
            "Emergency contact numbers",
            "Safety planning basics",
            "Getting immediate help"
          ]
        },
        {
          title: "Privacy & Safety",
          icon: BookIcon,
          topics: [
            "How we protect your identity",
            "Managing your privacy settings",
            "Reporting inappropriate content",
            "Understanding our safety features"
          ]
        }
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2", children: "Help & Support" }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-lg", children: "Find answers and learn how to make the most of Astral Core" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "grid gap-4 md:grid-cols-3 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { className: "bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 text-left hover:shadow-md transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShieldIcon, { className: "w-8 h-8 text-red-600 dark:text-red-400 mb-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "text-lg font-semibold text-red-800 dark:text-red-200 mb-2", children: "Crisis Support" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-sm text-red-700 dark:text-red-300", children: "Get immediate help and crisis resources" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { className: "bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6 text-left hover:shadow-md transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MessageCircleIcon, { className: "w-8 h-8 text-blue-600 dark:text-blue-400 mb-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "text-lg font-semibold text-blue-800 dark:text-blue-200 mb-2", children: "Contact Support" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-sm text-blue-700 dark:text-blue-300", children: "Get help with technical issues" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { className: "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6 text-left hover:shadow-md transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(BookIcon, { className: "w-8 h-8 text-green-600 dark:text-green-400 mb-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "text-lg font-semibold text-green-800 dark:text-green-200 mb-2", children: "User Guide" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-sm text-green-700 dark:text-green-300", children: "Learn how to use all features" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "grid gap-6 md:grid-cols-2", children: helpSections.map((section) => {
          const IconComponent = section.icon;
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(IconComponent, { className: "w-5 h-5 text-blue-600 dark:text-blue-400" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100", children: section.title })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("ul", { className: "space-y-2", children: section.topics.map((topic) => /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("button", { className: "text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 text-sm text-left transition-colors", children: [
              "\u2022 ",
              topic
            ] }) }, topic)) })
          ] }, section.title);
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mt-8 bg-white dark:bg-gray-800 rounded-lg shadow-md p-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "Frequently Asked Questions" }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "border-b border-gray-200 dark:border-gray-700 pb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "Is Astral Core really anonymous?" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "Yes, we're designed with privacy first. No real names required, no identifying information stored, and all conversations are encrypted." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "border-b border-gray-200 dark:border-gray-700 pb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "What happens if I'm in crisis?" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "Our AI monitors for crisis indicators and will immediately offer resources. You can also access 24/7 crisis support at any time through the crisis button." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "border-b border-gray-200 dark:border-gray-700 pb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h3", { className: "font-semibold text-gray-900 dark:text-gray-100 mb-2", children: "How are peer helpers trained?" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-sm", children: "All peer helpers complete mental health first aid training and ongoing education. They're volunteers with lived experience who want to help others." })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "mt-8 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h2", { className: "text-lg font-semibold text-red-800 dark:text-red-200 mb-4", children: "Emergency Resources" }),
          /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "grid gap-4 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-red-700 dark:text-red-300 font-medium", children: "Suicide & Crisis Lifeline" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-red-600 dark:text-red-400 text-lg font-bold", children: "988" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-red-700 dark:text-red-300 font-medium", children: "Crisis Text Line" }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("p", { className: "text-red-600 dark:text-red-400 text-lg font-bold", children: "Text HOME to 741741" })
            ] })
          ] })
        ] })
      ] }) });
    };
    HelpView_default = HelpView;
  }
});

// src/views/LegalView.tsx
var LegalView_exports = {};
__export(LegalView_exports, {
  LegalView: () => LegalView,
  default: () => LegalView_default
});
var import_jsx_runtime51, LegalView, LegalView_default;
var init_LegalView = __esm({
  "src/views/LegalView.tsx"() {
    "use strict";
    init_ViewHeader();
    init_Card();
    import_jsx_runtime51 = __toESM(require_jsx_runtime());
    LegalView = () => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
        ViewHeader,
        {
          title: "Legal Information",
          subtitle: "Terms of Service, Privacy Policy, and Helper Agreement."
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(Card, { className: "legal-card", children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("section", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { children: "Terms of Service" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { children: "Welcome to Peer Support Circle. By accessing or using our service, you agree to be bound by these terms. If you disagree with any part of the terms, then you may not access the service." }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Use of Service:" }),
            " This service is intended for peer-to-peer support. It is not a substitute for professional medical advice, diagnosis, or treatment. Always seek the advice of your physician or other qualified health provider with any questions you may have regarding a medical condition."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "User Conduct:" }),
            " You agree not to use the service to post any content that is unlawful, harmful, threatening, abusive, harassing, defamatory, vulgar, obscene, or otherwise objectionable. You are responsible for your own communications and for any consequences thereof."
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("hr", {}),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("section", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { children: "Privacy Policy" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { children: "Your privacy is critically important to us. This application is designed to be anonymous." }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Anonymous ID:" }),
            ' We assign you a randomly generated identifier (your "User Token") which is stored only on your device. This token is not linked to any personal information. You can reset this token at any time in the Settings page.'
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Data We Don't Collect:" }),
            " We do not collect your name, email address, IP address, or any other personally identifiable information for users seeking support."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Data Helpers Provide:" }),
            ' Users who sign up to be "Helpers" will provide an email address for authentication purposes. This data is kept separate from the anonymous support system.'
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("hr", {}),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("section", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("h2", { children: "Helper Agreement" }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("p", { children: 'This agreement applies to users who voluntarily sign up for a "Helper" account.' }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Role of a Helper:" }),
            " As a Helper, you agree to provide supportive and empathetic peer-to-peer communication. You acknowledge that you are not a licensed therapist or medical professional and will not provide medical advice, diagnoses, or crisis counseling."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Confidentiality:" }),
            " You agree to respect the privacy and anonymity of all users. You will not attempt to identify users or share any information discussed within the platform."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("strong", { children: "Mandatory Reporting:" }),
            " While maintaining privacy is paramount, if you believe a user is in imminent danger of harming themselves or others, you are encouraged to follow platform protocols for escalating the situation, which may involve alerting platform moderators."
          ] })
        ] })
      ] })
    ] });
    LegalView_default = LegalView;
  }
});

// src/components/EmptyState.tsx
var import_jsx_runtime52, EmptyState;
var init_EmptyState = __esm({
  "src/components/EmptyState.tsx"() {
    "use strict";
    import_jsx_runtime52 = __toESM(require_jsx_runtime());
    EmptyState = ({
      title = "No content yet",
      message = "There's nothing to show here at the moment.",
      icon,
      action,
      className = "",
      children
    }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: `empty-state ${className}`, children: [
        icon && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "empty-state-icon", children: icon }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("h3", { className: "empty-state-title", children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "empty-state-message", children: message }),
        action && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "empty-state-action", children: action }),
        children && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "empty-state-children", children })
      ] });
    };
  }
});

// src/views/PeerSupportView.tsx
var PeerSupportView_exports = {};
__export(PeerSupportView_exports, {
  PeerSupportView: () => PeerSupportView,
  default: () => PeerSupportView_default
});
var import_react53, import_jsx_runtime53, PeerSupportView, PeerSupportView_default;
var init_PeerSupportView = __esm({
  "src/views/PeerSupportView.tsx"() {
    "use strict";
    import_react53 = __toESM(require_react());
    init_ViewHeader();
    init_Card();
    init_AppButton();
    init_EmptyState();
    init_icons_dynamic();
    init_NotificationContext();
    init_AuthContext();
    import_jsx_runtime53 = __toESM(require_jsx_runtime());
    PeerSupportView = ({ userToken: propUserToken }) => {
      const { userToken: contextUserToken } = useAuth();
      const userToken = propUserToken ?? contextUserToken;
      const [matches, setMatches] = (0, import_react53.useState)([]);
      const [isLoading, setIsLoading] = (0, import_react53.useState)(true);
      const [_selectedMatch, setSelectedMatch] = (0, import_react53.useState)(null);
      const { addToast } = useNotification();
      (0, import_react53.useEffect)(() => {
        loadMatches();
      }, []);
      const loadMatches = async () => {
        try {
          setIsLoading(true);
          const mockMatches = [
            {
              id: "1",
              userToken: "peer-1",
              displayName: "Alex",
              bio: "Here to listen and share experiences about anxiety and stress management.",
              interests: ["Anxiety", "Stress", "Mindfulness"],
              matchScore: 0.95,
              isOnline: true,
              lastActive: (/* @__PURE__ */ new Date()).toISOString()
            },
            {
              id: "2",
              userToken: "peer-2",
              displayName: "Jordan",
              bio: "Recovered from depression and want to help others on their journey.",
              interests: ["Depression", "Recovery", "Self-care"],
              matchScore: 0.87,
              isOnline: false,
              lastActive: new Date(Date.now() - 36e5).toISOString()
            },
            {
              id: "3",
              userToken: "peer-3",
              displayName: "Sam",
              bio: "Passionate about mental health awareness and breaking stigmas.",
              interests: ["Mental Health", "Support Groups", "Wellness"],
              matchScore: 0.82,
              isOnline: true,
              lastActive: (/* @__PURE__ */ new Date()).toISOString()
            }
          ];
          setMatches(mockMatches);
        } catch (error44) {
          console.error("Failed to load peer matches:", error44);
          addToast("Failed to load peer matches", "error");
        } finally {
          setIsLoading(false);
        }
      };
      const connectWithPeer = async (peer) => {
        try {
          addToast(`Connecting with ${peer.displayName}...`, "info");
          const response = await fetch("/api/peer-support/connect", {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${userToken}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              peerId: peer.id,
              message: `Hi ${peer.displayName}, I'd like to connect with you for peer support.`
            })
          });
          if (response.ok) {
            const data2 = await response.json();
            setSelectedMatch(peer);
            addToast(`Connected with ${peer.displayName}!`, "success");
            sessionStorage.setItem("activePeerConnection", JSON.stringify({
              peer,
              connectionId: data2.connectionId,
              timestamp: (/* @__PURE__ */ new Date()).toISOString()
            }));
          } else {
            throw new Error("Connection request failed");
          }
        } catch (error44) {
          console.error("Failed to connect with peer:", error44);
          addToast("Failed to connect with peer", "error");
        }
      };
      if (isLoading) {
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-support-view", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
            ViewHeader,
            {
              title: "Peer Support",
              subtitle: "Connect with others who understand your journey"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "loading-spinner", style: { margin: "3rem auto" } })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-support-view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
          ViewHeader,
          {
            title: "Peer Support",
            subtitle: "Connect with others who understand your journey"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-support-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card, { className: "safety-notice", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "safety-notice-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ShieldIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h3", { children: "Peer Support Guidelines" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("ul", { className: "safety-guidelines", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("li", { children: "Peers are not professional therapists or counselors" }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("li", { children: "Share only what you're comfortable sharing" }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("li", { children: "Respect boundaries and privacy" }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("li", { children: "Report any inappropriate behavior" }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("li", { children: 'For crisis support, use "Get Help Now" resources' })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-matches-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h2", { children: "Suggested Peers" }),
            matches.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              EmptyState,
              {
                icon: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(UsersIcon, {}),
                title: "No matches available",
                message: "Check back later for new peer connections"
              }
            ) : /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "peer-matches-grid", children: matches.map((peer) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card, { className: "peer-match-card", children: [
              /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-match-header", children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-avatar", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(UsersIcon, {}),
                  peer.isOnline && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "online-indicator" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-info", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h3", { children: peer.displayName }),
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "peer-status", children: peer.isOnline ? "Online now" : `Last seen ${new Date(peer.lastActive).toLocaleTimeString()}` })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "match-score", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(StarIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("span", { children: [
                    Math.round(peer.matchScore * 100),
                    "% match"
                  ] })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "peer-bio", children: peer.bio }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "peer-interests", children: peer.interests.map((interest) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "interest-tag", children: interest }, interest)) }),
              /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "peer-actions", children: [
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
                  AppButton,
                  {
                    onClick: () => connectWithPeer(peer),
                    variant: "primary",
                    size: "sm",
                    disabled: !peer.isOnline,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(MessageCircleIcon, {}),
                      peer.isOnline ? "Connect Now" : "Offline"
                    ]
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
                  AppButton,
                  {
                    variant: "secondary",
                    size: "sm",
                    onClick: () => console.log("Saving peer:", peer.id),
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(HeartIcon2, {}),
                      "Save"
                    ]
                  }
                )
              ] })
            ] }, peer.id)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "active-connections-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h2", { children: "Your Connections" }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              EmptyState,
              {
                icon: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(MessageCircleIcon, {}),
                title: "No active connections",
                message: "Connect with a peer to start supporting each other"
              }
            )
          ] })
        ] })
      ] });
    };
    PeerSupportView_default = PeerSupportView;
  }
});

// src/services/webSocketService.ts
var React50, WebSocketService, wsServiceInstance, getWebSocketService;
var init_webSocketService = __esm({
  "src/services/webSocketService.ts"() {
    "use strict";
    React50 = __toESM(require_react());
    init_auth0Service();
    init_notificationService();
    WebSocketService = class {
      constructor(url2) {
        this.url = url2;
        this.checkDemoMode();
        this.setupLifecycleListeners();
        if (!this.demoMode) {
          this.connect();
        }
      }
      ws = null;
      reconnectAttempts = 0;
      maxReconnectAttempts = 10;
      reconnectInterval = 5e3;
      heartbeatInterval = null;
      messageQueue = [];
      listeners = /* @__PURE__ */ new Map();
      connectionListeners = /* @__PURE__ */ new Set();
      eventHandlers = /* @__PURE__ */ new Map();
      typingIndicators = /* @__PURE__ */ new Map();
      presenceData = /* @__PURE__ */ new Map();
      roomSubscriptions = /* @__PURE__ */ new Set();
      demoMode = false;
      connectionPromise = null;
      userId = null;
      checkDemoMode() {
        const isDevelopment2 = false;
        const isLocalhost = this.url.includes("localhost");
        if (isDevelopment2 && isLocalhost) {
          this.demoMode = true;
        }
      }
      setupLifecycleListeners() {
        window.addEventListener("online", () => {
          console.log("Network is back online, reconnecting WebSocket...");
          this.connect();
        });
        document.addEventListener("visibilitychange", () => {
          if (document.hidden) {
            this.stopHeartbeat();
          } else if (this.isConnected()) {
            this.startHeartbeat();
            this.checkMissedNotifications();
          }
        });
        window.addEventListener("beforeunload", () => {
          this.disconnect();
        });
      }
      async connect() {
        if (this.connectionPromise) {
          return this.connectionPromise;
        }
        if (this.isConnected() && this.ws?.readyState === WebSocket.OPEN) {
          return Promise.resolve();
        }
        if (this.demoMode) {
          this.simulateDemoConnection();
          return Promise.resolve();
        }
        this.connectionPromise = this.performConnect();
        try {
          await this.connectionPromise;
        } finally {
          this.connectionPromise = null;
        }
      }
      async performConnect() {
        return new Promise((resolve, reject) => {
          auth0Service.getAccessToken().then((token) => {
            auth0Service.getCurrentUser().then((user) => {
              if (user) {
                this.userId = user.id;
              }
            });
            const wsUrl = token ? `${this.url}?token=${encodeURIComponent(token)}` : this.url;
            this.ws = new WebSocket(wsUrl);
            this.setupEventListeners(resolve, reject);
          }).catch(() => {
            this.ws = new WebSocket(this.url);
            this.setupEventListeners(resolve, reject);
          });
        });
      }
      simulateDemoConnection() {
        setTimeout(() => {
          this.notifyConnectionListeners(true);
          this.flushMessageQueue();
        }, 100);
      }
      setupEventListeners(resolve, reject) {
        if (!this.ws) return;
        this.ws.onopen = () => {
          if (false) {
            console.info("\u2713 WebSocket connected");
          }
          this.reconnectAttempts = 0;
          auth0Service.getAccessToken().then((token) => {
            if (token) {
              this.authenticate(token);
            }
          });
          this.startHeartbeat();
          this.notifyConnectionListeners(true);
          this.rejoinRooms();
          this.flushMessageQueue();
          this.emit("connect", { timestamp: Date.now() });
          if (resolve) resolve();
        };
        this.ws.onclose = (event) => {
          if (event.code !== 1e3 && false) {
            console.info("WebSocket disconnected (offline mode)");
          }
          this.stopHeartbeat();
          this.notifyConnectionListeners(false);
          this.clearTypingIndicators();
          this.emit("disconnect", { code: event.code, reason: event.reason });
          if (!event.wasClean && this.reconnectAttempts < this.maxReconnectAttempts) {
            this.scheduleReconnect();
          }
        };
        this.ws.onerror = (error44) => {
          this.emit("error", error44);
          if (reject) reject(error44);
        };
        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error44) {
            console.error("Failed to parse WebSocket message:", error44);
          }
        };
      }
      handleMessage(message) {
        if (message.type === "auth_success") {
          console.log("WebSocket authenticated");
          return;
        }
        if (message.type === "auth_error") {
          console.error("WebSocket authentication failed:", message.payload);
          this.disconnect();
          return;
        }
        switch (message.type) {
          case "pong":
            break;
          case "typing":
            this.handleTypingIndicator(message.payload);
            break;
          case "presence":
            this.handlePresenceUpdate(message.payload);
            break;
          case "notification":
            this.handleNotification(message.payload);
            break;
          case "crisis_alert":
            this.handleCrisisAlert(message.payload);
            break;
          default: {
            const listeners = this.listeners.get(message.type);
            if (listeners) {
              listeners.forEach((listener) => {
                try {
                  listener(message.payload);
                } catch (error44) {
                  console.error("Error in message listener:", error44);
                }
              });
            }
            break;
          }
        }
      }
      authenticate(token) {
        this.send("auth", { token });
      }
      handleTypingIndicator(indicator) {
        const { userId, room, isTyping } = indicator;
        if (!this.typingIndicators.has(room)) {
          this.typingIndicators.set(room, /* @__PURE__ */ new Map());
        }
        const roomIndicators = this.typingIndicators.get(room);
        if (isTyping) {
          const existingTimeout = roomIndicators.get(userId);
          if (existingTimeout) {
            clearTimeout(existingTimeout);
          }
          const timeout = setTimeout(() => {
            roomIndicators.delete(userId);
            this.emit("typing", { room, userId, isTyping: false });
          }, 3e3);
          roomIndicators.set(userId, timeout);
        } else {
          const timeout = roomIndicators.get(userId);
          if (timeout) {
            clearTimeout(timeout);
          }
          roomIndicators.delete(userId);
        }
        this.emit("typing", indicator);
      }
      handlePresenceUpdate(presence) {
        this.presenceData.set(presence.userId, presence);
        this.emit("presence", presence);
      }
      handleNotification(data2) {
        if (document.hidden) {
          notificationService_default.show({
            title: data2.title || "New Notification",
            body: data2.message || "You have a new notification",
            urgency: data2.urgency || "normal",
            category: data2.type || "system",
            data: data2.metadata
          });
        }
        this.emit("notification", data2);
      }
      handleCrisisAlert(data2) {
        notificationService_default.showCrisisNotification(
          data2.title || "Crisis Alert",
          data2.message || "Immediate assistance needed",
          data2
        );
        this.emit("crisis_alert", data2);
      }
      clearTypingIndicators() {
        this.typingIndicators.forEach((roomIndicators) => {
          roomIndicators.forEach((timeout) => clearTimeout(timeout));
        });
        this.typingIndicators.clear();
      }
      async checkMissedNotifications() {
        this.emit("check_missed_notifications", {});
      }
      scheduleReconnect() {
        this.reconnectAttempts++;
        if (this.reconnectAttempts > this.maxReconnectAttempts) {
          console.error("Max reconnection attempts reached");
          this.demoMode = true;
          this.simulateDemoConnection();
          return;
        }
        const delay = Math.min(
          this.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1),
          3e4
          // Max 30 seconds
        );
        console.log(`Scheduling reconnection attempt ${this.reconnectAttempts} in ${delay}ms`);
        setTimeout(() => {
          this.connect();
        }, delay);
      }
      rejoinRooms() {
        this.roomSubscriptions.forEach((room) => {
          this.send("join_room", { room });
        });
      }
      startHeartbeat() {
        this.heartbeatInterval = setInterval(() => {
          if (this.ws?.readyState === WebSocket.OPEN) {
            this.send("ping", {});
          }
        }, 3e4);
      }
      stopHeartbeat() {
        if (this.heartbeatInterval) {
          clearInterval(this.heartbeatInterval);
          this.heartbeatInterval = null;
        }
      }
      flushMessageQueue() {
        while (this.messageQueue.length > 0) {
          const message = this.messageQueue.shift();
          if (message) {
            this.sendMessage(message);
          }
        }
      }
      notifyConnectionListeners(connected) {
        this.connectionListeners.forEach((listener) => {
          try {
            listener(connected);
          } catch (error44) {
            console.error("Error in connection listener:", error44);
          }
        });
      }
      sendMessage(message) {
        if (this.demoMode) {
          setTimeout(() => {
            if (message.type === "chat_message") {
              this.handleMessage({
                type: "chat_message",
                payload: {
                  ...message.payload,
                  id: Math.random().toString(36).substring(2, 11),
                  userId: "demo-echo",
                  username: "Demo Echo",
                  timestamp: Date.now()
                },
                timestamp: Date.now()
              });
            }
          }, 100);
          return true;
        }
        if (this.ws?.readyState === WebSocket.OPEN) {
          this.ws.send(JSON.stringify(message));
          return true;
        }
        return false;
      }
      // Public API
      send(type, payload, room) {
        const message = {
          type,
          payload,
          timestamp: Date.now(),
          userId: this.userId || localStorage.getItem("userId") || void 0,
          room
        };
        if (!this.sendMessage(message)) {
          this.messageQueue.push(message);
        }
      }
      // Event handling methods
      on(event, handler) {
        if (!this.eventHandlers.has(event)) {
          this.eventHandlers.set(event, /* @__PURE__ */ new Set());
        }
        this.eventHandlers.get(event).add(handler);
        return () => {
          this.off(event, handler);
        };
      }
      off(event, handler) {
        const handlers3 = this.eventHandlers.get(event);
        if (handlers3) {
          handlers3.delete(handler);
        }
      }
      once(event, handler) {
        const wrappedHandler = (data2) => {
          handler(data2);
          this.off(event, wrappedHandler);
        };
        return this.on(event, wrappedHandler);
      }
      emit(event, data2) {
        const handlers3 = this.eventHandlers.get(event);
        if (handlers3) {
          handlers3.forEach((handler) => {
            try {
              handler(data2);
            } catch (error44) {
              console.error(`Error in WebSocket event handler for ${event}:`, error44);
            }
          });
        }
      }
      subscribe(messageType, callback) {
        if (!this.listeners.has(messageType)) {
          this.listeners.set(messageType, /* @__PURE__ */ new Set());
        }
        this.listeners.get(messageType).add(callback);
        return () => {
          const listeners = this.listeners.get(messageType);
          if (listeners) {
            listeners.delete(callback);
            if (listeners.size === 0) {
              this.listeners.delete(messageType);
            }
          }
        };
      }
      onConnectionChange(callback) {
        this.connectionListeners.add(callback);
        callback(this.isConnected());
        return () => {
          this.connectionListeners.delete(callback);
        };
      }
      isConnected() {
        if (this.demoMode) {
          return true;
        }
        return this.ws?.readyState === WebSocket.OPEN;
      }
      disconnect() {
        this.stopHeartbeat();
        if (this.ws) {
          this.ws.close(1e3, "Client disconnect");
          this.ws = null;
        }
      }
      // Room management
      joinRoom(roomId) {
        this.roomSubscriptions.add(roomId);
        this.send("join_room", { roomId });
      }
      leaveRoom(roomId) {
        this.roomSubscriptions.delete(roomId);
        const roomIndicators = this.typingIndicators.get(roomId);
        if (roomIndicators) {
          roomIndicators.forEach((timeout) => clearTimeout(timeout));
          this.typingIndicators.delete(roomId);
        }
        this.send("leave_room", { roomId });
      }
      // Chat-specific methods
      joinChatRoom(roomId) {
        this.joinRoom(roomId);
      }
      leaveChatRoom(roomId) {
        this.leaveRoom(roomId);
      }
      sendChatMessage(roomId, message, metadata) {
        this.send("chat_message", {
          roomId,
          message,
          metadata,
          timestamp: Date.now()
        }, roomId);
      }
      // Notification methods
      subscribeToNotifications(userId) {
        this.send("subscribe_notifications", { userId });
      }
      markNotificationRead(notificationId) {
        this.send("notification_read", { notificationId });
      }
      // Presence methods
      updatePresence(status) {
        this.send("presence_update", { status });
      }
      // Typing indicators
      startTyping(roomId) {
        this.send("typing", { roomId, isTyping: true }, roomId);
      }
      stopTyping(roomId) {
        this.send("typing", { roomId, isTyping: false }, roomId);
      }
      getTypingUsers(roomId) {
        const roomIndicators = this.typingIndicators.get(roomId);
        return roomIndicators ? Array.from(roomIndicators.keys()) : [];
      }
      // Presence methods
      getUserPresence(userId) {
        return this.presenceData.get(userId);
      }
      // Crisis support
      sendCrisisAlert(userId, severity) {
        this.send("crisis_alert", {
          userId,
          severity,
          timestamp: Date.now()
        });
      }
      // Helper status
      updateHelperStatus(status) {
        this.send("helper_status", { status });
      }
      // Dilemma updates
      requestDilemmaUpdate(dilemmaId) {
        this.send("dilemma_update", { dilemmaId });
      }
    };
    wsServiceInstance = null;
    getWebSocketService = () => {
      if (!wsServiceInstance) {
        const wsUrl = process.env.VITE_WS_URL || (false ? "ws://localhost:8080/ws" : "wss://api.astralcore.app/ws");
        wsServiceInstance = new WebSocketService(wsUrl);
      }
      return wsServiceInstance;
    };
    if (typeof window !== "undefined") {
      window.addEventListener("load", async () => {
        setTimeout(async () => {
          const service = getWebSocketService();
          const token = await auth0Service.getAccessToken();
          if (token) {
            service.connect().catch(console.error);
          }
        }, 1e3);
      });
      window.addEventListener("auth-success", () => {
        getWebSocketService().connect().catch(console.error);
      });
      window.addEventListener("auth-logout", () => {
        getWebSocketService().disconnect();
      });
    }
  }
});

// src/services/encryptionService.ts
var DEFAULT_CONFIG, DATA_CLASSIFICATIONS, EncryptionService, encryptionServiceInstance, getEncryptionService;
var init_encryptionService = __esm({
  "src/services/encryptionService.ts"() {
    "use strict";
    DEFAULT_CONFIG = {
      algorithm: "AES-GCM",
      keyLength: 256,
      // AES-256
      ivLength: 12,
      // 96 bits for GCM
      tagLength: 16,
      // 128 bits for authentication
      iterations: 1e5,
      // PBKDF2 iterations
      hashAlgorithm: "SHA-256"
    };
    DATA_CLASSIFICATIONS = {
      // Safety plans contain highly sensitive personal crisis information
      "safetyPlan": {
        level: "restricted",
        category: "health",
        retention: 2555,
        // 7 years (HIPAA requirement)
        hipaaCompliant: true
      },
      // Mood analysis contains personal health information
      "mood_analyses": {
        level: "restricted",
        category: "health",
        retention: 2555,
        hipaaCompliant: true
      },
      // User tokens for authentication
      "userToken": {
        level: "confidential",
        category: "personal",
        retention: 90,
        hipaaCompliant: false
      },
      // User ID for identification
      "userId": {
        level: "confidential",
        category: "personal",
        retention: 90,
        hipaaCompliant: false
      },
      // Chat messages may contain health information
      "aiChatHistory": {
        level: "restricted",
        category: "health",
        retention: 1095,
        // 3 years
        hipaaCompliant: true
      },
      "peerChatHistory": {
        level: "restricted",
        category: "communication",
        retention: 1095,
        hipaaCompliant: true
      },
      // Crisis-specific data requires highest protection
      "crisis_error": {
        level: "restricted",
        category: "crisis",
        retention: 2555,
        hipaaCompliant: true
      },
      "last_crisis_error": {
        level: "restricted",
        category: "crisis",
        retention: 2555,
        hipaaCompliant: true
      },
      // User stats and gamification data
      "userStats": {
        level: "internal",
        category: "analytics",
        retention: 365,
        hipaaCompliant: false
      },
      // Accessibility preferences
      "accessibility-preferences": {
        level: "internal",
        category: "personal",
        retention: 365,
        hipaaCompliant: false
      },
      // Content filters
      "contentFilters": {
        level: "internal",
        category: "personal",
        retention: 365,
        hipaaCompliant: false
      }
    };
    EncryptionService = class {
      config;
      keyCache = /* @__PURE__ */ new Map();
      isSupported = false;
      constructor(config2) {
        this.config = { ...DEFAULT_CONFIG, ...config2 };
        this.checkBrowserSupport();
      }
      /**
       * Check if the browser supports the required cryptographic operations
       */
      checkBrowserSupport() {
        this.isSupported = !!(typeof crypto !== "undefined" && crypto.subtle && typeof crypto.getRandomValues === "function" && typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined");
        if (!this.isSupported) {
          console.warn("EncryptionService: Browser does not support required cryptographic operations");
        }
      }
      /**
       * Generate a cryptographically secure random password for key derivation
       */
      generateSecurePassword() {
        const array2 = new Uint8Array(32);
        crypto.getRandomValues(array2);
        return Array.from(array2, (byte) => byte.toString(16).padStart(2, "0")).join("");
      }
      /**
       * Get or create a device-specific password for encryption
       */
      async getDevicePassword() {
        let password = sessionStorage.getItem("device_encryption_key");
        if (!password) {
          password = this.generateSecurePassword();
          sessionStorage.setItem("device_encryption_key", password);
          if (typeof window !== "undefined") {
            window.__astral_device_key = password;
          }
        }
        return password;
      }
      /**
       * Derive a cryptographic key from password and salt using PBKDF2
       */
      async deriveKey(password, salt) {
        const encoder = new TextEncoder();
        const passwordData = encoder.encode(password);
        const keyMaterial = await crypto.subtle.importKey(
          "raw",
          passwordData,
          "PBKDF2",
          false,
          ["deriveKey"]
        );
        return await crypto.subtle.deriveKey(
          {
            name: "PBKDF2",
            salt,
            iterations: this.config.iterations,
            hash: this.config.hashAlgorithm
          },
          keyMaterial,
          {
            name: this.config.algorithm,
            length: this.config.keyLength
          },
          false,
          ["encrypt", "decrypt"]
        );
      }
      /**
       * Generate random bytes for salt or IV
       */
      generateRandomBytes(length) {
        const bytes = new Uint8Array(length);
        crypto.getRandomValues(bytes);
        return bytes;
      }
      /**
       * Convert Uint8Array to Base64 string
       */
      arrayBufferToBase64(buffer) {
        const bytes = Array.from(buffer);
        return btoa(String.fromCharCode(...bytes));
      }
      /**
       * Convert Base64 string to Uint8Array
       */
      base64ToArrayBuffer(base643) {
        const binaryString = atob(base643);
        const bytes = new Uint8Array(binaryString.length);
        for (let i3 = 0; i3 < binaryString.length; i3++) {
          bytes[i3] = binaryString.charCodeAt(i3);
        }
        return bytes;
      }
      /**
       * Get data classification for a given key
       */
      getDataClassification(key) {
        if (DATA_CLASSIFICATIONS[key]) {
          return DATA_CLASSIFICATIONS[key];
        }
        if (key.includes("crisis") || key.includes("emergency")) {
          return DATA_CLASSIFICATIONS["crisis_error"];
        }
        if (key.includes("mood") || key.includes("health")) {
          return DATA_CLASSIFICATIONS["mood_analyses"];
        }
        if (key.includes("chat") || key.includes("message")) {
          return DATA_CLASSIFICATIONS["aiChatHistory"];
        }
        return {
          level: "internal",
          category: "personal",
          retention: 90,
          hipaaCompliant: false
        };
      }
      /**
       * Determine if data should be encrypted based on classification
       */
      shouldEncrypt(key) {
        const classification = this.getDataClassification(key);
        return classification.level === "restricted" || classification.level === "confidential";
      }
      /**
       * Encrypt sensitive data using AES-256-GCM
       */
      async encrypt(data2, key) {
        if (!this.isSupported) {
          throw new Error("Encryption not supported in this browser");
        }
        try {
          const encoder = new TextEncoder();
          const dataBytes = encoder.encode(data2);
          const salt = this.generateRandomBytes(16);
          const iv = this.generateRandomBytes(this.config.ivLength);
          const password = await this.getDevicePassword();
          const cryptoKey = await this.deriveKey(password, salt);
          const encryptedData = await crypto.subtle.encrypt(
            {
              name: this.config.algorithm,
              iv
            },
            cryptoKey,
            dataBytes
          );
          const encryptedArray = new Uint8Array(encryptedData);
          const tagLength = this.config.tagLength;
          const ciphertext = encryptedArray.slice(0, -tagLength);
          const tag = encryptedArray.slice(-tagLength);
          const result = {
            data: this.arrayBufferToBase64(ciphertext),
            iv: this.arrayBufferToBase64(iv),
            salt: this.arrayBufferToBase64(salt),
            tag: this.arrayBufferToBase64(tag),
            version: "1.0",
            algorithm: this.config.algorithm
          };
          this.logSecurityEvent("data_encrypted", {
            key,
            algorithm: this.config.algorithm,
            dataSize: data2.length,
            classification: this.getDataClassification(key)
          });
          return result;
        } catch (error44) {
          console.error("Encryption failed:", error44);
          this.logSecurityEvent("encryption_failed", {
            key,
            error: error44 instanceof Error ? error44.message : "Unknown error"
          });
          throw new Error("Failed to encrypt data");
        }
      }
      /**
       * Decrypt data using AES-256-GCM
       */
      async decrypt(encryptedData, key) {
        if (!this.isSupported) {
          throw new Error("Decryption not supported in this browser");
        }
        try {
          const ciphertext = this.base64ToArrayBuffer(encryptedData.data);
          const iv = this.base64ToArrayBuffer(encryptedData.iv);
          const salt = this.base64ToArrayBuffer(encryptedData.salt);
          const tag = this.base64ToArrayBuffer(encryptedData.tag || "");
          const combinedData = new Uint8Array(ciphertext.length + tag.length);
          combinedData.set(ciphertext);
          combinedData.set(tag, ciphertext.length);
          const password = await this.getDevicePassword();
          const cryptoKey = await this.deriveKey(password, salt);
          const decryptedData = await crypto.subtle.decrypt(
            {
              name: encryptedData.algorithm,
              iv
            },
            cryptoKey,
            combinedData
          );
          const decoder = new TextDecoder();
          const result = decoder.decode(decryptedData);
          this.logSecurityEvent("data_decrypted", {
            key,
            algorithm: encryptedData.algorithm,
            dataSize: result.length,
            classification: this.getDataClassification(key)
          });
          return result;
        } catch (error44) {
          console.error("Decryption failed:", error44);
          this.logSecurityEvent("decryption_failed", {
            key,
            error: error44 instanceof Error ? error44.message : "Unknown error"
          });
          throw new Error("Failed to decrypt data");
        }
      }
      /**
       * Securely store data in localStorage with automatic encryption for sensitive data
       */
      async secureSetItem(key, value) {
        try {
          if (this.shouldEncrypt(key)) {
            const encryptedData = await this.encrypt(value, key);
            const storageData = {
              encrypted: true,
              ...encryptedData,
              classification: this.getDataClassification(key),
              timestamp: Date.now()
            };
            localStorage.setItem(key, JSON.stringify(storageData));
          } else {
            localStorage.setItem(key, value);
          }
        } catch (error44) {
          console.error("Failed to store encrypted data:", error44);
          localStorage.setItem(key, value);
        }
      }
      /**
       * Securely retrieve data from localStorage with automatic decryption
       */
      async secureGetItem(key) {
        try {
          const storedValue = localStorage.getItem(key);
          if (!storedValue) {
            return null;
          }
          let parsedData;
          try {
            parsedData = JSON.parse(storedValue);
          } catch {
            return storedValue;
          }
          if (parsedData.encrypted && parsedData.data) {
            const encryptedData = {
              data: parsedData.data,
              iv: parsedData.iv,
              salt: parsedData.salt,
              tag: parsedData.tag,
              version: parsedData.version,
              algorithm: parsedData.algorithm
            };
            return await this.decrypt(encryptedData, key);
          }
          return typeof parsedData === "object" ? JSON.stringify(parsedData) : storedValue;
        } catch (error44) {
          console.error("Failed to retrieve encrypted data:", error44);
          return localStorage.getItem(key);
        }
      }
      /**
       * Remove encrypted data from localStorage
       */
      secureRemoveItem(key) {
        const classification = this.getDataClassification(key);
        this.logSecurityEvent("data_deleted", {
          key,
          classification
        });
        localStorage.removeItem(key);
      }
      /**
       * Get all keys that contain encrypted data
       */
      getEncryptedKeys() {
        const encryptedKeys = [];
        for (let i3 = 0; i3 < localStorage.length; i3++) {
          const key = localStorage.key(i3);
          if (key) {
            const value = localStorage.getItem(key);
            if (value) {
              try {
                const parsed = JSON.parse(value);
                if (parsed.encrypted) {
                  encryptedKeys.push(key);
                }
              } catch {
              }
            }
          }
        }
        return encryptedKeys;
      }
      /**
       * Check if data is already encrypted
       */
      isDataEncrypted(value) {
        try {
          const parsed = JSON.parse(value);
          return parsed.encrypted === true;
        } catch {
          return false;
        }
      }
      /**
       * Migrate a single key to encrypted format
       */
      async migrateSingleKey(key) {
        try {
          const value = localStorage.getItem(key);
          if (!value || this.isDataEncrypted(value)) {
            return false;
          }
          await this.secureSetItem(key, value);
          return true;
        } catch (error44) {
          console.error(`Failed to migrate data for key ${key}:`, error44);
          return false;
        }
      }
      /**
       * Get all keys that need migration
       */
      getKeysForMigration() {
        const keysToMigrate = [];
        for (let i3 = 0; i3 < localStorage.length; i3++) {
          const key = localStorage.key(i3);
          if (key && this.shouldEncrypt(key)) {
            keysToMigrate.push(key);
          }
        }
        return keysToMigrate;
      }
      /**
       * Migrate existing unencrypted sensitive data to encrypted format
       */
      async migrateExistingData() {
        const migrationStartTime = Date.now();
        let migratedCount = 0;
        let failedCount = 0;
        const keysToMigrate = this.getKeysForMigration();
        for (const key of keysToMigrate) {
          const migrated = await this.migrateSingleKey(key);
          if (migrated) {
            migratedCount++;
          } else {
            failedCount++;
          }
        }
        const migrationTime = Date.now() - migrationStartTime;
        this.logSecurityEvent("data_migration_completed", {
          migratedCount,
          failedCount,
          migrationTime,
          totalKeys: localStorage.length
        });
        console.log(`Data migration completed: ${migratedCount} keys migrated, ${failedCount} failed in ${migrationTime}ms`);
      }
      /**
       * Validate data integrity for encrypted data
       */
      async validateDataIntegrity() {
        const results = { valid: 0, invalid: 0, errors: [] };
        const encryptedKeys = this.getEncryptedKeys();
        for (const key of encryptedKeys) {
          try {
            const value = await this.secureGetItem(key);
            if (value !== null) {
              results.valid++;
            } else {
              results.invalid++;
              results.errors.push(`Failed to decrypt data for key: ${key}`);
            }
          } catch (error44) {
            results.invalid++;
            results.errors.push(`Integrity check failed for key ${key}: ${error44 instanceof Error ? error44.message : "Unknown error"}`);
          }
        }
        return results;
      }
      /**
       * Clear all encryption keys and reset encryption state
       */
      clearEncryptionKeys() {
        sessionStorage.removeItem("device_encryption_key");
        if (typeof window !== "undefined") {
          delete window.__astral_device_key;
        }
        this.keyCache.clear();
        this.logSecurityEvent("encryption_keys_cleared", {
          keysClearedCount: this.keyCache.size
        });
      }
      /**
       * Get encryption statistics and health information
       */
      getEncryptionStats() {
        const encryptedKeys = this.getEncryptedKeys();
        const classifications = {};
        let hipaaCompliantKeys = 0;
        for (const key of encryptedKeys) {
          const classification = this.getDataClassification(key);
          classifications[classification.level] = (classifications[classification.level] || 0) + 1;
          if (classification.hipaaCompliant) {
            hipaaCompliantKeys++;
          }
        }
        return {
          isSupported: this.isSupported,
          encryptedKeys: encryptedKeys.length,
          totalKeys: localStorage.length,
          classifications,
          hipaaCompliantKeys
        };
      }
      /**
       * Log security events for audit trail
       */
      logSecurityEvent(event, details) {
        const logEntry = {
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          event: `encryption_${event}`,
          details: {
            ...details,
            userAgent: navigator.userAgent,
            url: window.location.href
          },
          severity: "info"
        };
        try {
          const logs = JSON.parse(localStorage.getItem("security_logs") || "[]");
          logs.push(logEntry);
          if (logs.length > 100) {
            logs.splice(0, logs.length - 100);
          }
          localStorage.setItem("security_logs", JSON.stringify(logs));
        } catch (error44) {
          console.warn("Failed to log security event:", error44);
        }
        if (false) {
          console.log("Security Event:", logEntry);
        }
      }
      /**
       * Check if a specific key contains unencrypted HIPAA data
       */
      checkKeyForHIPAAViolation(key) {
        const classification = this.getDataClassification(key);
        if (!classification.hipaaCompliant) {
          return null;
        }
        const value = localStorage.getItem(key);
        if (!value) {
          return null;
        }
        try {
          const parsed = JSON.parse(value);
          if (!parsed.encrypted) {
            return `HIPAA-sensitive data in key '${key}' is not encrypted`;
          }
        } catch {
          return `HIPAA-sensitive data in key '${key}' is stored as plain text`;
        }
        return null;
      }
      /**
       * Scan all localStorage keys for HIPAA violations
       */
      scanForHIPAAViolations() {
        const violations = [];
        for (let i3 = 0; i3 < localStorage.length; i3++) {
          const key = localStorage.key(i3);
          if (key) {
            const violation = this.checkKeyForHIPAAViolation(key);
            if (violation) {
              violations.push(violation);
            }
          }
        }
        return violations;
      }
      /**
       * Generate HIPAA compliance recommendations
       */
      generateHIPAARecommendations(violations) {
        const recommendations = [];
        if (violations.length > 0) {
          recommendations.push("Run data migration to encrypt all HIPAA-sensitive data");
          recommendations.push("Implement automatic encryption for all health-related data");
          recommendations.push("Review data classification rules for completeness");
        }
        return recommendations;
      }
      /**
       * Perform HIPAA compliance check for stored data
       */
      performHIPAAComplianceCheck() {
        const violations = this.scanForHIPAAViolations();
        const recommendations = this.generateHIPAARecommendations(violations);
        const compliant = violations.length === 0;
        return {
          compliant,
          violations,
          recommendations
        };
      }
    };
    encryptionServiceInstance = null;
    getEncryptionService = () => {
      if (!encryptionServiceInstance) {
        encryptionServiceInstance = new EncryptionService();
      }
      return encryptionServiceInstance;
    };
  }
});

// src/services/secureStorageService.ts
var SecureStorageService, secureStorageInstance, getSecureStorage;
var init_secureStorageService = __esm({
  "src/services/secureStorageService.ts"() {
    "use strict";
    init_encryptionService();
    SecureStorageService = class {
      encryptionService = getEncryptionService();
      options;
      accessLog = /* @__PURE__ */ new Map();
      constructor(options2 = {}) {
        this.options = {
          enableEncryption: true,
          enableAuditLogging: true,
          enableDataRetention: true,
          maxRetentionDays: 2555,
          // 7 years for HIPAA compliance
          ...options2
        };
        this.loadAccessLog();
        this.scheduleDataRetentionCleanup();
      }
      /**
       * Load access log from localStorage
       */
      loadAccessLog() {
        try {
          const storedLog = localStorage.getItem("_secure_storage_log");
          if (storedLog) {
            const parsed = JSON.parse(storedLog);
            this.accessLog = new Map(Object.entries(parsed));
          }
        } catch (error44) {
          console.warn("Failed to load access log:", error44);
        }
      }
      /**
       * Save access log to localStorage
       */
      saveAccessLog() {
        try {
          const logObject = Object.fromEntries(this.accessLog);
          localStorage.setItem("_secure_storage_log", JSON.stringify(logObject));
        } catch (error44) {
          console.warn("Failed to save access log:", error44);
        }
      }
      /**
       * Update metadata for a key
       */
      updateMetadata(key, data2, isRead = false) {
        if (!this.options.enableAuditLogging) return;
        const existing = this.accessLog.get(key);
        const now = Date.now();
        const metadata = {
          timestamp: existing?.timestamp || now,
          classification: this.getDataClassification(key),
          encrypted: this.shouldEncrypt(key),
          size: data2.length,
          accessCount: (existing?.accessCount || 0) + (isRead ? 1 : 0),
          lastAccessed: now
        };
        this.accessLog.set(key, metadata);
        this.saveAccessLog();
      }
      /**
       * Get data classification for a key
       */
      getDataClassification(key) {
        if (key.includes("crisis") || key.includes("emergency")) {
          return "crisis";
        }
        if (key.includes("mood") || key.includes("safety") || key.includes("health")) {
          return "health";
        }
        if (key.includes("chat") || key.includes("message")) {
          return "communication";
        }
        if (key.includes("user") || key.includes("token") || key.includes("profile")) {
          return "personal";
        }
        return "general";
      }
      /**
       * Determine if data should be encrypted
       */
      shouldEncrypt(key) {
        if (!this.options.enableEncryption) return false;
        const classification = this.getDataClassification(key);
        return ["crisis", "health", "communication", "personal"].includes(classification);
      }
      /**
       * Schedule automatic data retention cleanup
       */
      scheduleDataRetentionCleanup() {
        if (!this.options.enableDataRetention) return;
        this.performDataRetentionCleanup();
        setInterval(() => {
          this.performDataRetentionCleanup();
        }, 24 * 60 * 60 * 1e3);
      }
      /**
       * Perform data retention cleanup based on age and classification
       */
      performDataRetentionCleanup() {
        const now = Date.now();
        const maxAge = this.options.maxRetentionDays * 24 * 60 * 60 * 1e3;
        let cleanedCount = 0;
        this.accessLog.forEach((metadata, key) => {
          const age = now - metadata.timestamp;
          if (age > maxAge) {
            this.removeItem(key);
            this.accessLog.delete(key);
            cleanedCount++;
          }
        });
        if (cleanedCount > 0) {
          console.log(`Data retention cleanup: removed ${cleanedCount} expired items`);
          this.saveAccessLog();
        }
      }
      /**
       * Securely store data with automatic encryption for sensitive data
       */
      async setItem(key, value) {
        try {
          this.updateMetadata(key, value);
          await this.encryptionService.secureSetItem(key, value);
          if (this.options.enableAuditLogging) {
            this.logStorageEvent("data_stored", {
              key,
              size: value.length,
              encrypted: this.shouldEncrypt(key),
              classification: this.getDataClassification(key)
            });
          }
        } catch (error44) {
          console.error("SecureStorage: Failed to store data:", error44);
          throw new Error(`Failed to store data for key: ${key}`);
        }
      }
      /**
       * Securely retrieve data with automatic decryption
       */
      async getItem(key) {
        try {
          const value = await this.encryptionService.secureGetItem(key);
          if (value !== null) {
            this.updateMetadata(key, value, true);
            if (this.options.enableAuditLogging) {
              this.logStorageEvent("data_accessed", {
                key,
                size: value.length,
                classification: this.getDataClassification(key)
              });
            }
          }
          return value;
        } catch (error44) {
          console.error("SecureStorage: Failed to retrieve data:", error44);
          return null;
        }
      }
      /**
       * Remove data and update metadata
       */
      removeItem(key) {
        try {
          this.encryptionService.secureRemoveItem(key);
          this.accessLog.delete(key);
          this.saveAccessLog();
          if (this.options.enableAuditLogging) {
            this.logStorageEvent("data_removed", {
              key,
              classification: this.getDataClassification(key)
            });
          }
        } catch (error44) {
          console.error("SecureStorage: Failed to remove data:", error44);
        }
      }
      /**
       * Clear all data and metadata
       */
      clear() {
        try {
          localStorage.clear();
          this.accessLog.clear();
          if (this.options.enableAuditLogging) {
            this.logStorageEvent("storage_cleared", {});
          }
        } catch (error44) {
          console.error("SecureStorage: Failed to clear storage:", error44);
        }
      }
      /**
       * Get the number of items in storage
       */
      get length() {
        return localStorage.length;
      }
      /**
       * Get key at specific index
       */
      key(index2) {
        return localStorage.key(index2);
      }
      /**
       * Check if a key exists
       */
      hasItem(key) {
        return localStorage.getItem(key) !== null;
      }
      /**
       * Get all keys in storage
       */
      getAllKeys() {
        const keys2 = [];
        for (let i3 = 0; i3 < localStorage.length; i3++) {
          const key = localStorage.key(i3);
          if (key) {
            keys2.push(key);
          }
        }
        return keys2;
      }
      /**
       * Get storage statistics
       */
      getStorageStats() {
        const stats = {
          totalKeys: 0,
          encryptedKeys: 0,
          totalSize: 0,
          byClassification: {},
          byEncryption: { encrypted: 0, plaintext: 0 }
        };
        this.accessLog.forEach((metadata, _key) => {
          stats.totalKeys++;
          stats.totalSize += metadata.size;
          if (metadata.encrypted) {
            stats.encryptedKeys++;
            stats.byEncryption.encrypted++;
          } else {
            stats.byEncryption.plaintext++;
          }
          stats.byClassification[metadata.classification] = (stats.byClassification[metadata.classification] || 0) + 1;
        });
        return stats;
      }
      /**
       * Get access metadata for a key
       */
      getMetadata(key) {
        return this.accessLog.get(key) || null;
      }
      /**
       * Get all metadata
       */
      getAllMetadata() {
        return new Map(this.accessLog);
      }
      /**
       * Validate data integrity for all encrypted data
       */
      async validateIntegrity() {
        return await this.encryptionService.validateDataIntegrity();
      }
      /**
       * Migrate existing data to encrypted format
       */
      async migrateToEncrypted() {
        await this.encryptionService.migrateExistingData();
        for (let i3 = 0; i3 < localStorage.length; i3++) {
          const key = localStorage.key(i3);
          if (key && this.shouldEncrypt(key)) {
            const value = await this.getItem(key);
            if (value) {
              this.updateMetadata(key, value);
            }
          }
        }
      }
      /**
       * Perform HIPAA compliance check
       */
      performHIPAAComplianceCheck() {
        return this.encryptionService.performHIPAAComplianceCheck();
      }
      /**
       * Export data for backup or migration
       */
      async exportData(includeMetadata = true) {
        const exportData = {};
        const keys2 = this.getAllKeys();
        for (const key of keys2) {
          const value = await this.getItem(key);
          if (value !== null) {
            exportData[key] = value;
          }
        }
        const result = {
          data: exportData,
          exportTime: (/* @__PURE__ */ new Date()).toISOString(),
          version: "1.0"
        };
        if (includeMetadata) {
          result.metadata = Object.fromEntries(this.accessLog);
        }
        return result;
      }
      /**
       * Import data from backup
       */
      async importData(backup) {
        const importedKeys = [];
        try {
          for (const [key, value] of Object.entries(backup.data)) {
            await this.setItem(key, value);
            importedKeys.push(key);
          }
          if (backup.metadata) {
            for (const [key, metadata] of Object.entries(backup.metadata)) {
              this.accessLog.set(key, metadata);
            }
            this.saveAccessLog();
          }
          this.logStorageEvent("data_imported", {
            importedCount: importedKeys.length,
            keys: importedKeys
          });
        } catch (error44) {
          console.error("SecureStorage: Failed to import data:", error44);
          throw new Error("Data import failed");
        }
      }
      /**
       * Log storage events for audit trail
       */
      logStorageEvent(event, details) {
        if (!this.options.enableAuditLogging) return;
        const logEntry = {
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          event: `secure_storage_${event}`,
          details: {
            ...details,
            userAgent: navigator.userAgent,
            url: window.location.href
          },
          severity: "info"
        };
        try {
          const logs = JSON.parse(localStorage.getItem("security_logs") || "[]");
          logs.push(logEntry);
          if (logs.length > 100) {
            logs.splice(0, logs.length - 100);
          }
          localStorage.setItem("security_logs", JSON.stringify(logs));
        } catch (error44) {
          console.warn("Failed to log storage event:", error44);
        }
      }
    };
    secureStorageInstance = null;
    getSecureStorage = (options2) => {
      if (!secureStorageInstance) {
        secureStorageInstance = new SecureStorageService(options2);
      }
      return secureStorageInstance;
    };
  }
});

// src/services/astralTetherService.ts
var AstralTetherService, astralTetherServiceInstance, getAstralTetherService;
var init_astralTetherService = __esm({
  "src/services/astralTetherService.ts"() {
    "use strict";
    init_webSocketService();
    init_notificationService();
    init_secureStorageService();
    AstralTetherService = class {
      activeSessions = /* @__PURE__ */ new Map();
      pendingRequests = /* @__PURE__ */ new Map();
      userProfiles = /* @__PURE__ */ new Map();
      userSettings;
      websocketService = getWebSocketService();
      secureStorage = getSecureStorage();
      eventHandlers = /* @__PURE__ */ new Map();
      currentUserId;
      hapticController;
      breathingInterval;
      heartbeatInterval;
      offlineQueue = [];
      isOnline = navigator.onLine;
      constructor() {
        this.initializeService();
      }
      async initializeService() {
        await this.loadUserSettings();
        await this.loadUserProfile();
        this.setupWebSocketListeners();
        this.initializeHapticFeedback();
        this.initializePressureSensing();
        this.initializeOfflineSupport();
        this.initializePanicButton();
      }
      emit(event, data2) {
        const handlers3 = this.eventHandlers.get(event);
        if (handlers3) {
          handlers3.forEach((handler) => {
            try {
              handler(data2);
            } catch (error44) {
              console.error(`Error in event handler for ${event}:`, error44);
            }
          });
        }
      }
      on(event, handler) {
        if (!this.eventHandlers.has(event)) {
          this.eventHandlers.set(event, /* @__PURE__ */ new Set());
        }
        this.eventHandlers.get(event).add(handler);
      }
      off(event, handler) {
        const handlers3 = this.eventHandlers.get(event);
        if (handlers3) {
          handlers3.delete(handler);
        }
      }
      removeAllListeners() {
        this.eventHandlers.clear();
      }
      setupWebSocketListeners() {
        this.websocketService.subscribe("tether-request", this.handleTetherRequest.bind(this));
        this.websocketService.subscribe("tether-response", this.handleTetherResponse.bind(this));
        this.websocketService.subscribe("tether-pressure", this.handlePressureUpdate.bind(this));
        this.websocketService.subscribe("tether-heartbeat", this.handleHeartbeatSync.bind(this));
        this.websocketService.subscribe("tether-breathing", this.handleBreathingSync.bind(this));
        this.websocketService.subscribe("tether-end", this.handleTetherEnd.bind(this));
        this.websocketService.subscribe("tether-emergency", this.handleEmergencyEscalation.bind(this));
      }
      async initializeHapticFeedback() {
        try {
          if ("vibrate" in navigator) {
            this.hapticController = navigator;
          }
        } catch (error44) {
          console.log("Haptic feedback not available");
        }
      }
      async initializePressureSensing() {
        try {
          if ("DeviceMotionEvent" in window) {
            window.addEventListener("devicemotion", this.handleDeviceMotion.bind(this));
          }
        } catch (error44) {
          console.log("Pressure sensing not available");
        }
      }
      initializeOfflineSupport() {
        window.addEventListener("online", () => {
          this.isOnline = true;
          this.processOfflineQueue();
        });
        window.addEventListener("offline", () => {
          this.isOnline = false;
          notificationService.addToast("You are offline. Tether requests will be sent when connection is restored.", "info");
        });
      }
      initializePanicButton() {
        let tapCount = 0;
        let tapTimer;
        document.addEventListener("click", (event) => {
          const target = event.target;
          if (target.closest(".tether-view")) {
            tapCount++;
            if (tapCount === 3) {
              this.triggerPanicMode();
              tapCount = 0;
            }
            clearTimeout(tapTimer);
            tapTimer = setTimeout(() => {
              tapCount = 0;
            }, 500);
          }
        });
        document.addEventListener("keydown", (event) => {
          if (event.ctrlKey && event.shiftKey && event.key === "P") {
            event.preventDefault();
            this.triggerPanicMode();
          }
        });
      }
      async processOfflineQueue() {
        if (this.offlineQueue.length === 0) return;
        const queue = [...this.offlineQueue];
        this.offlineQueue = [];
        for (const request of queue) {
          try {
            await this.sendTetherRequest(request);
          } catch (error44) {
            console.error("Failed to send queued request:", error44);
            this.offlineQueue.push(request);
          }
        }
      }
      async triggerPanicMode() {
        if (this.hapticController) {
          this.hapticController.vibrate([200, 100, 200, 100, 200]);
        }
        const profile = this.userProfiles.get(this.currentUserId || "default-user");
        if (profile && profile.trustedConnections.length > 0) {
          const emergencyRequest = {
            fromUserId: this.currentUserId || "default-user",
            toUserId: profile.trustedConnections[0],
            // Primary emergency contact
            message: "EMERGENCY - Panic button activated. I need immediate help.",
            urgency: "critical",
            tetherType: "emergency",
            preferredDuration: 60,
            location: await this.getCurrentLocation()
          };
          try {
            const sessionId = await this.sendTetherRequest(emergencyRequest);
            setTimeout(() => {
              this.requestEmergencyEscalation(sessionId, "professional");
            }, 3e4);
            notificationService.addToast("Emergency tether sent. Help is on the way.", "error");
          } catch (error44) {
            console.error("Failed to send emergency tether:", error44);
            window.location.href = "tel:911";
          }
        } else {
          window.location.href = "tel:911";
        }
      }
      async getCurrentLocation() {
        try {
          const position3 = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject, {
              timeout: 5e3,
              enableHighAccuracy: true
            });
          });
          return {
            lat: position3.coords.latitude,
            lng: position3.coords.longitude
          };
        } catch (error44) {
          console.error("Failed to get location:", error44);
          return void 0;
        }
      }
      async loadUserSettings() {
        try {
          const settingsData = await this.secureStorage.getItem("tether-settings");
          if (settingsData) {
            this.userSettings = JSON.parse(settingsData);
          } else {
            this.userSettings = this.getDefaultSettings();
            await this.saveUserSettings();
          }
        } catch (error44) {
          console.error("Failed to load user settings:", error44);
          this.userSettings = this.getDefaultSettings();
        }
      }
      async loadUserProfile() {
        try {
          const userId = this.currentUserId || "default-user";
          const profileData = await this.secureStorage.getItem(`tether-profile-${userId}`);
          if (profileData) {
            const profile = JSON.parse(profileData);
            this.userProfiles.set(userId, profile);
          } else {
            const newProfile = {
              userId,
              displayName: userId,
              isAvailable: true,
              availabilityStatus: "available",
              friendCode: this.generateFriendCode(),
              preferredTetherTypes: ["breathing", "presence"],
              responseTime: 0,
              successfulSessions: 0,
              rating: 0,
              emergencyContact: false,
              professionalSupport: false,
              languages: ["en"],
              timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
              availability: {
                days: [0, 1, 2, 3, 4, 5, 6],
                startTime: "00:00",
                endTime: "23:59"
              },
              trustedConnections: [],
              lastActiveTimestamp: Date.now()
            };
            this.userProfiles.set(userId, newProfile);
            await this.saveUserProfile(newProfile);
          }
        } catch (error44) {
          console.error("Failed to load user profile:", error44);
        }
      }
      getDefaultSettings() {
        return {
          hapticEnabled: true,
          hapticIntensity: 0.7,
          breathingGuideEnabled: true,
          breathingPattern: "box",
          pressureShareEnabled: true,
          emergencyContacts: [],
          professionalHandoffEnabled: true,
          privacyLevel: "friends",
          autoAcceptFromCircle: false
        };
      }
      async saveUserSettings() {
        try {
          await this.secureStorage.setItem("tether-settings", JSON.stringify(this.userSettings));
        } catch (error44) {
          console.error("Failed to save user settings:", error44);
        }
      }
      // Friend Code System
      generateFriendCode() {
        const chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        let code2 = "";
        for (let i3 = 0; i3 < 8; i3++) {
          if (i3 === 4) code2 += "-";
          code2 += chars2.charAt(Math.floor(Math.random() * chars2.length));
        }
        return code2;
      }
      async saveUserProfile(profile) {
        try {
          await this.secureStorage.setItem(`tether-profile-${profile.userId}`, JSON.stringify(profile));
        } catch (error44) {
          console.error("Failed to save user profile:", error44);
        }
      }
      async addTrustedConnection(friendCode) {
        try {
          const profiles = Array.from(this.userProfiles.values());
          const friendProfile = profiles.find((p3) => p3.friendCode === friendCode);
          if (!friendProfile) {
            throw new Error("Invalid friend code");
          }
          const currentProfile = this.userProfiles.get(this.currentUserId || "default-user");
          if (!currentProfile) {
            throw new Error("Current user profile not found");
          }
          if (!currentProfile.trustedConnections.includes(friendProfile.userId)) {
            currentProfile.trustedConnections.push(friendProfile.userId);
            await this.saveUserProfile(currentProfile);
          }
          return true;
        } catch (error44) {
          console.error("Failed to add trusted connection:", error44);
          return false;
        }
      }
      async updateAvailabilityStatus(status) {
        const profile = this.userProfiles.get(this.currentUserId || "default-user");
        if (profile) {
          profile.availabilityStatus = status;
          profile.lastActiveTimestamp = Date.now();
          await this.saveUserProfile(profile);
          this.websocketService.send("tether-status-update", {
            userId: profile.userId,
            status,
            timestamp: Date.now()
          });
        }
      }
      // Public API Methods
      async sendTetherRequest(request) {
        let minutes;
        switch (request.urgency) {
          case "critical":
            minutes = 5;
            break;
          case "high":
            minutes = 15;
            break;
          default:
            minutes = 30;
        }
        const tetherRequest = {
          ...request,
          id: `tether-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          timestamp: Date.now(),
          expiresAt: Date.now() + minutes * 60 * 1e3
        };
        if (request.isAnonymous) {
          tetherRequest.anonymousAlias = this.generateAnonymousAlias();
          tetherRequest.fromUserId = `anon-${tetherRequest.id}`;
        }
        if (!this.isOnline) {
          this.offlineQueue.push(tetherRequest);
          await this.secureStorage.setItem("tether-offline-queue", JSON.stringify(this.offlineQueue));
          notificationService.addToast(
            "Tether request queued. Will be sent when connection is restored.",
            "info"
          );
          return tetherRequest.id;
        }
        this.pendingRequests.set(tetherRequest.id, tetherRequest);
        try {
          this.websocketService.send("tether-request", tetherRequest);
          notificationService.addToast(
            request.isAnonymous ? `Anonymous tether request sent` : `Tether request sent to user ${request.toUserId}`,
            "info"
          );
        } catch (error44) {
          console.error("Failed to send tether request:", error44);
          this.offlineQueue.push(tetherRequest);
          throw error44;
        }
        this.emit("tether-request-sent", tetherRequest);
        return tetherRequest.id;
      }
      generateAnonymousAlias() {
        const adjectives = ["Gentle", "Caring", "Kind", "Supportive", "Understanding", "Peaceful"];
        const nouns = ["Friend", "Companion", "Helper", "Listener", "Guardian", "Presence"];
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
        const noun = nouns[Math.floor(Math.random() * nouns.length)];
        return `${adj} ${noun}`;
      }
      async respondToTetherRequest(requestId, accepted) {
        const request = this.pendingRequests.get(requestId);
        if (!request) {
          throw new Error("Tether request not found");
        }
        if (accepted) {
          const sessionId = await this.createTetherSession(request);
          this.websocketService.send("tether-response", {
            requestId,
            accepted: true,
            sessionId
          });
          this.emit("tether-session-created", sessionId);
          return sessionId;
        } else {
          this.websocketService.send("tether-response", {
            requestId,
            accepted: false
          });
          this.pendingRequests.delete(requestId);
          return null;
        }
      }
      async createTetherSession(request) {
        const sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const session = {
          id: sessionId,
          participants: [request.fromUserId, request.toUserId],
          startTime: Date.now(),
          status: "active",
          tetherType: request.tetherType,
          hapticSync: this.userSettings?.hapticEnabled || false,
          breathingSync: this.userSettings?.breathingGuideEnabled || false,
          pressureSensitivity: 0.5,
          settings: this.userSettings || this.getDefaultSettings(),
          metrics: {
            sessionQuality: 0,
            completionRate: 0,
            averageResponseTime: 0,
            effectivenessScore: 0
          }
        };
        this.activeSessions.set(sessionId, session);
        if (session.breathingSync) {
          this.startBreathingSync(sessionId);
        }
        this.startHeartbeatMonitoring(sessionId);
        return sessionId;
      }
      async startBreathingSync(sessionId) {
        const session = this.activeSessions.get(sessionId);
        if (!session || !session.breathingSync) return;
        const pattern = session.settings.breathingPattern;
        let inhale = 4e3, hold = 4e3, exhale = 6e3, pause = 2e3;
        switch (pattern) {
          case "4-7-8":
            inhale = 4e3;
            hold = 7e3;
            exhale = 8e3;
            pause = 1e3;
            break;
          case "coherent":
            inhale = 5e3;
            hold = 0;
            exhale = 5e3;
            pause = 0;
            break;
          case "custom":
            inhale = (session.settings.customInhale || 4) * 1e3;
            hold = (session.settings.customHold || 4) * 1e3;
            exhale = (session.settings.customExhale || 6) * 1e3;
            pause = (session.settings.customPause || 2) * 1e3;
            break;
        }
        const breathingCycle = async () => {
          if (!this.activeSessions.has(sessionId)) return;
          session.currentPhase = "inhale";
          session.phaseStartTime = Date.now();
          this.emit("breathing-phase", { sessionId, phase: "inhale", duration: inhale });
          setTimeout(() => {
            if (hold > 0) {
              session.currentPhase = "hold";
              session.phaseStartTime = Date.now();
              this.emit("breathing-phase", { sessionId, phase: "hold", duration: hold });
            }
            setTimeout(() => {
              session.currentPhase = "exhale";
              session.phaseStartTime = Date.now();
              this.emit("breathing-phase", { sessionId, phase: "exhale", duration: exhale });
              setTimeout(() => {
                if (pause > 0) {
                  session.currentPhase = "pause";
                  session.phaseStartTime = Date.now();
                  this.emit("breathing-phase", { sessionId, phase: "pause", duration: pause });
                }
                setTimeout(breathingCycle, pause);
              }, exhale);
            }, hold);
          }, inhale);
        };
        breathingCycle();
      }
      sendPressureUpdate(sessionId, pressure) {
        const session = this.activeSessions.get(sessionId);
        if (!session || !session.settings.pressureShareEnabled) return;
        const normalizedPressure = Math.max(0, Math.min(1, pressure));
        this.websocketService.send("tether-pressure", {
          sessionId,
          pressure: normalizedPressure,
          timestamp: Date.now()
        });
        if (session.hapticSync && this.hapticController) {
          const intensity = Math.floor(normalizedPressure * session.settings.hapticIntensity * 100);
          this.hapticController.vibrate(intensity);
        }
        if (!session.metrics.pressureReadings) {
          session.metrics.pressureReadings = [];
        }
        session.metrics.pressureReadings.push({
          timestamp: Date.now(),
          pressure: normalizedPressure
        });
        this.emit("pressure-update", { sessionId, pressure: normalizedPressure });
      }
      startHeartbeatMonitoring(sessionId) {
        this.heartbeatInterval = setInterval(() => {
          const session = this.activeSessions.get(sessionId);
          if (!session) {
            if (this.heartbeatInterval) {
              clearInterval(this.heartbeatInterval);
            }
            return;
          }
          this.websocketService.send("tether-heartbeat", {
            sessionId,
            timestamp: Date.now(),
            isActive: true
          });
        }, 5e3);
      }
      async endTetherSession(sessionId) {
        const session = this.activeSessions.get(sessionId);
        if (!session) return;
        session.status = "ended";
        session.endTime = Date.now();
        session.metrics.completionRate = 1;
        session.metrics.sessionQuality = this.calculateSessionQuality(session);
        this.websocketService.send("tether-end", {
          sessionId,
          endTime: session.endTime,
          metrics: session.metrics
        });
        if (this.breathingInterval) {
          clearInterval(this.breathingInterval);
        }
        if (this.heartbeatInterval) {
          clearInterval(this.heartbeatInterval);
        }
        await this.storeSessionMetrics(session);
        this.activeSessions.delete(sessionId);
        this.emit("tether-session-ended", sessionId);
      }
      calculateSessionQuality(session) {
        let quality = 5;
        const duration3 = (session.endTime || Date.now()) - session.startTime;
        const minutes = duration3 / (1e3 * 60);
        if (minutes >= 10) quality += 2;
        else if (minutes >= 5) quality += 1;
        if (session.metrics.pressureReadings && session.metrics.pressureReadings.length > 10) {
          quality += 1;
        }
        if (session.breathingSync) {
          quality += 1;
        }
        return Math.min(10, quality);
      }
      async storeSessionMetrics(session) {
        try {
          const sessionData = {
            ...session,
            storedAt: Date.now()
          };
          await this.secureStorage.setItem(`session-${session.id}`, JSON.stringify(sessionData));
        } catch (error44) {
          console.error("Failed to store session metrics:", error44);
        }
      }
      // Event Handlers
      handleTetherRequest(request) {
        this.pendingRequests.set(request.id, request);
        notificationService.addToast(
          `Tether request from ${request.fromUserId}: ${request.message}`,
          request.urgency === "critical" ? "error" : "info"
        );
        this.emit("tether-request-received", request);
      }
      handleTetherResponse(response) {
        const request = this.pendingRequests.get(response.requestId);
        if (!request) return;
        if (response.accepted && response.sessionId) {
          this.emit("tether-request-accepted", { request, sessionId: response.sessionId });
        } else {
          this.emit("tether-request-declined", request);
        }
        this.pendingRequests.delete(response.requestId);
      }
      handlePressureUpdate(data2) {
        const session = this.activeSessions.get(data2.sessionId);
        if (!session) return;
        if (session.hapticSync && this.hapticController) {
          const intensity = Math.floor(data2.pressure * session.settings.hapticIntensity * 100);
          this.hapticController.vibrate(intensity);
        }
        this.emit("pressure-received", data2);
      }
      handleHeartbeatSync(data2) {
        const session = this.activeSessions.get(data2.sessionId);
        if (!session) return;
        this.emit("heartbeat-received", data2);
      }
      handleBreathingSync(data2) {
        const session = this.activeSessions.get(data2.sessionId);
        if (!session) return;
        this.emit("breathing-sync-received", data2);
      }
      handleTetherEnd(data2) {
        const session = this.activeSessions.get(data2.sessionId);
        if (!session) return;
        session.status = "ended";
        session.endTime = data2.endTime;
        session.metrics = { ...session.metrics, ...data2.metrics };
        this.activeSessions.delete(data2.sessionId);
        this.emit("tether-session-ended", data2.sessionId);
      }
      handleEmergencyEscalation(data2) {
        const session = this.activeSessions.get(data2.sessionId);
        if (!session) return;
        session.status = "escalated";
        this.emit("emergency-escalation", data2);
        if (data2.escalationType === "professional" && session.settings.professionalHandoffEnabled) {
          this.requestProfessionalHandoff(data2.sessionId, data2.contact);
        }
      }
      handleDeviceMotion(event) {
        const acceleration = event.acceleration;
        if (acceleration) {
          const pressure = Math.sqrt(
            (acceleration.x || 0) ** 2 + (acceleration.y || 0) ** 2 + (acceleration.z || 0) ** 2
          ) / 10;
          this.activeSessions.forEach((session, sessionId) => {
            if (session.settings.pressureShareEnabled) {
              this.sendPressureUpdate(sessionId, pressure);
            }
          });
        }
      }
      async requestEmergencyEscalation(sessionId, escalationType) {
        const session = this.activeSessions.get(sessionId);
        if (!session) throw new Error("Session not found");
        const escalationData = {
          sessionId,
          escalationType,
          timestamp: Date.now(),
          participants: session.participants,
          urgency: "critical",
          sessionMetrics: session.metrics
        };
        this.websocketService.send("tether-emergency", escalationData);
        if (escalationType === "professional") {
          await this.requestProfessionalHandoff(sessionId);
        }
        this.emit("emergency-escalation-requested", escalationData);
      }
      async requestProfessionalHandoff(sessionId, preferredContact) {
        const session = this.activeSessions.get(sessionId);
        if (!session) return;
        const handoffRequest = {
          sessionId,
          timestamp: Date.now(),
          sessionData: {
            duration: Date.now() - session.startTime,
            tetherType: session.tetherType,
            participants: session.participants,
            metrics: session.metrics
          },
          preferredContact,
          urgency: "high"
        };
        console.log("Professional handoff requested:", handoffRequest);
        this.emit("professional-handoff-requested", handoffRequest);
      }
      // Getters and Utility Methods
      getActiveSession(sessionId) {
        return this.activeSessions.get(sessionId);
      }
      getActiveSessions() {
        return Array.from(this.activeSessions.values());
      }
      getPendingRequests() {
        return Array.from(this.pendingRequests.values());
      }
      getUserSettings() {
        return this.userSettings;
      }
      async updateUserSettings(settings) {
        this.userSettings = { ...this.userSettings, ...settings };
        await this.saveUserSettings();
        this.emit("settings-updated", this.userSettings);
      }
      isAvailable() {
        const settings = this.userSettings;
        if (!settings) return false;
        return this.activeSessions.size < 3;
      }
      destroy() {
        if (this.breathingInterval) clearInterval(this.breathingInterval);
        if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);
        this.activeSessions.forEach((_3, sessionId) => {
          this.endTetherSession(sessionId);
        });
        this.eventHandlers.clear();
        if ("DeviceMotionEvent" in window) {
          window.removeEventListener("devicemotion", this.handleDeviceMotion.bind(this));
        }
      }
      // Compatibility methods for TetherView
      async initiateTether(request) {
        return this.sendTetherRequest(request);
      }
      async acceptTether(requestId, _userId) {
        const sessionId = await this.respondToTetherRequest(requestId, true);
        return sessionId !== null;
      }
      async endTether(sessionId, _userId) {
        return this.endTetherSession(sessionId);
      }
      updateConnectionStrength(sessionId, strength) {
        this.sendPressureUpdate(sessionId, strength);
      }
      async saveComfortProfile(_userId, profile) {
        if (profile.settings) {
          await this.updateUserSettings(profile.settings);
        }
      }
    };
    astralTetherServiceInstance = null;
    getAstralTetherService = () => {
      if (!astralTetherServiceInstance) {
        astralTetherServiceInstance = new AstralTetherService();
      }
      return astralTetherServiceInstance;
    };
  }
});

// src/data/sampleData.ts
var samplePosts, sampleReflections2, sampleWellnessData, sampleAssessments, sampleActivityHistory, sampleHelpers, astralTetherDemo, sampleChatMessages;
var init_sampleData = __esm({
  "src/data/sampleData.ts"() {
    "use strict";
    samplePosts = [
      {
        id: "1",
        userToken: "user123",
        title: "Feeling overwhelmed with work-life balance",
        content: "I've been struggling to maintain a healthy work-life balance lately. My job demands have increased significantly, and I find myself working late into the evenings and weekends. I'm missing out on time with family and friends, and my health is starting to suffer. I know I need to set boundaries, but I'm afraid of disappointing my team or losing opportunities for advancement. Has anyone else dealt with this? How did you find the courage to prioritize your well-being?",
        category: "work-stress",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
        supportCount: 24,
        isSupported: false,
        isReported: false,
        status: "active"
      },
      {
        id: "2",
        userToken: "user456",
        title: "Small victory: I went for a walk today!",
        content: `I know it might not sound like much, but I've been dealing with depression for months and today I finally managed to go for a 15-minute walk around my neighborhood. The sun felt amazing on my face, and I even smiled at a neighbor. It's been so long since I've done something just for me. I'm proud of this small step, and I wanted to share it with people who understand how big these "small" victories really are.`,
        category: "personal-growth",
        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1e3).toISOString(),
        supportCount: 67,
        isSupported: false,
        isReported: false,
        status: "active"
      },
      {
        id: "3",
        userToken: "user789",
        title: "Anxiety about upcoming family gathering",
        content: "The holidays are coming up and I'm already feeling anxious about family gatherings. There's always drama, uncomfortable questions about my life choices, and pressure to pretend everything is perfect. I love my family, but these events drain me emotionally. I'm considering setting some boundaries this year or maybe limiting my time there. Has anyone successfully navigated family events while protecting their mental health?",
        category: "anxiety",
        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1e3).toISOString(),
        supportCount: 31,
        isSupported: false,
        isReported: false,
        status: "active"
      },
      {
        id: "4",
        userToken: "user234",
        title: "Learning to cope with grief",
        content: "It's been six months since I lost my mom, and the waves of grief still catch me off guard. Some days I feel like I'm making progress, and then something small - a song, a smell, a memory - brings it all back. I'm learning that grief isn't linear, and that's okay. I'm trying to be gentle with myself and honor my feelings as they come. If you're grieving too, know that you're not alone in this journey.",
        category: "grief",
        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1e3).toISOString(),
        supportCount: 45,
        isSupported: false,
        isReported: false,
        status: "active"
      },
      {
        id: "5",
        userToken: "user567",
        title: "Started therapy today!",
        content: "After years of putting it off, I finally had my first therapy session today. I was so nervous, but my therapist was kind and understanding. We just talked about what brought me there and what I hope to work on. It feels like a weight has been lifted just knowing I'm taking steps to help myself. For anyone on the fence about therapy - this is your sign to take that leap!",
        category: "therapy",
        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString(),
        supportCount: 89,
        isSupported: false,
        isReported: false,
        status: "active"
      }
    ];
    sampleReflections2 = [
      {
        id: "r1",
        date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(),
        mood: 7,
        title: "A Good Day",
        content: "Today was better than most. I woke up feeling rested, had a productive morning, and even enjoyed lunch with a friend. Small progress, but I'll take it.",
        tags: ["gratitude", "progress", "social"],
        isPrivate: false
      },
      {
        id: "r2",
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(),
        mood: 4,
        title: "Struggling but Surviving",
        content: "Anxiety was high today. Couldn't focus at work, but I used my breathing exercises and they helped a bit. Tomorrow is a new day.",
        tags: ["anxiety", "coping", "work"],
        isPrivate: true
      },
      {
        id: "r3",
        date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
        mood: 8,
        title: "Breakthrough in Therapy",
        content: "Had an amazing therapy session today. Finally understood why I react certain ways to conflict. Feeling hopeful about applying these insights.",
        tags: ["therapy", "growth", "insight"],
        isPrivate: false
      },
      {
        id: "r4",
        date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1e3).toISOString(),
        mood: 6,
        title: "Practicing Self-Compassion",
        content: "Made a mistake at work today, but instead of spiraling, I practiced self-compassion. Everyone makes mistakes. I'm learning and growing.",
        tags: ["self-compassion", "work", "growth"],
        isPrivate: false
      }
    ];
    sampleWellnessData = {
      moodHistory: [
        { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(), mood: 5, notes: "Feeling neutral" },
        { date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1e3).toISOString(), mood: 6, notes: "Better day" },
        { date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(), mood: 4, notes: "Anxious" },
        { date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1e3).toISOString(), mood: 7, notes: "Good progress" },
        { date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(), mood: 6, notes: "Stable" },
        { date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(), mood: 8, notes: "Great day!" },
        { date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(), mood: 7, notes: "Maintaining progress" }
      ],
      sleepData: [
        { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(), hours: 6, quality: "fair" },
        { date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1e3).toISOString(), hours: 7, quality: "good" },
        { date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(), hours: 5, quality: "poor" },
        { date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1e3).toISOString(), hours: 8, quality: "excellent" },
        { date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(), hours: 7, quality: "good" },
        { date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(), hours: 6, quality: "fair" },
        { date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(), hours: 7, quality: "good" }
      ],
      exerciseData: [
        { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 0, type: "none" },
        { date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 30, type: "walking" },
        { date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 0, type: "none" },
        { date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 45, type: "yoga" },
        { date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 20, type: "walking" },
        { date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 60, type: "gym" },
        { date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString(), minutes: 15, type: "stretching" }
      ],
      goals: [
        { id: "g1", title: "Daily Meditation", progress: 70, target: "10 minutes daily", achieved: false },
        { id: "g2", title: "Weekly Therapy", progress: 100, target: "1 session per week", achieved: true },
        { id: "g3", title: "Exercise Routine", progress: 45, target: "3 times per week", achieved: false },
        { id: "g4", title: "Sleep Schedule", progress: 60, target: "8 hours nightly", achieved: false }
      ]
    };
    sampleAssessments = [
      {
        id: "a1",
        title: "Anxiety Screening (GAD-7)",
        userToken: "user123",
        type: "gad-7",
        timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3).toISOString(),
        score: 8,
        answers: [1, 2, 1, 2, 1, 2, 1]
      },
      {
        id: "a2",
        title: "Depression Screening (PHQ-9)",
        userToken: "user456",
        type: "phq-9",
        timestamp: new Date(Date.now() - 14 * 24 * 60 * 60 * 1e3).toISOString(),
        score: 12,
        answers: [2, 1, 2, 1, 2, 1, 2, 1, 1]
      },
      {
        id: "a3",
        title: "Recent Anxiety Assessment",
        userToken: "user789",
        type: "gad-7",
        timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1e3).toISOString(),
        score: 5,
        answers: [1, 1, 1, 1, 1, 0, 0]
      }
    ];
    sampleActivityHistory = [
      {
        id: "act1",
        type: "post",
        action: "Created a post",
        title: "Feeling overwhelmed with work-life balance",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString()
      },
      {
        id: "act2",
        type: "comment",
        action: "Commented on a post",
        title: "Small victory: I went for a walk today!",
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1e3).toISOString()
      },
      {
        id: "act3",
        type: "reflection",
        action: "Added a reflection",
        title: "A Good Day",
        timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString()
      },
      {
        id: "act4",
        type: "assessment",
        action: "Completed assessment",
        title: "Mood Check-In",
        timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3).toISOString()
      },
      {
        id: "act5",
        type: "wellness",
        action: "Updated wellness goals",
        title: "Daily Meditation",
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3).toISOString()
      }
    ];
    sampleHelpers = [
      {
        id: "h1",
        auth0UserId: "auth0|helper1",
        displayName: "Sarah M.",
        bio: "Certified peer support specialist with experience in anxiety and depression. Here to listen without judgment.",
        joinDate: new Date(Date.now() - 180 * 24 * 60 * 60 * 1e3).toISOString(),
        helperType: "Certified",
        role: "Certified",
        reputation: 4.8,
        isAvailable: true,
        expertise: ["Anxiety", "Depression", "Work Stress"],
        kudosCount: 127,
        totalSessions: 203,
        xp: 2400,
        level: 8,
        nextLevelXp: 3e3,
        applicationStatus: "approved",
        trainingCompleted: true,
        quizScore: 95
      },
      {
        id: "h2",
        auth0UserId: "auth0|helper2",
        displayName: "Michael T.",
        bio: "Recovery coach focusing on addiction and trauma. 5 years in recovery myself. You're not alone.",
        joinDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1e3).toISOString(),
        helperType: "Certified",
        role: "Certified",
        reputation: 4.9,
        isAvailable: true,
        expertise: ["Addiction", "Trauma", "Recovery"],
        kudosCount: 310,
        totalSessions: 445,
        xp: 4200,
        level: 12,
        nextLevelXp: 5e3,
        applicationStatus: "approved",
        trainingCompleted: true,
        quizScore: 98
      },
      {
        id: "h3",
        auth0UserId: "auth0|helper3",
        displayName: "Jessica L.",
        bio: "Grief counselor and mindfulness practitioner. Helping others navigate loss and find peace.",
        joinDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1e3).toISOString(),
        helperType: "Community",
        role: "Community",
        reputation: 4.7,
        isAvailable: false,
        expertise: ["Grief", "Loss", "Mindfulness"],
        kudosCount: 89,
        totalSessions: 134,
        xp: 1800,
        level: 6,
        nextLevelXp: 2e3,
        applicationStatus: "approved",
        trainingCompleted: true,
        quizScore: 92
      }
    ];
    astralTetherDemo = {
      connectionStatus: "ready",
      energyLevel: 75,
      resonanceStrength: 82,
      activeConnections: 3,
      recentSessions: [
        {
          id: "at1",
          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1e3).toISOString(),
          duration: "15 minutes",
          type: "Calming",
          effectiveness: 85,
          notes: "Felt a strong sense of peace and connection"
        },
        {
          id: "at2",
          timestamp: new Date(Date.now() - 24 * 60 * 60 * 1e3).toISOString(),
          duration: "20 minutes",
          type: "Energizing",
          effectiveness: 78,
          notes: "Helped lift my mood and motivation"
        },
        {
          id: "at3",
          timestamp: new Date(Date.now() - 48 * 60 * 60 * 1e3).toISOString(),
          duration: "10 minutes",
          type: "Grounding",
          effectiveness: 92,
          notes: "Perfect for managing anxiety in the moment"
        }
      ],
      availableModes: [
        {
          name: "Calming Wave",
          description: "Gentle, soothing energy to reduce anxiety and promote relaxation",
          icon: "\u{1F30A}",
          color: "#6B9BD2"
        },
        {
          name: "Energizing Pulse",
          description: "Uplifting vibrations to boost mood and motivation",
          icon: "\u26A1",
          color: "#F4B942"
        },
        {
          name: "Grounding Root",
          description: "Stabilizing frequency to center yourself and find balance",
          icon: "\u{1F333}",
          color: "#7CB342"
        },
        {
          name: "Heart Opening",
          description: "Compassionate resonance to foster self-love and connection",
          icon: "\u{1F49C}",
          color: "#AB47BC"
        },
        {
          name: "Clarity Focus",
          description: "Sharpening wavelength to enhance mental clarity and focus",
          icon: "\u{1F52E}",
          color: "#5E35B1"
        }
      ],
      testimonials: [
        {
          text: "The Astral Tether has been a game-changer for my anxiety management.",
          author: "Anonymous User",
          rating: 5
        },
        {
          text: "I use it every morning to set a positive tone for my day.",
          author: "Community Member",
          rating: 5
        },
        {
          text: "Skeptical at first, but the calming effect is undeniable.",
          author: "New User",
          rating: 4
        }
      ]
    };
    sampleChatMessages = [
      {
        id: "m1",
        senderId: "helper",
        text: "Hi there! I'm Sarah, your peer support helper today. How are you feeling?",
        timestamp: new Date(Date.now() - 10 * 60 * 1e3).toISOString(),
        isHelper: true
      },
      {
        id: "m2",
        senderId: "user",
        text: "Hi Sarah. I'm feeling pretty anxious about a presentation I have tomorrow.",
        timestamp: new Date(Date.now() - 9 * 60 * 1e3).toISOString(),
        isHelper: false
      },
      {
        id: "m3",
        senderId: "helper",
        text: "I understand how nerve-wracking presentations can be. What specifically about it is making you most anxious?",
        timestamp: new Date(Date.now() - 8 * 60 * 1e3).toISOString(),
        isHelper: true
      },
      {
        id: "m4",
        senderId: "user",
        text: "I'm worried I'll forget what to say or that people will judge me if I make a mistake.",
        timestamp: new Date(Date.now() - 7 * 60 * 1e3).toISOString(),
        isHelper: false
      },
      {
        id: "m5",
        senderId: "helper",
        text: "Those are very common fears, and they're completely valid. Let's work on some strategies to help you feel more confident. Have you tried any breathing exercises or grounding techniques before?",
        timestamp: new Date(Date.now() - 6 * 60 * 1e3).toISOString(),
        isHelper: true
      }
    ];
  }
});

// src/components/AstralTetherDemo.css
var init_AstralTetherDemo = __esm({
  "src/components/AstralTetherDemo.css"() {
  }
});

// src/components/AstralTetherDemo.tsx
var import_react54, import_jsx_runtime54, AstralTetherDemo;
var init_AstralTetherDemo2 = __esm({
  "src/components/AstralTetherDemo.tsx"() {
    "use strict";
    import_react54 = __toESM(require_react());
    init_Card();
    init_AppButton();
    init_icons_dynamic();
    init_NotificationContext();
    init_sampleData();
    init_AstralTetherDemo();
    import_jsx_runtime54 = __toESM(require_jsx_runtime());
    AstralTetherDemo = () => {
      const { addToast } = useNotification();
      const [isActive, setIsActive] = (0, import_react54.useState)(false);
      const [selectedMode, setSelectedMode] = (0, import_react54.useState)(astralTetherDemo.availableModes[0]);
      const [energyLevel, setEnergyLevel] = (0, import_react54.useState)(astralTetherDemo.energyLevel);
      const [resonanceStrength, setResonanceStrength] = (0, import_react54.useState)(astralTetherDemo.resonanceStrength);
      const [pulseAnimation, setPulseAnimation] = (0, import_react54.useState)(false);
      const [sessionTime, setSessionTime] = (0, import_react54.useState)(0);
      const intervalRef = (0, import_react54.useRef)();
      (0, import_react54.useEffect)(() => {
        if (isActive) {
          intervalRef.current = setInterval(() => {
            setSessionTime((prev) => prev + 1);
            setEnergyLevel((prev) => Math.min(100, prev + (Math.random() * 2 - 0.5)));
            setResonanceStrength((prev) => Math.min(100, prev + (Math.random() * 3 - 1)));
          }, 1e3);
        } else {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
          setSessionTime(0);
        }
        return () => {
          if (intervalRef.current) {
            clearInterval(intervalRef.current);
          }
        };
      }, [isActive]);
      const startTetherSession = () => {
        setIsActive(true);
        setPulseAnimation(true);
        addToast(`Starting ${selectedMode.name} session...`, "success");
      };
      const endTetherSession = () => {
        setIsActive(false);
        setPulseAnimation(false);
        const minutes = Math.floor(sessionTime / 60);
        const seconds = sessionTime % 60;
        addToast(`Session ended. Duration: ${minutes}:${seconds.toString().padStart(2, "0")}`, "info");
      };
      const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, "0")}`;
      };
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "astral-tether-demo", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Card, { className: "tether-main-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("h2", { className: "tether-title", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(SparkleIcon, { className: "tether-icon" }),
              "Astral Tether Experience"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "tether-subtitle", children: "Connect with calming energy and find your balance" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-visualization", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
              "div",
              {
                className: `tether-orb${isActive ? " active" : ""}${pulseAnimation ? " pulsing" : ""}`,
                style: { backgroundColor: selectedMode.color },
                children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-orb-inner", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "tether-orb-icon", children: selectedMode.icon }),
                  isActive && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "tether-timer", children: formatTime(sessionTime) })
                ] })
              }
            ),
            isActive && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-waves", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "wave wave-1", style: { borderColor: selectedMode.color } }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "wave wave-2", style: { borderColor: selectedMode.color } }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "wave wave-3", style: { borderColor: selectedMode.color } })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-meters", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "meter-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("label", { className: "meter-label", children: [
                /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ActivityIcon, { className: "meter-icon" }),
                "Energy Level"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "meter-bar", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
                "div",
                {
                  className: "meter-fill energy-fill",
                  style: { width: `${energyLevel}%` }
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("span", { className: "meter-value", children: [
                Math.round(energyLevel),
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "meter-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("label", { className: "meter-label", children: [
                /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(LinkIcon, { className: "meter-icon" }),
                "Resonance Strength"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "meter-bar", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
                "div",
                {
                  className: "meter-fill resonance-fill",
                  style: { width: `${resonanceStrength}%` }
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("span", { className: "meter-value", children: [
                Math.round(resonanceStrength),
                "%"
              ] })
            ] })
          ] }),
          !isActive && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tether-modes", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h3", { className: "modes-title", children: "Select Your Energy Mode" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "modes-grid", children: astralTetherDemo.availableModes.map((mode) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
              "button",
              {
                className: selectedMode.name === mode.name ? "mode-card selected" : "mode-card",
                onClick: () => setSelectedMode(mode),
                style: { borderColor: selectedMode.name === mode.name ? mode.color : "transparent" },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "mode-icon", children: mode.icon }),
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "mode-name", children: mode.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "mode-description", children: mode.description })
                ]
              },
              mode.name
            )) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "tether-actions", children: !isActive ? /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
            AppButton,
            {
              variant: "primary",
              size: "lg",
              onClick: startTetherSession,
              className: "tether-start-btn",
              style: { backgroundColor: selectedMode.color },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(SparkleIcon, {}),
                "Start ",
                selectedMode.name,
                " Session"
              ]
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
            AppButton,
            {
              variant: "secondary",
              size: "lg",
              onClick: endTetherSession,
              className: "tether-end-btn",
              children: "End Session"
            }
          ) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Card, { className: "tether-history-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("h3", { className: "history-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ClockIcon, { className: "history-icon" }),
            "Recent Sessions"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "sessions-list", children: astralTetherDemo.recentSessions.map((session) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "session-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "session-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "session-type", children: session.type }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "session-duration", children: session.duration }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "session-time", children: new Date(session.timestamp).toLocaleDateString() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "session-effectiveness", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "effectiveness-bar", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
                "div",
                {
                  className: "effectiveness-fill",
                  style: { width: `${session.effectiveness}%` }
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("span", { className: "effectiveness-value", children: [
                session.effectiveness,
                "%"
              ] })
            ] }),
            session.notes && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "session-notes", children: session.notes })
          ] }, session.id)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Card, { className: "tether-stats-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("h3", { className: "stats-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ShieldIcon, { className: "stats-icon" }),
            "Your Tether Stats"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "stats-grid", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "stat-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-value", children: astralTetherDemo.activeConnections }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-label", children: "Active Connections" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "stat-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-value", children: "15" }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-label", children: "Total Sessions" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "stat-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-value", children: "4.2h" }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-label", children: "Total Time" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "stat-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-value", children: "85%" }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "stat-label", children: "Avg. Effectiveness" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Card, { className: "tether-testimonials-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("h3", { className: "testimonials-title", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(HeartIcon2, { className: "testimonials-icon" }),
            "Community Experiences"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "testimonials-list", children: astralTetherDemo.testimonials.map((testimonial, index2) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "testimonial-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("p", { className: "testimonial-text", children: [
              '"',
              testimonial.text,
              '"'
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "testimonial-footer", children: [
              /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("span", { className: "testimonial-author", children: [
                "- ",
                testimonial.author
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "testimonial-rating", children: [...Array(5)].map((_3, i3) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: i3 < testimonial.rating ? "star filled" : "star", children: "\u2B50" }, i3)) })
            ] })
          ] }, index2)) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(Card, { className: "tether-instructions-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h3", { className: "instructions-title", children: "How to Use Astral Tether" }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("ol", { className: "instructions-list", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "Choose an energy mode that matches your current needs" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "Find a comfortable, quiet space where you won't be disturbed" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "Start your session and focus on the pulsing visualization" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "Breathe deeply and allow the energy to flow through you" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "Continue for as long as feels comfortable (5-20 minutes recommended)" }),
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("li", { children: "End the session when you feel balanced and centered" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("p", { className: "instructions-note", children: [
            /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("strong", { children: "Note:" }),
            ' Astral Tether is a complementary wellness tool. For immediate crisis support, please use the "Need Help Now?" button or call 988.'
          ] })
        ] })
      ] });
    };
  }
});

// src/components/GuidedTetherExperience.css
var init_GuidedTetherExperience = __esm({
  "src/components/GuidedTetherExperience.css"() {
  }
});

// src/components/GuidedTetherExperience.tsx
var import_react55, import_jsx_runtime55, experiences, GuidedTetherExperience;
var init_GuidedTetherExperience2 = __esm({
  "src/components/GuidedTetherExperience.tsx"() {
    "use strict";
    import_react55 = __toESM(require_react());
    init_icons_dynamic();
    init_GuidedTetherExperience();
    import_jsx_runtime55 = __toESM(require_jsx_runtime());
    experiences = [
      {
        id: "sync-breathing",
        name: "Synchronized Breathing",
        description: "Breathe together in perfect harmony",
        duration: 5,
        type: "breathing",
        icon: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ActivityIcon, {}),
        steps: [
          { instruction: "Get comfortable and close your eyes", duration: 10, action: "visualize" },
          { instruction: "Feel your partner's presence", duration: 10, action: "receive" },
          { instruction: "Breathe in together... 4 seconds", duration: 4, action: "breathe", visual: "inhale" },
          { instruction: "Hold together... 7 seconds", duration: 7, action: "breathe", visual: "hold" },
          { instruction: "Exhale together... 8 seconds", duration: 8, action: "breathe", visual: "exhale" },
          { instruction: "Rest... 2 seconds", duration: 2, action: "breathe", visual: "rest" }
        ]
      },
      {
        id: "heart-connection",
        name: "Heart Connection",
        description: "Send and receive compassionate energy",
        duration: 3,
        type: "connection",
        icon: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(HeartIcon2, {}),
        steps: [
          { instruction: "Place your hand on your heart", duration: 10, action: "visualize" },
          { instruction: "Feel warmth and compassion building", duration: 15, action: "visualize" },
          { instruction: "Send loving energy to your partner", duration: 20, action: "send", visual: "pulse" },
          { instruction: "Receive their caring energy back", duration: 20, action: "receive", visual: "glow" },
          { instruction: "Let the connection strengthen you both", duration: 15, action: "visualize" }
        ]
      },
      {
        id: "grounding-together",
        name: "Grounding Together",
        description: "Find stability through shared presence",
        duration: 4,
        type: "grounding",
        icon: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ShieldIcon, {}),
        steps: [
          { instruction: "Notice 5 things you can see", duration: 20, action: "visualize" },
          { instruction: "Share this awareness with your partner", duration: 10, action: "send" },
          { instruction: "Touch 4 different textures around you", duration: 20, action: "visualize" },
          { instruction: "Listen for 3 sounds in your environment", duration: 15, action: "visualize" },
          { instruction: "Notice 2 scents near you", duration: 10, action: "visualize" },
          { instruction: "Focus on 1 taste in your mouth", duration: 5, action: "visualize" },
          { instruction: "You are grounded and connected", duration: 10, action: "receive" }
        ]
      },
      {
        id: "affirmation-exchange",
        name: "Affirmation Exchange",
        description: "Share strength through positive words",
        duration: 3,
        type: "affirmation",
        icon: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(SparkleIcon, {}),
        steps: [
          { instruction: "Think of your partner's strength", duration: 15, action: "visualize" },
          { instruction: 'Send them: "You are brave"', duration: 10, action: "send", visual: "message" },
          { instruction: "Receive their affirmation for you", duration: 10, action: "receive", visual: "message" },
          { instruction: 'Send them: "You are not alone"', duration: 10, action: "send", visual: "message" },
          { instruction: "Feel the truth of these words", duration: 15, action: "visualize" },
          { instruction: "Let hope fill your heart", duration: 10, action: "receive", visual: "glow" }
        ]
      }
    ];
    GuidedTetherExperience = ({
      onExperienceComplete,
      partnerName = "your partner",
      isConnected = false
    }) => {
      const [selectedExperience, setSelectedExperience] = (0, import_react55.useState)(null);
      const [currentStepIndex, setCurrentStepIndex] = (0, import_react55.useState)(0);
      const [isActive, setIsActive] = (0, import_react55.useState)(false);
      const [stepProgress, setStepProgress] = (0, import_react55.useState)(0);
      const [totalProgress, setTotalProgress] = (0, import_react55.useState)(0);
      (0, import_react55.useEffect)(() => {
        if (!isActive || !selectedExperience) return;
        const currentStep2 = selectedExperience.steps[currentStepIndex];
        const progressInterval = setInterval(() => {
          setStepProgress((prev) => {
            const newProgress = prev + 100 / (currentStep2.duration * 10);
            if (newProgress >= 100) {
              if (currentStepIndex < selectedExperience.steps.length - 1) {
                setCurrentStepIndex(currentStepIndex + 1);
                return 0;
              } else {
                completeExperience();
                return 100;
              }
            }
            return newProgress;
          });
        }, 100);
        return () => clearInterval(progressInterval);
      }, [isActive, currentStepIndex, selectedExperience]);
      (0, import_react55.useEffect)(() => {
        if (!selectedExperience) return;
        const completedSteps = currentStepIndex;
        const totalSteps = selectedExperience.steps.length;
        const currentStepCompletion = stepProgress / 100;
        setTotalProgress((completedSteps + currentStepCompletion) / totalSteps * 100);
      }, [currentStepIndex, stepProgress, selectedExperience]);
      const startExperience = (experience) => {
        setSelectedExperience(experience);
        setCurrentStepIndex(0);
        setStepProgress(0);
        setTotalProgress(0);
        setIsActive(true);
      };
      const pauseExperience = () => {
        setIsActive(false);
      };
      const resumeExperience = () => {
        setIsActive(true);
      };
      const stopExperience = () => {
        setIsActive(false);
        setSelectedExperience(null);
        setCurrentStepIndex(0);
        setStepProgress(0);
        setTotalProgress(0);
      };
      const completeExperience = () => {
        if (selectedExperience) {
          onExperienceComplete?.(selectedExperience.id);
        }
        setIsActive(false);
        setTimeout(() => {
          setSelectedExperience(null);
          setCurrentStepIndex(0);
          setStepProgress(0);
          setTotalProgress(0);
        }, 2e3);
      };
      const getVisualElement = (visual) => {
        switch (visual) {
          case "inhale":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "breath-circle expanding", children: "Inhale" });
          case "hold":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "breath-circle holding", children: "Hold" });
          case "exhale":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "breath-circle contracting", children: "Exhale" });
          case "rest":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "breath-circle resting", children: "Rest" });
          case "pulse":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "energy-pulse outgoing", children: "\u{1F49D}" });
          case "glow":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "energy-glow incoming", children: "\u2728" });
          case "message":
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "affirmation-bubble", children: "\u{1F4AC}" });
          default:
            return null;
        }
      };
      if (!selectedExperience) {
        return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "guided-experience-selector", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "selector-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("h3", { className: "selector-title", children: [
              /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(LinkIcon, { className: "selector-icon" }),
              "Guided Tether Experiences"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "selector-subtitle", children: isConnected ? `Choose an experience to share with ${partnerName}` : "Select an experience to practice solo" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "experience-grid", children: experiences.map((experience) => /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
            "button",
            {
              className: "experience-card",
              onClick: () => startExperience(experience),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "experience-icon", children: experience.icon }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h4", { className: "experience-name", children: experience.name }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "experience-description", children: experience.description }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "experience-meta", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("span", { className: "experience-duration", children: [
                    "\u{1F550} ",
                    experience.duration,
                    " min"
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "experience-type", children: experience.type })
                ] })
              ]
            },
            experience.id
          )) })
        ] });
      }
      const currentStep = selectedExperience.steps[currentStepIndex];
      return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "guided-experience-player", children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "player-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h3", { className: "player-title", children: selectedExperience.name }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "player-progress", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "progress-bar", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
              "div",
              {
                className: "progress-fill",
                style: { width: `${totalProgress}%` }
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("span", { className: "progress-text", children: [
              "Step ",
              currentStepIndex + 1,
              " of ",
              selectedExperience.steps.length
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "experience-stage", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "visual-container", children: getVisualElement(currentStep.visual) }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "instruction-container", children: [
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { className: "instruction-text", children: currentStep.instruction }),
            currentStep.action && /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: `action-indicator action-${currentStep.action}`, children: [
              currentStep.action === "send" && "\u2192 Sending energy",
              currentStep.action === "receive" && "\u2190 Receiving energy",
              currentStep.action === "breathe" && "\u{1FAC1} Breathing",
              currentStep.action === "visualize" && "\u{1F441}\uFE0F Visualizing"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "step-progress-container", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "step-progress-bar", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
            "div",
            {
              className: "step-progress-fill",
              style: { width: `${stepProgress}%` }
            }
          ) }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "player-controls", children: isActive ? /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_jsx_runtime55.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "control-btn pause", onClick: pauseExperience, children: "\u23F8\uFE0F Pause" }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "control-btn stop", onClick: stopExperience, children: "\u23F9\uFE0F Stop" })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_jsx_runtime55.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "control-btn resume", onClick: resumeExperience, children: "\u25B6\uFE0F Resume" }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { className: "control-btn stop", onClick: stopExperience, children: "\u23F9\uFE0F End" })
        ] }) }),
        totalProgress >= 100 && /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "completion-message", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(SparkleIcon, { className: "completion-icon" }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("p", { children: "Experience complete! You did wonderfully." })
        ] })
      ] });
    };
  }
});

// src/views/TetherView.css
var init_TetherView = __esm({
  "src/views/TetherView.css"() {
  }
});

// src/views/TetherView.tsx
var TetherView_exports = {};
__export(TetherView_exports, {
  default: () => TetherView_default
});
var import_react56, import_jsx_runtime56, TetherView, TetherView_default;
var init_TetherView2 = __esm({
  "src/views/TetherView.tsx"() {
    "use strict";
    import_react56 = __toESM(require_react());
    init_ViewHeader();
    init_Card();
    init_AppButton();
    init_EmptyState();
    init_Modal();
    init_AppInput();
    init_AppInput();
    init_icons_dynamic();
    init_NotificationContext();
    init_AuthContext();
    init_astralTetherService();
    init_AstralTetherDemo2();
    init_GuidedTetherExperience2();
    init_TetherView();
    import_jsx_runtime56 = __toESM(require_jsx_runtime());
    TetherView = ({
      userToken: propUserToken,
      setActiveView
    }) => {
      const { user, userToken: contextUserToken } = useAuth();
      const userToken = propUserToken ?? contextUserToken;
      const { addToast } = useNotification();
      const tetherService = (0, import_react56.useRef)(getAstralTetherService());
      const [activeTether, setActiveTether] = (0, import_react56.useState)(null);
      const [tetherCircle, setTetherCircle] = (0, import_react56.useState)([]);
      const [pendingRequests, setPendingRequests] = (0, import_react56.useState)([]);
      const [tetherProfile, setTetherProfile] = (0, import_react56.useState)({
        vibrationPattern: "heartbeat",
        colorTheme: "aurora",
        comfortMessages: ["I'm here", "You're safe", "Breathe with me"],
        autoEscalationMinutes: 5,
        silentMode: false,
        breathingPattern: "4-7-8"
      });
      const [showRequestModal, setShowRequestModal] = (0, import_react56.useState)(false);
      const [showSettingsModal, setShowSettingsModal] = (0, import_react56.useState)(false);
      const [_showCircleModal, setShowCircleModal] = (0, import_react56.useState)(false);
      const [_showInsightsModal, setShowInsightsModal] = (0, import_react56.useState)(false);
      const [requestMessage, setRequestMessage] = (0, import_react56.useState)("");
      const [requestUrgency, setRequestUrgency] = (0, import_react56.useState)("medium");
      const [selectedMemberId, setSelectedMemberId] = (0, import_react56.useState)("");
      const [breathingPhase, setBreathingPhase] = (0, import_react56.useState)("inhale");
      const [breathingProgress, setBreathingProgress] = (0, import_react56.useState)(0);
      const animationRef = (0, import_react56.useRef)();
      (0, import_react56.useEffect)(() => {
        loadTetherCircle();
        loadPendingRequests();
        setupTetherListeners();
        return () => {
          if (animationRef.current) {
            cancelAnimationFrame(animationRef.current);
          }
          tetherService.current.removeAllListeners();
        };
      }, []);
      const loadTetherCircle = async () => {
        try {
          const response = await fetch("/api/tether/circle", {
            headers: { "Authorization": `Bearer ${userToken}` }
          });
          if (response.ok) {
            const data2 = await response.json();
            setTetherCircle(data2.members || []);
          }
        } catch (error44) {
          console.error("Failed to load tether circle:", error44);
        }
      };
      const loadPendingRequests = async () => {
        try {
          const response = await fetch("/api/tether/requests/pending", {
            headers: { "Authorization": `Bearer ${userToken}` }
          });
          if (response.ok) {
            const data2 = await response.json();
            setPendingRequests(data2.requests || []);
          }
        } catch (error44) {
          console.error("Failed to load pending requests:", error44);
        }
      };
      const setupTetherListeners = () => {
        const service = tetherService.current;
        service.on("tetherRequest", (request) => {
          setPendingRequests((prev) => [...prev, request]);
          addToast(`New tether request from ${request.fromName}`, "info");
          if ("vibrate" in navigator && !tetherProfile.silentMode) {
            navigator.vibrate([200, 100, 200]);
          }
        });
        service.on("tetherAccepted", (session) => {
          setActiveTether({
            id: session.id,
            partnerId: session.partnerId,
            partnerName: session.partnerName,
            startTime: /* @__PURE__ */ new Date(),
            connectionStrength: 0,
            isBreathingSynced: false,
            isHapticEnabled: true,
            status: "connecting"
          });
          addToast("Tether connection established!", "success");
        });
        service.on("connectionStrengthChanged", ({ strength }) => {
          setActiveTether((prev) => prev ? { ...prev, connectionStrength: strength } : null);
        });
        service.on("breathingSync", (data2) => {
          setBreathingPhase(data2.phase);
          setBreathingProgress(data2.progress);
        });
      };
      const initiateTetherRequest = async () => {
        if (!requestMessage.trim()) {
          addToast("Please add a message for your tether request", "error");
          return;
        }
        try {
          await tetherService.current.initiateTether({
            fromUserId: user?.sub || "",
            toUserId: selectedMemberId,
            tetherType: "conversation",
            message: requestMessage,
            urgency: requestUrgency
          });
          addToast("Tether request sent", "success");
          setShowRequestModal(false);
          setRequestMessage("");
          if (requestUrgency === "high" || requestUrgency === "critical") {
            setTimeout(() => {
              if (!activeTether) {
                handleAutoEscalation();
              }
            }, tetherProfile.autoEscalationMinutes * 60 * 1e3);
          }
        } catch (error44) {
          console.error("Failed to initiate tether:", error44);
          addToast("Failed to send tether request", "error");
        }
      };
      const acceptTetherRequest = async (requestId) => {
        try {
          const success2 = await tetherService.current.acceptTether(requestId, user?.sub || "");
          if (success2) {
            setPendingRequests((prev) => prev.filter((r3) => r3.id !== requestId));
            addToast("Tether connection started", "success");
          }
        } catch (error44) {
          console.error("Failed to accept tether:", error44);
          addToast("Failed to accept tether request", "error");
        }
      };
      const updateConnectionStrength = (delta) => {
        if (!activeTether) return;
        const newStrength = Math.max(0, Math.min(1, activeTether.connectionStrength + delta));
        tetherService.current.updateConnectionStrength(activeTether.id, newStrength);
      };
      const endTether = async () => {
        if (!activeTether) return;
        setActiveTether((prev) => prev ? { ...prev, status: "ending" } : null);
        try {
          await tetherService.current.endTether(activeTether.id, user?.sub || "");
          setTimeout(() => {
            if (window.confirm("Would you like to send a thank you message to your tether partner?")) {
              sendGratitudeMessage();
            }
          }, 2e3);
          setActiveTether(null);
          addToast("Tether session ended", "info");
        } catch (error44) {
          console.error("Failed to end tether:", error44);
        }
      };
      const sendGratitudeMessage = async () => {
        const message = prompt("Write a thank you message:");
        if (message) {
          try {
            await fetch("/api/tether/gratitude", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${userToken}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                sessionId: activeTether?.id,
                message
              })
            });
            addToast("Thank you message sent", "success");
          } catch (error44) {
            console.error("Failed to send gratitude:", error44);
          }
        }
      };
      const handleAutoEscalation = () => {
        addToast("No response received. Escalating to emergency contacts...", "warning");
        tetherService.current.emit("emergencyEscalation", {
          userId: user?.sub,
          reason: "No response to high urgency tether request"
        });
        if (requestUrgency === "critical") {
          setActiveView?.({ view: "crisis" });
        }
      };
      const toggleBreathingSync = () => {
        if (!activeTether) return;
        setActiveTether((prev) => prev ? {
          ...prev,
          isBreathingSynced: !prev.isBreathingSynced
        } : null);
        if (!activeTether.isBreathingSynced) {
          startBreathingAnimation();
        }
      };
      const startBreathingAnimation = () => {
        const breathingPatterns3 = {
          "4-7-8": { inhale: 4e3, hold: 7e3, exhale: 8e3, pause: 1e3 },
          "box": { inhale: 4e3, hold: 4e3, exhale: 4e3, pause: 4e3 },
          "coherent": { inhale: 5e3, hold: 0, exhale: 5e3, pause: 0 }
        };
        const pattern = breathingPatterns3[tetherProfile.breathingPattern];
        let phase = "inhale";
        let startTime = Date.now();
        const animate = () => {
          const elapsed = Date.now() - startTime;
          const phaseDuration = pattern[phase];
          if (phaseDuration > 0) {
            const progress = Math.min(elapsed / phaseDuration, 1);
            setBreathingProgress(progress);
            if (progress >= 1) {
              const phases = ["inhale", "hold", "exhale", "pause"];
              const currentIndex = phases.indexOf(phase);
              phase = phases[(currentIndex + 1) % 4];
              setBreathingPhase(phase);
              startTime = Date.now();
            }
          } else {
            const phases = ["inhale", "hold", "exhale", "pause"];
            const currentIndex = phases.indexOf(phase);
            phase = phases[(currentIndex + 1) % 4];
            setBreathingPhase(phase);
          }
          if (activeTether?.isBreathingSynced) {
            animationRef.current = requestAnimationFrame(animate);
          }
        };
        animationRef.current = requestAnimationFrame(animate);
      };
      const renderActiveTether = () => {
        if (!activeTether) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Card, { className: "active-tether-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-status", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ActivityIcon, { className: "pulse-animation" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("span", { children: [
                "Connected with ",
                activeTether.partnerName
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-timer", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ClockIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: formatDuration(Date.now() - activeTether.startTime.getTime()) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "connection-strength", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Connection Strength" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "strength-bar", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              "div",
              {
                className: "strength-fill",
                style: {
                  width: `${activeTether.connectionStrength * 100}%`,
                  backgroundColor: getStrengthColor(activeTether.connectionStrength)
                }
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "strength-controls", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                AppButton,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: () => updateConnectionStrength(-0.1),
                  children: "Lighter"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                AppButton,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: () => updateConnectionStrength(0.1),
                  children: "Stronger"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "breathing-sync-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "breathing-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { children: "Synchronized Breathing" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                AppButton,
                {
                  variant: activeTether.isBreathingSynced ? "primary" : "secondary",
                  size: "sm",
                  onClick: toggleBreathingSync,
                  children: activeTether.isBreathingSynced ? "Synced" : "Start Sync"
                }
              )
            ] }),
            activeTether.isBreathingSynced && /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "breathing-visualization", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: `breathing-circle ${breathingPhase}`, children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                "div",
                {
                  className: "breathing-progress",
                  style: { transform: `scale(${0.5 + breathingProgress * 0.5})` }
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("p", { className: "breathing-instruction", children: [
                breathingPhase === "inhale" && "Breathe In",
                breathingPhase === "hold" && "Hold",
                breathingPhase === "exhale" && "Breathe Out",
                breathingPhase === "pause" && "Rest"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "comfort-messages", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { children: "Comfort Messages" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "message-bubbles", children: tetherProfile.comfortMessages.map((msg, idx) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "comfort-bubble", children: msg }, idx)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => {
                  if ("vibrate" in navigator) {
                    navigator.vibrate([200, 100, 200, 100, 200]);
                  }
                  addToast("Sending comfort vibration...", "info");
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(HeartIcon2, {}),
                  "Send Warmth"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
              AppButton,
              {
                variant: "danger",
                onClick: endTether,
                children: "End Tether"
              }
            )
          ] })
        ] });
      };
      const renderTetherCircle = () => {
        return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Card, { className: "tether-circle-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "card-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { children: "Your Tether Circle" }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => setShowCircleModal(true),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(SettingsIcon, {}),
                  "Manage"
                ]
              }
            )
          ] }),
          tetherCircle.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            EmptyState,
            {
              icon: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(UsersIcon, {}),
              title: "No circle members yet",
              message: "Add trusted friends and family to your tether circle",
              action: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(AppButton, { onClick: () => setShowCircleModal(true), children: "Add Members" })
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "circle-members", children: tetherCircle.map((member) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "circle-member", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "member-avatar", children: [
              member.profilePicture ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("img", { src: member.profilePicture, alt: member.displayName }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(UsersIcon, {}),
              member.isAvailable && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "availability-indicator online" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "member-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h4", { children: member.displayName }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "member-status", children: member.isAvailable ? "Available" : `Last seen ${formatTimeAgo2(member.lastActive)}` }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: `trust-badge ${member.trustLevel}`, children: member.trustLevel })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => {
                  setSelectedMemberId(member.id);
                  setShowRequestModal(true);
                },
                disabled: !member.isAvailable,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(LinkIcon, {}),
                  "Tether"
                ]
              }
            )
          ] }, member.id)) })
        ] });
      };
      const renderPendingRequests = () => {
        if (pendingRequests.length === 0) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Card, { className: "pending-requests-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { children: "Pending Tether Requests" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "requests-list", children: pendingRequests.map((request) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-request", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "request-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h4", { children: request.fromName }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { children: request.message }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: `urgency-badge ${request.urgency}`, children: request.urgency })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "request-actions", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                AppButton,
                {
                  variant: "primary",
                  size: "sm",
                  onClick: () => acceptTetherRequest(request.id),
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(CheckCircleIcon, {}),
                    "Accept"
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                AppButton,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: () => {
                    setPendingRequests((prev) => prev.filter((r3) => r3.id !== request.id));
                  },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(XCircleIcon, {}),
                    "Decline"
                  ]
                }
              )
            ] })
          ] }, request.id)) })
        ] });
      };
      const renderQuickActions = () => {
        return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Card, { className: "quick-actions-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h2", { children: "Quick Actions" }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "action-buttons", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "primary",
                onClick: () => setShowRequestModal(true),
                disabled: !!activeTether,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(LinkIcon, {}),
                  "Request Tether"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "secondary",
                onClick: () => {
                  setRequestUrgency("critical");
                  setShowRequestModal(true);
                },
                disabled: !!activeTether,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(AlertCircleIcon2, {}),
                  "Crisis Tether"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "ghost",
                onClick: () => setShowInsightsModal(true),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ActivityIcon, {}),
                  "View Insights"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
              AppButton,
              {
                variant: "ghost",
                onClick: () => setShowSettingsModal(true),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(SettingsIcon, {}),
                  "Settings"
                ]
              }
            )
          ] })
        ] });
      };
      const formatDuration = (ms) => {
        const seconds = Math.floor(ms / 1e3);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        if (hours > 0) {
          return `${hours}h ${minutes % 60}m`;
        } else if (minutes > 0) {
          return `${minutes}m ${seconds % 60}s`;
        } else {
          return `${seconds}s`;
        }
      };
      const formatTimeAgo2 = (date5) => {
        const diff = Date.now() - date5.getTime();
        const minutes = Math.floor(diff / 6e4);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        if (days > 0) return `${days}d ago`;
        if (hours > 0) return `${hours}h ago`;
        if (minutes > 0) return `${minutes}m ago`;
        return "just now";
      };
      const getStrengthColor = (strength) => {
        if (strength < 0.3) return "#ff6b6b";
        if (strength < 0.7) return "#ffd93d";
        return "#6bcf7f";
      };
      const [isDemoMode, setIsDemoMode] = (0, import_react56.useState)(true);
      return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          ViewHeader,
          {
            title: "Astral Tether",
            subtitle: "Create meaningful connections during difficult moments"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-mode-toggle", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            AppButton,
            {
              variant: isDemoMode ? "primary" : "ghost",
              onClick: () => setIsDemoMode(true),
              children: "Demo Experience"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            AppButton,
            {
              variant: !isDemoMode ? "primary" : "ghost",
              onClick: () => setIsDemoMode(false),
              children: "Live Tether"
            }
          )
        ] }),
        isDemoMode ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(AstralTetherDemo, {}) : /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(Card, { className: "safety-notice", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "notice-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ShieldIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { children: "Tether Guidelines" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("ul", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("li", { children: "Tether connects you with trusted support during difficult times" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("li", { children: "Either person can initiate or end the connection" }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("li", { children: 'For emergencies, use "Get Help Now" or call emergency services' }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("li", { children: "Connections are private and encrypted" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Card, { className: "guided-experiences-section", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
            GuidedTetherExperience,
            {
              partnerName: activeTether?.partnerName,
              isConnected: !!activeTether,
              onExperienceComplete: (experienceId) => {
                addToast(`Completed ${experienceId} experience!`, "success");
              }
            }
          ) }),
          activeTether && renderActiveTether(),
          !activeTether && renderPendingRequests(),
          !activeTether && renderQuickActions(),
          !activeTether && renderTetherCircle()
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          Modal,
          {
            isOpen: showRequestModal,
            onClose: () => setShowRequestModal(false),
            title: "Request Tether Support",
            children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-request-form", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Select Circle Member (Optional)" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                  "select",
                  {
                    value: selectedMemberId,
                    onChange: (e4) => setSelectedMemberId(e4.target.value),
                    className: "form-select",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "", children: "Any available member" }),
                      tetherCircle.filter((m3) => m3.isAvailable).map((member) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: member.id, children: member.displayName }, member.id))
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                AppTextArea,
                {
                  label: "Message",
                  value: requestMessage,
                  onChange: (e4) => setRequestMessage(e4.target.value),
                  placeholder: "Let them know how you're feeling or what you need...",
                  rows: 4
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "urgency-selector", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Urgency Level" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "urgency-options", children: ["low", "medium", "high", "critical"].map((level) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  "button",
                  {
                    className: `urgency-option ${level} ${requestUrgency === level ? "selected" : ""}`,
                    onClick: () => setRequestUrgency(level),
                    children: level
                  },
                  level
                )) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "modal-actions", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  AppButton,
                  {
                    variant: "primary",
                    onClick: initiateTetherRequest,
                    children: "Send Request"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  AppButton,
                  {
                    variant: "ghost",
                    onClick: () => setShowRequestModal(false),
                    children: "Cancel"
                  }
                )
              ] })
            ] })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          Modal,
          {
            isOpen: showSettingsModal,
            onClose: () => setShowSettingsModal(false),
            title: "Tether Settings",
            children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "tether-settings", children: [
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Vibration Pattern" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                  "select",
                  {
                    value: tetherProfile.vibrationPattern,
                    onChange: (e4) => setTetherProfile((prev) => ({
                      ...prev,
                      vibrationPattern: e4.target.value
                    })),
                    className: "form-select",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "heartbeat", children: "Heartbeat" }),
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "wave", children: "Wave" }),
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "pulse", children: "Pulse" }),
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "custom", children: "Custom" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Color Theme" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "color-options", children: ["aurora", "sunset", "ocean", "forest"].map((theme) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  "button",
                  {
                    className: `color-option ${theme} ${tetherProfile.colorTheme === theme ? "selected" : ""}`,
                    onClick: () => setTetherProfile((prev) => ({ ...prev, colorTheme: theme })),
                    children: theme
                  },
                  theme
                )) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Breathing Pattern" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
                  "select",
                  {
                    value: tetherProfile.breathingPattern,
                    onChange: (e4) => setTetherProfile((prev) => ({
                      ...prev,
                      breathingPattern: e4.target.value
                    })),
                    className: "form-select",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "4-7-8", children: "4-7-8 Breathing" }),
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "box", children: "Box Breathing" }),
                      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("option", { value: "coherent", children: "Coherent Breathing" })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Auto-Escalation (minutes)" }),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  AppInput,
                  {
                    type: "number",
                    value: tetherProfile.autoEscalationMinutes.toString(),
                    onChange: (e4) => setTetherProfile((prev) => ({
                      ...prev,
                      autoEscalationMinutes: parseInt(e4.target.value) || 5
                    })),
                    min: "1",
                    max: "30"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "form-group", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("label", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  "input",
                  {
                    type: "checkbox",
                    checked: tetherProfile.silentMode,
                    onChange: (e4) => setTetherProfile((prev) => ({
                      ...prev,
                      silentMode: e4.target.checked
                    }))
                  }
                ),
                "Silent Mode (no sounds or vibrations)"
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("label", { children: "Comfort Messages" }),
                tetherProfile.comfortMessages.map((msg, idx) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  AppInput,
                  {
                    value: msg,
                    onChange: (e4) => {
                      const newMessages = [...tetherProfile.comfortMessages];
                      newMessages[idx] = e4.target.value;
                      setTetherProfile((prev) => ({ ...prev, comfortMessages: newMessages }));
                    },
                    placeholder: "Enter comfort message"
                  },
                  idx
                )),
                /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                  AppButton,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => setTetherProfile((prev) => ({
                      ...prev,
                      comfortMessages: [...prev.comfortMessages, ""]
                    })),
                    children: "Add Message"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "modal-actions", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
                AppButton,
                {
                  variant: "primary",
                  onClick: () => {
                    tetherService.current.saveComfortProfile(user?.sub || "", tetherProfile);
                    setShowSettingsModal(false);
                    addToast("Settings saved", "success");
                  },
                  children: "Save Settings"
                }
              ) })
            ] })
          }
        )
      ] });
    };
    TetherView_default = TetherView;
  }
});

// src/views/WellnessVideosView.tsx
var WellnessVideosView_exports = {};
__export(WellnessVideosView_exports, {
  WellnessVideosView: () => WellnessVideosView,
  default: () => WellnessVideosView_default
});
var import_react57, import_jsx_runtime57, localVideos, WellnessVideosView, WellnessVideosView_default;
var init_WellnessVideosView = __esm({
  "src/views/WellnessVideosView.tsx"() {
    "use strict";
    import_react57 = __toESM(require_react());
    init_icons_dynamic();
    init_NotificationContext();
    init_ErrorState();
    init_LoadingSpinner();
    import_jsx_runtime57 = __toESM(require_jsx_runtime());
    localVideos = [
      {
        id: "local-1",
        title: "Be Yourself",
        description: "Inspirational message from Ted Lasso about being authentic",
        videoUrl: "/Videos/Be%20Yourself%20%20Ted%20Lasso.mp4",
        thumbnailUrl: "",
        duration: "0:30",
        category: "Inspiration",
        tags: ["motivation", "authenticity", "self-love"],
        uploadedBy: "Local Content",
        uploadedAt: (/* @__PURE__ */ new Date()).toISOString(),
        views: 0,
        likes: 0
      },
      {
        id: "local-2",
        title: "The Best Quote Ever",
        description: "A powerful quote to inspire and motivate",
        videoUrl: "/Videos/The%20Best%20Quote%20Ever.mp4",
        thumbnailUrl: "",
        duration: "0:45",
        category: "Inspiration",
        tags: ["quotes", "wisdom", "motivation"],
        uploadedBy: "Local Content",
        uploadedAt: (/* @__PURE__ */ new Date()).toISOString(),
        views: 0,
        likes: 0
      },
      {
        id: "local-3",
        title: "Wellness Video 1",
        description: "Calming content for mental wellness",
        videoUrl: "/Videos/videoplayback%20(2).mp4",
        thumbnailUrl: "",
        duration: "1:00",
        category: "Wellness",
        tags: ["calm", "relaxation", "peace"],
        uploadedBy: "Local Content",
        uploadedAt: (/* @__PURE__ */ new Date()).toISOString(),
        views: 0,
        likes: 0
      },
      {
        id: "local-4",
        title: "Wellness Video 2",
        description: "Mindfulness and meditation guidance",
        videoUrl: "/Videos/videoplayback%20(3).mp4",
        thumbnailUrl: "",
        duration: "1:00",
        category: "Meditation",
        tags: ["mindfulness", "meditation", "breathing"],
        uploadedBy: "Local Content",
        uploadedAt: (/* @__PURE__ */ new Date()).toISOString(),
        views: 0,
        likes: 0
      },
      {
        id: "local-5",
        title: "Wellness Video 3",
        description: "Stress relief and relaxation techniques",
        videoUrl: "/Videos/videoplayback%20(4).mp4",
        thumbnailUrl: "",
        duration: "1:00",
        category: "Stress Relief",
        tags: ["stress", "relaxation", "techniques"],
        uploadedBy: "Local Content",
        uploadedAt: (/* @__PURE__ */ new Date()).toISOString(),
        views: 0,
        likes: 0
      }
    ];
    WellnessVideosView = ({ setActiveView }) => {
      const [videos, setVideos] = (0, import_react57.useState)([]);
      const [currentVideoIndex, setCurrentVideoIndex] = (0, import_react57.useState)(0);
      const [isLoading, setIsLoading] = (0, import_react57.useState)(true);
      const [error44, setError] = (0, import_react57.useState)(null);
      const [isPlaying, setIsPlaying] = (0, import_react57.useState)(true);
      const [isMuted, setIsMuted] = (0, import_react57.useState)(false);
      const [likedVideos, setLikedVideos] = (0, import_react57.useState)(/* @__PURE__ */ new Set());
      const [savedVideos, setSavedVideos] = (0, import_react57.useState)(/* @__PURE__ */ new Set());
      const [_showControls, _setShowControls] = (0, import_react57.useState)(false);
      const videoRefs = (0, import_react57.useRef)([]);
      const containerRef = (0, import_react57.useRef)(null);
      const touchStartY = (0, import_react57.useRef)(0);
      const { addToast } = useNotification();
      const fetchVideos = (0, import_react57.useCallback)(async () => {
        setIsLoading(true);
        setError(null);
        try {
          setVideos(localVideos);
        } catch (error45) {
          console.error("Failed to load wellness videos:", error45);
          setVideos(localVideos);
        } finally {
          setIsLoading(false);
        }
      }, []);
      (0, import_react57.useEffect)(() => {
        fetchVideos();
      }, [fetchVideos]);
      const handleScroll = (0, import_react57.useCallback)((e4) => {
        const container = e4.currentTarget;
        const scrollPosition = container.scrollTop;
        const videoHeight = container.clientHeight;
        const newIndex = Math.round(scrollPosition / videoHeight);
        if (newIndex !== currentVideoIndex && newIndex >= 0 && newIndex < videos.length) {
          setCurrentVideoIndex(newIndex);
          videoRefs.current.forEach((video) => {
            if (video) {
              video.pause();
              video.currentTime = 0;
            }
          });
          setTimeout(() => {
            const newVideo = videoRefs.current[newIndex];
            if (newVideo && isPlaying) {
              newVideo.play().catch((err) => console.error("Video play failed:", err));
            }
          }, 100);
        }
      }, [currentVideoIndex, videos.length, isPlaying]);
      const handleTouchStart = (e4) => {
        touchStartY.current = e4.touches[0].clientY;
      };
      const handleTouchEnd = (e4) => {
        const touchEndY = e4.changedTouches[0].clientY;
        const diff = touchStartY.current - touchEndY;
        const threshold = 50;
        if (Math.abs(diff) > threshold) {
          if (diff > 0 && currentVideoIndex < videos.length - 1) {
            goToVideo(currentVideoIndex + 1);
          } else if (diff < 0 && currentVideoIndex > 0) {
            goToVideo(currentVideoIndex - 1);
          }
        }
      };
      const goToVideo = (index2) => {
        if (index2 >= 0 && index2 < videos.length && containerRef.current) {
          setCurrentVideoIndex(index2);
          containerRef.current.scrollTo({
            top: index2 * containerRef.current.clientHeight,
            behavior: "smooth"
          });
        }
      };
      const togglePlayPause = () => {
        const currentVideo = videoRefs.current[currentVideoIndex];
        if (currentVideo) {
          if (isPlaying) {
            currentVideo.pause();
            setIsPlaying(false);
          } else {
            currentVideo.play().catch((err) => console.error("Video play failed:", err));
            setIsPlaying(true);
          }
        }
      };
      const toggleMute = () => {
        const currentVideo = videoRefs.current[currentVideoIndex];
        if (currentVideo) {
          currentVideo.muted = !isMuted;
          setIsMuted(!isMuted);
        }
      };
      (0, import_react57.useEffect)(() => {
        const currentVideo = videoRefs.current[currentVideoIndex];
        if (currentVideo && isPlaying) {
          currentVideo.play().catch((err) => console.error("Video play failed:", err));
        }
      }, [currentVideoIndex, isPlaying]);
      (0, import_react57.useEffect)(() => {
        const handleKeyDown = (e4) => {
          switch (e4.key) {
            case "Escape":
              exitVideoPlayer();
              break;
            case "ArrowUp":
              e4.preventDefault();
              if (currentVideoIndex > 0) {
                goToVideo(currentVideoIndex - 1);
              }
              break;
            case "ArrowDown":
              e4.preventDefault();
              if (currentVideoIndex < videos.length - 1) {
                goToVideo(currentVideoIndex + 1);
              }
              break;
            case " ":
              e4.preventDefault();
              togglePlayPause();
              break;
            case "m":
            case "M":
              e4.preventDefault();
              toggleMute();
              break;
          }
        };
        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
      }, [currentVideoIndex, videos.length]);
      const toggleLike = (videoId) => {
        const newLikedVideos = new Set(likedVideos);
        if (newLikedVideos.has(videoId)) {
          newLikedVideos.delete(videoId);
          addToast("Removed from liked videos", "info");
        } else {
          newLikedVideos.add(videoId);
          addToast("Added to liked videos! \u{1F49C}", "success");
        }
        setLikedVideos(newLikedVideos);
      };
      const toggleSave = (videoId) => {
        const newSavedVideos = new Set(savedVideos);
        if (newSavedVideos.has(videoId)) {
          newSavedVideos.delete(videoId);
          addToast("Removed from saved videos", "info");
        } else {
          newSavedVideos.add(videoId);
          addToast("Video saved! \u{1F31F}", "success");
        }
        setSavedVideos(newSavedVideos);
      };
      const shareVideo = (video) => {
        if (navigator.share) {
          navigator.share({
            title: video.description.split(":")[0],
            text: video.description,
            url: window.location.href
          }).catch(() => {
            addToast("Share cancelled", "info");
          });
        } else {
          navigator.clipboard.writeText(window.location.href);
          addToast("Link copied to clipboard!", "success");
        }
      };
      const exitVideoPlayer = () => {
        videoRefs.current.forEach((video) => {
          if (video) {
            video.pause();
            video.currentTime = 0;
          }
        });
        setActiveView?.("wellness-tracking");
      };
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-video-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "div",
          {
            ref: containerRef,
            className: "tiktok-video-scroll",
            onScroll: handleScroll,
            onTouchStart: handleTouchStart,
            onTouchEnd: handleTouchEnd,
            children: videos.map((video, index2) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-video-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                "video",
                {
                  ref: (el) => videoRefs.current[index2] = el,
                  src: video.videoUrl,
                  className: "tiktok-video-player",
                  loop: true,
                  muted: isMuted,
                  playsInline: true,
                  autoPlay: index2 === 0,
                  onClick: togglePlayPause,
                  onLoadedData: () => {
                    if (index2 === currentVideoIndex && isPlaying) {
                      videoRefs.current[index2]?.play().catch((err) => console.error("Video play failed:", err));
                    }
                  },
                  onError: (e4) => {
                    console.error(`Video failed to load: ${video.videoUrl}`, e4);
                    addToast("Video temporarily unavailable", "warning");
                  },
                  onLoadStart: () => {
                  }
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-video-overlay", children: [
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                  "button",
                  {
                    className: "video-back-button",
                    onClick: exitVideoPlayer,
                    "aria-label": "Go back to wellness videos",
                    children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(BackIcon, {})
                  }
                ),
                !isPlaying && index2 === currentVideoIndex && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-play-indicator", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(PlayIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-top-controls", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                  "button",
                  {
                    className: "tiktok-control-btn",
                    onClick: toggleMute,
                    children: isMuted ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(MicOffIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(VolumeIcon, {})
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-bottom-info", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-video-info", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-creator", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(SparkleIcon, {}),
                    /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("span", { children: [
                      "@",
                      video.userToken
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("h3", { className: "tiktok-video-title", children: video.description.split(":")[0] }),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("p", { className: "tiktok-video-description", children: video.description.split(":")[1] || video.description })
                ] }) }),
                /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("div", { className: "tiktok-actions-sidebar", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
                    "button",
                    {
                      className: `tiktok-action-btn ${likedVideos.has(video.id) ? "liked" : ""}`,
                      onClick: () => toggleLike(video.id),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-action-icon", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(HeartIcon2, {}) }),
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "tiktok-action-count", children: video.likes + (likedVideos.has(video.id) ? 1 : 0) })
                      ]
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
                    "button",
                    {
                      className: "tiktok-action-btn",
                      onClick: () => addToast("Comments coming soon!", "info"),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-action-icon", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(CommentIcon, {}) }),
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "tiktok-action-count", children: video.comments })
                      ]
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
                    "button",
                    {
                      className: "tiktok-action-btn",
                      onClick: () => shareVideo(video),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-action-icon", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ShareIcon, {}) }),
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "tiktok-action-count", children: video.shares })
                      ]
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
                    "button",
                    {
                      className: `tiktok-action-btn ${savedVideos.has(video.id) ? "saved" : ""}`,
                      onClick: () => toggleSave(video.id),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-action-icon", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(BookmarkIcon, {}) }),
                        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("span", { className: "tiktok-action-count", children: "Save" })
                      ]
                    }
                  )
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-progress-indicators", children: videos.map((_3, idx) => /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
                  "div",
                  {
                    className: `tiktok-progress-dot ${idx === currentVideoIndex ? "active" : ""}`,
                    onClick: () => goToVideo(idx)
                  },
                  idx
                )) })
              ] })
            ] }, video.id))
          }
        ),
        isLoading && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-loading-overlay", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(LoadingSpinner_default, { size: "large", message: "Loading wellness videos" }) }),
        error44 && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "tiktok-error-overlay", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          ErrorState_default,
          {
            message: error44,
            onRetry: fetchVideos
          }
        ) })
      ] });
    };
    WellnessVideosView_default = WellnessVideosView;
  }
});

// src/components/AnimatedNumber.tsx
var import_react58, import_jsx_runtime58, AnimatedNumber;
var init_AnimatedNumber = __esm({
  "src/components/AnimatedNumber.tsx"() {
    "use strict";
    import_react58 = __toESM(require_react());
    import_jsx_runtime58 = __toESM(require_jsx_runtime());
    AnimatedNumber = ({
      value,
      duration: duration3 = 500,
      formatter = (n3) => n3.toString(),
      className = ""
    }) => {
      const [displayValue, setDisplayValue] = (0, import_react58.useState)(value);
      const [isAnimating, setIsAnimating] = (0, import_react58.useState)(false);
      (0, import_react58.useEffect)(() => {
        if (displayValue === value) return;
        setIsAnimating(true);
        const startValue = displayValue;
        const difference = value - startValue;
        const startTime = Date.now();
        const animate = () => {
          const elapsed = Date.now() - startTime;
          const progress = Math.min(elapsed / duration3, 1);
          const easeOut = 1 - Math.pow(1 - progress, 3);
          const currentValue = Math.round(startValue + difference * easeOut);
          setDisplayValue(currentValue);
          if (progress < 1) {
            requestAnimationFrame(animate);
          } else {
            setIsAnimating(false);
          }
        };
        requestAnimationFrame(animate);
      }, [value, duration3, displayValue]);
      return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        "output",
        {
          className: `animated-number${isAnimating ? " animating" : ""} ${className}`,
          "aria-live": "polite",
          "aria-label": `Current value: ${formatter(displayValue)}`,
          children: formatter(displayValue)
        }
      );
    };
    AnimatedNumber.displayName = "AnimatedNumber";
  }
});

// src/components/XPBar.tsx
var import_jsx_runtime59, XPBar;
var init_XPBar = __esm({
  "src/components/XPBar.tsx"() {
    "use strict";
    import_jsx_runtime59 = __toESM(require_jsx_runtime());
    XPBar = ({ currentXp = 0, nextLevelXp = 0, level = 1 }) => {
      const safeCurrentXp = currentXp ?? 0;
      const safeNextLevelXp = nextLevelXp ?? 0;
      const safeLevel = level ?? 1;
      const progressPercentage = safeNextLevelXp > 0 ? safeCurrentXp / safeNextLevelXp * 100 : 0;
      return /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("div", { className: "xp-bar-text", style: { position: "static", padding: 0, mixBlendMode: "normal", color: "var(--text-secondary)" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { children: [
            "Level ",
            safeLevel
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)("span", { children: [
            safeCurrentXp.toLocaleString(),
            " / ",
            safeNextLevelXp.toLocaleString(),
            " XP"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "xp-bar", title: `Level ${safeLevel} Progress`, children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          "div",
          {
            className: "xp-bar-fill",
            style: { width: `${progressPercentage}%` }
          }
        ) })
      ] });
    };
  }
});

// src/utils/truncateText.ts
var truncateText;
var init_truncateText = __esm({
  "src/utils/truncateText.ts"() {
    "use strict";
    truncateText = (text5, maxLength, suffix = "...") => {
      if (!text5 || text5.length <= maxLength) {
        return text5 || "";
      }
      return text5.slice(0, maxLength) + suffix;
    };
  }
});

// src/views/HelperDashboardView.tsx
var import_react59, import_jsx_runtime60, iconMap, HelperDashboardView, HelperDashboardView_default;
var init_HelperDashboardView = __esm({
  "src/views/HelperDashboardView.tsx"() {
    "use strict";
    import_react59 = __toESM(require_react());
    init_LazyMarkdown();
    init_PostCard();
    init_icons_dynamic();
    init_AppButton();
    init_AnimatedNumber();
    init_ApiClient();
    init_AuthContext();
    init_XPBar();
    init_Modal();
    init_truncateText();
    init_dilemmaStore();
    init_sessionStore();
    init_chatStore();
    init_EmptyState();
    import_jsx_runtime60 = __toESM(require_jsx_runtime());
    iconMap = {
      HeartIcon: HeartIcon2,
      PostsIcon,
      KudosIcon
    };
    HelperDashboardView = ({ setActiveView }) => {
      const { helperProfile, updateHelperProfile } = useAuth();
      const { allDilemmas, acceptDilemma, summarizeDilemma, declineRequest } = useDilemmaStore();
      const { helpSessions, generateHelperPerformanceSummary, startVideoChat } = useSessionStore();
      const { startChat } = useChatStore();
      const [activeTab, setActiveTab] = (0, import_react59.useState)("forYou");
      const [feedbackCount, setFeedbackCount] = (0, import_react59.useState)(0);
      const [_isLoadingFeedback, setIsLoadingFeedback] = (0, import_react59.useState)(true);
      const [matchedDilemmas, setMatchedDilemmas] = (0, import_react59.useState)([]);
      const [achievements, setAchievements] = (0, import_react59.useState)([]);
      const [isLoadingAchievements, setIsLoadingAchievements] = (0, import_react59.useState)(false);
      const [isSummaryModalOpen, setIsSummaryModalOpen] = (0, import_react59.useState)(false);
      const [selectedSummary, setSelectedSummary] = (0, import_react59.useState)("");
      const helperId = helperProfile?.id;
      const isAvailable = helperProfile?.isAvailable || false;
      const onToggleAvailability = async (isAvailable2) => {
        if (!helperProfile?.id) return;
        try {
          const updatedProfile = await ApiClient.helpers.setAvailability(helperProfile.id, isAvailable2);
          updateHelperProfile(updatedProfile);
        } catch (error44) {
          console.error("Failed to set helper availability", error44);
        }
      };
      const handleSummarize = async (dilemmaId) => {
        await summarizeDilemma(dilemmaId);
      };
      (0, import_react59.useEffect)(() => {
        if (helperId && activeTab === "stats") {
          setIsLoadingFeedback(true);
          ApiClient.feedback.getFeedbackForHelper(helperId).then((feedback) => setFeedbackCount(feedback.length)).catch((err) => console.error("Failed to load feedback count", err)).finally(() => setIsLoadingFeedback(false));
        }
      }, [helperId, activeTab]);
      (0, import_react59.useEffect)(() => {
        if (helperId && activeTab === "achievements") {
          setIsLoadingAchievements(true);
          ApiClient.helpers.getHelperAchievements(helperId).then(setAchievements).catch((err) => console.error("Failed to load achievements", err)).finally(() => setIsLoadingAchievements(false));
        }
      }, [helperId, activeTab]);
      const fetchMatchedDilemmas = (0, import_react59.useCallback)(async () => {
        if (helperProfile && isAvailable) {
          try {
            const matched = await ApiClient.ai.getAiMatchedDilemmas(helperProfile, allDilemmas);
            setMatchedDilemmas(matched);
          } catch (error44) {
            console.error("Failed to fetch matched dilemmas", error44);
          }
        } else {
          setMatchedDilemmas([]);
        }
      }, [helperProfile, isAvailable, allDilemmas]);
      (0, import_react59.useEffect)(() => {
        if (activeTab === "forYou") {
          fetchMatchedDilemmas();
        }
      }, [activeTab, fetchMatchedDilemmas]);
      const directRequests = (0, import_react59.useMemo)(
        () => allDilemmas.filter((d3) => d3.status === "direct_request" && d3.requestedHelperId === helperId).sort((a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime()),
        [allDilemmas, helperId]
      );
      const availableDilemmas = (0, import_react59.useMemo)(
        () => allDilemmas.filter((d3) => d3.status === "active" && !d3.isReported && !d3.assignedHelperId).sort((a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime()),
        [allDilemmas]
      );
      const myDilemmas = (0, import_react59.useMemo)(
        () => allDilemmas.filter((d3) => d3.assignedHelperId === helperId && d3.status === "in_progress").sort((a3, b3) => new Date(b3.timestamp).getTime() - new Date(a3.timestamp).getTime()),
        [allDilemmas, helperId]
      );
      const myPastSessions = (0, import_react59.useMemo)(
        () => helpSessions.filter((s3) => s3.helperId === helperId && s3.endedAt).sort((a3, b3) => new Date(b3.endedAt).getTime() - new Date(a3.endedAt).getTime()),
        [helpSessions, helperId]
      );
      const supportedPostsCount = (0, import_react59.useMemo)(
        () => helpSessions.filter((s3) => s3.helperId === helperId).length,
        [helpSessions, helperId]
      );
      const viewSummary = (summary) => {
        setSelectedSummary(summary);
        setIsSummaryModalOpen(true);
      };
      if (!helperProfile) {
        return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "loading-spinner", style: { margin: "5rem auto" } });
      }
      const renderTabContent = () => {
        if (!isAvailable && ["forYou", "requests", "available"].includes(activeTab)) {
          return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EmptyState, { title: "You are Offline", message: "Go online to see and accept new dilemmas from the community." }) });
        }
        switch (activeTab) {
          case "forYou":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("ul", { className: "posts-list", children: matchedDilemmas.length > 0 ? matchedDilemmas.map((d3) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PostCard, { dilemma: d3, isHelperView: true, onAcceptDilemma: acceptDilemma, aiMatchReason: d3.aiMatchReason, onSummarize: handleSummarize }, d3.id)) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EmptyState, { title: "No Matches Found", message: "No specific dilemmas match your expertise right now. Check the 'Available' tab for all posts." }) }) });
          case "requests":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("ul", { className: "posts-list", children: directRequests.length > 0 ? directRequests.map((d3) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PostCard, { dilemma: d3, isHelperView: true, onAcceptDilemma: acceptDilemma, onDeclineRequest: declineRequest, onSummarize: handleSummarize }, d3.id)) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EmptyState, { title: "No Direct Requests", message: "You have no direct requests from seekers right now." }) }) });
          case "available":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("ul", { className: "posts-list", children: availableDilemmas.length > 0 ? availableDilemmas.map((d3) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PostCard, { dilemma: d3, isHelperView: true, onAcceptDilemma: acceptDilemma, onSummarize: handleSummarize }, d3.id)) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EmptyState, { title: "All Caught Up!", message: "No dilemmas currently need support. Great job, team!" }) }) });
          case "myDilemmas":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("ul", { className: "posts-list", children: myDilemmas.length > 0 ? myDilemmas.map((d3) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PostCard, { dilemma: d3, isHelperView: true, onStartChat: () => startChat(d3.id, "helper"), onStartVideoChat: startVideoChat }, d3.id)) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(EmptyState, { title: "No Active Dilemmas", message: 'Accept one from the "Available" tab to start a conversation!' }) }) });
          case "history":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "card", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("ul", { style: { listStyle: "none", padding: 0 }, children: myPastSessions.length > 0 ? myPastSessions.map((session) => /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("li", { className: "setting-item", style: { padding: "1rem", borderBottom: "1px solid var(--border-color)" }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("p", { style: { fontWeight: "bold" }, children: [
                  "Chat with Seeker (",
                  truncateText(session.seekerId, 12),
                  ")"
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("small", { children: [
                  "Ended on ",
                  new Date(session.endedAt).toLocaleDateString()
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "form-actions-group", children: session.helperSummaryLoading ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "loading-spinner", style: { width: "16px", height: "16px", margin: "0 0.5rem" } }) : session.helperSummary ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { variant: "secondary", className: "btn-sm", onClick: () => viewSummary(session.helperSummary), children: "View Feedback" }) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { variant: "ghost", className: "btn-sm", onClick: () => generateHelperPerformanceSummary(session.id), children: "Get AI Feedback" }) })
            ] }, session.id)) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: "You have no completed sessions yet." }) }) });
          case "stats":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stats-grid", children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card stat-card", children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-header", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ThumbsUpIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { children: "Reputation Score" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-number", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AnimatedNumber, { value: helperProfile.reputation }),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { style: { fontSize: "1.5rem", color: "var(--text-secondary)" }, children: "/ 5.0" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("p", { children: [
                  "Based on ",
                  feedbackCount,
                  " user feedback ratings."
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card stat-card", children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-header", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(PostsIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { children: "Posts Supported" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "stat-number", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AnimatedNumber, { value: supportedPostsCount }) }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: "Total posts you've engaged with." })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card stat-card", children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-header", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(KudosIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { children: "Kudos Received" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "stat-number", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AnimatedNumber, { value: helperProfile.kudosCount || 0 }) }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: `Total "Kudos" from seekers you've helped.` })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card stat-card", children: [
                /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-header", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(CertifiedIcon, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { children: "Tier" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "stat-number text", children: helperProfile.helperType }),
                /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: "Completed training & verification" })
              ] })
            ] });
          case "achievements":
            return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card", children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h2", { children: "My Achievements" }),
              isLoadingAchievements ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "loading-spinner" }) : achievements.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "stats-grid", children: achievements.map((ach) => {
                const Icon2 = iconMap[ach.icon] || HeartIcon2;
                return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card stat-card", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "stat-header", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Icon2, {}),
                    /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h3", { children: ach.name })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: ach.description })
                ] }, ach.id);
              }) }) : /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("p", { children: "You haven't earned any achievements yet. Keep supporting the community!" })
            ] });
          default:
            return null;
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(import_jsx_runtime60.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Modal, { isOpen: isSummaryModalOpen, onClose: () => setIsSummaryModalOpen(false), title: "Your Private Performance Feedback", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "markdown-content", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(LazyMarkdown, { autoLoad: true, children: selectedSummary }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "view-header", style: { display: "flex", justifyContent: "space-between", alignItems: "center", flexWrap: "wrap", gap: "1rem" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("h1", { children: "Helper Dashboard" }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("p", { className: "view-subheader", children: [
              "Welcome, ",
              helperProfile.displayName,
              ". Your current level is ",
              helperProfile.level,
              "."
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { onClick: () => setActiveView({ view: "helper-profile" }), children: "Edit Profile" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(XPBar, { currentXp: helperProfile.xp, nextLevelXp: helperProfile.nextLevelXp, level: helperProfile.level }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "card setting-item", style: { marginBottom: "1.5rem" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("label", { htmlFor: "availability-toggle", style: { fontWeight: 700, fontSize: "1.1rem", color: isAvailable ? "var(--accent-success)" : "var(--text-secondary)" }, children: isAvailable ? "You are Online" : "You are Offline" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "theme-toggle", children: [
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("input", { type: "checkbox", id: "availability-toggle", checked: isAvailable, onChange: (e4) => onToggleAvailability(e4.target.checked) }),
            /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("label", { htmlFor: "availability-toggle", className: "slider" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("div", { className: "dashboard-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { className: activeTab === "forYou" ? "active" : "", onClick: () => setActiveTab("forYou"), children: "For You" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(AppButton, { className: activeTab === "requests" ? "active" : "", onClick: () => setActiveTab("requests"), children: [
            "Requests (",
            directRequests.length,
            ")"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(AppButton, { className: activeTab === "available" ? "active" : "", onClick: () => setActiveTab("available"), children: [
            "Available (",
            availableDilemmas.length,
            ")"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(AppButton, { className: activeTab === "myDilemmas" ? "active" : "", onClick: () => setActiveTab("myDilemmas"), children: [
            "My Active (",
            myDilemmas.length,
            ")"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { className: activeTab === "history" ? "active" : "", onClick: () => setActiveTab("history"), children: "Session History" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { className: activeTab === "stats" ? "active" : "", onClick: () => setActiveTab("stats"), children: "My Stats" }),
          /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(AppButton, { className: activeTab === "achievements" ? "active" : "", onClick: () => setActiveTab("achievements"), children: "Achievements" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "dashboard-content", children: renderTabContent() })
      ] });
    };
    HelperDashboardView_default = HelperDashboardView;
  }
});

// src/routes/HelperDashboardRoute.tsx
var HelperDashboardRoute_exports = {};
__export(HelperDashboardRoute_exports, {
  default: () => HelperDashboardRoute_default
});
var import_jsx_runtime61, HelperDashboardRoute, HelperDashboardRoute_default;
var init_HelperDashboardRoute = __esm({
  "src/routes/HelperDashboardRoute.tsx"() {
    "use strict";
    init_HelperDashboardView();
    init_dist();
    import_jsx_runtime61 = __toESM(require_jsx_runtime());
    HelperDashboardRoute = () => {
      const navigate = useNavigate();
      const handleSetActiveView = (view) => {
        const routeMap = {
          "dashboard": "/helper/dashboard",
          "profile": "/helper/profile",
          "training": "/helper/training",
          "application": "/helper/application",
          "community": "/helper/community",
          "settings": "/settings"
        };
        const route = routeMap[view] || "/helper/dashboard";
        navigate(route);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
        HelperDashboardView_default,
        {
          setActiveView: handleSetActiveView
        }
      );
    };
    HelperDashboardRoute_default = HelperDashboardRoute;
  }
});

// src/views/HelperProfileView.tsx
var import_react60, import_jsx_runtime62, EXPERTISE_OPTIONS, HelperProfileView, HelperProfileView_default;
var init_HelperProfileView = __esm({
  "src/views/HelperProfileView.tsx"() {
    "use strict";
    import_react60 = __toESM(require_react());
    init_AuthContext();
    init_ApiClient();
    init_AppButton();
    init_AppInput();
    init_Card();
    import_jsx_runtime62 = __toESM(require_jsx_runtime());
    EXPERTISE_OPTIONS = [
      "Anxiety & Stress",
      "Depression",
      "Grief & Loss",
      "Relationships",
      "Family Issues",
      "Loneliness",
      "Self-Esteem",
      "Academic/Work Stress"
    ];
    HelperProfileView = ({ onProfileUpdated, setActiveView }) => {
      const { helperProfile, reloadProfile } = useAuth();
      const [isEditing, setIsEditing] = (0, import_react60.useState)(false);
      const [displayName, setDisplayName] = (0, import_react60.useState)("");
      const [expertise, setExpertise] = (0, import_react60.useState)([]);
      const [bio, setBio] = (0, import_react60.useState)("");
      const [isSubmitting, setIsSubmitting] = (0, import_react60.useState)(false);
      const [error44, setError] = (0, import_react60.useState)("");
      (0, import_react60.useEffect)(() => {
        if (helperProfile) {
          setDisplayName(helperProfile.displayName);
          setExpertise(helperProfile.expertise || []);
          setBio(helperProfile.bio || "");
        }
      }, [helperProfile]);
      const handleExpertiseChange = (option) => {
        setExpertise(
          (prev) => prev.includes(option) ? prev.filter((item) => item !== option) : [...prev, option]
        );
      };
      const handleSave = async (e4) => {
        e4.preventDefault();
        if (!helperProfile) return;
        setError("");
        if (!displayName.trim()) {
          setError("Display name cannot be empty.");
          return;
        }
        setIsSubmitting(true);
        try {
          await ApiClient.helpers.updateProfile(helperProfile.id, { displayName, expertise, bio });
          await reloadProfile();
          onProfileUpdated();
          setIsEditing(false);
        } catch (err) {
          setError(err.message || "Failed to update profile.");
        } finally {
          setIsSubmitting(false);
        }
      };
      const handleCancel = () => {
        if (helperProfile) {
          setDisplayName(helperProfile.displayName);
          setExpertise(helperProfile.expertise);
          setBio(helperProfile.bio || "");
        }
        setIsEditing(false);
        setError("");
      };
      if (!helperProfile) {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "loading-spinner", style: { margin: "5rem auto" } });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "view-header", style: { display: "flex", justifyContent: "space-between", alignItems: "center" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h1", { children: "My Helper Profile" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "view-subheader", children: "Manage your public information." })
          ] }),
          !isEditing && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AppButton, { onClick: () => setIsEditing(true), children: "Edit Profile" })
        ] }),
        helperProfile.helperType !== "Certified" && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(Card, { className: "setting-item", style: { marginBottom: "1.5rem" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("h3", { style: { margin: "0 0 0.25rem 0" }, children: "Become a Certified Helper" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { style: { fontSize: "0.9rem", color: "var(--text-secondary)", marginRight: "1rem" }, children: "Complete our training to build trust within the community and qualify to help with more sensitive cases." })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AppButton, { variant: "success", onClick: () => setActiveView("helper-application"), children: "View Application" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("form", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
            AppInput,
            {
              label: "Public Display Name",
              id: "displayName",
              type: "text",
              value: displayName,
              onChange: (e4) => setDisplayName(e4.target.value),
              disabled: !isEditing
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
            AppTextArea,
            {
              label: "Public Bio",
              id: "bio",
              value: bio,
              onChange: (e4) => setBio(e4.target.value),
              disabled: !isEditing,
              rows: 4,
              maxLength: 500
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "form-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("label", { children: "Areas of Expertise" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "expertise-options", style: { display: "flex", flexWrap: "wrap", gap: "0.5rem", marginTop: "0.5rem" }, children: EXPERTISE_OPTIONS.map((option) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "radio-group", children: [
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
                "input",
                {
                  type: "checkbox",
                  id: `expertise-edit-${option}`,
                  name: "expertise",
                  value: option,
                  checked: expertise.includes(option),
                  onChange: () => isEditing && handleExpertiseChange(option),
                  disabled: !isEditing
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("label", { htmlFor: `expertise-edit-${option}`, children: option })
            ] }, option)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "form-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("label", { children: "Helper Tier" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { style: { padding: "0.8rem 1rem", border: "1px solid var(--border-color)", borderRadius: "8px", backgroundColor: "var(--bg-tertiary)" }, children: helperProfile.helperType })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "form-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("label", { children: "Reputation Score" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { style: { padding: "0.8rem 1rem", border: "1px solid var(--border-color)", borderRadius: "8px", backgroundColor: "var(--bg-tertiary)" }, children: helperProfile.reputation.toFixed(2) })
          ] }),
          error44 && /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { className: "api-error", style: { marginBottom: "1rem" }, children: error44 }),
          isEditing && /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "form-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AppButton, { variant: "secondary", onClick: handleCancel, disabled: isSubmitting, children: "Cancel" }),
            /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { className: "form-actions-group", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(AppButton, { type: "submit", onClick: handleSave, isLoading: isSubmitting, disabled: isSubmitting, children: "Save Changes" }) })
          ] })
        ] }) })
      ] });
    };
    HelperProfileView_default = HelperProfileView;
  }
});

// src/routes/HelperProfileRoute.tsx
var HelperProfileRoute_exports = {};
__export(HelperProfileRoute_exports, {
  default: () => HelperProfileRoute_default
});
var import_jsx_runtime63, HelperProfileRoute, HelperProfileRoute_default;
var init_HelperProfileRoute = __esm({
  "src/routes/HelperProfileRoute.tsx"() {
    "use strict";
    init_HelperProfileView();
    init_dist();
    import_jsx_runtime63 = __toESM(require_jsx_runtime());
    HelperProfileRoute = () => {
      const navigate = useNavigate();
      const handleProfileUpdated = () => {
        console.log("Helper profile updated");
      };
      const handleSetActiveView = (view) => {
        const routeMap = {
          "dashboard": "/helper/dashboard",
          "profile": "/helper/profile",
          "training": "/helper/training",
          "application": "/helper/application",
          "community": "/helper/community",
          "settings": "/settings"
        };
        const route = routeMap[view] || "/helper/profile";
        navigate(route);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
        HelperProfileView_default,
        {
          onProfileUpdated: handleProfileUpdated,
          setActiveView: handleSetActiveView
        }
      );
    };
    HelperProfileRoute_default = HelperProfileRoute;
  }
});

// src/views/HelperTrainingView.tsx
var import_react61, import_jsx_runtime64, lessons, quizQuestions, HelperTrainingView, HelperTrainingView_default;
var init_HelperTrainingView = __esm({
  "src/views/HelperTrainingView.tsx"() {
    "use strict";
    import_react61 = __toESM(require_react());
    init_AppButton();
    init_Card();
    init_ApiClient();
    init_AuthContext();
    init_NotificationContext();
    import_jsx_runtime64 = __toESM(require_jsx_runtime());
    lessons = [
      {
        title: "Lesson 1: The Role of a Peer Supporter",
        content: "Your role is to listen, validate, and support. You are not a therapist. Avoid giving advice or trying to 'fix' someone's problem. Your presence and empathy are the most powerful tools you have."
      },
      {
        title: "Lesson 2: Active Listening",
        content: "Active listening means focusing completely on what is being said. Paraphrase what you hear to show you understand (e.g., 'It sounds like you're feeling...'). Ask open-ended questions to encourage sharing (e.g., 'How did that make you feel?')."
      },
      {
        title: "Lesson 3: Maintaining Boundaries & Anonymity",
        content: "Never ask for or share personal identifying information (names, locations, social media). Keep the focus on the seeker's experience. If a conversation becomes inappropriate or you feel uncomfortable, you have the right to end it and report the user."
      },
      {
        title: "Lesson 4: Crisis Recognition",
        content: "While you are not a crisis counselor, it's important to recognize signs of immediate danger, such as direct threats of self-harm. If you see this, use the 'Alert Moderator' tool immediately. Do not try to handle the crisis yourself."
      }
    ];
    quizQuestions = [
      {
        question: "What is your primary role as a peer supporter?",
        options: ["To give advice", "To fix their problem", "To listen and validate feelings", "To act as a therapist"],
        correctAnswer: "To listen and validate feelings"
      },
      {
        question: "A user says 'I feel so alone.' What is the BEST response?",
        options: ["'You should try going out more.'", "'I know exactly how you feel, one time I...'", "'It sounds incredibly difficult to feel so alone. I'm here to listen.'", "'Don't worry, you'll be fine.'"],
        correctAnswer: "'It sounds incredibly difficult to feel so alone. I'm here to listen.'"
      },
      {
        question: "A user says they are going to harm themselves right now. What should you do?",
        options: ["Try to talk them out of it yourself.", "Ask for their location so you can call for help.", "Ignore it, they are probably not serious.", "Use the 'Alert Moderator' tool and disengage."],
        correctAnswer: "Use the 'Alert Moderator' tool and disengage."
      }
    ];
    HelperTrainingView = ({ onTrainingComplete }) => {
      const { helperProfile } = useAuth();
      const { addToast, showConfirmationModal } = useNotification();
      const [step, setStep] = (0, import_react61.useState)(0);
      const [answers, setAnswers] = (0, import_react61.useState)(Array(quizQuestions.length).fill(null));
      const [isSubmitting, setIsSubmitting] = (0, import_react61.useState)(false);
      const handleAnswerChange = (questionIndex, answer) => {
        const newAnswers = [...answers];
        newAnswers[questionIndex] = answer;
        setAnswers(newAnswers);
      };
      const handleSubmitQuiz = async () => {
        const score = answers.reduce((correctCount, answer, index2) => {
          return answer === quizQuestions[index2].correctAnswer ? correctCount + 1 : correctCount;
        }, 0);
        const passed = score / quizQuestions.length >= 0.75;
        if (passed) {
          setIsSubmitting(true);
          try {
            if (helperProfile) {
              await ApiClient.helpers.submitTrainingQuiz(helperProfile.id, score);
              showConfirmationModal({
                title: "Quiz Passed!",
                message: `Congratulations! You scored ${score}/${quizQuestions.length}. You can now apply for certification from your profile page.`,
                confirmText: "Continue",
                onConfirm: onTrainingComplete
              });
            }
          } catch (err) {
            addToast(err.message || "Failed to submit quiz results.", "error");
          } finally {
            setIsSubmitting(false);
          }
        } else {
          showConfirmationModal({
            title: "Quiz Results",
            message: `You scored ${score}/${quizQuestions.length}. You did not meet the passing score (75%). Please review the lessons and try again.`,
            confirmText: "Try Again",
            onConfirm: () => {
              setAnswers(Array(quizQuestions.length).fill(null));
              setStep(0);
            }
          });
        }
      };
      if (step < lessons.length) {
        const lesson = lessons[step];
        return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(import_jsx_runtime64.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "view-header", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h1", { children: "Helper Training" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h2", { children: lesson.title }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("p", { children: lesson.content }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "form-actions", children: [
              step > 0 && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(AppButton, { variant: "secondary", onClick: () => setStep(step - 1), children: "Previous Lesson" }),
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(AppButton, { onClick: () => setStep(step + 1), children: step === lessons.length - 1 ? "Start Quiz" : "Next Lesson" })
            ] })
          ] })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(import_jsx_runtime64.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "view-header", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("h1", { children: "Training Quiz" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(Card, { children: [
          quizQuestions.map((q3, index2) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { className: "form-group", style: { marginBottom: "2rem" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("label", { style: { fontSize: "1.1rem", marginBottom: "1rem" }, children: [
              index2 + 1,
              ". ",
              q3.question
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "radio-group", style: { flexDirection: "column", alignItems: "stretch", gap: "0.5rem" }, children: q3.options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
                "input",
                {
                  type: "radio",
                  id: `q${index2}-${option}`,
                  name: `question-${index2}`,
                  value: option,
                  checked: answers[index2] === option,
                  onChange: () => handleAnswerChange(index2, option)
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("label", { htmlFor: `q${index2}-${option}`, children: option })
            ] }, option)) })
          ] }, index2)),
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(AppButton, { variant: "success", onClick: handleSubmitQuiz, isLoading: isSubmitting, children: "Submit Quiz" }) })
        ] })
      ] });
    };
    HelperTrainingView_default = HelperTrainingView;
  }
});

// src/routes/HelperTrainingRoute.tsx
var HelperTrainingRoute_exports = {};
__export(HelperTrainingRoute_exports, {
  default: () => HelperTrainingRoute_default
});
var import_jsx_runtime65, HelperTrainingRoute, HelperTrainingRoute_default;
var init_HelperTrainingRoute = __esm({
  "src/routes/HelperTrainingRoute.tsx"() {
    "use strict";
    init_HelperTrainingView();
    init_dist();
    import_jsx_runtime65 = __toESM(require_jsx_runtime());
    HelperTrainingRoute = () => {
      const navigate = useNavigate();
      const handleTrainingComplete = () => {
        console.log("Helper training completed");
        navigate("/helper/dashboard");
      };
      return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
        HelperTrainingView_default,
        {
          onTrainingComplete: handleTrainingComplete
        }
      );
    };
    HelperTrainingRoute_default = HelperTrainingRoute;
  }
});

// src/views/HelperApplicationView.tsx
var import_react62, import_jsx_runtime66, HelperApplicationView, HelperApplicationView_default;
var init_HelperApplicationView = __esm({
  "src/views/HelperApplicationView.tsx"() {
    "use strict";
    import_react62 = __toESM(require_react());
    init_AuthContext();
    init_AppButton();
    init_Card();
    init_ApiClient();
    init_icons_dynamic();
    init_NotificationContext();
    import_jsx_runtime66 = __toESM(require_jsx_runtime());
    HelperApplicationView = ({ setActiveView }) => {
      const { helperProfile, reloadProfile } = useAuth();
      const [isSubmitting, setIsSubmitting] = (0, import_react62.useState)(false);
      const { addToast } = useNotification();
      const handleApply = async () => {
        if (!helperProfile) return;
        setIsSubmitting(true);
        try {
          await ApiClient.helpers.submitApplication(helperProfile.id);
          await reloadProfile();
          addToast("Your application has been submitted for review! You'll be notified of the outcome.", "info");
        } catch (err) {
          addToast(err.message || "Failed to submit application.", "error");
        } finally {
          setIsSubmitting(false);
        }
      };
      if (!helperProfile) {
        return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "loading-spinner", style: { margin: "5rem auto" } });
      }
      const renderApplicationStatus = () => {
        if (helperProfile.helperType === "Certified" || helperProfile.applicationStatus === "approved") {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Card, { className: "empty-state", children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { style: { color: "var(--accent-success)", width: "60px", height: "60px", margin: "0 auto 1rem auto" }, children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(CertifiedIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { children: "You are a Certified Helper!" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "Thank you for your commitment to supporting our community." })
          ] });
        }
        if (helperProfile.applicationStatus === "pending") {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Card, { className: "empty-state", style: { background: "var(--bg-tertiary)" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { children: "Application Pending Review" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "Your application has been received and is currently being reviewed by our team. Thank you for your patience." })
          ] });
        }
        if (helperProfile.applicationStatus === "rejected") {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Card, { className: "empty-state", style: { background: "color-mix(in srgb, var(--accent-danger) 10%, transparent)" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { style: { color: "var(--accent-danger)" }, children: "Application Not Approved" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "Unfortunately, your application was not approved at this time. Please review the feedback below and our community guidelines." }),
            helperProfile.applicationNotes && /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("p", { style: { fontWeight: "bold", marginTop: "1rem" }, children: [
              'Feedback: "',
              helperProfile.applicationNotes,
              '"'
            ] })
          ] });
        }
        if (!helperProfile.trainingCompleted) {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Card, { className: "empty-state", children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { children: "Step 1: Complete Mandatory Training" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "To become a Certified Helper, you must first complete our mandatory training and quiz on peer support best practices." }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(AppButton, { variant: "primary", onClick: () => setActiveView("helper-training"), children: "Start Training" })
          ] });
        }
        if (helperProfile.trainingCompleted && helperProfile.applicationStatus === "none") {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Card, { className: "empty-state", children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h2", { children: "Step 2: Submit Your Application" }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "You have successfully completed the training. The final step is to submit your application for review by our team." }),
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(AppButton, { variant: "success", onClick: handleApply, isLoading: isSubmitting, children: "Apply for Certification" })
          ] });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { children: "There was an issue loading your application status. Please try again later." }) });
      };
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "view-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("h1", { children: "Helper Certification" }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("p", { className: "view-subheader", children: "Check your application status and complete the required steps to become a Certified Helper." })
        ] }),
        renderApplicationStatus()
      ] });
    };
    HelperApplicationView_default = HelperApplicationView;
  }
});

// src/routes/HelperApplicationRoute.tsx
var HelperApplicationRoute_exports = {};
__export(HelperApplicationRoute_exports, {
  default: () => HelperApplicationRoute_default
});
var import_jsx_runtime67, HelperApplicationRoute, HelperApplicationRoute_default;
var init_HelperApplicationRoute = __esm({
  "src/routes/HelperApplicationRoute.tsx"() {
    "use strict";
    init_HelperApplicationView();
    init_dist();
    import_jsx_runtime67 = __toESM(require_jsx_runtime());
    HelperApplicationRoute = () => {
      const navigate = useNavigate();
      const handleSetActiveView = (view) => {
        const routeMap = {
          "dashboard": "/helper/dashboard",
          "profile": "/helper/profile",
          "training": "/helper/training",
          "application": "/helper/application",
          "community": "/helper/community",
          "settings": "/settings"
        };
        const route = routeMap[view] || "/helper/application";
        navigate(route);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
        HelperApplicationView_default,
        {
          setActiveView: handleSetActiveView
        }
      );
    };
    HelperApplicationRoute_default = HelperApplicationRoute;
  }
});

// src/views/HelperCommunityView.tsx
var HelperCommunityView_exports = {};
__export(HelperCommunityView_exports, {
  HelperCommunityView: () => HelperCommunityView,
  default: () => HelperCommunityView_default
});
var import_react63, import_jsx_runtime68, HelperCommunityView, HelperCommunityView_default;
var init_HelperCommunityView = __esm({
  "src/views/HelperCommunityView.tsx"() {
    "use strict";
    import_react63 = __toESM(require_react());
    init_AuthContext();
    init_ApiClient();
    init_AppButton();
    init_AppInput();
    init_formatTimeAgo();
    import_jsx_runtime68 = __toESM(require_jsx_runtime());
    HelperCommunityView = () => {
      const { helperProfile } = useAuth();
      const [activeTab, setActiveTab] = (0, import_react63.useState)("forum");
      const [threads, setThreads] = (0, import_react63.useState)([]);
      const [posts, setPosts] = (0, import_react63.useState)([]);
      const [selectedThread, setSelectedThread] = (0, import_react63.useState)(null);
      const [newThreadTitle, setNewThreadTitle] = (0, import_react63.useState)("");
      const [newPostContent, setNewPostContent] = (0, import_react63.useState)("");
      const [proposals, setProposals] = (0, import_react63.useState)([]);
      const [newProposalTitle, setNewProposalTitle] = (0, import_react63.useState)("");
      const [newProposalDescription, setNewProposalDescription] = (0, import_react63.useState)("");
      const [isLoading, setIsLoading] = (0, import_react63.useState)(true);
      const [isPosting, setIsPosting] = (0, import_react63.useState)(false);
      const isCouncilMember = (helperProfile?.reputation ?? 0) >= 4;
      (0, import_react63.useEffect)(() => {
        setIsLoading(true);
        if (activeTab === "forum") {
          ApiClient.helperCommunity.getThreads().then((data2) => {
            setThreads(data2);
            setIsLoading(false);
          });
        } else if (activeTab === "proposals") {
          ApiClient.helperCommunity.getProposals().then((data2) => {
            setProposals(data2);
            setIsLoading(false);
          });
        }
      }, [activeTab]);
      (0, import_react63.useEffect)(() => {
        if (selectedThread) {
          setIsLoading(true);
          ApiClient.helperCommunity.getPosts(selectedThread.id).then((data2) => {
            setPosts(data2);
            setIsLoading(false);
          });
        }
      }, [selectedThread]);
      const handleCreateThread = async () => {
        if (!newThreadTitle.trim() || !newPostContent.trim() || !helperProfile) return;
        setIsPosting(true);
        try {
          const newThread = await ApiClient.helperCommunity.createThread(
            { title: newThreadTitle.trim(), authorId: helperProfile.id, authorName: helperProfile.displayName },
            newPostContent.trim()
          );
          setThreads((prev) => [newThread, ...prev].sort((a3, b3) => new Date(b3.lastReply).getTime() - new Date(a3.lastReply).getTime()));
          setNewThreadTitle("");
          setNewPostContent("");
        } catch (e4) {
          console.error(e4);
          alert("Failed to create thread.");
        } finally {
          setIsPosting(false);
        }
      };
      const handleCreatePost = async () => {
        if (!newPostContent.trim() || !helperProfile || !selectedThread) return;
        setIsPosting(true);
        try {
          const newPost = await ApiClient.helperCommunity.createPost({
            threadId: selectedThread.id,
            authorId: helperProfile.id,
            authorName: helperProfile.displayName,
            content: newPostContent.trim()
          });
          setPosts((prev) => [...prev, newPost]);
          setNewPostContent("");
          setThreads((prev) => prev.map((t4) => t4.id === selectedThread.id ? { ...t4, postCount: t4.postCount + 1, lastReply: (/* @__PURE__ */ new Date()).toISOString() } : t4).sort((a3, b3) => new Date(b3.lastReply).getTime() - new Date(a3.lastReply).getTime()));
        } catch (e4) {
          console.error(e4);
          alert("Failed to create post.");
        } finally {
          setIsPosting(false);
        }
      };
      const handleCreateProposal = async () => {
        if (!newProposalTitle.trim() || !newProposalDescription.trim() || !helperProfile) return;
        setIsPosting(true);
        try {
          const newProposal = await ApiClient.helperCommunity.createProposal({
            title: newProposalTitle.trim(),
            description: newProposalDescription.trim(),
            authorId: helperProfile.id,
            authorName: helperProfile.displayName
          });
          setProposals((prev) => [newProposal, ...prev]);
          setNewProposalTitle("");
          setNewProposalDescription("");
        } catch (e4) {
          console.error(e4);
          alert("Failed to create proposal.");
        } finally {
          setIsPosting(false);
        }
      };
      const handleVote = async (proposalId, vote) => {
        if (!helperProfile) return;
        try {
          const updatedProposal = await ApiClient.helperCommunity.voteOnProposal(proposalId, helperProfile.id, vote);
          setProposals((prev) => prev.map((p3) => p3.id === proposalId ? updatedProposal : p3));
        } catch (e4) {
          console.error(e4);
          alert("Failed to cast vote.");
        }
      };
      const renderForum = () => {
        if (selectedThread) {
          return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "view-header", style: { position: "relative", paddingBottom: "1rem" }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { variant: "secondary", onClick: () => setSelectedThread(null), style: { position: "absolute", top: 0, left: 0 }, children: "Back to Threads" }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h1", { children: selectedThread.title }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("p", { className: "view-subheader", children: [
                "Started by ",
                selectedThread.authorName
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "posts-list", style: { listStyle: "none" }, children: posts.map((post2) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", style: { marginBottom: "1rem" }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { children: post2.content }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("small", { children: [
                "by ",
                /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: post2.authorName }),
                " \u2022 ",
                formatTimeAgo(post2.timestamp)
              ] })
            ] }, post2.id)) }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h3", { children: "Reply to this thread" }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppTextArea, { value: newPostContent, onChange: (e4) => setNewPostContent(e4.target.value), placeholder: "Share your thoughts...", rows: 4 }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { onClick: handleCreatePost, isLoading: isPosting, children: "Post Reply" }) })
            ] })
          ] });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h3", { children: "Start a New Discussion" }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppInput, { label: "Thread Title", value: newThreadTitle, onChange: (e4) => setNewThreadTitle(e4.target.value), placeholder: "What's your discussion about?" }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppTextArea, { label: "Your first post", value: newPostContent, onChange: (e4) => setNewPostContent(e4.target.value), placeholder: "Start the conversation...", rows: 4 }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { onClick: handleCreateThread, isLoading: isPosting, children: "Create Thread" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h3", { children: "Active Threads" }),
            threads.map((thread) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { style: { borderBottom: "1px solid var(--border-color)", padding: "1rem 0", cursor: "pointer" }, onClick: () => setSelectedThread(thread), children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h4", { style: { fontSize: "1.2rem", marginBottom: "0.25rem" }, children: thread.title }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("small", { children: [
                "by ",
                /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: thread.authorName }),
                " \u2022 ",
                thread.postCount,
                " posts \u2022 Last reply ",
                formatTimeAgo(thread.lastReply)
              ] })
            ] }, thread.id)),
            threads.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { children: "No threads yet. Be the first to start a discussion!" })
          ] })
        ] });
      };
      const renderProposals = () => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [
        isCouncilMember && /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h3", { children: "Submit a New Proposal" }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppInput, { label: "Proposal Title", value: newProposalTitle, onChange: (e4) => setNewProposalTitle(e4.target.value), placeholder: "e.g., Change to Helper Onboarding" }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppTextArea, { label: "Proposal Description", value: newProposalDescription, onChange: (e4) => setNewProposalDescription(e4.target.value), placeholder: "Explain your proposal in detail...", rows: 5 }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "form-actions", children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { onClick: handleCreateProposal, isLoading: isPosting, children: "Submit Proposal" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h3", { children: "Open Proposals" }),
          proposals.map((p3) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "card", style: { border: "1px solid var(--border-color)", marginBottom: "1rem" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h4", { children: p3.title }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { children: p3.description }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("small", { children: [
              "Proposed by ",
              /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: p3.authorName }),
              " \u2022 Ends ",
              formatTimeAgo(p3.endsAt)
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { style: { display: "flex", justifyContent: "space-between", alignItems: "center", marginTop: "1rem", borderTop: "1px solid var(--border-color)", paddingTop: "1rem" }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { style: { display: "flex", gap: "1.5rem" }, children: [
                /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("span", { children: [
                  "For: ",
                  /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: p3.votes.for })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("span", { children: [
                  "Against: ",
                  /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: p3.votes.against })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("span", { children: [
                  "Abstain: ",
                  /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("strong", { children: p3.votes.abstain })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "form-actions-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { variant: "success", onClick: () => handleVote(p3.id, "for"), children: "For" }),
                /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { variant: "danger", onClick: () => handleVote(p3.id, "against"), children: "Against" }),
                /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { variant: "secondary", onClick: () => handleVote(p3.id, "abstain"), children: "Abstain" })
              ] })
            ] })
          ] }, p3.id)),
          proposals.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { children: "No open proposals." })
        ] })
      ] });
      return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "view-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("h1", { children: "Helper Community" }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("p", { className: "view-subheader", children: "A private space to connect, share experiences, and shape the community." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", { className: "dashboard-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { className: activeTab === "forum" ? "active" : "", onClick: () => setActiveTab("forum"), children: "Forum" }),
          /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(AppButton, { className: activeTab === "proposals" ? "active" : "", onClick: () => setActiveTab("proposals"), children: "Proposals" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "dashboard-content", children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "loading-spinner", style: { margin: "5rem auto" } }) : activeTab === "forum" ? renderForum() : renderProposals() })
      ] });
    };
    HelperCommunityView_default = HelperCommunityView;
  }
});

// src/styles/admin-dashboard.css
var init_admin_dashboard = __esm({
  "src/styles/admin-dashboard.css"() {
  }
});

// src/views/AdminDashboardView.tsx
var import_react64, import_jsx_runtime69, AdminDashboardView, AdminDashboardView_default;
var init_AdminDashboardView = __esm({
  "src/views/AdminDashboardView.tsx"() {
    "use strict";
    import_react64 = __toESM(require_react());
    init_AppButton();
    init_Card();
    init_Modal();
    init_AppInput();
    init_formatTimeAgo();
    init_demoDataService();
    init_admin_dashboard();
    import_jsx_runtime69 = __toESM(require_jsx_runtime());
    AdminDashboardView = ({ onUpdateApplicationStatus }) => {
      const [activeTab, setActiveTab] = (0, import_react64.useState)("overview");
      const [applications, setApplications] = (0, import_react64.useState)([]);
      const [adminData, setAdminData] = (0, import_react64.useState)(null);
      const [stats, setStats] = (0, import_react64.useState)(null);
      const [isLoading, setIsLoading] = (0, import_react64.useState)(true);
      const [selectedApplicant, setSelectedApplicant] = (0, import_react64.useState)(null);
      const [applicantDetails, setApplicantDetails] = (0, import_react64.useState)(null);
      const [isModalOpen, setIsModalOpen] = (0, import_react64.useState)(false);
      const [rejectionNotes, setRejectionNotes] = (0, import_react64.useState)("");
      const fetchAdminData = (0, import_react64.useCallback)(async () => {
        setIsLoading(true);
        try {
          const demoData = demoDataService.getDemoData("admin");
          setAdminData(demoData);
          setApplications(demoData.helperApplications || []);
          setStats(demoData.communityStats);
        } catch (err) {
          console.error(err);
          alert("Failed to load admin data.");
        } finally {
          setIsLoading(false);
        }
      }, []);
      (0, import_react64.useEffect)(() => {
        fetchAdminData();
      }, [fetchAdminData]);
      const handleViewApplicant = async (applicant) => {
        setSelectedApplicant(applicant);
        setIsModalOpen(true);
        setApplicantDetails(applicant);
      };
      const handleApprove = () => {
        if (selectedApplicant) {
          onUpdateApplicationStatus(selectedApplicant.id, "approved");
          setIsModalOpen(false);
          fetchAdminData();
        }
      };
      const handleReject = () => {
        if (selectedApplicant && rejectionNotes.trim()) {
          onUpdateApplicationStatus(selectedApplicant.id, "rejected", rejectionNotes);
          setIsModalOpen(false);
          setRejectionNotes("");
          fetchAdminData();
        } else {
          alert("Please provide rejection notes.");
        }
      };
      const renderOverviewTab = () => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "admin-overview", children: [
        adminData?.profile && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "admin-profile-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("h3", { children: [
            "\u{1F468}\u200D\u{1F4BC} ",
            adminData.profile.name
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Role:" }),
            " ",
            adminData.profile.role
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Department:" }),
            " ",
            adminData.profile.department
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Clearance:" }),
            " ",
            adminData.profile.clearanceLevel
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Experience:" }),
            " ",
            adminData.profile.yearsWithPlatform,
            " years"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "overview-metrics", children: adminData?.analytics && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "metric-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: "\u{1F465} Platform Users" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "metric-number", children: adminData.analytics.userMetrics.totalActiveUsers.toLocaleString() }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              "+",
              adminData.analytics.userMetrics.newRegistrationsToday,
              " today"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "metric-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: "\u{1F31F} Active Helpers" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "metric-number", children: adminData.analytics.helperMetrics.totalActiveHelpers }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              adminData.analytics.helperMetrics.helpersOnline,
              " online now"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "metric-card crisis", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: "\u{1F6A8} Crisis Alerts Today" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "metric-number", children: adminData.analytics.crisisMetrics.crisisAlertsToday }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              adminData.analytics.crisisMetrics.crisisResolutionRate,
              "% resolved"
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "metric-card", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: "\u{1F4CA} System Health" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-number", children: [
              adminData.analytics.platformHealth.systemUptime,
              "%"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              "Uptime \u2022 ",
              adminData.analytics.platformHealth.performanceScore,
              "/100 score"
            ] })
          ] })
        ] }) }),
        adminData?.escalatedCases && adminData.escalatedCases.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "urgent-alerts", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F6A8} Urgent Items Requiring Attention" }),
          adminData.escalatedCases.filter((caseItem) => caseItem.status === "urgent_intervention" || caseItem.priority === "urgent").map((urgentCase) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "urgent-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: urgentCase.type.replace(/_/g, " ").toUpperCase() }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { children: urgentCase.description }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              "Escalated: ",
              new Date(urgentCase.escalationTime).toLocaleString()
            ] })
          ] }, urgentCase.id))
        ] }),
        adminData?.recentActions && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F4CB} Recent Administrative Actions" }),
          adminData.recentActions.slice(0, 5).map((action) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "action-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: action.type.replace(/_/g, " ") }),
            ": ",
            action.description,
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("small", { children: new Date(action.timestamp).toLocaleString() })
          ] }, action.id))
        ] })
      ] });
      const renderApplicationsTab = () => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Helper Applications Review" }),
        isLoading ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "loading-spinner" }) : adminData?.profile?.helperApplications?.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "applications-grid", children: adminData.profile.helperApplications.map((app) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: `application-card ${app.priority}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "app-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: app.applicantName }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `status-badge ${app.status}`, children: app.status.replace(/_/g, " ") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Type:" }),
            " ",
            app.applicationType
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Specialties:" }),
            " ",
            app.specialties.join(", ")
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Background Check:" }),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `status ${app.backgroundCheckStatus}`, children: app.backgroundCheckStatus })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "References:" }),
            " ",
            app.referencesVerified ? "\u2705 Verified" : "\u23F3 Pending"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Risk:" }),
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `risk ${app.riskAssessment}`, children: app.riskAssessment })
          ] }),
          app.reviewNotes && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Notes:" }),
            " ",
            app.reviewNotes
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
            "Submitted: ",
            new Date(app.submissionDate).toLocaleDateString()
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "app-actions", children: [
            app.status === "pending_review" && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { variant: "success", className: "btn-sm", onClick: () => {
              }, children: "Approve" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { variant: "danger", className: "btn-sm", onClick: () => {
              }, children: "Reject" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: "btn-sm", onClick: () => {
            }, children: "View Details" })
          ] })
        ] }, app.id)) }) : applications.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("table", { style: { width: "100%", borderCollapse: "collapse" }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("thead", { children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("tr", { style: { borderBottom: "2px solid var(--border-color)" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("th", { style: { padding: "0.75rem", textAlign: "left" }, children: "Display Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("th", { style: { padding: "0.75rem", textAlign: "left" }, children: "Application Date" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("th", { style: { padding: "0.75rem", textAlign: "left" }, children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("tbody", { children: applications.map((app) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("tr", { style: { borderBottom: "1px solid var(--border-color)" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("td", { style: { padding: "0.75rem" }, children: app.displayName }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("td", { style: { padding: "0.75rem" }, children: new Date(app.joinDate).toLocaleDateString() }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("td", { style: { padding: "0.75rem" }, children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: "btn-sm", onClick: () => handleViewApplicant(app), children: "Review" }) })
          ] }, app.id)) })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { children: "No pending applications." })
      ] });
      const renderModerationTab = () => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "moderation-section", children: [
        adminData?.profile?.escalatedCases && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F6A8} Escalated Moderation Cases" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "cases-grid", children: adminData.profile.escalatedCases.map((caseItem) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: `case-card ${caseItem.status}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "case-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: caseItem.type.replace(/_/g, " ") }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `status-badge ${caseItem.status}`, children: caseItem.status.replace(/_/g, " ") })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { children: caseItem.description }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Reported by:" }),
              " ",
              caseItem.reportedBy
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Escalated:" }),
              " ",
              new Date(caseItem.escalationTime).toLocaleString()
            ] }),
            caseItem.actionsTaken.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Actions Taken:" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("ul", { children: caseItem.actionsTaken.map((action, actionIndex) => /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("li", { children: action }, `${caseItem.id}-action-${actionIndex}`)) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "case-actions", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: "btn-sm", onClick: () => {
              }, children: "View Details" }),
              caseItem.followUpRequired && /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { variant: "secondary", className: "btn-sm", onClick: () => {
              }, children: "Follow Up" })
            ] })
          ] }, caseItem.id)) })
        ] }),
        adminData?.communityHealth && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F4CA} Community Health Metrics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-metrics", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Total Posts:" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.communityHealth.totalPosts })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Flagged Content:" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { className: "warning", children: adminData.communityHealth.flaggedContent })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Positive Sentiment:" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "success", children: [
                adminData.communityHealth.positiveSentimentRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Engagement Rate:" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.communityHealth.engagementRate,
                "%"
              ] })
            ] })
          ] })
        ] })
      ] });
      const renderAnalyticsTab = () => adminData?.analytics ? /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytics-section", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F465} User Analytics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytics-grid", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Total Active Users" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.userMetrics.totalActiveUsers.toLocaleString() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Daily Active Users" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.userMetrics.dailyActiveUsers.toLocaleString() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Weekly Active Users" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.userMetrics.weeklyActiveUsers.toLocaleString() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "User Retention Rate" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.userMetrics.userRetentionRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Avg Session Duration" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.userMetrics.averageSessionDuration,
                " min"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "New Today" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.userMetrics.newRegistrationsToday })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F31F} Helper Analytics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytics-grid", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Total Active Helpers" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.helperMetrics.totalActiveHelpers })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Average Response Time" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.helperMetrics.averageResponseTime,
                " min"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Helpers Online" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.helperMetrics.helpersOnline })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Sessions Today" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.helperMetrics.totalSessionsToday })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Satisfaction Rating" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.helperMetrics.helperSatisfactionRating,
                "/5.0"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Utilization Rate" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.helperMetrics.helperUtilizationRate,
                "%"
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "crisis-analytics", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F6A8} Crisis Support Analytics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytics-grid", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Crisis Alerts Today" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { className: "crisis", children: adminData.analytics.crisisMetrics.crisisAlertsToday })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Avg Response Time" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.crisisMetrics.averageResponseTimeToCrisis,
                " min"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Resolution Rate" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "success", children: [
                adminData.analytics.crisisMetrics.crisisResolutionRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Prevention Success" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "success", children: [
                adminData.analytics.crisisMetrics.preventionSuccessRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Escalation Rate" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "warning", children: [
                adminData.analytics.crisisMetrics.escalationRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "analytic-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Emergency Contacts" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.analytics.crisisMetrics.emergencyContactsActivated })
            ] })
          ] })
        ] })
      ] }) : isLoading ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "loading-spinner" }) : /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "stats-grid", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "stat-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Active Dilemmas" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "stat-number", children: stats?.activeDilemmas })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "stat-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Avg. Time to Support" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "stat-number text", children: stats?.avgTimeToFirstSupport })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "stat-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Total Helpers" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "stat-number", children: stats?.totalHelpers })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { className: "stat-card", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Most Common Category" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "stat-number text", children: stats?.mostCommonCategory })
        ] })
      ] });
      const renderSystemTab = () => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "system-section", children: [
        adminData?.analytics?.platformHealth && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F527} System Health" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-grid", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "System Uptime" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "success", children: [
                adminData.analytics.platformHealth.systemUptime,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Avg Page Load" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.platformHealth.averagePageLoadTime,
                "s"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Error Rate" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { className: "success", children: [
                adminData.analytics.platformHealth.errorRate,
                "%"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Performance Score" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.analytics.platformHealth.performanceScore,
                "/100"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Security Incidents" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { className: "success", children: adminData.analytics.platformHealth.securityIncidents })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "health-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Backup Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { className: "success", children: adminData.analytics.platformHealth.dataBackupStatus })
            ] })
          ] })
        ] }),
        adminData?.profile?.systemAlerts && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u26A0\uFE0F System Alerts" }),
          adminData.profile.systemAlerts.map((alert2) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: `alert-item ${alert2.severity}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "alert-header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: alert2.type.toUpperCase() }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `severity-badge ${alert2.severity}`, children: alert2.severity })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { children: alert2.message }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("small", { children: [
              new Date(alert2.timestamp).toLocaleString(),
              " \u2022 Status: ",
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { className: `status ${alert2.status}`, children: alert2.status })
            ] })
          ] }, alert2.id))
        ] }),
        adminData?.qualityMetrics && /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "\u{1F4C8} Quality Metrics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "quality-metrics", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "User Satisfaction" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
                adminData.qualityMetrics.userSatisfactionScore,
                "/5.0"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Helper Reviews" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.qualityMetrics.helperPerformanceReviews })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Completed Audits" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: adminData.qualityMetrics.completedAudits })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "metric-item", children: [
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: "Pending Audits" }),
              /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { className: "warning", children: adminData.qualityMetrics.pendingAudits })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h4", { children: "Feature Usage" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "feature-usage", children: Object.entries(adminData.qualityMetrics.platformFeatureUsage).map(([feature, usage]) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "usage-item", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("span", { children: feature.replace(/([A-Z])/g, " $1").toLowerCase() }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "usage-bar", children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "usage-fill", style: { width: `${usage}%` } }) }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("strong", { children: [
              usage,
              "%"
            ] })
          ] }, feature)) })
        ] })
      ] });
      return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_jsx_runtime69.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(Modal, { isOpen: isModalOpen, onClose: () => setIsModalOpen(false), title: `Review Application: ${selectedApplicant?.displayName}`, children: applicantDetails ? /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Applicant Details" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Bio:" }),
            " ",
            applicantDetails.bio
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Expertise:" }),
            " ",
            applicantDetails.expertise?.join(", ") || "Not specified"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Joined:" }),
            " ",
            formatTimeAgo(applicantDetails.joinDate)
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("hr", { style: { margin: "1rem 0" } }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Performance Stats" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Training Completed:" }),
            " ",
            applicantDetails.trainingCompleted ? "Yes" : "No"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Reputation:" }),
            " ",
            applicantDetails.reputation?.toFixed(2) || "N/A",
            " / 5.0"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("p", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("strong", { children: "Training Quiz Score:" }),
            " ",
            applicantDetails.quizScore || 0,
            "%"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("hr", { style: { margin: "1rem 0" } }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h3", { children: "Actions" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppTextArea, { label: "Rejection Notes (if rejecting)", value: rejectionNotes, onChange: (e4) => setRejectionNotes(e4.target.value), rows: 3 }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "modal-actions", children: [
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { variant: "danger", onClick: handleReject, children: "Reject" }),
            /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { variant: "success", onClick: handleApprove, children: "Approve" })
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { className: "loading-spinner" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "view-header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("h1", { children: "\u{1F6E1}\uFE0F Astral Admin Dashboard" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("p", { className: "view-subheader", children: "Platform oversight, safety management, and community health monitoring." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "dashboard-tabs", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: activeTab === "overview" ? "active" : "", onClick: () => setActiveTab("overview"), children: "\u{1F4CA} Overview" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(AppButton, { className: activeTab === "applications" ? "active" : "", onClick: () => setActiveTab("applications"), children: [
            "\u{1F4DD} Applications ",
            adminData?.profile?.helperApplications?.length > 0 ? `(${adminData.profile.helperApplications.length})` : applications.length > 0 ? `(${applications.length})` : ""
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: activeTab === "moderation" ? "active" : "", onClick: () => setActiveTab("moderation"), children: "\u{1F6A8} Moderation" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: activeTab === "analytics" ? "active" : "", onClick: () => setActiveTab("analytics"), children: "\u{1F4C8} Analytics" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(AppButton, { className: activeTab === "system" ? "active" : "", onClick: () => setActiveTab("system"), children: "\u2699\uFE0F System" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { className: "dashboard-content", children: [
          activeTab === "overview" && renderOverviewTab(),
          activeTab === "applications" && renderApplicationsTab(),
          activeTab === "moderation" && renderModerationTab(),
          activeTab === "analytics" && renderAnalyticsTab(),
          activeTab === "system" && renderSystemTab()
        ] })
      ] });
    };
    AdminDashboardView_default = AdminDashboardView;
  }
});

// src/routes/AdminDashboardRoute.tsx
var AdminDashboardRoute_exports = {};
__export(AdminDashboardRoute_exports, {
  default: () => AdminDashboardRoute_default
});
var import_jsx_runtime70, AdminDashboardRoute, AdminDashboardRoute_default;
var init_AdminDashboardRoute = __esm({
  "src/routes/AdminDashboardRoute.tsx"() {
    "use strict";
    init_AdminDashboardView();
    import_jsx_runtime70 = __toESM(require_jsx_runtime());
    AdminDashboardRoute = () => {
      const handleUpdateApplicationStatus = (helperId, status, notes) => {
        console.log("Updating application status:", { helperId, status, notes });
      };
      return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
        AdminDashboardView_default,
        {
          onUpdateApplicationStatus: handleUpdateApplicationStatus
        }
      );
    };
    AdminDashboardRoute_default = AdminDashboardRoute;
  }
});

// src/views/ModerationView.tsx
var ModerationView_exports = {};
__export(ModerationView_exports, {
  default: () => ModerationView_default
});
var import_jsx_runtime71, ModerationView, ModerationView_default;
var init_ModerationView = __esm({
  "src/views/ModerationView.tsx"() {
    "use strict";
    init_icons_dynamic();
    import_jsx_runtime71 = __toESM(require_jsx_runtime());
    ModerationView = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2", children: "Community Moderation" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-lg", children: "Help keep our community safe and supportive" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "grid gap-6 md:grid-cols-3 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(AlertIcon, { className: "w-8 h-8 text-yellow-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Pending Reports" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-3xl font-bold text-yellow-600 dark:text-yellow-400 mb-2", children: "3" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Require review" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ShieldIcon, { className: "w-8 h-8 text-green-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Actions Taken" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-3xl font-bold text-green-600 dark:text-green-400 mb-2", children: "12" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "This week" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(UsersIcon, { className: "w-8 h-8 text-blue-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Community Health" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2", children: "98%" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Positive interactions" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "Moderation Dashboard" }),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)("div", { className: "text-center py-12", children: [
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ShieldIcon, { className: "w-16 h-16 text-gray-400 mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-gray-500 dark:text-gray-400 mb-4", children: "Advanced moderation tools coming soon" }),
            /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("p", { className: "text-sm text-gray-400 dark:text-gray-500", children: "Report system, AI content filtering, and community guidelines enforcement" })
          ] })
        ] })
      ] }) });
    };
    ModerationView_default = ModerationView;
  }
});

// src/views/AnalyticsView.tsx
var AnalyticsView_exports = {};
__export(AnalyticsView_exports, {
  default: () => AnalyticsView_default
});
var import_jsx_runtime72, AnalyticsView, AnalyticsView_default;
var init_AnalyticsView = __esm({
  "src/views/AnalyticsView.tsx"() {
    "use strict";
    init_icons_dynamic();
    import_jsx_runtime72 = __toESM(require_jsx_runtime());
    AnalyticsView = () => {
      return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "min-h-screen bg-gray-50 dark:bg-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2", children: "Your Wellness Analytics" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-gray-600 dark:text-gray-400 text-lg", children: "Track your mental health progress and insights" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "grid gap-6 md:grid-cols-3 mb-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TrendingUpIcon, { className: "w-8 h-8 text-green-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Mood Trend" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-3xl font-bold text-green-600 dark:text-green-400 mb-2", children: "\u2197 Improving" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "7.2/10 average this week" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(HeartIcon2, { className: "w-8 h-8 text-pink-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Check-in Streak" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-3xl font-bold text-pink-600 dark:text-pink-400 mb-2", children: "14 days" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Personal best: 21 days" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(UsersIcon, { className: "w-8 h-8 text-blue-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: "Support Given" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2", children: "8 people" }),
            /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "This month" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-lg shadow-md p-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("h2", { className: "text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6", children: "Weekly Progress" }),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("div", { className: "h-64 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Analytics charts coming soon" }) })
        ] })
      ] }) });
    };
    AnalyticsView_default = AnalyticsView;
  }
});

// node_modules/web-vitals/dist/web-vitals.js
var web_vitals_exports = {};
__export(web_vitals_exports, {
  CLSThresholds: () => b2,
  FCPThresholds: () => y2,
  INPThresholds: () => B2,
  LCPThresholds: () => q2,
  TTFBThresholds: () => H2,
  onCLS: () => L2,
  onFCP: () => E2,
  onINP: () => S2,
  onLCP: () => x2,
  onTTFB: () => $2
});
function a2(e4, t4) {
  return c2.get(e4) || c2.set(e4, new t4()), c2.get(e4);
}
var e3, t3, n2, i2, s2, o2, r2, c2, d2, h2, f2, u2, l2, m2, p2, v2, g2, y2, E2, b2, L2, P2, T2, _2, M2, w2, C2, I2, F2, k2, A2, B2, S2, N2, q2, x2, H2, O2, $2;
var init_web_vitals = __esm({
  "node_modules/web-vitals/dist/web-vitals.js"() {
    e3 = -1;
    t3 = (t4) => {
      addEventListener("pageshow", (n3) => {
        n3.persisted && (e3 = n3.timeStamp, t4(n3));
      }, true);
    };
    n2 = (e4, t4, n3, i3) => {
      let s3, o3;
      return (r3) => {
        t4.value >= 0 && (r3 || i3) && (o3 = t4.value - (s3 ?? 0), (o3 || void 0 === s3) && (s3 = t4.value, t4.delta = o3, t4.rating = ((e5, t5) => e5 > t5[1] ? "poor" : e5 > t5[0] ? "needs-improvement" : "good")(t4.value, n3), e4(t4)));
      };
    };
    i2 = (e4) => {
      requestAnimationFrame(() => requestAnimationFrame(() => e4()));
    };
    s2 = () => {
      const e4 = performance.getEntriesByType("navigation")[0];
      if (e4 && e4.responseStart > 0 && e4.responseStart < performance.now()) return e4;
    };
    o2 = () => {
      const e4 = s2();
      return e4?.activationStart ?? 0;
    };
    r2 = (t4, n3 = -1) => {
      const i3 = s2();
      let r3 = "navigate";
      e3 >= 0 ? r3 = "back-forward-cache" : i3 && (document.prerendering || o2() > 0 ? r3 = "prerender" : document.wasDiscarded ? r3 = "restore" : i3.type && (r3 = i3.type.replace(/_/g, "-")));
      return { name: t4, value: n3, rating: "good", delta: 0, entries: [], id: `v5-${Date.now()}-${Math.floor(8999999999999 * Math.random()) + 1e12}`, navigationType: r3 };
    };
    c2 = /* @__PURE__ */ new WeakMap();
    d2 = class {
      t;
      i = 0;
      o = [];
      h(e4) {
        if (e4.hadRecentInput) return;
        const t4 = this.o[0], n3 = this.o.at(-1);
        this.i && t4 && n3 && e4.startTime - n3.startTime < 1e3 && e4.startTime - t4.startTime < 5e3 ? (this.i += e4.value, this.o.push(e4)) : (this.i = e4.value, this.o = [e4]), this.t?.(e4);
      }
    };
    h2 = (e4, t4, n3 = {}) => {
      try {
        if (PerformanceObserver.supportedEntryTypes.includes(e4)) {
          const i3 = new PerformanceObserver((e5) => {
            Promise.resolve().then(() => {
              t4(e5.getEntries());
            });
          });
          return i3.observe({ type: e4, buffered: true, ...n3 }), i3;
        }
      } catch {
      }
    };
    f2 = (e4) => {
      let t4 = false;
      return () => {
        t4 || (e4(), t4 = true);
      };
    };
    u2 = -1;
    l2 = /* @__PURE__ */ new Set();
    m2 = () => "hidden" !== document.visibilityState || document.prerendering ? 1 / 0 : 0;
    p2 = (e4) => {
      if ("hidden" === document.visibilityState) {
        if ("visibilitychange" === e4.type) for (const e5 of l2) e5();
        isFinite(u2) || (u2 = "visibilitychange" === e4.type ? e4.timeStamp : 0, removeEventListener("prerenderingchange", p2, true));
      }
    };
    v2 = () => {
      if (u2 < 0) {
        const e4 = o2(), n3 = document.prerendering ? void 0 : globalThis.performance.getEntriesByType("visibility-state").filter((t4) => "hidden" === t4.name && t4.startTime > e4)[0]?.startTime;
        u2 = n3 ?? m2(), addEventListener("visibilitychange", p2, true), addEventListener("prerenderingchange", p2, true), t3(() => {
          setTimeout(() => {
            u2 = m2();
          });
        });
      }
      return { get firstHiddenTime() {
        return u2;
      }, onHidden(e4) {
        l2.add(e4);
      } };
    };
    g2 = (e4) => {
      document.prerendering ? addEventListener("prerenderingchange", () => e4(), true) : e4();
    };
    y2 = [1800, 3e3];
    E2 = (e4, s3 = {}) => {
      g2(() => {
        const c3 = v2();
        let a3, d3 = r2("FCP");
        const f3 = h2("paint", (e5) => {
          for (const t4 of e5) "first-contentful-paint" === t4.name && (f3.disconnect(), t4.startTime < c3.firstHiddenTime && (d3.value = Math.max(t4.startTime - o2(), 0), d3.entries.push(t4), a3(true)));
        });
        f3 && (a3 = n2(e4, d3, y2, s3.reportAllChanges), t3((t4) => {
          d3 = r2("FCP"), a3 = n2(e4, d3, y2, s3.reportAllChanges), i2(() => {
            d3.value = performance.now() - t4.timeStamp, a3(true);
          });
        }));
      });
    };
    b2 = [0.1, 0.25];
    L2 = (e4, s3 = {}) => {
      const o3 = v2();
      E2(f2(() => {
        let c3, f3 = r2("CLS", 0);
        const u3 = a2(s3, d2), l3 = (e5) => {
          for (const t4 of e5) u3.h(t4);
          u3.i > f3.value && (f3.value = u3.i, f3.entries = u3.o, c3());
        }, m3 = h2("layout-shift", l3);
        m3 && (c3 = n2(e4, f3, b2, s3.reportAllChanges), o3.onHidden(() => {
          l3(m3.takeRecords()), c3(true);
        }), t3(() => {
          u3.i = 0, f3 = r2("CLS", 0), c3 = n2(e4, f3, b2, s3.reportAllChanges), i2(() => c3());
        }), setTimeout(c3));
      }));
    };
    P2 = 0;
    T2 = 1 / 0;
    _2 = 0;
    M2 = (e4) => {
      for (const t4 of e4) t4.interactionId && (T2 = Math.min(T2, t4.interactionId), _2 = Math.max(_2, t4.interactionId), P2 = _2 ? (_2 - T2) / 7 + 1 : 0);
    };
    C2 = () => w2 ? P2 : performance.interactionCount ?? 0;
    I2 = () => {
      "interactionCount" in performance || w2 || (w2 = h2("event", M2, { type: "event", buffered: true, durationThreshold: 0 }));
    };
    F2 = 0;
    k2 = class {
      u = [];
      l = /* @__PURE__ */ new Map();
      m;
      p;
      v() {
        F2 = C2(), this.u.length = 0, this.l.clear();
      }
      L() {
        const e4 = Math.min(this.u.length - 1, Math.floor((C2() - F2) / 50));
        return this.u[e4];
      }
      h(e4) {
        if (this.m?.(e4), !e4.interactionId && "first-input" !== e4.entryType) return;
        const t4 = this.u.at(-1);
        let n3 = this.l.get(e4.interactionId);
        if (n3 || this.u.length < 10 || e4.duration > t4.P) {
          if (n3 ? e4.duration > n3.P ? (n3.entries = [e4], n3.P = e4.duration) : e4.duration === n3.P && e4.startTime === n3.entries[0].startTime && n3.entries.push(e4) : (n3 = { id: e4.interactionId, entries: [e4], P: e4.duration }, this.l.set(n3.id, n3), this.u.push(n3)), this.u.sort((e5, t5) => t5.P - e5.P), this.u.length > 10) {
            const e5 = this.u.splice(10);
            for (const t5 of e5) this.l.delete(t5.id);
          }
          this.p?.(n3);
        }
      }
    };
    A2 = (e4) => {
      const t4 = globalThis.requestIdleCallback || setTimeout;
      "hidden" === document.visibilityState ? e4() : (e4 = f2(e4), addEventListener("visibilitychange", e4, { once: true, capture: true }), t4(() => {
        e4(), removeEventListener("visibilitychange", e4, { capture: true });
      }));
    };
    B2 = [200, 500];
    S2 = (e4, i3 = {}) => {
      if (!globalThis.PerformanceEventTiming || !("interactionId" in PerformanceEventTiming.prototype)) return;
      const s3 = v2();
      g2(() => {
        I2();
        let o3, c3 = r2("INP");
        const d3 = a2(i3, k2), f3 = (e5) => {
          A2(() => {
            for (const t5 of e5) d3.h(t5);
            const t4 = d3.L();
            t4 && t4.P !== c3.value && (c3.value = t4.P, c3.entries = t4.entries, o3());
          });
        }, u3 = h2("event", f3, { durationThreshold: i3.durationThreshold ?? 40 });
        o3 = n2(e4, c3, B2, i3.reportAllChanges), u3 && (u3.observe({ type: "first-input", buffered: true }), s3.onHidden(() => {
          f3(u3.takeRecords()), o3(true);
        }), t3(() => {
          d3.v(), c3 = r2("INP"), o3 = n2(e4, c3, B2, i3.reportAllChanges);
        }));
      });
    };
    N2 = class {
      m;
      h(e4) {
        this.m?.(e4);
      }
    };
    q2 = [2500, 4e3];
    x2 = (e4, s3 = {}) => {
      g2(() => {
        const c3 = v2();
        let d3, u3 = r2("LCP");
        const l3 = a2(s3, N2), m3 = (e5) => {
          s3.reportAllChanges || (e5 = e5.slice(-1));
          for (const t4 of e5) l3.h(t4), t4.startTime < c3.firstHiddenTime && (u3.value = Math.max(t4.startTime - o2(), 0), u3.entries = [t4], d3());
        }, p3 = h2("largest-contentful-paint", m3);
        if (p3) {
          d3 = n2(e4, u3, q2, s3.reportAllChanges);
          const o3 = f2(() => {
            m3(p3.takeRecords()), p3.disconnect(), d3(true);
          }), c4 = (e5) => {
            e5.isTrusted && (A2(o3), removeEventListener(e5.type, c4, { capture: true }));
          };
          for (const e5 of ["keydown", "click", "visibilitychange"]) addEventListener(e5, c4, { capture: true });
          t3((t4) => {
            u3 = r2("LCP"), d3 = n2(e4, u3, q2, s3.reportAllChanges), i2(() => {
              u3.value = performance.now() - t4.timeStamp, d3(true);
            });
          });
        }
      });
    };
    H2 = [800, 1800];
    O2 = (e4) => {
      document.prerendering ? g2(() => O2(e4)) : "complete" !== document.readyState ? addEventListener("load", () => O2(e4), true) : setTimeout(e4);
    };
    $2 = (e4, i3 = {}) => {
      let c3 = r2("TTFB"), a3 = n2(e4, c3, H2, i3.reportAllChanges);
      O2(() => {
        const d3 = s2();
        d3 && (c3.value = Math.max(d3.responseStart - o2(), 0), c3.entries = [d3], a3(true), t3(() => {
          c3 = r2("TTFB", 0), a3 = n2(e4, c3, H2, i3.reportAllChanges), a3(true);
        }));
      });
    };
  }
});

// src/main.tsx
var import_react82 = __toESM(require_react());
var import_client3 = __toESM(require_client());
init_dist();

// src/App.tsx
var import_react81 = __toESM(require_react());

// src/components/ErrorBoundary.tsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var AlertCircleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("circle", { cx: "12", cy: "12", r: "10" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("line", { x1: "12", y1: "8", x2: "12", y2: "12" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("line", { x1: "12", y1: "16", x2: "12.01", y2: "16" })
] });
var RefreshIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polyline", { points: "23 4 23 10 17 10" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polyline", { points: "1 20 1 14 7 14" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15" })
] });
var HomeIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("polyline", { points: "9,22 9,12 15,12 15,22" })
] });
var PhoneIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { width: "20", height: "20", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" }) });
var HeartIcon = ({ size = 48 }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" }) });
var ErrorBoundary = class _ErrorBoundary extends import_react.Component {
  retryTimeouts = [];
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      errorId: "",
      retryCount: 0,
      severity: "low",
      category: "unknown",
      timestamp: /* @__PURE__ */ new Date()
    };
  }
  static getDerivedStateFromError(error44) {
    const errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const severity = _ErrorBoundary.determineSeverity(error44);
    const category = _ErrorBoundary.categorizeError(error44);
    return {
      hasError: true,
      error: error44,
      errorId,
      severity,
      category,
      timestamp: /* @__PURE__ */ new Date()
    };
  }
  componentDidCatch(error44, errorInfo) {
    this.setState({ errorInfo });
    if (this.props.reportErrors !== false) {
      this.reportError(error44, errorInfo);
    }
    if (this.props.isDevelopment || this.props.logToConsole) {
      console.error("Error Boundary caught an error:", error44, errorInfo);
    }
    this.props.onError?.(error44, errorInfo, this.state.errorId);
    if (this.props.autoRetry && this.state.retryCount < (this.props.maxRetries || 3)) {
      this.scheduleRetry();
    }
    if (this.props.isCrisisContext) {
      this.handleCrisisError(error44, errorInfo);
    }
  }
  componentWillUnmount() {
    this.retryTimeouts.forEach((timeout) => clearTimeout(timeout));
  }
  // Determine error severity based on error characteristics
  static determineSeverity(error44) {
    const message = error44.message.toLowerCase();
    const stack = error44.stack?.toLowerCase() || "";
    if (message.includes("crisis") || message.includes("emergency") || message.includes("suicide") || stack.includes("crisis")) {
      return "critical";
    }
    if (error44.name === "ChunkLoadError" || message.includes("network") || message.includes("fetch") || message.includes("authentication") || message.includes("unauthorized")) {
      return "high";
    }
    if (message.includes("validation") || message.includes("parse") || message.includes("timeout") || error44.name === "TypeError") {
      return "medium";
    }
    return "low";
  }
  // Categorize error for specialized handling
  static categorizeError(error44) {
    const message = error44.message.toLowerCase();
    const name2 = error44.name.toLowerCase();
    if (message.includes("crisis") || message.includes("emergency")) {
      return "crisis-intervention";
    }
    if (name2.includes("chunkerror") || message.includes("loading")) {
      return "network";
    }
    if (message.includes("unauthorized") || message.includes("forbidden")) {
      return "authentication";
    }
    if (message.includes("validation") || message.includes("schema")) {
      return "validation";
    }
    if (message.includes("serviceworker") || message.includes("sw")) {
      return "service-worker";
    }
    if (name2.includes("typeerror") || message.includes("render")) {
      return "ui-rendering";
    }
    if (message.includes("corrupt") || message.includes("malformed")) {
      return "data-corruption";
    }
    return "unknown";
  }
  // Generate comprehensive error report
  generateErrorReport(error44, errorInfo) {
    return {
      id: this.state.errorId,
      timestamp: this.state.timestamp,
      error: {
        name: error44.name,
        message: error44.message,
        stack: this.props.includeStackTrace ? error44.stack : void 0
      },
      errorInfo: this.props.includeErrorInfo ? errorInfo : void 0,
      severity: this.state.severity,
      category: this.state.category,
      userAgent: navigator.userAgent,
      url: window.location.href,
      retryCount: this.state.retryCount,
      context: {
        isCrisisContext: this.props.isCrisisContext || false,
        route: window.location.pathname,
        userState: this.props.isDevelopment ? {
          // Include additional context in development
          localStorage: Object.keys(localStorage).length,
          sessionStorage: Object.keys(sessionStorage).length,
          online: navigator.onLine
        } : void 0
      }
    };
  }
  // Report error to monitoring service
  async reportError(error44, errorInfo) {
    try {
      const report = this.generateErrorReport(error44, errorInfo);
      this.props.onReport?.(report);
      if (this.props.reportingUrl) {
        await fetch(this.props.reportingUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(report)
        });
      }
      const localReports = JSON.parse(localStorage.getItem("error_reports") || "[]");
      localReports.push(report);
      localStorage.setItem("error_reports", JSON.stringify(localReports.slice(-10)));
    } catch (reportingError) {
      console.warn("Failed to report error:", reportingError);
    }
  }
  // Special handling for crisis context errors
  handleCrisisError(error44, _errorInfo) {
    console.error("CRISIS CONTEXT ERROR:", error44.message);
    localStorage.setItem("crisis_error", JSON.stringify({
      error: error44.message,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      context: "crisis_intervention"
    }));
    if (this.props.crisisContactInfo) {
      window.dispatchEvent(new CustomEvent("crisis-error", {
        detail: this.props.crisisContactInfo
      }));
    }
  }
  // Schedule automatic retry
  scheduleRetry() {
    const delay = this.props.retryDelay || 1e3 * Math.pow(2, this.state.retryCount);
    const timeout = setTimeout(() => {
      this.setState((prevState) => ({
        retryCount: prevState.retryCount + 1
      }));
      this.resetErrorBoundary();
    }, delay);
    this.retryTimeouts.push(timeout);
  }
  // Reset error boundary state
  resetErrorBoundary = () => {
    this.props.onRetry?.(this.state.retryCount);
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
      errorId: ""
    });
  };
  // Redirect to safe route
  redirectToSafeRoute() {
    const safeRoute = this.props.redirectOnError || "/";
    window.location.href = safeRoute;
  }
  render() {
    if (this.state.hasError && this.state.error) {
      if (this.props.fallback) {
        const fallbackProps = {
          error: this.state.error,
          errorInfo: this.state.errorInfo,
          resetErrorBoundary: this.resetErrorBoundary,
          severity: this.state.severity,
          category: this.state.category,
          config: this.props,
          retryCount: this.state.retryCount
        };
        if (typeof this.props.fallback === "function") {
          const fallbackFunction = this.props.fallback;
          return fallbackFunction(this.state.error, this.state.errorInfo);
        } else {
          const FallbackComponent = this.props.fallback;
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FallbackComponent, { ...fallbackProps });
        }
      }
      return this.renderDefaultFallback();
    }
    return this.props.children;
  }
  renderDefaultFallback() {
    const { error: error44, severity, category, retryCount } = this.state;
    const { enableRetry, maxRetries = 3, isCrisisContext, crisisContactInfo } = this.props;
    if (isCrisisContext || category === "crisis-intervention") {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        CrisisFallbackUI,
        {
          error: error44,
          onRetry: enableRetry ? this.resetErrorBoundary : void 0,
          retryCount,
          maxRetries,
          crisisContactInfo
        }
      );
    }
    if (severity === "critical" || severity === "high") {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        HighSeverityFallbackUI,
        {
          category,
          onRetry: enableRetry ? this.resetErrorBoundary : void 0,
          onRedirect: this.redirectToSafeRoute,
          retryCount,
          maxRetries
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      StandardFallbackUI,
      {
        error: error44,
        severity,
        category,
        onRetry: enableRetry ? this.resetErrorBoundary : void 0,
        onDismiss: this.props.allowErrorDismiss ? this.resetErrorBoundary : void 0,
        retryCount,
        maxRetries,
        showDetails: this.props.showErrorDetails
      }
    );
  }
};
var CrisisFallbackUI = ({ error: error44, onRetry, retryCount, maxRetries, crisisContactInfo }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "crisis-error-fallback", role: "alert", "aria-live": "assertive", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "crisis-error-container", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "crisis-error-header", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HeartIcon, { size: 48 }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", { children: "We're Here to Help" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: "We're experiencing a technical issue, but your safety is our priority. You can still access crisis support resources." })
  ] }),
  crisisContactInfo && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "crisis-contacts", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", { children: "Immediate Support Available" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "contact-options", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("a", { href: `tel:${crisisContactInfo.phone}`, className: "contact-button phone", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PhoneIcon, {}),
        "Call ",
        crisisContactInfo.phone
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("a", { href: `sms:${crisisContactInfo.text}`, className: "contact-button text", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AlertCircleIcon, {}),
        "Text ",
        crisisContactInfo.text
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("a", { href: crisisContactInfo.chat, className: "contact-button chat", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HeartIcon, { size: 20 }),
        "Online Chat"
      ] })
    ] })
  ] }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "crisis-error-actions", children: [
    onRetry && retryCount < maxRetries && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", { onClick: onRetry, className: "retry-button", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RefreshIcon, {}),
      "Try Again (",
      maxRetries - retryCount,
      " attempts remaining)"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "button",
      {
        onClick: () => window.location.href = "/crisis",
        className: "crisis-resources-button",
        children: "View Crisis Resources"
      }
    )
  ] }),
  false
] }) });
var HighSeverityFallbackUI = ({ category, onRetry, onRedirect, retryCount, maxRetries }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "high-severity-error-fallback", role: "alert", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "error-container", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AlertCircleIcon, {}),
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h1", { children: "Something Went Wrong" }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", { children: [
    category === "network" && "We're having trouble connecting to our servers.",
    category === "authentication" && "There was an issue with your session.",
    category === "service-worker" && "The app needs to refresh to work properly.",
    category === "unknown" && "An unexpected error occurred."
  ] }),
  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "error-actions", children: [
    onRetry && retryCount < maxRetries && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", { onClick: onRetry, className: "retry-button primary", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RefreshIcon, {}),
      "Try Again"
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", { onClick: onRedirect, className: "home-button secondary", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HomeIcon, {}),
      "Go to Home"
    ] })
  ] }),
  "      ",
  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "error-help", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("p", { children: "If this problem persists, please contact support." }) })
] }) });
var StandardFallbackUI = ({ error: error44, severity, category, onRetry, onDismiss, retryCount, maxRetries, showDetails }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "standard-error-fallback", role: "alert", children: [
  /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "error-banner", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AlertCircleIcon, {}),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "error-content", children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h3", { children: severity === "medium" ? "Minor Issue" : "Small Problem" }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("p", { children: [
        category === "validation" && "Please check your input and try again.",
        category === "ui-rendering" && "This section couldn't load properly.",
        category === "unknown" && "Something didn't work as expected."
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "error-actions", children: [
      onRetry && retryCount < maxRetries && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", { onClick: onRetry, className: "retry-button-small", children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RefreshIcon, {}),
        "Retry"
      ] }),
      onDismiss && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("button", { onClick: onDismiss, className: "dismiss-button", children: "\xD7" })
    ] })
  ] }),
  "    ",
  showDetails && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("details", { className: "error-details-small", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("summary", { children: "Technical Details" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("code", { children: error44.message })
  ] })
] });

// src/App.tsx
init_AuthContext();

// src/hooks/useAnalyticsTracking.ts
var import_react7 = __toESM(require_react());
init_dist();

// src/services/analyticsService.ts
var import_react6 = __toESM(require_react());

// node_modules/@sentry/core/build/esm/debug-build.js
var DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

// node_modules/@sentry/core/build/esm/utils/worldwide.js
var GLOBAL_OBJ = globalThis;

// node_modules/@sentry/core/build/esm/utils/version.js
var SDK_VERSION = "10.1.0";

// node_modules/@sentry/core/build/esm/carrier.js
function getMainCarrier() {
  getSentryCarrier(GLOBAL_OBJ);
  return GLOBAL_OBJ;
}
function getSentryCarrier(carrier) {
  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};
  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;
  return __SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {};
}
function getGlobalSingleton(name2, creator, obj = GLOBAL_OBJ) {
  const __SENTRY__ = obj.__SENTRY__ = obj.__SENTRY__ || {};
  const carrier = __SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {};
  return carrier[name2] || (carrier[name2] = creator());
}

// node_modules/@sentry/core/build/esm/utils/debug-logger.js
var CONSOLE_LEVELS = [
  "debug",
  "info",
  "warn",
  "error",
  "log",
  "assert",
  "trace"
];
var PREFIX = "Sentry Logger ";
var originalConsoleMethods = {};
function consoleSandbox(callback) {
  if (!("console" in GLOBAL_OBJ)) {
    return callback();
  }
  const console2 = GLOBAL_OBJ.console;
  const wrappedFuncs = {};
  const wrappedLevels = Object.keys(originalConsoleMethods);
  wrappedLevels.forEach((level) => {
    const originalConsoleMethod = originalConsoleMethods[level];
    wrappedFuncs[level] = console2[level];
    console2[level] = originalConsoleMethod;
  });
  try {
    return callback();
  } finally {
    wrappedLevels.forEach((level) => {
      console2[level] = wrappedFuncs[level];
    });
  }
}
function enable() {
  _getLoggerSettings().enabled = true;
}
function disable() {
  _getLoggerSettings().enabled = false;
}
function isEnabled() {
  return _getLoggerSettings().enabled;
}
function log(...args) {
  _maybeLog("log", ...args);
}
function warn(...args) {
  _maybeLog("warn", ...args);
}
function error(...args) {
  _maybeLog("error", ...args);
}
function _maybeLog(level, ...args) {
  if (!DEBUG_BUILD) {
    return;
  }
  if (isEnabled()) {
    consoleSandbox(() => {
      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);
    });
  }
}
function _getLoggerSettings() {
  if (!DEBUG_BUILD) {
    return { enabled: false };
  }
  return getGlobalSingleton("loggerSettings", () => ({ enabled: false }));
}
var debug = {
  /** Enable logging. */
  enable,
  /** Disable logging. */
  disable,
  /** Check if logging is enabled. */
  isEnabled,
  /** Log a message. */
  log,
  /** Log a warning. */
  warn,
  /** Log an error. */
  error
};

// node_modules/@sentry/core/build/esm/utils/stacktrace.js
var STACKTRACE_FRAME_LIMIT = 50;
var UNKNOWN_FUNCTION = "?";
var WEBPACK_ERROR_REGEXP = /\(error: (.*)\)/;
var STRIP_FRAME_REGEXP = /captureMessage|captureException/;
function createStackParser(...parsers) {
  const sortedParsers = parsers.sort((a3, b3) => a3[0] - b3[0]).map((p3) => p3[1]);
  return (stack, skipFirstLines = 0, framesToPop = 0) => {
    const frames = [];
    const lines = stack.split("\n");
    for (let i3 = skipFirstLines; i3 < lines.length; i3++) {
      let line = lines[i3];
      if (line.length > 1024) {
        line = line.slice(0, 1024);
      }
      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, "$1") : line;
      if (cleanedLine.match(/\S*Error: /)) {
        continue;
      }
      for (const parser of sortedParsers) {
        const frame = parser(cleanedLine);
        if (frame) {
          frames.push(frame);
          break;
        }
      }
      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {
        break;
      }
    }
    return stripSentryFramesAndReverse(frames.slice(framesToPop));
  };
}
function stackParserFromStackParserOptions(stackParser) {
  if (Array.isArray(stackParser)) {
    return createStackParser(...stackParser);
  }
  return stackParser;
}
function stripSentryFramesAndReverse(stack) {
  if (!stack.length) {
    return [];
  }
  const localStack = Array.from(stack);
  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || "")) {
    localStack.pop();
  }
  localStack.reverse();
  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || "")) {
    localStack.pop();
    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || "")) {
      localStack.pop();
    }
  }
  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame) => ({
    ...frame,
    filename: frame.filename || getLastStackFrame(localStack).filename,
    function: frame.function || UNKNOWN_FUNCTION
  }));
}
function getLastStackFrame(arr) {
  return arr[arr.length - 1] || {};
}
var defaultFunctionName = "<anonymous>";
function getFunctionName(fn) {
  try {
    if (!fn || typeof fn !== "function") {
      return defaultFunctionName;
    }
    return fn.name || defaultFunctionName;
  } catch {
    return defaultFunctionName;
  }
}
function getFramesFromEvent(event) {
  const exception = event.exception;
  if (exception) {
    const frames = [];
    try {
      exception.values.forEach((value) => {
        if (value.stacktrace.frames) {
          frames.push(...value.stacktrace.frames);
        }
      });
      return frames;
    } catch {
      return void 0;
    }
  }
  return void 0;
}

// node_modules/@sentry/core/build/esm/instrument/handlers.js
var handlers = {};
var instrumented = {};
function addHandler(type, handler) {
  handlers[type] = handlers[type] || [];
  handlers[type].push(handler);
}
function maybeInstrument(type, instrumentFn) {
  if (!instrumented[type]) {
    instrumented[type] = true;
    try {
      instrumentFn();
    } catch (e4) {
      DEBUG_BUILD && debug.error(`Error while instrumenting ${type}`, e4);
    }
  }
}
function triggerHandlers(type, data2) {
  const typeHandlers = type && handlers[type];
  if (!typeHandlers) {
    return;
  }
  for (const handler of typeHandlers) {
    try {
      handler(data2);
    } catch (e4) {
      DEBUG_BUILD && debug.error(
        `Error while triggering instrumentation handler.
Type: ${type}
Name: ${getFunctionName(handler)}
Error:`,
        e4
      );
    }
  }
}

// node_modules/@sentry/core/build/esm/instrument/globalError.js
var _oldOnErrorHandler = null;
function addGlobalErrorInstrumentationHandler(handler) {
  const type = "error";
  addHandler(type, handler);
  maybeInstrument(type, instrumentError);
}
function instrumentError() {
  _oldOnErrorHandler = GLOBAL_OBJ.onerror;
  GLOBAL_OBJ.onerror = function(msg, url2, line, column, error44) {
    const handlerData = {
      column,
      error: error44,
      line,
      msg,
      url: url2
    };
    triggerHandlers("error", handlerData);
    if (_oldOnErrorHandler) {
      return _oldOnErrorHandler.apply(this, arguments);
    }
    return false;
  };
  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;
}

// node_modules/@sentry/core/build/esm/instrument/globalUnhandledRejection.js
var _oldOnUnhandledRejectionHandler = null;
function addGlobalUnhandledRejectionInstrumentationHandler(handler) {
  const type = "unhandledrejection";
  addHandler(type, handler);
  maybeInstrument(type, instrumentUnhandledRejection);
}
function instrumentUnhandledRejection() {
  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;
  GLOBAL_OBJ.onunhandledrejection = function(e4) {
    const handlerData = e4;
    triggerHandlers("unhandledrejection", handlerData);
    if (_oldOnUnhandledRejectionHandler) {
      return _oldOnUnhandledRejectionHandler.apply(this, arguments);
    }
    return true;
  };
  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;
}

// node_modules/@sentry/core/build/esm/utils/is.js
var objectToString = Object.prototype.toString;
function isError(wat) {
  switch (objectToString.call(wat)) {
    case "[object Error]":
    case "[object Exception]":
    case "[object DOMException]":
    case "[object WebAssembly.Exception]":
      return true;
    default:
      return isInstanceOf(wat, Error);
  }
}
function isBuiltin(wat, className) {
  return objectToString.call(wat) === `[object ${className}]`;
}
function isErrorEvent(wat) {
  return isBuiltin(wat, "ErrorEvent");
}
function isDOMError(wat) {
  return isBuiltin(wat, "DOMError");
}
function isDOMException(wat) {
  return isBuiltin(wat, "DOMException");
}
function isString(wat) {
  return isBuiltin(wat, "String");
}
function isParameterizedString(wat) {
  return typeof wat === "object" && wat !== null && "__sentry_template_string__" in wat && "__sentry_template_values__" in wat;
}
function isPrimitive(wat) {
  return wat === null || isParameterizedString(wat) || typeof wat !== "object" && typeof wat !== "function";
}
function isPlainObject(wat) {
  return isBuiltin(wat, "Object");
}
function isEvent(wat) {
  return typeof Event !== "undefined" && isInstanceOf(wat, Event);
}
function isElement(wat) {
  return typeof Element !== "undefined" && isInstanceOf(wat, Element);
}
function isRegExp(wat) {
  return isBuiltin(wat, "RegExp");
}
function isThenable(wat) {
  return Boolean(wat?.then && typeof wat.then === "function");
}
function isSyntheticEvent(wat) {
  return isPlainObject(wat) && "nativeEvent" in wat && "preventDefault" in wat && "stopPropagation" in wat;
}
function isInstanceOf(wat, base) {
  try {
    return wat instanceof base;
  } catch {
    return false;
  }
}
function isVueViewModel(wat) {
  return !!(typeof wat === "object" && wat !== null && (wat.__isVue || wat._isVue));
}
function isRequest(request) {
  return typeof Request !== "undefined" && isInstanceOf(request, Request);
}

// node_modules/@sentry/core/build/esm/utils/browser.js
var WINDOW = GLOBAL_OBJ;
var DEFAULT_MAX_STRING_LENGTH = 80;
function htmlTreeAsString(elem, options2 = {}) {
  if (!elem) {
    return "<unknown>";
  }
  try {
    let currentElem = elem;
    const MAX_TRAVERSE_HEIGHT = 5;
    const out = [];
    let height = 0;
    let len = 0;
    const separator = " > ";
    const sepLength = separator.length;
    let nextStr;
    const keyAttrs = Array.isArray(options2) ? options2 : options2.keyAttrs;
    const maxStringLength = !Array.isArray(options2) && options2.maxStringLength || DEFAULT_MAX_STRING_LENGTH;
    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
      nextStr = _htmlElementAsString(currentElem, keyAttrs);
      if (nextStr === "html" || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {
        break;
      }
      out.push(nextStr);
      len += nextStr.length;
      currentElem = currentElem.parentNode;
    }
    return out.reverse().join(separator);
  } catch {
    return "<unknown>";
  }
}
function _htmlElementAsString(el, keyAttrs) {
  const elem = el;
  const out = [];
  if (!elem?.tagName) {
    return "";
  }
  if (WINDOW.HTMLElement) {
    if (elem instanceof HTMLElement && elem.dataset) {
      if (elem.dataset["sentryComponent"]) {
        return elem.dataset["sentryComponent"];
      }
      if (elem.dataset["sentryElement"]) {
        return elem.dataset["sentryElement"];
      }
    }
  }
  out.push(elem.tagName.toLowerCase());
  const keyAttrPairs = keyAttrs?.length ? keyAttrs.filter((keyAttr) => elem.getAttribute(keyAttr)).map((keyAttr) => [keyAttr, elem.getAttribute(keyAttr)]) : null;
  if (keyAttrPairs?.length) {
    keyAttrPairs.forEach((keyAttrPair) => {
      out.push(`[${keyAttrPair[0]}="${keyAttrPair[1]}"]`);
    });
  } else {
    if (elem.id) {
      out.push(`#${elem.id}`);
    }
    const className = elem.className;
    if (className && isString(className)) {
      const classes = className.split(/\s+/);
      for (const c3 of classes) {
        out.push(`.${c3}`);
      }
    }
  }
  const allowedAttrs = ["aria-label", "type", "name", "title", "alt"];
  for (const k3 of allowedAttrs) {
    const attr = elem.getAttribute(k3);
    if (attr) {
      out.push(`[${k3}="${attr}"]`);
    }
  }
  return out.join("");
}
function getLocationHref() {
  try {
    return WINDOW.document.location.href;
  } catch {
    return "";
  }
}
function getComponentName(elem) {
  if (!WINDOW.HTMLElement) {
    return null;
  }
  let currentElem = elem;
  const MAX_TRAVERSE_HEIGHT = 5;
  for (let i3 = 0; i3 < MAX_TRAVERSE_HEIGHT; i3++) {
    if (!currentElem) {
      return null;
    }
    if (currentElem instanceof HTMLElement) {
      if (currentElem.dataset["sentryComponent"]) {
        return currentElem.dataset["sentryComponent"];
      }
      if (currentElem.dataset["sentryElement"]) {
        return currentElem.dataset["sentryElement"];
      }
    }
    currentElem = currentElem.parentNode;
  }
  return null;
}

// node_modules/@sentry/core/build/esm/utils/string.js
function truncate(str, max = 0) {
  if (typeof str !== "string" || max === 0) {
    return str;
  }
  return str.length <= max ? str : `${str.slice(0, max)}...`;
}
function safeJoin(input, delimiter) {
  if (!Array.isArray(input)) {
    return "";
  }
  const output = [];
  for (let i3 = 0; i3 < input.length; i3++) {
    const value = input[i3];
    try {
      if (isVueViewModel(value)) {
        output.push("[VueViewModel]");
      } else {
        output.push(String(value));
      }
    } catch {
      output.push("[value cannot be serialized]");
    }
  }
  return output.join(delimiter);
}
function isMatchingPattern(value, pattern, requireExactStringMatch = false) {
  if (!isString(value)) {
    return false;
  }
  if (isRegExp(pattern)) {
    return pattern.test(value);
  }
  if (isString(pattern)) {
    return requireExactStringMatch ? value === pattern : value.includes(pattern);
  }
  return false;
}
function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {
  return patterns.some((pattern) => isMatchingPattern(testString, pattern, requireExactStringMatch));
}

// node_modules/@sentry/core/build/esm/utils/object.js
function fill(source, name2, replacementFactory) {
  if (!(name2 in source)) {
    return;
  }
  const original = source[name2];
  if (typeof original !== "function") {
    return;
  }
  const wrapped = replacementFactory(original);
  if (typeof wrapped === "function") {
    markFunctionWrapped(wrapped, original);
  }
  try {
    source[name2] = wrapped;
  } catch {
    DEBUG_BUILD && debug.log(`Failed to replace method "${name2}" in object`, source);
  }
}
function addNonEnumerableProperty(obj, name2, value) {
  try {
    Object.defineProperty(obj, name2, {
      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
      value,
      writable: true,
      configurable: true
    });
  } catch {
    DEBUG_BUILD && debug.log(`Failed to add non-enumerable property "${name2}" to object`, obj);
  }
}
function markFunctionWrapped(wrapped, original) {
  try {
    const proto = original.prototype || {};
    wrapped.prototype = original.prototype = proto;
    addNonEnumerableProperty(wrapped, "__sentry_original__", original);
  } catch {
  }
}
function getOriginalFunction(func) {
  return func.__sentry_original__;
}
function convertToPlainObject(value) {
  if (isError(value)) {
    return {
      message: value.message,
      name: value.name,
      stack: value.stack,
      ...getOwnProperties(value)
    };
  } else if (isEvent(value)) {
    const newObj = {
      type: value.type,
      target: serializeEventTarget(value.target),
      currentTarget: serializeEventTarget(value.currentTarget),
      ...getOwnProperties(value)
    };
    if (typeof CustomEvent !== "undefined" && isInstanceOf(value, CustomEvent)) {
      newObj.detail = value.detail;
    }
    return newObj;
  } else {
    return value;
  }
}
function serializeEventTarget(target) {
  try {
    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);
  } catch {
    return "<unknown>";
  }
}
function getOwnProperties(obj) {
  if (typeof obj === "object" && obj !== null) {
    const extractedProps = {};
    for (const property in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, property)) {
        extractedProps[property] = obj[property];
      }
    }
    return extractedProps;
  } else {
    return {};
  }
}
function extractExceptionKeysForMessage(exception, maxLength = 40) {
  const keys2 = Object.keys(convertToPlainObject(exception));
  keys2.sort();
  const firstKey = keys2[0];
  if (!firstKey) {
    return "[object has no keys]";
  }
  if (firstKey.length >= maxLength) {
    return truncate(firstKey, maxLength);
  }
  for (let includedKeys = keys2.length; includedKeys > 0; includedKeys--) {
    const serialized = keys2.slice(0, includedKeys).join(", ");
    if (serialized.length > maxLength) {
      continue;
    }
    if (includedKeys === keys2.length) {
      return serialized;
    }
    return truncate(serialized, maxLength);
  }
  return "";
}

// node_modules/@sentry/core/build/esm/utils/misc.js
function getCrypto() {
  const gbl = GLOBAL_OBJ;
  return gbl.crypto || gbl.msCrypto;
}
function uuid4(crypto2 = getCrypto()) {
  let getRandomByte = () => Math.random() * 16;
  try {
    if (crypto2?.randomUUID) {
      return crypto2.randomUUID().replace(/-/g, "");
    }
    if (crypto2?.getRandomValues) {
      getRandomByte = () => {
        const typedArray = new Uint8Array(1);
        crypto2.getRandomValues(typedArray);
        return typedArray[0];
      };
    }
  } catch {
  }
  return ("10000000100040008000" + 1e11).replace(
    /[018]/g,
    (c3) => (
      // eslint-disable-next-line no-bitwise
      (c3 ^ (getRandomByte() & 15) >> c3 / 4).toString(16)
    )
  );
}
function getFirstException(event) {
  return event.exception?.values?.[0];
}
function getEventDescription(event) {
  const { message, event_id: eventId } = event;
  if (message) {
    return message;
  }
  const firstException = getFirstException(event);
  if (firstException) {
    if (firstException.type && firstException.value) {
      return `${firstException.type}: ${firstException.value}`;
    }
    return firstException.type || firstException.value || eventId || "<unknown>";
  }
  return eventId || "<unknown>";
}
function addExceptionTypeValue(event, value, type) {
  const exception = event.exception = event.exception || {};
  const values = exception.values = exception.values || [];
  const firstException = values[0] = values[0] || {};
  if (!firstException.value) {
    firstException.value = value || "";
  }
  if (!firstException.type) {
    firstException.type = type || "Error";
  }
}
function addExceptionMechanism(event, newMechanism) {
  const firstException = getFirstException(event);
  if (!firstException) {
    return;
  }
  const defaultMechanism = { type: "generic", handled: true };
  const currentMechanism = firstException.mechanism;
  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };
  if (newMechanism && "data" in newMechanism) {
    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };
    firstException.mechanism.data = mergedData;
  }
}
function checkOrSetAlreadyCaught(exception) {
  if (isAlreadyCaptured(exception)) {
    return true;
  }
  try {
    addNonEnumerableProperty(exception, "__sentry_captured__", true);
  } catch {
  }
  return false;
}
function isAlreadyCaptured(exception) {
  try {
    return exception.__sentry_captured__;
  } catch {
  }
}

// node_modules/@sentry/core/build/esm/utils/time.js
var ONE_SECOND_IN_MS = 1e3;
function dateTimestampInSeconds() {
  return Date.now() / ONE_SECOND_IN_MS;
}
function createUnixTimestampInSecondsFunc() {
  const { performance: performance2 } = GLOBAL_OBJ;
  if (!performance2?.now || !performance2.timeOrigin) {
    return dateTimestampInSeconds;
  }
  const timeOrigin = performance2.timeOrigin;
  return () => {
    return (timeOrigin + performance2.now()) / ONE_SECOND_IN_MS;
  };
}
var _cachedTimestampInSeconds;
function timestampInSeconds() {
  const func = _cachedTimestampInSeconds ?? (_cachedTimestampInSeconds = createUnixTimestampInSecondsFunc());
  return func();
}

// node_modules/@sentry/core/build/esm/session.js
function makeSession(context) {
  const startingTime = timestampInSeconds();
  const session = {
    sid: uuid4(),
    init: true,
    timestamp: startingTime,
    started: startingTime,
    duration: 0,
    status: "ok",
    errors: 0,
    ignoreDuration: false,
    toJSON: () => sessionToJSON(session)
  };
  if (context) {
    updateSession(session, context);
  }
  return session;
}
function updateSession(session, context = {}) {
  if (context.user) {
    if (!session.ipAddress && context.user.ip_address) {
      session.ipAddress = context.user.ip_address;
    }
    if (!session.did && !context.did) {
      session.did = context.user.id || context.user.email || context.user.username;
    }
  }
  session.timestamp = context.timestamp || timestampInSeconds();
  if (context.abnormal_mechanism) {
    session.abnormal_mechanism = context.abnormal_mechanism;
  }
  if (context.ignoreDuration) {
    session.ignoreDuration = context.ignoreDuration;
  }
  if (context.sid) {
    session.sid = context.sid.length === 32 ? context.sid : uuid4();
  }
  if (context.init !== void 0) {
    session.init = context.init;
  }
  if (!session.did && context.did) {
    session.did = `${context.did}`;
  }
  if (typeof context.started === "number") {
    session.started = context.started;
  }
  if (session.ignoreDuration) {
    session.duration = void 0;
  } else if (typeof context.duration === "number") {
    session.duration = context.duration;
  } else {
    const duration3 = session.timestamp - session.started;
    session.duration = duration3 >= 0 ? duration3 : 0;
  }
  if (context.release) {
    session.release = context.release;
  }
  if (context.environment) {
    session.environment = context.environment;
  }
  if (!session.ipAddress && context.ipAddress) {
    session.ipAddress = context.ipAddress;
  }
  if (!session.userAgent && context.userAgent) {
    session.userAgent = context.userAgent;
  }
  if (typeof context.errors === "number") {
    session.errors = context.errors;
  }
  if (context.status) {
    session.status = context.status;
  }
}
function closeSession(session, status) {
  let context = {};
  if (status) {
    context = { status };
  } else if (session.status === "ok") {
    context = { status: "exited" };
  }
  updateSession(session, context);
}
function sessionToJSON(session) {
  return {
    sid: `${session.sid}`,
    init: session.init,
    // Make sure that sec is converted to ms for date constructor
    started: new Date(session.started * 1e3).toISOString(),
    timestamp: new Date(session.timestamp * 1e3).toISOString(),
    status: session.status,
    errors: session.errors,
    did: typeof session.did === "number" || typeof session.did === "string" ? `${session.did}` : void 0,
    duration: session.duration,
    abnormal_mechanism: session.abnormal_mechanism,
    attrs: {
      release: session.release,
      environment: session.environment,
      ip_address: session.ipAddress,
      user_agent: session.userAgent
    }
  };
}

// node_modules/@sentry/core/build/esm/utils/merge.js
function merge(initialObj, mergeObj, levels = 2) {
  if (!mergeObj || typeof mergeObj !== "object" || levels <= 0) {
    return mergeObj;
  }
  if (initialObj && Object.keys(mergeObj).length === 0) {
    return initialObj;
  }
  const output = { ...initialObj };
  for (const key in mergeObj) {
    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {
      output[key] = merge(output[key], mergeObj[key], levels - 1);
    }
  }
  return output;
}

// node_modules/@sentry/core/build/esm/utils/propagationContext.js
function generateTraceId() {
  return uuid4();
}
function generateSpanId() {
  return uuid4().substring(16);
}

// node_modules/@sentry/core/build/esm/utils/spanOnScope.js
var SCOPE_SPAN_FIELD = "_sentrySpan";
function _setSpanForScope(scope, span) {
  if (span) {
    addNonEnumerableProperty(scope, SCOPE_SPAN_FIELD, span);
  } else {
    delete scope[SCOPE_SPAN_FIELD];
  }
}
function _getSpanForScope(scope) {
  return scope[SCOPE_SPAN_FIELD];
}

// node_modules/@sentry/core/build/esm/scope.js
var DEFAULT_MAX_BREADCRUMBS = 100;
var Scope = class _Scope {
  /** Flag if notifying is happening. */
  /** Callback for client to receive scope changes. */
  /** Callback list that will be called during event processing. */
  /** Array of breadcrumbs. */
  /** User */
  /** Tags */
  /** Extra */
  /** Contexts */
  /** Attachments */
  /** Propagation Context for distributed tracing */
  /**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   */
  /** Fingerprint */
  /** Severity */
  /**
   * Transaction Name
   *
   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.
   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.
   */
  /** Session */
  /** The client on this scope */
  /** Contains the last event id of a captured event.  */
  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
  constructor() {
    this._notifyingListeners = false;
    this._scopeListeners = [];
    this._eventProcessors = [];
    this._breadcrumbs = [];
    this._attachments = [];
    this._user = {};
    this._tags = {};
    this._extra = {};
    this._contexts = {};
    this._sdkProcessingMetadata = {};
    this._propagationContext = {
      traceId: generateTraceId(),
      sampleRand: Math.random()
    };
  }
  /**
   * Clone all data from this scope into a new scope.
   */
  clone() {
    const newScope = new _Scope();
    newScope._breadcrumbs = [...this._breadcrumbs];
    newScope._tags = { ...this._tags };
    newScope._extra = { ...this._extra };
    newScope._contexts = { ...this._contexts };
    if (this._contexts.flags) {
      newScope._contexts.flags = {
        values: [...this._contexts.flags.values]
      };
    }
    newScope._user = this._user;
    newScope._level = this._level;
    newScope._session = this._session;
    newScope._transactionName = this._transactionName;
    newScope._fingerprint = this._fingerprint;
    newScope._eventProcessors = [...this._eventProcessors];
    newScope._attachments = [...this._attachments];
    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };
    newScope._propagationContext = { ...this._propagationContext };
    newScope._client = this._client;
    newScope._lastEventId = this._lastEventId;
    _setSpanForScope(newScope, _getSpanForScope(this));
    return newScope;
  }
  /**
   * Update the client assigned to this scope.
   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,
   * as well as manually created scopes.
   */
  setClient(client) {
    this._client = client;
  }
  /**
   * Set the ID of the last captured error event.
   * This is generally only captured on the isolation scope.
   */
  setLastEventId(lastEventId2) {
    this._lastEventId = lastEventId2;
  }
  /**
   * Get the client assigned to this scope.
   */
  getClient() {
    return this._client;
  }
  /**
   * Get the ID of the last captured error event.
   * This is generally only available on the isolation scope.
   */
  lastEventId() {
    return this._lastEventId;
  }
  /**
   * @inheritDoc
   */
  addScopeListener(callback) {
    this._scopeListeners.push(callback);
  }
  /**
   * Add an event processor that will be called before an event is sent.
   */
  addEventProcessor(callback) {
    this._eventProcessors.push(callback);
    return this;
  }
  /**
   * Set the user for this scope.
   * Set to `null` to unset the user.
   */
  setUser(user) {
    this._user = user || {
      email: void 0,
      id: void 0,
      ip_address: void 0,
      username: void 0
    };
    if (this._session) {
      updateSession(this._session, { user });
    }
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Get the user from this scope.
   */
  getUser() {
    return this._user;
  }
  /**
   * Set an object that will be merged into existing tags on the scope,
   * and will be sent as tags data with the event.
   */
  setTags(tags) {
    this._tags = {
      ...this._tags,
      ...tags
    };
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Set a single tag that will be sent as tags data with the event.
   */
  setTag(key, value) {
    this._tags = { ...this._tags, [key]: value };
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Set an object that will be merged into existing extra on the scope,
   * and will be sent as extra data with the event.
   */
  setExtras(extras) {
    this._extra = {
      ...this._extra,
      ...extras
    };
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Set a single key:value extra entry that will be sent as extra data with the event.
   */
  setExtra(key, extra) {
    this._extra = { ...this._extra, [key]: extra };
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Sets the fingerprint on the scope to send with the events.
   * @param {string[]} fingerprint Fingerprint to group events in Sentry.
   */
  setFingerprint(fingerprint) {
    this._fingerprint = fingerprint;
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Sets the level on the scope for future events.
   */
  setLevel(level) {
    this._level = level;
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Sets the transaction name on the scope so that the name of e.g. taken server route or
   * the page location is attached to future events.
   *
   * IMPORTANT: Calling this function does NOT change the name of the currently active
   * root span. If you want to change the name of the active root span, use
   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.
   *
   * By default, the SDK updates the scope's transaction name automatically on sensible
   * occasions, such as a page navigation or when handling a new request on the server.
   */
  setTransactionName(name2) {
    this._transactionName = name2;
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Sets context data with the given name.
   * Data passed as context will be normalized. You can also pass `null` to unset the context.
   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.
   */
  setContext(key, context) {
    if (context === null) {
      delete this._contexts[key];
    } else {
      this._contexts[key] = context;
    }
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Set the session for the scope.
   */
  setSession(session) {
    if (!session) {
      delete this._session;
    } else {
      this._session = session;
    }
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Get the session from the scope.
   */
  getSession() {
    return this._session;
  }
  /**
   * Updates the scope with provided data. Can work in three variations:
   * - plain object containing updatable attributes
   * - Scope instance that'll extract the attributes from
   * - callback function that'll receive the current scope as an argument and allow for modifications
   */
  update(captureContext) {
    if (!captureContext) {
      return this;
    }
    const scopeToMerge = typeof captureContext === "function" ? captureContext(this) : captureContext;
    const scopeInstance = scopeToMerge instanceof _Scope ? scopeToMerge.getScopeData() : isPlainObject(scopeToMerge) ? captureContext : void 0;
    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};
    this._tags = { ...this._tags, ...tags };
    this._extra = { ...this._extra, ...extra };
    this._contexts = { ...this._contexts, ...contexts };
    if (user && Object.keys(user).length) {
      this._user = user;
    }
    if (level) {
      this._level = level;
    }
    if (fingerprint.length) {
      this._fingerprint = fingerprint;
    }
    if (propagationContext) {
      this._propagationContext = propagationContext;
    }
    return this;
  }
  /**
   * Clears the current scope and resets its properties.
   * Note: The client will not be cleared.
   */
  clear() {
    this._breadcrumbs = [];
    this._tags = {};
    this._extra = {};
    this._user = {};
    this._contexts = {};
    this._level = void 0;
    this._transactionName = void 0;
    this._fingerprint = void 0;
    this._session = void 0;
    _setSpanForScope(this, void 0);
    this._attachments = [];
    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Adds a breadcrumb to the scope.
   * By default, the last 100 breadcrumbs are kept.
   */
  addBreadcrumb(breadcrumb, maxBreadcrumbs) {
    const maxCrumbs = typeof maxBreadcrumbs === "number" ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;
    if (maxCrumbs <= 0) {
      return this;
    }
    const mergedBreadcrumb = {
      timestamp: dateTimestampInSeconds(),
      ...breadcrumb,
      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory
      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message
    };
    this._breadcrumbs.push(mergedBreadcrumb);
    if (this._breadcrumbs.length > maxCrumbs) {
      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);
      this._client?.recordDroppedEvent("buffer_overflow", "log_item");
    }
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Get the last breadcrumb of the scope.
   */
  getLastBreadcrumb() {
    return this._breadcrumbs[this._breadcrumbs.length - 1];
  }
  /**
   * Clear all breadcrumbs from the scope.
   */
  clearBreadcrumbs() {
    this._breadcrumbs = [];
    this._notifyScopeListeners();
    return this;
  }
  /**
   * Add an attachment to the scope.
   */
  addAttachment(attachment) {
    this._attachments.push(attachment);
    return this;
  }
  /**
   * Clear all attachments from the scope.
   */
  clearAttachments() {
    this._attachments = [];
    return this;
  }
  /**
   * Get the data of this scope, which should be applied to an event during processing.
   */
  getScopeData() {
    return {
      breadcrumbs: this._breadcrumbs,
      attachments: this._attachments,
      contexts: this._contexts,
      tags: this._tags,
      extra: this._extra,
      user: this._user,
      level: this._level,
      fingerprint: this._fingerprint || [],
      eventProcessors: this._eventProcessors,
      propagationContext: this._propagationContext,
      sdkProcessingMetadata: this._sdkProcessingMetadata,
      transactionName: this._transactionName,
      span: _getSpanForScope(this)
    };
  }
  /**
   * Add data which will be accessible during event processing but won't get sent to Sentry.
   */
  setSDKProcessingMetadata(newData) {
    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);
    return this;
  }
  /**
   * Add propagation context to the scope, used for distributed tracing
   */
  setPropagationContext(context) {
    this._propagationContext = context;
    return this;
  }
  /**
   * Get propagation context from the scope, used for distributed tracing
   */
  getPropagationContext() {
    return this._propagationContext;
  }
  /**
   * Capture an exception for this scope.
   *
   * @returns {string} The id of the captured Sentry event.
   */
  captureException(exception, hint) {
    const eventId = hint?.event_id || uuid4();
    if (!this._client) {
      DEBUG_BUILD && debug.warn("No client configured on scope - will not capture exception!");
      return eventId;
    }
    const syntheticException = new Error("Sentry syntheticException");
    this._client.captureException(
      exception,
      {
        originalException: exception,
        syntheticException,
        ...hint,
        event_id: eventId
      },
      this
    );
    return eventId;
  }
  /**
   * Capture a message for this scope.
   *
   * @returns {string} The id of the captured message.
   */
  captureMessage(message, level, hint) {
    const eventId = hint?.event_id || uuid4();
    if (!this._client) {
      DEBUG_BUILD && debug.warn("No client configured on scope - will not capture message!");
      return eventId;
    }
    const syntheticException = new Error(message);
    this._client.captureMessage(
      message,
      level,
      {
        originalException: message,
        syntheticException,
        ...hint,
        event_id: eventId
      },
      this
    );
    return eventId;
  }
  /**
   * Capture a Sentry event for this scope.
   *
   * @returns {string} The id of the captured event.
   */
  captureEvent(event, hint) {
    const eventId = hint?.event_id || uuid4();
    if (!this._client) {
      DEBUG_BUILD && debug.warn("No client configured on scope - will not capture event!");
      return eventId;
    }
    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);
    return eventId;
  }
  /**
   * This will be called on every set call.
   */
  _notifyScopeListeners() {
    if (!this._notifyingListeners) {
      this._notifyingListeners = true;
      this._scopeListeners.forEach((callback) => {
        callback(this);
      });
      this._notifyingListeners = false;
    }
  }
};

// node_modules/@sentry/core/build/esm/defaultScopes.js
function getDefaultCurrentScope() {
  return getGlobalSingleton("defaultCurrentScope", () => new Scope());
}
function getDefaultIsolationScope() {
  return getGlobalSingleton("defaultIsolationScope", () => new Scope());
}

// node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js
var AsyncContextStack = class {
  constructor(scope, isolationScope) {
    let assignedScope;
    if (!scope) {
      assignedScope = new Scope();
    } else {
      assignedScope = scope;
    }
    let assignedIsolationScope;
    if (!isolationScope) {
      assignedIsolationScope = new Scope();
    } else {
      assignedIsolationScope = isolationScope;
    }
    this._stack = [{ scope: assignedScope }];
    this._isolationScope = assignedIsolationScope;
  }
  /**
   * Fork a scope for the stack.
   */
  withScope(callback) {
    const scope = this._pushScope();
    let maybePromiseResult;
    try {
      maybePromiseResult = callback(scope);
    } catch (e4) {
      this._popScope();
      throw e4;
    }
    if (isThenable(maybePromiseResult)) {
      return maybePromiseResult.then(
        (res) => {
          this._popScope();
          return res;
        },
        (e4) => {
          this._popScope();
          throw e4;
        }
      );
    }
    this._popScope();
    return maybePromiseResult;
  }
  /**
   * Get the client of the stack.
   */
  getClient() {
    return this.getStackTop().client;
  }
  /**
   * Returns the scope of the top stack.
   */
  getScope() {
    return this.getStackTop().scope;
  }
  /**
   * Get the isolation scope for the stack.
   */
  getIsolationScope() {
    return this._isolationScope;
  }
  /**
   * Returns the topmost scope layer in the order domain > local > process.
   */
  getStackTop() {
    return this._stack[this._stack.length - 1];
  }
  /**
   * Push a scope to the stack.
   */
  _pushScope() {
    const scope = this.getScope().clone();
    this._stack.push({
      client: this.getClient(),
      scope
    });
    return scope;
  }
  /**
   * Pop a scope from the stack.
   */
  _popScope() {
    if (this._stack.length <= 1) return false;
    return !!this._stack.pop();
  }
};
function getAsyncContextStack() {
  const registry2 = getMainCarrier();
  const sentry = getSentryCarrier(registry2);
  return sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope());
}
function withScope(callback) {
  return getAsyncContextStack().withScope(callback);
}
function withSetScope(scope, callback) {
  const stack = getAsyncContextStack();
  return stack.withScope(() => {
    stack.getStackTop().scope = scope;
    return callback(scope);
  });
}
function withIsolationScope(callback) {
  return getAsyncContextStack().withScope(() => {
    return callback(getAsyncContextStack().getIsolationScope());
  });
}
function getStackAsyncContextStrategy() {
  return {
    withIsolationScope,
    withScope,
    withSetScope,
    withSetIsolationScope: (_isolationScope, callback) => {
      return withIsolationScope(callback);
    },
    getCurrentScope: () => getAsyncContextStack().getScope(),
    getIsolationScope: () => getAsyncContextStack().getIsolationScope()
  };
}

// node_modules/@sentry/core/build/esm/asyncContext/index.js
function getAsyncContextStrategy(carrier) {
  const sentry = getSentryCarrier(carrier);
  if (sentry.acs) {
    return sentry.acs;
  }
  return getStackAsyncContextStrategy();
}

// node_modules/@sentry/core/build/esm/currentScopes.js
function getCurrentScope() {
  const carrier = getMainCarrier();
  const acs = getAsyncContextStrategy(carrier);
  return acs.getCurrentScope();
}
function getIsolationScope() {
  const carrier = getMainCarrier();
  const acs = getAsyncContextStrategy(carrier);
  return acs.getIsolationScope();
}
function getGlobalScope() {
  return getGlobalSingleton("globalScope", () => new Scope());
}
function withScope2(...rest) {
  const carrier = getMainCarrier();
  const acs = getAsyncContextStrategy(carrier);
  if (rest.length === 2) {
    const [scope, callback] = rest;
    if (!scope) {
      return acs.withScope(callback);
    }
    return acs.withSetScope(scope, callback);
  }
  return acs.withScope(rest[0]);
}
function getClient() {
  return getCurrentScope().getClient();
}
function getTraceContextFromScope(scope) {
  const propagationContext = scope.getPropagationContext();
  const { traceId, parentSpanId, propagationSpanId } = propagationContext;
  const traceContext = {
    trace_id: traceId,
    span_id: propagationSpanId || generateSpanId()
  };
  if (parentSpanId) {
    traceContext.parent_span_id = parentSpanId;
  }
  return traceContext;
}

// node_modules/@sentry/core/build/esm/semanticAttributes.js
var SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = "sentry.source";
var SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = "sentry.sample_rate";
var SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = "sentry.previous_trace_sample_rate";
var SEMANTIC_ATTRIBUTE_SENTRY_OP = "sentry.op";
var SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = "sentry.origin";
var SEMANTIC_ATTRIBUTE_PROFILE_ID = "sentry.profile_id";
var SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = "sentry.exclusive_time";

// node_modules/@sentry/core/build/esm/tracing/spanstatus.js
var SPAN_STATUS_UNSET = 0;
var SPAN_STATUS_OK = 1;

// node_modules/@sentry/core/build/esm/tracing/utils.js
var SCOPE_ON_START_SPAN_FIELD = "_sentryScope";
var ISOLATION_SCOPE_ON_START_SPAN_FIELD = "_sentryIsolationScope";
function getCapturedScopesOnSpan(span) {
  return {
    scope: span[SCOPE_ON_START_SPAN_FIELD],
    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]
  };
}

// node_modules/@sentry/core/build/esm/utils/baggage.js
var SENTRY_BAGGAGE_KEY_PREFIX = "sentry-";
var SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;
function baggageHeaderToDynamicSamplingContext(baggageHeader) {
  const baggageObject = parseBaggageHeader(baggageHeader);
  if (!baggageObject) {
    return void 0;
  }
  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {
    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {
      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);
      acc[nonPrefixedKey] = value;
    }
    return acc;
  }, {});
  if (Object.keys(dynamicSamplingContext).length > 0) {
    return dynamicSamplingContext;
  } else {
    return void 0;
  }
}
function parseBaggageHeader(baggageHeader) {
  if (!baggageHeader || !isString(baggageHeader) && !Array.isArray(baggageHeader)) {
    return void 0;
  }
  if (Array.isArray(baggageHeader)) {
    return baggageHeader.reduce((acc, curr) => {
      const currBaggageObject = baggageHeaderToObject(curr);
      Object.entries(currBaggageObject).forEach(([key, value]) => {
        acc[key] = value;
      });
      return acc;
    }, {});
  }
  return baggageHeaderToObject(baggageHeader);
}
function baggageHeaderToObject(baggageHeader) {
  return baggageHeader.split(",").map(
    (baggageEntry) => baggageEntry.split("=").map((keyOrValue) => {
      try {
        return decodeURIComponent(keyOrValue.trim());
      } catch {
        return;
      }
    })
  ).reduce((acc, [key, value]) => {
    if (key && value) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// node_modules/@sentry/core/build/esm/utils/dsn.js
var ORG_ID_REGEX = /^o(\d+)\./;
var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function isValidProtocol(protocol) {
  return protocol === "http" || protocol === "https";
}
function dsnToString(dsn, withPassword = false) {
  const { host, path: path2, pass, port, projectId, protocol, publicKey } = dsn;
  return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ""}@${host}${port ? `:${port}` : ""}/${path2 ? `${path2}/` : path2}${projectId}`;
}
function dsnFromString(str) {
  const match = DSN_REGEX.exec(str);
  if (!match) {
    consoleSandbox(() => {
      console.error(`Invalid Sentry Dsn: ${str}`);
    });
    return void 0;
  }
  const [protocol, publicKey, pass = "", host = "", port = "", lastPath = ""] = match.slice(1);
  let path2 = "";
  let projectId = lastPath;
  const split = projectId.split("/");
  if (split.length > 1) {
    path2 = split.slice(0, -1).join("/");
    projectId = split.pop();
  }
  if (projectId) {
    const projectMatch = projectId.match(/^\d+/);
    if (projectMatch) {
      projectId = projectMatch[0];
    }
  }
  return dsnFromComponents({ host, pass, path: path2, projectId, port, protocol, publicKey });
}
function dsnFromComponents(components) {
  return {
    protocol: components.protocol,
    publicKey: components.publicKey || "",
    pass: components.pass || "",
    host: components.host,
    port: components.port || "",
    path: components.path || "",
    projectId: components.projectId
  };
}
function validateDsn(dsn) {
  if (!DEBUG_BUILD) {
    return true;
  }
  const { port, projectId, protocol } = dsn;
  const requiredComponents = ["protocol", "publicKey", "host", "projectId"];
  const hasMissingRequiredComponent = requiredComponents.find((component) => {
    if (!dsn[component]) {
      debug.error(`Invalid Sentry Dsn: ${component} missing`);
      return true;
    }
    return false;
  });
  if (hasMissingRequiredComponent) {
    return false;
  }
  if (!projectId.match(/^\d+$/)) {
    debug.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);
    return false;
  }
  if (!isValidProtocol(protocol)) {
    debug.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);
    return false;
  }
  if (port && isNaN(parseInt(port, 10))) {
    debug.error(`Invalid Sentry Dsn: Invalid port ${port}`);
    return false;
  }
  return true;
}
function extractOrgIdFromDsnHost(host) {
  const match = host.match(ORG_ID_REGEX);
  return match?.[1];
}
function extractOrgIdFromClient(client) {
  const options2 = client.getOptions();
  const { host } = client.getDsn() || {};
  let org_id;
  if (options2.orgId) {
    org_id = String(options2.orgId);
  } else if (host) {
    org_id = extractOrgIdFromDsnHost(host);
  }
  return org_id;
}
function makeDsn(from) {
  const components = typeof from === "string" ? dsnFromString(from) : dsnFromComponents(from);
  if (!components || !validateDsn(components)) {
    return void 0;
  }
  return components;
}

// node_modules/@sentry/core/build/esm/utils/parseSampleRate.js
function parseSampleRate(sampleRate) {
  if (typeof sampleRate === "boolean") {
    return Number(sampleRate);
  }
  const rate = typeof sampleRate === "string" ? parseFloat(sampleRate) : sampleRate;
  if (typeof rate !== "number" || isNaN(rate) || rate < 0 || rate > 1) {
    return void 0;
  }
  return rate;
}

// node_modules/@sentry/core/build/esm/utils/spanUtils.js
var TRACE_FLAG_SAMPLED = 1;
var hasShownSpanDropWarning = false;
function spanToTraceContext(span) {
  const { spanId, traceId: trace_id, isRemote } = span.spanContext();
  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;
  const scope = getCapturedScopesOnSpan(span).scope;
  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;
  return {
    parent_span_id,
    span_id,
    trace_id
  };
}
function convertSpanLinksForEnvelope(links) {
  if (links && links.length > 0) {
    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({
      span_id: spanId,
      trace_id: traceId,
      sampled: traceFlags === TRACE_FLAG_SAMPLED,
      attributes,
      ...restContext
    }));
  } else {
    return void 0;
  }
}
function spanTimeInputToSeconds(input) {
  if (typeof input === "number") {
    return ensureTimestampInSeconds(input);
  }
  if (Array.isArray(input)) {
    return input[0] + input[1] / 1e9;
  }
  if (input instanceof Date) {
    return ensureTimestampInSeconds(input.getTime());
  }
  return timestampInSeconds();
}
function ensureTimestampInSeconds(timestamp) {
  const isMs = timestamp > 9999999999;
  return isMs ? timestamp / 1e3 : timestamp;
}
function spanToJSON(span) {
  if (spanIsSentrySpan(span)) {
    return span.getSpanJSON();
  }
  const { spanId: span_id, traceId: trace_id } = span.spanContext();
  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {
    const { attributes, startTime, name: name2, endTime, status, links } = span;
    const parentSpanId = "parentSpanId" in span ? span.parentSpanId : "parentSpanContext" in span ? span.parentSpanContext?.spanId : void 0;
    return {
      span_id,
      trace_id,
      data: attributes,
      description: name2,
      parent_span_id: parentSpanId,
      start_timestamp: spanTimeInputToSeconds(startTime),
      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time
      timestamp: spanTimeInputToSeconds(endTime) || void 0,
      status: getStatusMessage(status),
      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],
      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
      links: convertSpanLinksForEnvelope(links)
    };
  }
  return {
    span_id,
    trace_id,
    start_timestamp: 0,
    data: {}
  };
}
function spanIsOpenTelemetrySdkTraceBaseSpan(span) {
  const castSpan = span;
  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;
}
function spanIsSentrySpan(span) {
  return typeof span.getSpanJSON === "function";
}
function spanIsSampled(span) {
  const { traceFlags } = span.spanContext();
  return traceFlags === TRACE_FLAG_SAMPLED;
}
function getStatusMessage(status) {
  if (!status || status.code === SPAN_STATUS_UNSET) {
    return void 0;
  }
  if (status.code === SPAN_STATUS_OK) {
    return "ok";
  }
  return status.message || "unknown_error";
}
var ROOT_SPAN_FIELD = "_sentryRootSpan";
function getRootSpan(span) {
  return span[ROOT_SPAN_FIELD] || span;
}
function showSpanDropWarning() {
  if (!hasShownSpanDropWarning) {
    consoleSandbox(() => {
      console.warn(
        "[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly."
      );
    });
    hasShownSpanDropWarning = true;
  }
}

// node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js
function hasSpansEnabled(maybeOptions) {
  if (typeof __SENTRY_TRACING__ === "boolean" && !__SENTRY_TRACING__) {
    return false;
  }
  const options2 = maybeOptions || getClient()?.getOptions();
  return !!options2 && // Note: This check is `!= null`, meaning "nullish". `0` is not "nullish", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)
  (options2.tracesSampleRate != null || !!options2.tracesSampler);
}

// node_modules/@sentry/core/build/esm/constants.js
var DEFAULT_ENVIRONMENT = "production";

// node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js
var FROZEN_DSC_FIELD = "_frozenDsc";
function getDynamicSamplingContextFromClient(trace_id, client) {
  const options2 = client.getOptions();
  const { publicKey: public_key } = client.getDsn() || {};
  const dsc = {
    environment: options2.environment || DEFAULT_ENVIRONMENT,
    release: options2.release,
    public_key,
    trace_id,
    org_id: extractOrgIdFromClient(client)
  };
  client.emit("createDsc", dsc);
  return dsc;
}
function getDynamicSamplingContextFromScope(client, scope) {
  const propagationContext = scope.getPropagationContext();
  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);
}
function getDynamicSamplingContextFromSpan(span) {
  const client = getClient();
  if (!client) {
    return {};
  }
  const rootSpan = getRootSpan(span);
  const rootSpanJson = spanToJSON(rootSpan);
  const rootSpanAttributes = rootSpanJson.data;
  const traceState = rootSpan.spanContext().traceState;
  const rootSpanSampleRate = traceState?.get("sentry.sample_rate") ?? rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ?? rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];
  function applyLocalSampleRateToDsc(dsc2) {
    if (typeof rootSpanSampleRate === "number" || typeof rootSpanSampleRate === "string") {
      dsc2.sample_rate = `${rootSpanSampleRate}`;
    }
    return dsc2;
  }
  const frozenDsc = rootSpan[FROZEN_DSC_FIELD];
  if (frozenDsc) {
    return applyLocalSampleRateToDsc(frozenDsc);
  }
  const traceStateDsc = traceState?.get("sentry.dsc");
  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);
  if (dscOnTraceState) {
    return applyLocalSampleRateToDsc(dscOnTraceState);
  }
  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);
  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];
  const name2 = rootSpanJson.description;
  if (source !== "url" && name2) {
    dsc.transaction = name2;
  }
  if (hasSpansEnabled()) {
    dsc.sampled = String(spanIsSampled(rootSpan));
    dsc.sample_rand = // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans
    // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span
    traceState?.get("sentry.sample_rand") ?? // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)
    getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();
  }
  applyLocalSampleRateToDsc(dsc);
  client.emit("createDsc", dsc, rootSpan);
  return dsc;
}

// node_modules/@sentry/core/build/esm/utils/normalize.js
function normalize(input, depth = 100, maxProperties = Infinity) {
  try {
    return visit("", input, depth, maxProperties);
  } catch (err) {
    return { ERROR: `**non-serializable** (${err})` };
  }
}
function normalizeToSize(object2, depth = 3, maxSize = 100 * 1024) {
  const normalized = normalize(object2, depth);
  if (jsonSize(normalized) > maxSize) {
    return normalizeToSize(object2, depth - 1, maxSize);
  }
  return normalized;
}
function visit(key, value, depth = Infinity, maxProperties = Infinity, memo4 = memoBuilder()) {
  const [memoize, unmemoize] = memo4;
  if (value == null || // this matches null and undefined -> eqeq not eqeqeq
  ["boolean", "string"].includes(typeof value) || typeof value === "number" && Number.isFinite(value)) {
    return value;
  }
  const stringified = stringifyValue(key, value);
  if (!stringified.startsWith("[object ")) {
    return stringified;
  }
  if (value["__sentry_skip_normalization__"]) {
    return value;
  }
  const remainingDepth = typeof value["__sentry_override_normalization_depth__"] === "number" ? value["__sentry_override_normalization_depth__"] : depth;
  if (remainingDepth === 0) {
    return stringified.replace("object ", "");
  }
  if (memoize(value)) {
    return "[Circular ~]";
  }
  const valueWithToJSON = value;
  if (valueWithToJSON && typeof valueWithToJSON.toJSON === "function") {
    try {
      const jsonValue = valueWithToJSON.toJSON();
      return visit("", jsonValue, remainingDepth - 1, maxProperties, memo4);
    } catch {
    }
  }
  const normalized = Array.isArray(value) ? [] : {};
  let numAdded = 0;
  const visitable = convertToPlainObject(value);
  for (const visitKey in visitable) {
    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {
      continue;
    }
    if (numAdded >= maxProperties) {
      normalized[visitKey] = "[MaxProperties ~]";
      break;
    }
    const visitValue = visitable[visitKey];
    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo4);
    numAdded++;
  }
  unmemoize(value);
  return normalized;
}
function stringifyValue(key, value) {
  try {
    if (key === "domain" && value && typeof value === "object" && value._events) {
      return "[Domain]";
    }
    if (key === "domainEmitter") {
      return "[DomainEmitter]";
    }
    if (typeof global !== "undefined" && value === global) {
      return "[Global]";
    }
    if (typeof window !== "undefined" && value === window) {
      return "[Window]";
    }
    if (typeof document !== "undefined" && value === document) {
      return "[Document]";
    }
    if (isVueViewModel(value)) {
      return "[VueViewModel]";
    }
    if (isSyntheticEvent(value)) {
      return "[SyntheticEvent]";
    }
    if (typeof value === "number" && !Number.isFinite(value)) {
      return `[${value}]`;
    }
    if (typeof value === "function") {
      return `[Function: ${getFunctionName(value)}]`;
    }
    if (typeof value === "symbol") {
      return `[${String(value)}]`;
    }
    if (typeof value === "bigint") {
      return `[BigInt: ${String(value)}]`;
    }
    const objName = getConstructorName(value);
    if (/^HTML(\w*)Element$/.test(objName)) {
      return `[HTMLElement: ${objName}]`;
    }
    return `[object ${objName}]`;
  } catch (err) {
    return `**non-serializable** (${err})`;
  }
}
function getConstructorName(value) {
  const prototype = Object.getPrototypeOf(value);
  return prototype?.constructor ? prototype.constructor.name : "null prototype";
}
function utf8Length(value) {
  return ~-encodeURI(value).split(/%..|./).length;
}
function jsonSize(value) {
  return utf8Length(JSON.stringify(value));
}
function memoBuilder() {
  const inner = /* @__PURE__ */ new WeakSet();
  function memoize(obj) {
    if (inner.has(obj)) {
      return true;
    }
    inner.add(obj);
    return false;
  }
  function unmemoize(obj) {
    inner.delete(obj);
  }
  return [memoize, unmemoize];
}

// node_modules/@sentry/core/build/esm/utils/envelope.js
function createEnvelope(headers, items = []) {
  return [headers, items];
}
function addItemToEnvelope(envelope, newItem) {
  const [headers, items] = envelope;
  return [headers, [...items, newItem]];
}
function forEachEnvelopeItem(envelope, callback) {
  const envelopeItems = envelope[1];
  for (const envelopeItem of envelopeItems) {
    const envelopeItemType = envelopeItem[0].type;
    const result = callback(envelopeItem, envelopeItemType);
    if (result) {
      return true;
    }
  }
  return false;
}
function encodeUTF8(input) {
  const carrier = getSentryCarrier(GLOBAL_OBJ);
  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);
}
function serializeEnvelope(envelope) {
  const [envHeaders, items] = envelope;
  let parts = JSON.stringify(envHeaders);
  function append(next) {
    if (typeof parts === "string") {
      parts = typeof next === "string" ? parts + next : [encodeUTF8(parts), next];
    } else {
      parts.push(typeof next === "string" ? encodeUTF8(next) : next);
    }
  }
  for (const item of items) {
    const [itemHeaders, payload] = item;
    append(`
${JSON.stringify(itemHeaders)}
`);
    if (typeof payload === "string" || payload instanceof Uint8Array) {
      append(payload);
    } else {
      let stringifiedPayload;
      try {
        stringifiedPayload = JSON.stringify(payload);
      } catch {
        stringifiedPayload = JSON.stringify(normalize(payload));
      }
      append(stringifiedPayload);
    }
  }
  return typeof parts === "string" ? parts : concatBuffers(parts);
}
function concatBuffers(buffers) {
  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);
  const merged = new Uint8Array(totalLength);
  let offset = 0;
  for (const buffer of buffers) {
    merged.set(buffer, offset);
    offset += buffer.length;
  }
  return merged;
}
function createAttachmentEnvelopeItem(attachment) {
  const buffer = typeof attachment.data === "string" ? encodeUTF8(attachment.data) : attachment.data;
  return [
    {
      type: "attachment",
      length: buffer.length,
      filename: attachment.filename,
      content_type: attachment.contentType,
      attachment_type: attachment.attachmentType
    },
    buffer
  ];
}
var ITEM_TYPE_TO_DATA_CATEGORY_MAP = {
  session: "session",
  sessions: "session",
  attachment: "attachment",
  transaction: "transaction",
  event: "error",
  client_report: "internal",
  user_report: "default",
  profile: "profile",
  profile_chunk: "profile",
  replay_event: "replay",
  replay_recording: "replay",
  check_in: "monitor",
  feedback: "feedback",
  span: "span",
  raw_security: "security",
  log: "log_item"
};
function envelopeItemTypeToDataCategory(type) {
  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];
}
function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {
  if (!metadataOrEvent?.sdk) {
    return;
  }
  const { name: name2, version: version4 } = metadataOrEvent.sdk;
  return { name: name2, version: version4 };
}
function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {
  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;
  return {
    event_id: event.event_id,
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...sdkInfo && { sdk: sdkInfo },
    ...!!tunnel && dsn && { dsn: dsnToString(dsn) },
    ...dynamicSamplingContext && {
      trace: dynamicSamplingContext
    }
  };
}

// node_modules/@sentry/core/build/esm/envelope.js
function enhanceEventWithSdkInfo(event, sdkInfo) {
  if (!sdkInfo) {
    return event;
  }
  event.sdk = event.sdk || {};
  event.sdk.name = event.sdk.name || sdkInfo.name;
  event.sdk.version = event.sdk.version || sdkInfo.version;
  event.sdk.integrations = [...event.sdk.integrations || [], ...sdkInfo.integrations || []];
  event.sdk.packages = [...event.sdk.packages || [], ...sdkInfo.packages || []];
  return event;
}
function createSessionEnvelope(session, dsn, metadata, tunnel) {
  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);
  const envelopeHeaders = {
    sent_at: (/* @__PURE__ */ new Date()).toISOString(),
    ...sdkInfo && { sdk: sdkInfo },
    ...!!tunnel && dsn && { dsn: dsnToString(dsn) }
  };
  const envelopeItem = "aggregates" in session ? [{ type: "sessions" }, session] : [{ type: "session" }, session.toJSON()];
  return createEnvelope(envelopeHeaders, [envelopeItem]);
}
function createEventEnvelope(event, dsn, metadata, tunnel) {
  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);
  const eventType = event.type && event.type !== "replay_event" ? event.type : "event";
  enhanceEventWithSdkInfo(event, metadata?.sdk);
  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);
  delete event.sdkProcessingMetadata;
  const eventItem = [{ type: eventType }, event];
  return createEnvelope(envelopeHeaders, [eventItem]);
}

// node_modules/@sentry/core/build/esm/utils/syncpromise.js
var STATE_PENDING = 0;
var STATE_RESOLVED = 1;
var STATE_REJECTED = 2;
function resolvedSyncPromise(value) {
  return new SyncPromise((resolve) => {
    resolve(value);
  });
}
function rejectedSyncPromise(reason) {
  return new SyncPromise((_3, reject) => {
    reject(reason);
  });
}
var SyncPromise = class _SyncPromise {
  constructor(executor) {
    this._state = STATE_PENDING;
    this._handlers = [];
    this._runExecutor(executor);
  }
  /** @inheritdoc */
  then(onfulfilled, onrejected) {
    return new _SyncPromise((resolve, reject) => {
      this._handlers.push([
        false,
        (result) => {
          if (!onfulfilled) {
            resolve(result);
          } else {
            try {
              resolve(onfulfilled(result));
            } catch (e4) {
              reject(e4);
            }
          }
        },
        (reason) => {
          if (!onrejected) {
            reject(reason);
          } else {
            try {
              resolve(onrejected(reason));
            } catch (e4) {
              reject(e4);
            }
          }
        }
      ]);
      this._executeHandlers();
    });
  }
  /** @inheritdoc */
  catch(onrejected) {
    return this.then((val) => val, onrejected);
  }
  /** @inheritdoc */
  finally(onfinally) {
    return new _SyncPromise((resolve, reject) => {
      let val;
      let isRejected;
      return this.then(
        (value) => {
          isRejected = false;
          val = value;
          if (onfinally) {
            onfinally();
          }
        },
        (reason) => {
          isRejected = true;
          val = reason;
          if (onfinally) {
            onfinally();
          }
        }
      ).then(() => {
        if (isRejected) {
          reject(val);
          return;
        }
        resolve(val);
      });
    });
  }
  /** Excute the resolve/reject handlers. */
  _executeHandlers() {
    if (this._state === STATE_PENDING) {
      return;
    }
    const cachedHandlers = this._handlers.slice();
    this._handlers = [];
    cachedHandlers.forEach((handler) => {
      if (handler[0]) {
        return;
      }
      if (this._state === STATE_RESOLVED) {
        handler[1](this._value);
      }
      if (this._state === STATE_REJECTED) {
        handler[2](this._value);
      }
      handler[0] = true;
    });
  }
  /** Run the executor for the SyncPromise. */
  _runExecutor(executor) {
    const setResult = (state, value) => {
      if (this._state !== STATE_PENDING) {
        return;
      }
      if (isThenable(value)) {
        void value.then(resolve, reject);
        return;
      }
      this._state = state;
      this._value = value;
      this._executeHandlers();
    };
    const resolve = (value) => {
      setResult(STATE_RESOLVED, value);
    };
    const reject = (reason) => {
      setResult(STATE_REJECTED, reason);
    };
    try {
      executor(resolve, reject);
    } catch (e4) {
      reject(e4);
    }
  }
};

// node_modules/@sentry/core/build/esm/eventProcessors.js
function notifyEventProcessors(processors, event, hint, index2 = 0) {
  return new SyncPromise((resolve, reject) => {
    const processor = processors[index2];
    if (event === null || typeof processor !== "function") {
      resolve(event);
    } else {
      const result = processor({ ...event }, hint);
      DEBUG_BUILD && processor.id && result === null && debug.log(`Event processor "${processor.id}" dropped event`);
      if (isThenable(result)) {
        void result.then((final) => notifyEventProcessors(processors, final, hint, index2 + 1).then(resolve)).then(null, reject);
      } else {
        void notifyEventProcessors(processors, result, hint, index2 + 1).then(resolve).then(null, reject);
      }
    }
  });
}

// node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js
function applyScopeDataToEvent(event, data2) {
  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data2;
  applyDataToEvent(event, data2);
  if (span) {
    applySpanToEvent(event, span);
  }
  applyFingerprintToEvent(event, fingerprint);
  applyBreadcrumbsToEvent(event, breadcrumbs);
  applySdkMetadataToEvent(event, sdkProcessingMetadata);
}
function mergeScopeData(data2, mergeData) {
  const {
    extra,
    tags,
    user,
    contexts,
    level,
    sdkProcessingMetadata,
    breadcrumbs,
    fingerprint,
    eventProcessors,
    attachments,
    propagationContext,
    transactionName,
    span
  } = mergeData;
  mergeAndOverwriteScopeData(data2, "extra", extra);
  mergeAndOverwriteScopeData(data2, "tags", tags);
  mergeAndOverwriteScopeData(data2, "user", user);
  mergeAndOverwriteScopeData(data2, "contexts", contexts);
  data2.sdkProcessingMetadata = merge(data2.sdkProcessingMetadata, sdkProcessingMetadata, 2);
  if (level) {
    data2.level = level;
  }
  if (transactionName) {
    data2.transactionName = transactionName;
  }
  if (span) {
    data2.span = span;
  }
  if (breadcrumbs.length) {
    data2.breadcrumbs = [...data2.breadcrumbs, ...breadcrumbs];
  }
  if (fingerprint.length) {
    data2.fingerprint = [...data2.fingerprint, ...fingerprint];
  }
  if (eventProcessors.length) {
    data2.eventProcessors = [...data2.eventProcessors, ...eventProcessors];
  }
  if (attachments.length) {
    data2.attachments = [...data2.attachments, ...attachments];
  }
  data2.propagationContext = { ...data2.propagationContext, ...propagationContext };
}
function mergeAndOverwriteScopeData(data2, prop, mergeVal) {
  data2[prop] = merge(data2[prop], mergeVal, 1);
}
function applyDataToEvent(event, data2) {
  const { extra, tags, user, contexts, level, transactionName } = data2;
  if (Object.keys(extra).length) {
    event.extra = { ...extra, ...event.extra };
  }
  if (Object.keys(tags).length) {
    event.tags = { ...tags, ...event.tags };
  }
  if (Object.keys(user).length) {
    event.user = { ...user, ...event.user };
  }
  if (Object.keys(contexts).length) {
    event.contexts = { ...contexts, ...event.contexts };
  }
  if (level) {
    event.level = level;
  }
  if (transactionName && event.type !== "transaction") {
    event.transaction = transactionName;
  }
}
function applyBreadcrumbsToEvent(event, breadcrumbs) {
  const mergedBreadcrumbs = [...event.breadcrumbs || [], ...breadcrumbs];
  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : void 0;
}
function applySdkMetadataToEvent(event, sdkProcessingMetadata) {
  event.sdkProcessingMetadata = {
    ...event.sdkProcessingMetadata,
    ...sdkProcessingMetadata
  };
}
function applySpanToEvent(event, span) {
  event.contexts = {
    trace: spanToTraceContext(span),
    ...event.contexts
  };
  event.sdkProcessingMetadata = {
    dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),
    ...event.sdkProcessingMetadata
  };
  const rootSpan = getRootSpan(span);
  const transactionName = spanToJSON(rootSpan).description;
  if (transactionName && !event.transaction && event.type === "transaction") {
    event.transaction = transactionName;
  }
}
function applyFingerprintToEvent(event, fingerprint) {
  event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];
  if (fingerprint) {
    event.fingerprint = event.fingerprint.concat(fingerprint);
  }
  if (!event.fingerprint.length) {
    delete event.fingerprint;
  }
}

// node_modules/@sentry/core/build/esm/utils/debug-ids.js
var parsedStackResults;
var lastKeysCount;
var cachedFilenameDebugIds;
function getFilenameToDebugIdMap(stackParser) {
  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;
  if (!debugIdMap) {
    return {};
  }
  const debugIdKeys = Object.keys(debugIdMap);
  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {
    return cachedFilenameDebugIds;
  }
  lastKeysCount = debugIdKeys.length;
  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {
    if (!parsedStackResults) {
      parsedStackResults = {};
    }
    const result = parsedStackResults[stackKey];
    if (result) {
      acc[result[0]] = result[1];
    } else {
      const parsedStack = stackParser(stackKey);
      for (let i3 = parsedStack.length - 1; i3 >= 0; i3--) {
        const stackFrame = parsedStack[i3];
        const filename = stackFrame?.filename;
        const debugId = debugIdMap[stackKey];
        if (filename && debugId) {
          acc[filename] = debugId;
          parsedStackResults[stackKey] = [filename, debugId];
          break;
        }
      }
    }
    return acc;
  }, {});
  return cachedFilenameDebugIds;
}

// node_modules/@sentry/core/build/esm/utils/prepareEvent.js
function prepareEvent(options2, event, hint, scope, client, isolationScope) {
  const { normalizeDepth = 3, normalizeMaxBreadth = 1e3 } = options2;
  const prepared = {
    ...event,
    event_id: event.event_id || hint.event_id || uuid4(),
    timestamp: event.timestamp || dateTimestampInSeconds()
  };
  const integrations = hint.integrations || options2.integrations.map((i3) => i3.name);
  applyClientOptions(prepared, options2);
  applyIntegrationsMetadata(prepared, integrations);
  if (client) {
    client.emit("applyFrameMetadata", event);
  }
  if (event.type === void 0) {
    applyDebugIds(prepared, options2.stackParser);
  }
  const finalScope = getFinalScope(scope, hint.captureContext);
  if (hint.mechanism) {
    addExceptionMechanism(prepared, hint.mechanism);
  }
  const clientEventProcessors = client ? client.getEventProcessors() : [];
  const data2 = getGlobalScope().getScopeData();
  if (isolationScope) {
    const isolationData = isolationScope.getScopeData();
    mergeScopeData(data2, isolationData);
  }
  if (finalScope) {
    const finalScopeData = finalScope.getScopeData();
    mergeScopeData(data2, finalScopeData);
  }
  const attachments = [...hint.attachments || [], ...data2.attachments];
  if (attachments.length) {
    hint.attachments = attachments;
  }
  applyScopeDataToEvent(prepared, data2);
  const eventProcessors = [
    ...clientEventProcessors,
    // Run scope event processors _after_ all other processors
    ...data2.eventProcessors
  ];
  const result = notifyEventProcessors(eventProcessors, prepared, hint);
  return result.then((evt) => {
    if (evt) {
      applyDebugMeta(evt);
    }
    if (typeof normalizeDepth === "number" && normalizeDepth > 0) {
      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);
    }
    return evt;
  });
}
function applyClientOptions(event, options2) {
  const { environment, release, dist, maxValueLength = 250 } = options2;
  event.environment = event.environment || environment || DEFAULT_ENVIRONMENT;
  if (!event.release && release) {
    event.release = release;
  }
  if (!event.dist && dist) {
    event.dist = dist;
  }
  const request = event.request;
  if (request?.url) {
    request.url = truncate(request.url, maxValueLength);
  }
}
function applyDebugIds(event, stackParser) {
  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);
  event.exception?.values?.forEach((exception) => {
    exception.stacktrace?.frames?.forEach((frame) => {
      if (frame.filename) {
        frame.debug_id = filenameDebugIdMap[frame.filename];
      }
    });
  });
}
function applyDebugMeta(event) {
  const filenameDebugIdMap = {};
  event.exception?.values?.forEach((exception) => {
    exception.stacktrace?.frames?.forEach((frame) => {
      if (frame.debug_id) {
        if (frame.abs_path) {
          filenameDebugIdMap[frame.abs_path] = frame.debug_id;
        } else if (frame.filename) {
          filenameDebugIdMap[frame.filename] = frame.debug_id;
        }
        delete frame.debug_id;
      }
    });
  });
  if (Object.keys(filenameDebugIdMap).length === 0) {
    return;
  }
  event.debug_meta = event.debug_meta || {};
  event.debug_meta.images = event.debug_meta.images || [];
  const images = event.debug_meta.images;
  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {
    images.push({
      type: "sourcemap",
      code_file: filename,
      debug_id
    });
  });
}
function applyIntegrationsMetadata(event, integrationNames) {
  if (integrationNames.length > 0) {
    event.sdk = event.sdk || {};
    event.sdk.integrations = [...event.sdk.integrations || [], ...integrationNames];
  }
}
function normalizeEvent(event, depth, maxBreadth) {
  if (!event) {
    return null;
  }
  const normalized = {
    ...event,
    ...event.breadcrumbs && {
      breadcrumbs: event.breadcrumbs.map((b3) => ({
        ...b3,
        ...b3.data && {
          data: normalize(b3.data, depth, maxBreadth)
        }
      }))
    },
    ...event.user && {
      user: normalize(event.user, depth, maxBreadth)
    },
    ...event.contexts && {
      contexts: normalize(event.contexts, depth, maxBreadth)
    },
    ...event.extra && {
      extra: normalize(event.extra, depth, maxBreadth)
    }
  };
  if (event.contexts?.trace && normalized.contexts) {
    normalized.contexts.trace = event.contexts.trace;
    if (event.contexts.trace.data) {
      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);
    }
  }
  if (event.spans) {
    normalized.spans = event.spans.map((span) => {
      return {
        ...span,
        ...span.data && {
          data: normalize(span.data, depth, maxBreadth)
        }
      };
    });
  }
  if (event.contexts?.flags && normalized.contexts) {
    normalized.contexts.flags = normalize(event.contexts.flags, 3, maxBreadth);
  }
  return normalized;
}
function getFinalScope(scope, captureContext) {
  if (!captureContext) {
    return scope;
  }
  const finalScope = scope ? scope.clone() : new Scope();
  finalScope.update(captureContext);
  return finalScope;
}
function parseEventHintOrCaptureContext(hint) {
  if (!hint) {
    return void 0;
  }
  if (hintIsScopeOrFunction(hint)) {
    return { captureContext: hint };
  }
  if (hintIsScopeContext(hint)) {
    return {
      captureContext: hint
    };
  }
  return hint;
}
function hintIsScopeOrFunction(hint) {
  return hint instanceof Scope || typeof hint === "function";
}
var captureContextKeys = [
  "user",
  "level",
  "extra",
  "contexts",
  "tags",
  "fingerprint",
  "propagationContext"
];
function hintIsScopeContext(hint) {
  return Object.keys(hint).some((key) => captureContextKeys.includes(key));
}

// node_modules/@sentry/core/build/esm/exports.js
function captureException(exception, hint) {
  return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));
}
function captureMessage(message, captureContext) {
  const level = typeof captureContext === "string" ? captureContext : void 0;
  const context = typeof captureContext !== "string" ? { captureContext } : void 0;
  return getCurrentScope().captureMessage(message, level, context);
}
function captureEvent(event, hint) {
  return getCurrentScope().captureEvent(event, hint);
}
function setContext(name2, context) {
  getIsolationScope().setContext(name2, context);
}
function setTag(key, value) {
  getIsolationScope().setTag(key, value);
}
function setUser(user) {
  getIsolationScope().setUser(user);
}
function lastEventId() {
  return getIsolationScope().lastEventId();
}
function startSession(context) {
  const isolationScope = getIsolationScope();
  const currentScope = getCurrentScope();
  const { userAgent } = GLOBAL_OBJ.navigator || {};
  const session = makeSession({
    user: currentScope.getUser() || isolationScope.getUser(),
    ...userAgent && { userAgent },
    ...context
  });
  const currentSession = isolationScope.getSession();
  if (currentSession?.status === "ok") {
    updateSession(currentSession, { status: "exited" });
  }
  endSession();
  isolationScope.setSession(session);
  return session;
}
function endSession() {
  const isolationScope = getIsolationScope();
  const currentScope = getCurrentScope();
  const session = currentScope.getSession() || isolationScope.getSession();
  if (session) {
    closeSession(session);
  }
  _sendSessionUpdate();
  isolationScope.setSession();
}
function _sendSessionUpdate() {
  const isolationScope = getIsolationScope();
  const client = getClient();
  const session = isolationScope.getSession();
  if (session && client) {
    client.captureSession(session);
  }
}
function captureSession(end = false) {
  if (end) {
    endSession();
    return;
  }
  _sendSessionUpdate();
}

// node_modules/@sentry/core/build/esm/api.js
var SENTRY_API_VERSION = "7";
function getBaseApiEndpoint(dsn) {
  const protocol = dsn.protocol ? `${dsn.protocol}:` : "";
  const port = dsn.port ? `:${dsn.port}` : "";
  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ""}/api/`;
}
function _getIngestEndpoint(dsn) {
  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;
}
function _encodedAuth(dsn, sdkInfo) {
  const params = {
    sentry_version: SENTRY_API_VERSION
  };
  if (dsn.publicKey) {
    params.sentry_key = dsn.publicKey;
  }
  if (sdkInfo) {
    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;
  }
  return new URLSearchParams(params).toString();
}
function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {
  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;
}
function getReportDialogEndpoint(dsnLike, dialogOptions) {
  const dsn = makeDsn(dsnLike);
  if (!dsn) {
    return "";
  }
  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;
  let encodedOptions = `dsn=${dsnToString(dsn)}`;
  for (const key in dialogOptions) {
    if (key === "dsn") {
      continue;
    }
    if (key === "onClose") {
      continue;
    }
    if (key === "user") {
      const user = dialogOptions.user;
      if (!user) {
        continue;
      }
      if (user.name) {
        encodedOptions += `&name=${encodeURIComponent(user.name)}`;
      }
      if (user.email) {
        encodedOptions += `&email=${encodeURIComponent(user.email)}`;
      }
    } else {
      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;
    }
  }
  return `${endpoint}?${encodedOptions}`;
}

// node_modules/@sentry/core/build/esm/integration.js
var installedIntegrations = [];
function filterDuplicates(integrations) {
  const integrationsByName = {};
  integrations.forEach((currentInstance) => {
    const { name: name2 } = currentInstance;
    const existingInstance = integrationsByName[name2];
    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {
      return;
    }
    integrationsByName[name2] = currentInstance;
  });
  return Object.values(integrationsByName);
}
function getIntegrationsToSetup(options2) {
  const defaultIntegrations = options2.defaultIntegrations || [];
  const userIntegrations = options2.integrations;
  defaultIntegrations.forEach((integration) => {
    integration.isDefaultInstance = true;
  });
  let integrations;
  if (Array.isArray(userIntegrations)) {
    integrations = [...defaultIntegrations, ...userIntegrations];
  } else if (typeof userIntegrations === "function") {
    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);
    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];
  } else {
    integrations = defaultIntegrations;
  }
  return filterDuplicates(integrations);
}
function setupIntegrations(client, integrations) {
  const integrationIndex = {};
  integrations.forEach((integration) => {
    if (integration) {
      setupIntegration(client, integration, integrationIndex);
    }
  });
  return integrationIndex;
}
function afterSetupIntegrations(client, integrations) {
  for (const integration of integrations) {
    if (integration?.afterAllSetup) {
      integration.afterAllSetup(client);
    }
  }
}
function setupIntegration(client, integration, integrationIndex) {
  if (integrationIndex[integration.name]) {
    DEBUG_BUILD && debug.log(`Integration skipped because it was already installed: ${integration.name}`);
    return;
  }
  integrationIndex[integration.name] = integration;
  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === "function") {
    integration.setupOnce();
    installedIntegrations.push(integration.name);
  }
  if (integration.setup && typeof integration.setup === "function") {
    integration.setup(client);
  }
  if (typeof integration.preprocessEvent === "function") {
    const callback = integration.preprocessEvent.bind(integration);
    client.on("preprocessEvent", (event, hint) => callback(event, hint, client));
  }
  if (typeof integration.processEvent === "function") {
    const callback = integration.processEvent.bind(integration);
    const processor = Object.assign((event, hint) => callback(event, hint, client), {
      id: integration.name
    });
    client.addEventProcessor(processor);
  }
  DEBUG_BUILD && debug.log(`Integration installed: ${integration.name}`);
}
function defineIntegration(fn) {
  return fn;
}

// node_modules/@sentry/core/build/esm/utils/clientreport.js
function createClientReportEnvelope(discarded_events, dsn, timestamp) {
  const clientReportItem = [
    { type: "client_report" },
    {
      timestamp: timestamp || dateTimestampInSeconds(),
      discarded_events
    }
  ];
  return createEnvelope(dsn ? { dsn } : {}, [clientReportItem]);
}

// node_modules/@sentry/core/build/esm/utils/eventUtils.js
function getPossibleEventMessages(event) {
  const possibleMessages = [];
  if (event.message) {
    possibleMessages.push(event.message);
  }
  try {
    const lastException = event.exception.values[event.exception.values.length - 1];
    if (lastException?.value) {
      possibleMessages.push(lastException.value);
      if (lastException.type) {
        possibleMessages.push(`${lastException.type}: ${lastException.value}`);
      }
    }
  } catch {
  }
  return possibleMessages;
}

// node_modules/@sentry/core/build/esm/utils/transactionEvent.js
function convertTransactionEventToSpanJson(event) {
  const { trace_id, parent_span_id, span_id, status, origin, data: data2, op } = event.contexts?.trace ?? {};
  return {
    data: data2 ?? {},
    description: event.transaction,
    op,
    parent_span_id,
    span_id: span_id ?? "",
    start_timestamp: event.start_timestamp ?? 0,
    status,
    timestamp: event.timestamp,
    trace_id: trace_id ?? "",
    origin,
    profile_id: data2?.[SEMANTIC_ATTRIBUTE_PROFILE_ID],
    exclusive_time: data2?.[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
    measurements: event.measurements,
    is_segment: true
  };
}
function convertSpanJsonToTransactionEvent(span) {
  return {
    type: "transaction",
    timestamp: span.timestamp,
    start_timestamp: span.start_timestamp,
    transaction: span.description,
    contexts: {
      trace: {
        trace_id: span.trace_id,
        span_id: span.span_id,
        parent_span_id: span.parent_span_id,
        op: span.op,
        status: span.status,
        origin: span.origin,
        data: {
          ...span.data,
          ...span.profile_id && { [SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id },
          ...span.exclusive_time && { [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }
        }
      }
    },
    measurements: span.measurements
  };
}

// node_modules/@sentry/core/build/esm/client.js
var ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
var MISSING_RELEASE_FOR_SESSION_ERROR = "Discarded session because of missing or non-string release";
var INTERNAL_ERROR_SYMBOL = Symbol.for("SentryInternalError");
var DO_NOT_SEND_EVENT_SYMBOL = Symbol.for("SentryDoNotSendEventError");
function _makeInternalError(message) {
  return {
    message,
    [INTERNAL_ERROR_SYMBOL]: true
  };
}
function _makeDoNotSendEventError(message) {
  return {
    message,
    [DO_NOT_SEND_EVENT_SYMBOL]: true
  };
}
function _isInternalError(error44) {
  return !!error44 && typeof error44 === "object" && INTERNAL_ERROR_SYMBOL in error44;
}
function _isDoNotSendEventError(error44) {
  return !!error44 && typeof error44 === "object" && DO_NOT_SEND_EVENT_SYMBOL in error44;
}
var Client = class {
  /** Options passed to the SDK. */
  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */
  /** Array of set up integrations. */
  /** Number of calls being processed */
  /** Holds flushable  */
  // eslint-disable-next-line @typescript-eslint/ban-types
  /**
   * Initializes this client instance.
   *
   * @param options Options for the client.
   */
  constructor(options2) {
    this._options = options2;
    this._integrations = {};
    this._numProcessing = 0;
    this._outcomes = {};
    this._hooks = {};
    this._eventProcessors = [];
    if (options2.dsn) {
      this._dsn = makeDsn(options2.dsn);
    } else {
      DEBUG_BUILD && debug.warn("No DSN provided, client will not send events.");
    }
    if (this._dsn) {
      const url2 = getEnvelopeEndpointWithUrlEncodedAuth(
        this._dsn,
        options2.tunnel,
        options2._metadata ? options2._metadata.sdk : void 0
      );
      this._transport = options2.transport({
        tunnel: this._options.tunnel,
        recordDroppedEvent: this.recordDroppedEvent.bind(this),
        ...options2.transportOptions,
        url: url2
      });
    }
  }
  /**
   * Captures an exception event and sends it to Sentry.
   *
   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.
   */
  captureException(exception, hint, scope) {
    const eventId = uuid4();
    if (checkOrSetAlreadyCaught(exception)) {
      DEBUG_BUILD && debug.log(ALREADY_SEEN_ERROR);
      return eventId;
    }
    const hintWithEventId = {
      event_id: eventId,
      ...hint
    };
    this._process(
      this.eventFromException(exception, hintWithEventId).then(
        (event) => this._captureEvent(event, hintWithEventId, scope)
      )
    );
    return hintWithEventId.event_id;
  }
  /**
   * Captures a message event and sends it to Sentry.
   *
   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.
   */
  captureMessage(message, level, hint, currentScope) {
    const hintWithEventId = {
      event_id: uuid4(),
      ...hint
    };
    const eventMessage = isParameterizedString(message) ? message : String(message);
    const promisedEvent = isPrimitive(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);
    this._process(promisedEvent.then((event) => this._captureEvent(event, hintWithEventId, currentScope)));
    return hintWithEventId.event_id;
  }
  /**
   * Captures a manually created event and sends it to Sentry.
   *
   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.
   */
  captureEvent(event, hint, currentScope) {
    const eventId = uuid4();
    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {
      DEBUG_BUILD && debug.log(ALREADY_SEEN_ERROR);
      return eventId;
    }
    const hintWithEventId = {
      event_id: eventId,
      ...hint
    };
    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};
    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;
    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;
    this._process(
      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope)
    );
    return hintWithEventId.event_id;
  }
  /**
   * Captures a session.
   */
  captureSession(session) {
    this.sendSession(session);
    updateSession(session, { init: false });
  }
  /**
   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.
   *
   * @param checkIn An object that describes a check in.
   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want
   * to create a monitor automatically when sending a check in.
   * @param scope An optional scope containing event metadata.
   * @returns A string representing the id of the check in.
   */
  /**
   * Get the current Dsn.
   */
  getDsn() {
    return this._dsn;
  }
  /**
   * Get the current options.
   */
  getOptions() {
    return this._options;
  }
  /**
   * Get the SDK metadata.
   * @see SdkMetadata
   */
  getSdkMetadata() {
    return this._options._metadata;
  }
  /**
   * Returns the transport that is used by the client.
   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.
   */
  getTransport() {
    return this._transport;
  }
  /**
   * Wait for all events to be sent or the timeout to expire, whichever comes first.
   *
   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will
   *   cause the client to wait until all events are sent before resolving the promise.
   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are
   * still events in the queue when the timeout is reached.
   */
  flush(timeout) {
    const transport = this._transport;
    if (transport) {
      this.emit("flush");
      return this._isClientDoneProcessing(timeout).then((clientFinished) => {
        return transport.flush(timeout).then((transportFlushed) => clientFinished && transportFlushed);
      });
    } else {
      return resolvedSyncPromise(true);
    }
  }
  /**
   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.
   *
   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause
   *   the client to wait until all events are sent before disabling itself.
   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if
   * it doesn't.
   */
  close(timeout) {
    return this.flush(timeout).then((result) => {
      this.getOptions().enabled = false;
      this.emit("close");
      return result;
    });
  }
  /**
   * Get all installed event processors.
   */
  getEventProcessors() {
    return this._eventProcessors;
  }
  /**
   * Adds an event processor that applies to any event processed by this client.
   */
  addEventProcessor(eventProcessor) {
    this._eventProcessors.push(eventProcessor);
  }
  /**
   * Initialize this client.
   * Call this after the client was set on a scope.
   */
  init() {
    if (this._isEnabled() || // Force integrations to be setup even if no DSN was set when we have
    // Spotlight enabled. This is particularly important for browser as we
    // don't support the `spotlight` option there and rely on the users
    // adding the `spotlightBrowserIntegration()` to their integrations which
    // wouldn't get initialized with the check below when there's no DSN set.
    this._options.integrations.some(({ name: name2 }) => name2.startsWith("Spotlight"))) {
      this._setupIntegrations();
    }
  }
  /**
   * Gets an installed integration by its name.
   *
   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.
   */
  getIntegrationByName(integrationName) {
    return this._integrations[integrationName];
  }
  /**
   * Add an integration to the client.
   * This can be used to e.g. lazy load integrations.
   * In most cases, this should not be necessary,
   * and you're better off just passing the integrations via `integrations: []` at initialization time.
   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.
   */
  addIntegration(integration) {
    const isAlreadyInstalled = this._integrations[integration.name];
    setupIntegration(this, integration, this._integrations);
    if (!isAlreadyInstalled) {
      afterSetupIntegrations(this, [integration]);
    }
  }
  /**
   * Send a fully prepared event to Sentry.
   */
  sendEvent(event, hint = {}) {
    this.emit("beforeSendEvent", event, hint);
    let env2 = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);
    for (const attachment of hint.attachments || []) {
      env2 = addItemToEnvelope(env2, createAttachmentEnvelopeItem(attachment));
    }
    const promise2 = this.sendEnvelope(env2);
    if (promise2) {
      promise2.then((sendResponse) => this.emit("afterSendEvent", event, sendResponse), null);
    }
  }
  /**
   * Send a session or session aggregrates to Sentry.
   */
  sendSession(session) {
    const { release: clientReleaseOption, environment: clientEnvironmentOption = DEFAULT_ENVIRONMENT } = this._options;
    if ("aggregates" in session) {
      const sessionAttrs = session.attrs || {};
      if (!sessionAttrs.release && !clientReleaseOption) {
        DEBUG_BUILD && debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);
        return;
      }
      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;
      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;
      session.attrs = sessionAttrs;
    } else {
      if (!session.release && !clientReleaseOption) {
        DEBUG_BUILD && debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);
        return;
      }
      session.release = session.release || clientReleaseOption;
      session.environment = session.environment || clientEnvironmentOption;
    }
    this.emit("beforeSendSession", session);
    const env2 = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);
    this.sendEnvelope(env2);
  }
  /**
   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).
   */
  recordDroppedEvent(reason, category, count = 1) {
    if (this._options.sendClientReports) {
      const key = `${reason}:${category}`;
      DEBUG_BUILD && debug.log(`Recording outcome: "${key}"${count > 1 ? ` (${count} times)` : ""}`);
      this._outcomes[key] = (this._outcomes[key] || 0) + count;
    }
  }
  /* eslint-disable @typescript-eslint/unified-signatures */
  /**
   * Register a callback for whenever a span is started.
   * Receives the span as argument.
   * @returns {() => void} A function that, when executed, removes the registered callback.
   */
  /**
   * Register a hook on this client.
   */
  on(hook, callback) {
    const hooks = this._hooks[hook] = this._hooks[hook] || [];
    hooks.push(callback);
    return () => {
      const cbIndex = hooks.indexOf(callback);
      if (cbIndex > -1) {
        hooks.splice(cbIndex, 1);
      }
    };
  }
  /** Fire a hook whenever a span starts. */
  /**
   * Emit a hook that was previously registered via `on()`.
   */
  emit(hook, ...rest) {
    const callbacks = this._hooks[hook];
    if (callbacks) {
      callbacks.forEach((callback) => callback(...rest));
    }
  }
  /**
   * Send an envelope to Sentry.
   */
  sendEnvelope(envelope) {
    this.emit("beforeEnvelope", envelope);
    if (this._isEnabled() && this._transport) {
      return this._transport.send(envelope).then(null, (reason) => {
        DEBUG_BUILD && debug.error("Error while sending envelope:", reason);
        return reason;
      });
    }
    DEBUG_BUILD && debug.error("Transport disabled");
    return resolvedSyncPromise({});
  }
  /* eslint-enable @typescript-eslint/unified-signatures */
  /** Setup integrations for this client. */
  _setupIntegrations() {
    const { integrations } = this._options;
    this._integrations = setupIntegrations(this, integrations);
    afterSetupIntegrations(this, integrations);
  }
  /** Updates existing session based on the provided event */
  _updateSessionFromEvent(session, event) {
    let crashed = event.level === "fatal";
    let errored = false;
    const exceptions = event.exception?.values;
    if (exceptions) {
      errored = true;
      for (const ex of exceptions) {
        const mechanism = ex.mechanism;
        if (mechanism?.handled === false) {
          crashed = true;
          break;
        }
      }
    }
    const sessionNonTerminal = session.status === "ok";
    const shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;
    if (shouldUpdateAndSend) {
      updateSession(session, {
        ...crashed && { status: "crashed" },
        errors: session.errors || Number(errored || crashed)
      });
      this.captureSession(session);
    }
  }
  /**
   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
   * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
   * `false` otherwise
   */
  _isClientDoneProcessing(timeout) {
    return new SyncPromise((resolve) => {
      let ticked = 0;
      const tick = 1;
      const interval = setInterval(() => {
        if (this._numProcessing == 0) {
          clearInterval(interval);
          resolve(true);
        } else {
          ticked += tick;
          if (timeout && ticked >= timeout) {
            clearInterval(interval);
            resolve(false);
          }
        }
      }, tick);
    });
  }
  /** Determines whether this SDK is enabled and a transport is present. */
  _isEnabled() {
    return this.getOptions().enabled !== false && this._transport !== void 0;
  }
  /**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param currentScope A scope containing event metadata.
   * @returns A new event with more information.
   */
  _prepareEvent(event, hint, currentScope, isolationScope) {
    const options2 = this.getOptions();
    const integrations = Object.keys(this._integrations);
    if (!hint.integrations && integrations?.length) {
      hint.integrations = integrations;
    }
    this.emit("preprocessEvent", event, hint);
    if (!event.type) {
      isolationScope.setLastEventId(event.event_id || hint.event_id);
    }
    return prepareEvent(options2, event, hint, currentScope, this, isolationScope).then((evt) => {
      if (evt === null) {
        return evt;
      }
      this.emit("postprocessEvent", evt, hint);
      evt.contexts = {
        trace: getTraceContextFromScope(currentScope),
        ...evt.contexts
      };
      const dynamicSamplingContext = getDynamicSamplingContextFromScope(this, currentScope);
      evt.sdkProcessingMetadata = {
        dynamicSamplingContext,
        ...evt.sdkProcessingMetadata
      };
      return evt;
    });
  }
  /**
   * Processes the event and logs an error in case of rejection
   * @param event
   * @param hint
   * @param scope
   */
  _captureEvent(event, hint = {}, currentScope = getCurrentScope(), isolationScope = getIsolationScope()) {
    if (DEBUG_BUILD && isErrorEvent2(event)) {
      debug.log(`Captured error event \`${getPossibleEventMessages(event)[0] || "<unknown>"}\``);
    }
    return this._processEvent(event, hint, currentScope, isolationScope).then(
      (finalEvent) => {
        return finalEvent.event_id;
      },
      (reason) => {
        if (DEBUG_BUILD) {
          if (_isDoNotSendEventError(reason)) {
            debug.log(reason.message);
          } else if (_isInternalError(reason)) {
            debug.warn(reason.message);
          } else {
            debug.warn(reason);
          }
        }
        return void 0;
      }
    );
  }
  /**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param currentScope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */
  _processEvent(event, hint, currentScope, isolationScope) {
    const options2 = this.getOptions();
    const { sampleRate } = options2;
    const isTransaction = isTransactionEvent(event);
    const isError2 = isErrorEvent2(event);
    const eventType = event.type || "error";
    const beforeSendLabel = `before send for type \`${eventType}\``;
    const parsedSampleRate = typeof sampleRate === "undefined" ? void 0 : parseSampleRate(sampleRate);
    if (isError2 && typeof parsedSampleRate === "number" && Math.random() > parsedSampleRate) {
      this.recordDroppedEvent("sample_rate", "error");
      return rejectedSyncPromise(
        _makeDoNotSendEventError(
          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`
        )
      );
    }
    const dataCategory = eventType === "replay_event" ? "replay" : eventType;
    return this._prepareEvent(event, hint, currentScope, isolationScope).then((prepared) => {
      if (prepared === null) {
        this.recordDroppedEvent("event_processor", dataCategory);
        throw _makeDoNotSendEventError("An event processor returned `null`, will not send event.");
      }
      const isInternalException = hint.data && hint.data.__sentry__ === true;
      if (isInternalException) {
        return prepared;
      }
      const result = processBeforeSend(this, options2, prepared, hint);
      return _validateBeforeSendResult(result, beforeSendLabel);
    }).then((processedEvent) => {
      if (processedEvent === null) {
        this.recordDroppedEvent("before_send", dataCategory);
        if (isTransaction) {
          const spans = event.spans || [];
          const spanCount = 1 + spans.length;
          this.recordDroppedEvent("before_send", "span", spanCount);
        }
        throw _makeDoNotSendEventError(`${beforeSendLabel} returned \`null\`, will not send event.`);
      }
      const session = currentScope.getSession() || isolationScope.getSession();
      if (isError2 && session) {
        this._updateSessionFromEvent(session, processedEvent);
      }
      if (isTransaction) {
        const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;
        const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;
        const droppedSpanCount = spanCountBefore - spanCountAfter;
        if (droppedSpanCount > 0) {
          this.recordDroppedEvent("before_send", "span", droppedSpanCount);
        }
      }
      const transactionInfo = processedEvent.transaction_info;
      if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {
        const source = "custom";
        processedEvent.transaction_info = {
          ...transactionInfo,
          source
        };
      }
      this.sendEvent(processedEvent, hint);
      return processedEvent;
    }).then(null, (reason) => {
      if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {
        throw reason;
      }
      this.captureException(reason, {
        data: {
          __sentry__: true
        },
        originalException: reason
      });
      throw _makeInternalError(
        `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${reason}`
      );
    });
  }
  /**
   * Occupies the client with processing and event
   */
  _process(promise2) {
    this._numProcessing++;
    void promise2.then(
      (value) => {
        this._numProcessing--;
        return value;
      },
      (reason) => {
        this._numProcessing--;
        return reason;
      }
    );
  }
  /**
   * Clears outcomes on this client and returns them.
   */
  _clearOutcomes() {
    const outcomes = this._outcomes;
    this._outcomes = {};
    return Object.entries(outcomes).map(([key, quantity]) => {
      const [reason, category] = key.split(":");
      return {
        reason,
        category,
        quantity
      };
    });
  }
  /**
   * Sends client reports as an envelope.
   */
  _flushOutcomes() {
    DEBUG_BUILD && debug.log("Flushing outcomes...");
    const outcomes = this._clearOutcomes();
    if (outcomes.length === 0) {
      DEBUG_BUILD && debug.log("No outcomes to send");
      return;
    }
    if (!this._dsn) {
      DEBUG_BUILD && debug.log("No dsn provided, will not send outcomes");
      return;
    }
    DEBUG_BUILD && debug.log("Sending outcomes:", outcomes);
    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));
    this.sendEnvelope(envelope);
  }
  /**
   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.
   */
};
function _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {
  const invalidValueError = `${beforeSendLabel} must return \`null\` or a valid event.`;
  if (isThenable(beforeSendResult)) {
    return beforeSendResult.then(
      (event) => {
        if (!isPlainObject(event) && event !== null) {
          throw _makeInternalError(invalidValueError);
        }
        return event;
      },
      (e4) => {
        throw _makeInternalError(`${beforeSendLabel} rejected with ${e4}`);
      }
    );
  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {
    throw _makeInternalError(invalidValueError);
  }
  return beforeSendResult;
}
function processBeforeSend(client, options2, event, hint) {
  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options2;
  let processedEvent = event;
  if (isErrorEvent2(processedEvent) && beforeSend) {
    return beforeSend(processedEvent, hint);
  }
  if (isTransactionEvent(processedEvent)) {
    if (beforeSendSpan) {
      const processedRootSpanJson = beforeSendSpan(convertTransactionEventToSpanJson(processedEvent));
      if (!processedRootSpanJson) {
        showSpanDropWarning();
      } else {
        processedEvent = merge(event, convertSpanJsonToTransactionEvent(processedRootSpanJson));
      }
      if (processedEvent.spans) {
        const processedSpans = [];
        for (const span of processedEvent.spans) {
          const processedSpan = beforeSendSpan(span);
          if (!processedSpan) {
            showSpanDropWarning();
            processedSpans.push(span);
          } else {
            processedSpans.push(processedSpan);
          }
        }
        processedEvent.spans = processedSpans;
      }
    }
    if (beforeSendTransaction) {
      if (processedEvent.spans) {
        const spanCountBefore = processedEvent.spans.length;
        processedEvent.sdkProcessingMetadata = {
          ...event.sdkProcessingMetadata,
          spanCountBeforeProcessing: spanCountBefore
        };
      }
      return beforeSendTransaction(processedEvent, hint);
    }
  }
  return processedEvent;
}
function isErrorEvent2(event) {
  return event.type === void 0;
}
function isTransactionEvent(event) {
  return event.type === "transaction";
}

// node_modules/@sentry/core/build/esm/logs/envelope.js
function createLogContainerEnvelopeItem(items) {
  return [
    {
      type: "log",
      item_count: items.length,
      content_type: "application/vnd.sentry.items.log+json"
    },
    {
      items
    }
  ];
}
function createLogEnvelope(logs, metadata, tunnel, dsn) {
  const headers = {};
  if (metadata?.sdk) {
    headers.sdk = {
      name: metadata.sdk.name,
      version: metadata.sdk.version
    };
  }
  if (!!tunnel && !!dsn) {
    headers.dsn = dsnToString(dsn);
  }
  return createEnvelope(headers, [createLogContainerEnvelopeItem(logs)]);
}

// node_modules/@sentry/core/build/esm/logs/exports.js
function _INTERNAL_flushLogsBuffer(client, maybeLogBuffer) {
  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];
  if (logBuffer.length === 0) {
    return;
  }
  const clientOptions = client.getOptions();
  const envelope = createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());
  _getBufferMap().set(client, []);
  client.emit("flushLogs");
  client.sendEnvelope(envelope);
}
function _INTERNAL_getLogBuffer(client) {
  return _getBufferMap().get(client);
}
function _getBufferMap() {
  return getGlobalSingleton("clientToLogBufferMap", () => /* @__PURE__ */ new WeakMap());
}

// node_modules/@sentry/core/build/esm/sdk.js
function initAndBind(clientClass, options2) {
  if (options2.debug === true) {
    if (DEBUG_BUILD) {
      debug.enable();
    } else {
      consoleSandbox(() => {
        console.warn("[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.");
      });
    }
  }
  const scope = getCurrentScope();
  scope.update(options2.initialScope);
  const client = new clientClass(options2);
  setCurrentClient(client);
  client.init();
  return client;
}
function setCurrentClient(client) {
  getCurrentScope().setClient(client);
}

// node_modules/@sentry/core/build/esm/utils/promisebuffer.js
var SENTRY_BUFFER_FULL_ERROR = Symbol.for("SentryBufferFullError");
function makePromiseBuffer(limit) {
  const buffer = [];
  function isReady() {
    return limit === void 0 || buffer.length < limit;
  }
  function remove(task) {
    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(void 0);
  }
  function add(taskProducer) {
    if (!isReady()) {
      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);
    }
    const task = taskProducer();
    if (buffer.indexOf(task) === -1) {
      buffer.push(task);
    }
    void task.then(() => remove(task)).then(
      null,
      () => remove(task).then(null, () => {
      })
    );
    return task;
  }
  function drain(timeout) {
    return new SyncPromise((resolve, reject) => {
      let counter = buffer.length;
      if (!counter) {
        return resolve(true);
      }
      const capturedSetTimeout = setTimeout(() => {
        if (timeout && timeout > 0) {
          resolve(false);
        }
      }, timeout);
      buffer.forEach((item) => {
        void resolvedSyncPromise(item).then(() => {
          if (!--counter) {
            clearTimeout(capturedSetTimeout);
            resolve(true);
          }
        }, reject);
      });
    });
  }
  return {
    $: buffer,
    add,
    drain
  };
}

// node_modules/@sentry/core/build/esm/utils/ratelimit.js
var DEFAULT_RETRY_AFTER = 60 * 1e3;
function parseRetryAfterHeader(header, now = Date.now()) {
  const headerDelay = parseInt(`${header}`, 10);
  if (!isNaN(headerDelay)) {
    return headerDelay * 1e3;
  }
  const headerDate = Date.parse(`${header}`);
  if (!isNaN(headerDate)) {
    return headerDate - now;
  }
  return DEFAULT_RETRY_AFTER;
}
function disabledUntil(limits, dataCategory) {
  return limits[dataCategory] || limits.all || 0;
}
function isRateLimited(limits, dataCategory, now = Date.now()) {
  return disabledUntil(limits, dataCategory) > now;
}
function updateRateLimits(limits, { statusCode, headers }, now = Date.now()) {
  const updatedRateLimits = {
    ...limits
  };
  const rateLimitHeader = headers?.["x-sentry-rate-limits"];
  const retryAfterHeader = headers?.["retry-after"];
  if (rateLimitHeader) {
    for (const limit of rateLimitHeader.trim().split(",")) {
      const [retryAfter, categories, , , namespaces] = limit.split(":", 5);
      const headerDelay = parseInt(retryAfter, 10);
      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1e3;
      if (!categories) {
        updatedRateLimits.all = now + delay;
      } else {
        for (const category of categories.split(";")) {
          if (category === "metric_bucket") {
            if (!namespaces || namespaces.split(";").includes("custom")) {
              updatedRateLimits[category] = now + delay;
            }
          } else {
            updatedRateLimits[category] = now + delay;
          }
        }
      }
    }
  } else if (retryAfterHeader) {
    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);
  } else if (statusCode === 429) {
    updatedRateLimits.all = now + 60 * 1e3;
  }
  return updatedRateLimits;
}

// node_modules/@sentry/core/build/esm/transports/base.js
var DEFAULT_TRANSPORT_BUFFER_SIZE = 64;
function createTransport(options2, makeRequest, buffer = makePromiseBuffer(
  options2.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE
)) {
  let rateLimits = {};
  const flush2 = (timeout) => buffer.drain(timeout);
  function send(envelope) {
    const filteredEnvelopeItems = [];
    forEachEnvelopeItem(envelope, (item, type) => {
      const dataCategory = envelopeItemTypeToDataCategory(type);
      if (isRateLimited(rateLimits, dataCategory)) {
        options2.recordDroppedEvent("ratelimit_backoff", dataCategory);
      } else {
        filteredEnvelopeItems.push(item);
      }
    });
    if (filteredEnvelopeItems.length === 0) {
      return resolvedSyncPromise({});
    }
    const filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems);
    const recordEnvelopeLoss = (reason) => {
      forEachEnvelopeItem(filteredEnvelope, (item, type) => {
        options2.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));
      });
    };
    const requestTask = () => makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(
      (response) => {
        if (response.statusCode !== void 0 && (response.statusCode < 200 || response.statusCode >= 300)) {
          DEBUG_BUILD && debug.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);
        }
        rateLimits = updateRateLimits(rateLimits, response);
        return response;
      },
      (error44) => {
        recordEnvelopeLoss("network_error");
        DEBUG_BUILD && debug.error("Encountered error running transport request:", error44);
        throw error44;
      }
    );
    return buffer.add(requestTask).then(
      (result) => result,
      (error44) => {
        if (error44 === SENTRY_BUFFER_FULL_ERROR) {
          DEBUG_BUILD && debug.error("Skipped sending event because buffer is full.");
          recordEnvelopeLoss("queue_overflow");
          return resolvedSyncPromise({});
        } else {
          throw error44;
        }
      }
    );
  }
  return {
    send,
    flush: flush2
  };
}

// node_modules/@sentry/core/build/esm/utils/ipAddress.js
function addAutoIpAddressToUser(objWithMaybeUser) {
  if (objWithMaybeUser.user?.ip_address === void 0) {
    objWithMaybeUser.user = {
      ...objWithMaybeUser.user,
      ip_address: "{{auto}}"
    };
  }
}
function addAutoIpAddressToSession(session) {
  if ("aggregates" in session) {
    if (session.attrs?.["ip_address"] === void 0) {
      session.attrs = {
        ...session.attrs,
        ip_address: "{{auto}}"
      };
    }
  } else {
    if (session.ipAddress === void 0) {
      session.ipAddress = "{{auto}}";
    }
  }
}

// node_modules/@sentry/core/build/esm/utils/sdkMetadata.js
function applySdkMetadata(options2, name2, names = [name2], source = "npm") {
  const metadata = options2._metadata || {};
  if (!metadata.sdk) {
    metadata.sdk = {
      name: `sentry.javascript.${name2}`,
      packages: names.map((name3) => ({
        name: `${source}:@sentry/${name3}`,
        version: SDK_VERSION
      })),
      version: SDK_VERSION
    };
  }
  options2._metadata = metadata;
}

// node_modules/@sentry/core/build/esm/breadcrumbs.js
var DEFAULT_BREADCRUMBS = 100;
function addBreadcrumb(breadcrumb, hint) {
  const client = getClient();
  const isolationScope = getIsolationScope();
  if (!client) return;
  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();
  if (maxBreadcrumbs <= 0) return;
  const timestamp = dateTimestampInSeconds();
  const mergedBreadcrumb = { timestamp, ...breadcrumb };
  const finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;
  if (finalBreadcrumb === null) return;
  if (client.emit) {
    client.emit("beforeAddBreadcrumb", finalBreadcrumb, hint);
  }
  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
}

// node_modules/@sentry/core/build/esm/integrations/functiontostring.js
var originalFunctionToString;
var INTEGRATION_NAME = "FunctionToString";
var SETUP_CLIENTS = /* @__PURE__ */ new WeakMap();
var _functionToStringIntegration = () => {
  return {
    name: INTEGRATION_NAME,
    setupOnce() {
      originalFunctionToString = Function.prototype.toString;
      try {
        Function.prototype.toString = function(...args) {
          const originalFunction = getOriginalFunction(this);
          const context = SETUP_CLIENTS.has(getClient()) && originalFunction !== void 0 ? originalFunction : this;
          return originalFunctionToString.apply(context, args);
        };
      } catch {
      }
    },
    setup(client) {
      SETUP_CLIENTS.set(client, true);
    }
  };
};
var functionToStringIntegration = defineIntegration(_functionToStringIntegration);

// node_modules/@sentry/core/build/esm/integrations/eventFilters.js
var DEFAULT_IGNORE_ERRORS = [
  /^Script error\.?$/,
  /^Javascript error: Script error\.? on line 0$/,
  /^ResizeObserver loop completed with undelivered notifications.$/,
  // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.
  /^Cannot redefine property: googletag$/,
  // This is thrown when google tag manager is used in combination with an ad blocker
  /^Can't find variable: gmo$/,
  // Error from Google Search App https://issuetracker.google.com/issues/396043331
  /^undefined is not an object \(evaluating 'a\.[A-Z]'\)$/,
  // Random error that happens but not actionable or noticeable to end-users.
  `can't redefine non-configurable property "solana"`,
  // Probably a browser extension or custom browser (Brave) throwing this error
  "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
  // Error thrown by GTM, seemingly not affecting end-users
  "Can't find variable: _AutofillCallbackHandler",
  // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/
  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/,
  // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps
  /^Java exception was raised during method invocation$/
  // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)
];
var INTEGRATION_NAME2 = "EventFilters";
var eventFiltersIntegration = defineIntegration((options2 = {}) => {
  let mergedOptions;
  return {
    name: INTEGRATION_NAME2,
    setup(client) {
      const clientOptions = client.getOptions();
      mergedOptions = _mergeOptions(options2, clientOptions);
    },
    processEvent(event, _hint, client) {
      if (!mergedOptions) {
        const clientOptions = client.getOptions();
        mergedOptions = _mergeOptions(options2, clientOptions);
      }
      return _shouldDropEvent(event, mergedOptions) ? null : event;
    }
  };
});
var inboundFiltersIntegration = defineIntegration((options2 = {}) => {
  return {
    ...eventFiltersIntegration(options2),
    name: "InboundFilters"
  };
});
function _mergeOptions(internalOptions = {}, clientOptions = {}) {
  return {
    allowUrls: [...internalOptions.allowUrls || [], ...clientOptions.allowUrls || []],
    denyUrls: [...internalOptions.denyUrls || [], ...clientOptions.denyUrls || []],
    ignoreErrors: [
      ...internalOptions.ignoreErrors || [],
      ...clientOptions.ignoreErrors || [],
      ...internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS
    ],
    ignoreTransactions: [...internalOptions.ignoreTransactions || [], ...clientOptions.ignoreTransactions || []]
  };
}
function _shouldDropEvent(event, options2) {
  if (!event.type) {
    if (_isIgnoredError(event, options2.ignoreErrors)) {
      DEBUG_BUILD && debug.warn(
        `Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${getEventDescription(event)}`
      );
      return true;
    }
    if (_isUselessError(event)) {
      DEBUG_BUILD && debug.warn(
        `Event dropped due to not having an error message, error type or stacktrace.
Event: ${getEventDescription(
          event
        )}`
      );
      return true;
    }
    if (_isDeniedUrl(event, options2.denyUrls)) {
      DEBUG_BUILD && debug.warn(
        `Event dropped due to being matched by \`denyUrls\` option.
Event: ${getEventDescription(
          event
        )}.
Url: ${_getEventFilterUrl(event)}`
      );
      return true;
    }
    if (!_isAllowedUrl(event, options2.allowUrls)) {
      DEBUG_BUILD && debug.warn(
        `Event dropped due to not being matched by \`allowUrls\` option.
Event: ${getEventDescription(
          event
        )}.
Url: ${_getEventFilterUrl(event)}`
      );
      return true;
    }
  } else if (event.type === "transaction") {
    if (_isIgnoredTransaction(event, options2.ignoreTransactions)) {
      DEBUG_BUILD && debug.warn(
        `Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${getEventDescription(event)}`
      );
      return true;
    }
  }
  return false;
}
function _isIgnoredError(event, ignoreErrors) {
  if (!ignoreErrors?.length) {
    return false;
  }
  return getPossibleEventMessages(event).some((message) => stringMatchesSomePattern(message, ignoreErrors));
}
function _isIgnoredTransaction(event, ignoreTransactions) {
  if (!ignoreTransactions?.length) {
    return false;
  }
  const name2 = event.transaction;
  return name2 ? stringMatchesSomePattern(name2, ignoreTransactions) : false;
}
function _isDeniedUrl(event, denyUrls) {
  if (!denyUrls?.length) {
    return false;
  }
  const url2 = _getEventFilterUrl(event);
  return !url2 ? false : stringMatchesSomePattern(url2, denyUrls);
}
function _isAllowedUrl(event, allowUrls) {
  if (!allowUrls?.length) {
    return true;
  }
  const url2 = _getEventFilterUrl(event);
  return !url2 ? true : stringMatchesSomePattern(url2, allowUrls);
}
function _getLastValidUrl(frames = []) {
  for (let i3 = frames.length - 1; i3 >= 0; i3--) {
    const frame = frames[i3];
    if (frame && frame.filename !== "<anonymous>" && frame.filename !== "[native code]") {
      return frame.filename || null;
    }
  }
  return null;
}
function _getEventFilterUrl(event) {
  try {
    const rootException = [...event.exception?.values ?? []].reverse().find((value) => value.mechanism?.parent_id === void 0 && value.stacktrace?.frames?.length);
    const frames = rootException?.stacktrace?.frames;
    return frames ? _getLastValidUrl(frames) : null;
  } catch {
    DEBUG_BUILD && debug.error(`Cannot extract url for event ${getEventDescription(event)}`);
    return null;
  }
}
function _isUselessError(event) {
  if (!event.exception?.values?.length) {
    return false;
  }
  return (
    // No top-level message
    !event.message && // There are no exception values that have a stacktrace, a non-generic-Error type or value
    !event.exception.values.some((value) => value.stacktrace || value.type && value.type !== "Error" || value.value)
  );
}

// node_modules/@sentry/core/build/esm/utils/aggregate-errors.js
function applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, key, limit, event, hint) {
  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {
    return;
  }
  const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : void 0;
  if (originalException) {
    event.exception.values = aggregateExceptionsFromError(
      exceptionFromErrorImplementation,
      parser,
      limit,
      hint.originalException,
      key,
      event.exception.values,
      originalException,
      0
    );
  }
}
function aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error44, key, prevExceptions, exception, exceptionId) {
  if (prevExceptions.length >= limit + 1) {
    return prevExceptions;
  }
  let newExceptions = [...prevExceptions];
  if (isInstanceOf(error44[key], Error)) {
    applyExceptionGroupFieldsForParentException(exception, exceptionId);
    const newException = exceptionFromErrorImplementation(parser, error44[key]);
    const newExceptionId = newExceptions.length;
    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);
    newExceptions = aggregateExceptionsFromError(
      exceptionFromErrorImplementation,
      parser,
      limit,
      error44[key],
      key,
      [newException, ...newExceptions],
      newException,
      newExceptionId
    );
  }
  if (Array.isArray(error44.errors)) {
    error44.errors.forEach((childError, i3) => {
      if (isInstanceOf(childError, Error)) {
        applyExceptionGroupFieldsForParentException(exception, exceptionId);
        const newException = exceptionFromErrorImplementation(parser, childError);
        const newExceptionId = newExceptions.length;
        applyExceptionGroupFieldsForChildException(newException, `errors[${i3}]`, newExceptionId, exceptionId);
        newExceptions = aggregateExceptionsFromError(
          exceptionFromErrorImplementation,
          parser,
          limit,
          childError,
          key,
          [newException, ...newExceptions],
          newException,
          newExceptionId
        );
      }
    });
  }
  return newExceptions;
}
function applyExceptionGroupFieldsForParentException(exception, exceptionId) {
  exception.mechanism = exception.mechanism || { type: "generic", handled: true };
  exception.mechanism = {
    ...exception.mechanism,
    ...exception.type === "AggregateError" && { is_exception_group: true },
    exception_id: exceptionId
  };
}
function applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {
  exception.mechanism = exception.mechanism || { type: "generic", handled: true };
  exception.mechanism = {
    ...exception.mechanism,
    type: "chained",
    source,
    exception_id: exceptionId,
    parent_id: parentId
  };
}

// node_modules/@sentry/core/build/esm/instrument/console.js
function addConsoleInstrumentationHandler(handler) {
  const type = "console";
  addHandler(type, handler);
  maybeInstrument(type, instrumentConsole);
}
function instrumentConsole() {
  if (!("console" in GLOBAL_OBJ)) {
    return;
  }
  CONSOLE_LEVELS.forEach(function(level) {
    if (!(level in GLOBAL_OBJ.console)) {
      return;
    }
    fill(GLOBAL_OBJ.console, level, function(originalConsoleMethod) {
      originalConsoleMethods[level] = originalConsoleMethod;
      return function(...args) {
        const handlerData = { args, level };
        triggerHandlers("console", handlerData);
        const log2 = originalConsoleMethods[level];
        log2?.apply(GLOBAL_OBJ.console, args);
      };
    });
  });
}

// node_modules/@sentry/core/build/esm/utils/severity.js
function severityLevelFromString(level) {
  return level === "warn" ? "warning" : ["fatal", "error", "warning", "log", "info", "debug"].includes(level) ? level : "log";
}

// node_modules/@sentry/core/build/esm/integrations/dedupe.js
var INTEGRATION_NAME3 = "Dedupe";
var _dedupeIntegration = () => {
  let previousEvent;
  return {
    name: INTEGRATION_NAME3,
    processEvent(currentEvent) {
      if (currentEvent.type) {
        return currentEvent;
      }
      try {
        if (_shouldDropEvent2(currentEvent, previousEvent)) {
          DEBUG_BUILD && debug.warn("Event dropped due to being a duplicate of previously captured event.");
          return null;
        }
      } catch {
      }
      return previousEvent = currentEvent;
    }
  };
};
var dedupeIntegration = defineIntegration(_dedupeIntegration);
function _shouldDropEvent2(currentEvent, previousEvent) {
  if (!previousEvent) {
    return false;
  }
  if (_isSameMessageEvent(currentEvent, previousEvent)) {
    return true;
  }
  if (_isSameExceptionEvent(currentEvent, previousEvent)) {
    return true;
  }
  return false;
}
function _isSameMessageEvent(currentEvent, previousEvent) {
  const currentMessage = currentEvent.message;
  const previousMessage = previousEvent.message;
  if (!currentMessage && !previousMessage) {
    return false;
  }
  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {
    return false;
  }
  if (currentMessage !== previousMessage) {
    return false;
  }
  if (!_isSameFingerprint(currentEvent, previousEvent)) {
    return false;
  }
  if (!_isSameStacktrace(currentEvent, previousEvent)) {
    return false;
  }
  return true;
}
function _isSameExceptionEvent(currentEvent, previousEvent) {
  const previousException = _getExceptionFromEvent(previousEvent);
  const currentException = _getExceptionFromEvent(currentEvent);
  if (!previousException || !currentException) {
    return false;
  }
  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
    return false;
  }
  if (!_isSameFingerprint(currentEvent, previousEvent)) {
    return false;
  }
  if (!_isSameStacktrace(currentEvent, previousEvent)) {
    return false;
  }
  return true;
}
function _isSameStacktrace(currentEvent, previousEvent) {
  let currentFrames = getFramesFromEvent(currentEvent);
  let previousFrames = getFramesFromEvent(previousEvent);
  if (!currentFrames && !previousFrames) {
    return true;
  }
  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {
    return false;
  }
  currentFrames = currentFrames;
  previousFrames = previousFrames;
  if (previousFrames.length !== currentFrames.length) {
    return false;
  }
  for (let i3 = 0; i3 < previousFrames.length; i3++) {
    const frameA = previousFrames[i3];
    const frameB = currentFrames[i3];
    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {
      return false;
    }
  }
  return true;
}
function _isSameFingerprint(currentEvent, previousEvent) {
  let currentFingerprint = currentEvent.fingerprint;
  let previousFingerprint = previousEvent.fingerprint;
  if (!currentFingerprint && !previousFingerprint) {
    return true;
  }
  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {
    return false;
  }
  currentFingerprint = currentFingerprint;
  previousFingerprint = previousFingerprint;
  try {
    return !!(currentFingerprint.join("") === previousFingerprint.join(""));
  } catch {
    return false;
  }
}
function _getExceptionFromEvent(event) {
  return event.exception?.values?.[0];
}

// node_modules/@sentry/core/build/esm/utils/url.js
function parseUrl(url2) {
  if (!url2) {
    return {};
  }
  const match = url2.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
  if (!match) {
    return {};
  }
  const query = match[6] || "";
  const fragment = match[8] || "";
  return {
    host: match[4],
    path: match[5],
    protocol: match[2],
    search: query,
    hash: fragment,
    relative: match[5] + query + fragment
    // everything minus origin
  };
}

// node_modules/@sentry/core/build/esm/utils/breadcrumb-log-level.js
function getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {
  if (statusCode === void 0) {
    return void 0;
  } else if (statusCode >= 400 && statusCode < 500) {
    return "warning";
  } else if (statusCode >= 500) {
    return "error";
  } else {
    return void 0;
  }
}

// node_modules/@sentry/core/build/esm/utils/supports.js
var WINDOW2 = GLOBAL_OBJ;
function supportsHistory() {
  return "history" in WINDOW2 && !!WINDOW2.history;
}
function _isFetchSupported() {
  if (!("fetch" in WINDOW2)) {
    return false;
  }
  try {
    new Headers();
    new Request("http://www.example.com");
    new Response();
    return true;
  } catch {
    return false;
  }
}
function isNativeFunction(func) {
  return func && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}
function supportsNativeFetch() {
  if (typeof EdgeRuntime === "string") {
    return true;
  }
  if (!_isFetchSupported()) {
    return false;
  }
  if (isNativeFunction(WINDOW2.fetch)) {
    return true;
  }
  let result = false;
  const doc = WINDOW2.document;
  if (doc && typeof doc.createElement === "function") {
    try {
      const sandbox = doc.createElement("iframe");
      sandbox.hidden = true;
      doc.head.appendChild(sandbox);
      if (sandbox.contentWindow?.fetch) {
        result = isNativeFunction(sandbox.contentWindow.fetch);
      }
      doc.head.removeChild(sandbox);
    } catch (err) {
      DEBUG_BUILD && debug.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", err);
    }
  }
  return result;
}

// node_modules/@sentry/core/build/esm/instrument/fetch.js
function addFetchInstrumentationHandler(handler, skipNativeFetchCheck) {
  const type = "fetch";
  addHandler(type, handler);
  maybeInstrument(type, () => instrumentFetch(void 0, skipNativeFetchCheck));
}
function instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {
  if (skipNativeFetchCheck && !supportsNativeFetch()) {
    return;
  }
  fill(GLOBAL_OBJ, "fetch", function(originalFetch) {
    return function(...args) {
      const virtualError = new Error();
      const { method, url: url2 } = parseFetchArgs(args);
      const handlerData = {
        args,
        fetchData: {
          method,
          url: url2
        },
        startTimestamp: timestampInSeconds() * 1e3,
        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation
        virtualError,
        headers: getHeadersFromFetchArgs(args)
      };
      if (!onFetchResolved) {
        triggerHandlers("fetch", {
          ...handlerData
        });
      }
      return originalFetch.apply(GLOBAL_OBJ, args).then(
        async (response) => {
          if (onFetchResolved) {
            onFetchResolved(response);
          } else {
            triggerHandlers("fetch", {
              ...handlerData,
              endTimestamp: timestampInSeconds() * 1e3,
              response
            });
          }
          return response;
        },
        (error44) => {
          triggerHandlers("fetch", {
            ...handlerData,
            endTimestamp: timestampInSeconds() * 1e3,
            error: error44
          });
          if (isError(error44) && error44.stack === void 0) {
            error44.stack = virtualError.stack;
            addNonEnumerableProperty(error44, "framesToPop", 1);
          }
          if (error44 instanceof TypeError && (error44.message === "Failed to fetch" || error44.message === "Load failed" || error44.message === "NetworkError when attempting to fetch resource.")) {
            try {
              const url3 = new URL(handlerData.fetchData.url);
              error44.message = `${error44.message} (${url3.host})`;
            } catch {
            }
          }
          throw error44;
        }
      );
    };
  });
}
function hasProp(obj, prop) {
  return !!obj && typeof obj === "object" && !!obj[prop];
}
function getUrlFromResource(resource) {
  if (typeof resource === "string") {
    return resource;
  }
  if (!resource) {
    return "";
  }
  if (hasProp(resource, "url")) {
    return resource.url;
  }
  if (resource.toString) {
    return resource.toString();
  }
  return "";
}
function parseFetchArgs(fetchArgs) {
  if (fetchArgs.length === 0) {
    return { method: "GET", url: "" };
  }
  if (fetchArgs.length === 2) {
    const [url2, options2] = fetchArgs;
    return {
      url: getUrlFromResource(url2),
      method: hasProp(options2, "method") ? String(options2.method).toUpperCase() : "GET"
    };
  }
  const arg = fetchArgs[0];
  return {
    url: getUrlFromResource(arg),
    method: hasProp(arg, "method") ? String(arg.method).toUpperCase() : "GET"
  };
}
function getHeadersFromFetchArgs(fetchArgs) {
  const [requestArgument, optionsArgument] = fetchArgs;
  try {
    if (typeof optionsArgument === "object" && optionsArgument !== null && "headers" in optionsArgument && optionsArgument.headers) {
      return new Headers(optionsArgument.headers);
    }
    if (isRequest(requestArgument)) {
      return new Headers(requestArgument.headers);
    }
  } catch {
  }
  return;
}

// node_modules/@sentry/core/build/esm/utils/env.js
function getSDKSource() {
  return "npm";
}

// node_modules/@sentry/browser/build/npm/esm/helpers.js
var WINDOW3 = GLOBAL_OBJ;
var ignoreOnError = 0;
function shouldIgnoreOnError() {
  return ignoreOnError > 0;
}
function ignoreNextOnError() {
  ignoreOnError++;
  setTimeout(() => {
    ignoreOnError--;
  });
}
function wrap(fn, options2 = {}) {
  function isFunction(fn2) {
    return typeof fn2 === "function";
  }
  if (!isFunction(fn)) {
    return fn;
  }
  try {
    const wrapper = fn.__sentry_wrapped__;
    if (wrapper) {
      if (typeof wrapper === "function") {
        return wrapper;
      } else {
        return fn;
      }
    }
    if (getOriginalFunction(fn)) {
      return fn;
    }
  } catch {
    return fn;
  }
  const sentryWrapped = function(...args) {
    try {
      const wrappedArguments = args.map((arg) => wrap(arg, options2));
      return fn.apply(this, wrappedArguments);
    } catch (ex) {
      ignoreNextOnError();
      withScope2((scope) => {
        scope.addEventProcessor((event) => {
          if (options2.mechanism) {
            addExceptionTypeValue(event, void 0, void 0);
            addExceptionMechanism(event, options2.mechanism);
          }
          event.extra = {
            ...event.extra,
            arguments: args
          };
          return event;
        });
        captureException(ex);
      });
      throw ex;
    }
  };
  try {
    for (const property in fn) {
      if (Object.prototype.hasOwnProperty.call(fn, property)) {
        sentryWrapped[property] = fn[property];
      }
    }
  } catch {
  }
  markFunctionWrapped(sentryWrapped, fn);
  addNonEnumerableProperty(fn, "__sentry_wrapped__", sentryWrapped);
  try {
    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, "name");
    if (descriptor.configurable) {
      Object.defineProperty(sentryWrapped, "name", {
        get() {
          return fn.name;
        }
      });
    }
  } catch {
  }
  return sentryWrapped;
}
function getHttpRequestData() {
  const url2 = getLocationHref();
  const { referrer } = WINDOW3.document || {};
  const { userAgent } = WINDOW3.navigator || {};
  const headers = {
    ...referrer && { Referer: referrer },
    ...userAgent && { "User-Agent": userAgent }
  };
  const request = {
    url: url2,
    headers
  };
  return request;
}

// node_modules/@sentry/browser/build/npm/esm/eventbuilder.js
function exceptionFromError(stackParser, ex) {
  const frames = parseStackFrames(stackParser, ex);
  const exception = {
    type: extractType(ex),
    value: extractMessage(ex)
  };
  if (frames.length) {
    exception.stacktrace = { frames };
  }
  if (exception.type === void 0 && exception.value === "") {
    exception.value = "Unrecoverable error caught";
  }
  return exception;
}
function eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {
  const client = getClient();
  const normalizeDepth = client?.getOptions().normalizeDepth;
  const errorFromProp = getErrorPropertyFromObject(exception);
  const extra = {
    __serialized__: normalizeToSize(exception, normalizeDepth)
  };
  if (errorFromProp) {
    return {
      exception: {
        values: [exceptionFromError(stackParser, errorFromProp)]
      },
      extra
    };
  }
  const event = {
    exception: {
      values: [
        {
          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? "UnhandledRejection" : "Error",
          value: getNonErrorObjectExceptionValue(exception, { isUnhandledRejection })
        }
      ]
    },
    extra
  };
  if (syntheticException) {
    const frames = parseStackFrames(stackParser, syntheticException);
    if (frames.length) {
      event.exception.values[0].stacktrace = { frames };
    }
  }
  return event;
}
function eventFromError(stackParser, ex) {
  return {
    exception: {
      values: [exceptionFromError(stackParser, ex)]
    }
  };
}
function parseStackFrames(stackParser, ex) {
  const stacktrace = ex.stacktrace || ex.stack || "";
  const skipLines = getSkipFirstStackStringLines(ex);
  const framesToPop = getPopFirstTopFrames(ex);
  try {
    return stackParser(stacktrace, skipLines, framesToPop);
  } catch {
  }
  return [];
}
var reactMinifiedRegexp = /Minified React error #\d+;/i;
function getSkipFirstStackStringLines(ex) {
  if (ex && reactMinifiedRegexp.test(ex.message)) {
    return 1;
  }
  return 0;
}
function getPopFirstTopFrames(ex) {
  if (typeof ex.framesToPop === "number") {
    return ex.framesToPop;
  }
  return 0;
}
function isWebAssemblyException(exception) {
  if (typeof WebAssembly !== "undefined" && typeof WebAssembly.Exception !== "undefined") {
    return exception instanceof WebAssembly.Exception;
  } else {
    return false;
  }
}
function extractType(ex) {
  const name2 = ex?.name;
  if (!name2 && isWebAssemblyException(ex)) {
    const hasTypeInMessage = ex.message && Array.isArray(ex.message) && ex.message.length == 2;
    return hasTypeInMessage ? ex.message[0] : "WebAssembly.Exception";
  }
  return name2;
}
function extractMessage(ex) {
  const message = ex?.message;
  if (isWebAssemblyException(ex)) {
    if (Array.isArray(ex.message) && ex.message.length == 2) {
      return ex.message[1];
    }
    return "wasm exception";
  }
  if (!message) {
    return "No error message";
  }
  if (message.error && typeof message.error.message === "string") {
    return message.error.message;
  }
  return message;
}
function eventFromException(stackParser, exception, hint, attachStacktrace) {
  const syntheticException = hint?.syntheticException || void 0;
  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);
  addExceptionMechanism(event);
  event.level = "error";
  if (hint?.event_id) {
    event.event_id = hint.event_id;
  }
  return resolvedSyncPromise(event);
}
function eventFromMessage(stackParser, message, level = "info", hint, attachStacktrace) {
  const syntheticException = hint?.syntheticException || void 0;
  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
  event.level = level;
  if (hint?.event_id) {
    event.event_id = hint.event_id;
  }
  return resolvedSyncPromise(event);
}
function eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {
  let event;
  if (isErrorEvent(exception) && exception.error) {
    const errorEvent = exception;
    return eventFromError(stackParser, errorEvent.error);
  }
  if (isDOMError(exception) || isDOMException(exception)) {
    const domException = exception;
    if ("stack" in exception) {
      event = eventFromError(stackParser, exception);
    } else {
      const name2 = domException.name || (isDOMError(domException) ? "DOMError" : "DOMException");
      const message = domException.message ? `${name2}: ${domException.message}` : name2;
      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);
      addExceptionTypeValue(event, message);
    }
    if ("code" in domException) {
      event.tags = { ...event.tags, "DOMException.code": `${domException.code}` };
    }
    return event;
  }
  if (isError(exception)) {
    return eventFromError(stackParser, exception);
  }
  if (isPlainObject(exception) || isEvent(exception)) {
    const objectException = exception;
    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);
    addExceptionMechanism(event, {
      synthetic: true
    });
    return event;
  }
  event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);
  addExceptionTypeValue(event, `${exception}`, void 0);
  addExceptionMechanism(event, {
    synthetic: true
  });
  return event;
}
function eventFromString(stackParser, message, syntheticException, attachStacktrace) {
  const event = {};
  if (attachStacktrace && syntheticException) {
    const frames = parseStackFrames(stackParser, syntheticException);
    if (frames.length) {
      event.exception = {
        values: [{ value: message, stacktrace: { frames } }]
      };
    }
    addExceptionMechanism(event, { synthetic: true });
  }
  if (isParameterizedString(message)) {
    const { __sentry_template_string__, __sentry_template_values__ } = message;
    event.logentry = {
      message: __sentry_template_string__,
      params: __sentry_template_values__
    };
    return event;
  }
  event.message = message;
  return event;
}
function getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }) {
  const keys2 = extractExceptionKeysForMessage(exception);
  const captureType = isUnhandledRejection ? "promise rejection" : "exception";
  if (isErrorEvent(exception)) {
    return `Event \`ErrorEvent\` captured as ${captureType} with message \`${exception.message}\``;
  }
  if (isEvent(exception)) {
    const className = getObjectClassName(exception);
    return `Event \`${className}\` (type=${exception.type}) captured as ${captureType}`;
  }
  return `Object captured as ${captureType} with keys: ${keys2}`;
}
function getObjectClassName(obj) {
  try {
    const prototype = Object.getPrototypeOf(obj);
    return prototype ? prototype.constructor.name : void 0;
  } catch {
  }
}
function getErrorPropertyFromObject(obj) {
  for (const prop in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, prop)) {
      const value = obj[prop];
      if (value instanceof Error) {
        return value;
      }
    }
  }
  return void 0;
}

// node_modules/@sentry/browser/build/npm/esm/client.js
var DEFAULT_FLUSH_INTERVAL = 5e3;
var BrowserClient = class extends Client {
  /**
   * Creates a new Browser SDK instance.
   *
   * @param options Configuration options for this SDK.
   */
  constructor(options2) {
    const opts = applyDefaultOptions(options2);
    const sdkSource = WINDOW3.SENTRY_SDK_SOURCE || getSDKSource();
    applySdkMetadata(opts, "browser", ["browser"], sdkSource);
    super(opts);
    const { sendDefaultPii, sendClientReports, enableLogs } = this._options;
    if (WINDOW3.document && (sendClientReports || enableLogs)) {
      WINDOW3.document.addEventListener("visibilitychange", () => {
        if (WINDOW3.document.visibilityState === "hidden") {
          if (sendClientReports) {
            this._flushOutcomes();
          }
          if (enableLogs) {
            _INTERNAL_flushLogsBuffer(this);
          }
        }
      });
    }
    if (enableLogs) {
      this.on("flush", () => {
        _INTERNAL_flushLogsBuffer(this);
      });
      this.on("afterCaptureLog", () => {
        if (this._logFlushIdleTimeout) {
          clearTimeout(this._logFlushIdleTimeout);
        }
        this._logFlushIdleTimeout = setTimeout(() => {
          _INTERNAL_flushLogsBuffer(this);
        }, DEFAULT_FLUSH_INTERVAL);
      });
    }
    if (sendDefaultPii) {
      this.on("postprocessEvent", addAutoIpAddressToUser);
      this.on("beforeSendSession", addAutoIpAddressToSession);
    }
  }
  /**
   * @inheritDoc
   */
  eventFromException(exception, hint) {
    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);
  }
  /**
   * @inheritDoc
   */
  eventFromMessage(message, level = "info", hint) {
    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);
  }
  /**
   * @inheritDoc
   */
  _prepareEvent(event, hint, currentScope, isolationScope) {
    event.platform = event.platform || "javascript";
    return super._prepareEvent(event, hint, currentScope, isolationScope);
  }
};
function applyDefaultOptions(optionsArg) {
  return {
    release: typeof __SENTRY_RELEASE__ === "string" ? __SENTRY_RELEASE__ : WINDOW3.SENTRY_RELEASE?.id,
    // This supports the variable that sentry-webpack-plugin injects
    sendClientReports: true,
    // We default this to true, as it is the safer scenario
    parentSpanIsAlwaysRootSpan: true,
    ...optionsArg
  };
}

// node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js
var DEBUG_BUILD2 = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

// node_modules/@sentry-internal/browser-utils/build/esm/types.js
var WINDOW4 = GLOBAL_OBJ;

// node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js
var DEBOUNCE_DURATION = 1e3;
var debounceTimerID;
var lastCapturedEventType;
var lastCapturedEventTargetId;
function addClickKeypressInstrumentationHandler(handler) {
  const type = "dom";
  addHandler(type, handler);
  maybeInstrument(type, instrumentDOM);
}
function instrumentDOM() {
  if (!WINDOW4.document) {
    return;
  }
  const triggerDOMHandler = triggerHandlers.bind(null, "dom");
  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
  WINDOW4.document.addEventListener("click", globalDOMEventHandler, false);
  WINDOW4.document.addEventListener("keypress", globalDOMEventHandler, false);
  ["EventTarget", "Node"].forEach((target) => {
    const globalObject = WINDOW4;
    const proto = globalObject[target]?.prototype;
    if (!proto?.hasOwnProperty?.("addEventListener")) {
      return;
    }
    fill(proto, "addEventListener", function(originalAddEventListener) {
      return function(type, listener, options2) {
        if (type === "click" || type == "keypress") {
          try {
            const handlers3 = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {};
            const handlerForType = handlers3[type] = handlers3[type] || { refCount: 0 };
            if (!handlerForType.handler) {
              const handler = makeDOMEventHandler(triggerDOMHandler);
              handlerForType.handler = handler;
              originalAddEventListener.call(this, type, handler, options2);
            }
            handlerForType.refCount++;
          } catch {
          }
        }
        return originalAddEventListener.call(this, type, listener, options2);
      };
    });
    fill(
      proto,
      "removeEventListener",
      function(originalRemoveEventListener) {
        return function(type, listener, options2) {
          if (type === "click" || type == "keypress") {
            try {
              const handlers3 = this.__sentry_instrumentation_handlers__ || {};
              const handlerForType = handlers3[type];
              if (handlerForType) {
                handlerForType.refCount--;
                if (handlerForType.refCount <= 0) {
                  originalRemoveEventListener.call(this, type, handlerForType.handler, options2);
                  handlerForType.handler = void 0;
                  delete handlers3[type];
                }
                if (Object.keys(handlers3).length === 0) {
                  delete this.__sentry_instrumentation_handlers__;
                }
              }
            } catch {
            }
          }
          return originalRemoveEventListener.call(this, type, listener, options2);
        };
      }
    );
  });
}
function isSimilarToLastCapturedEvent(event) {
  if (event.type !== lastCapturedEventType) {
    return false;
  }
  try {
    if (!event.target || event.target._sentryId !== lastCapturedEventTargetId) {
      return false;
    }
  } catch {
  }
  return true;
}
function shouldSkipDOMEvent(eventType, target) {
  if (eventType !== "keypress") {
    return false;
  }
  if (!target?.tagName) {
    return true;
  }
  if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.isContentEditable) {
    return false;
  }
  return true;
}
function makeDOMEventHandler(handler, globalListener = false) {
  return (event) => {
    if (!event || event["_sentryCaptured"]) {
      return;
    }
    const target = getEventTarget(event);
    if (shouldSkipDOMEvent(event.type, target)) {
      return;
    }
    addNonEnumerableProperty(event, "_sentryCaptured", true);
    if (target && !target._sentryId) {
      addNonEnumerableProperty(target, "_sentryId", uuid4());
    }
    const name2 = event.type === "keypress" ? "input" : event.type;
    if (!isSimilarToLastCapturedEvent(event)) {
      const handlerData = { event, name: name2, global: globalListener };
      handler(handlerData);
      lastCapturedEventType = event.type;
      lastCapturedEventTargetId = target ? target._sentryId : void 0;
    }
    clearTimeout(debounceTimerID);
    debounceTimerID = WINDOW4.setTimeout(() => {
      lastCapturedEventTargetId = void 0;
      lastCapturedEventType = void 0;
    }, DEBOUNCE_DURATION);
  };
}
function getEventTarget(event) {
  try {
    return event.target;
  } catch {
    return null;
  }
}

// node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js
var lastHref;
function addHistoryInstrumentationHandler(handler) {
  const type = "history";
  addHandler(type, handler);
  maybeInstrument(type, instrumentHistory);
}
function instrumentHistory() {
  WINDOW4.addEventListener("popstate", () => {
    const to = WINDOW4.location.href;
    const from = lastHref;
    lastHref = to;
    if (from === to) {
      return;
    }
    const handlerData = { from, to };
    triggerHandlers("history", handlerData);
  });
  if (!supportsHistory()) {
    return;
  }
  function historyReplacementFunction(originalHistoryFunction) {
    return function(...args) {
      const url2 = args.length > 2 ? args[2] : void 0;
      if (url2) {
        const from = lastHref;
        const to = getAbsoluteUrl(String(url2));
        lastHref = to;
        if (from === to) {
          return originalHistoryFunction.apply(this, args);
        }
        const handlerData = { from, to };
        triggerHandlers("history", handlerData);
      }
      return originalHistoryFunction.apply(this, args);
    };
  }
  fill(WINDOW4.history, "pushState", historyReplacementFunction);
  fill(WINDOW4.history, "replaceState", historyReplacementFunction);
}
function getAbsoluteUrl(urlOrPath) {
  try {
    const url2 = new URL(urlOrPath, WINDOW4.location.origin);
    return url2.toString();
  } catch {
    return urlOrPath;
  }
}

// node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js
var cachedImplementations = {};
function getNativeImplementation(name2) {
  const cached2 = cachedImplementations[name2];
  if (cached2) {
    return cached2;
  }
  let impl = WINDOW4[name2];
  if (isNativeFunction(impl)) {
    return cachedImplementations[name2] = impl.bind(WINDOW4);
  }
  const document4 = WINDOW4.document;
  if (document4 && typeof document4.createElement === "function") {
    try {
      const sandbox = document4.createElement("iframe");
      sandbox.hidden = true;
      document4.head.appendChild(sandbox);
      const contentWindow = sandbox.contentWindow;
      if (contentWindow?.[name2]) {
        impl = contentWindow[name2];
      }
      document4.head.removeChild(sandbox);
    } catch (e4) {
      DEBUG_BUILD2 && debug.warn(`Could not create sandbox iframe for ${name2} check, bailing to window.${name2}: `, e4);
    }
  }
  if (!impl) {
    return impl;
  }
  return cachedImplementations[name2] = impl.bind(WINDOW4);
}
function clearCachedImplementation(name2) {
  cachedImplementations[name2] = void 0;
}

// node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js
var SENTRY_XHR_DATA_KEY = "__sentry_xhr_v3__";
function addXhrInstrumentationHandler(handler) {
  const type = "xhr";
  addHandler(type, handler);
  maybeInstrument(type, instrumentXHR);
}
function instrumentXHR() {
  if (!WINDOW4.XMLHttpRequest) {
    return;
  }
  const xhrproto = XMLHttpRequest.prototype;
  xhrproto.open = new Proxy(xhrproto.open, {
    apply(originalOpen, xhrOpenThisArg, xhrOpenArgArray) {
      const virtualError = new Error();
      const startTimestamp = timestampInSeconds() * 1e3;
      const method = isString(xhrOpenArgArray[0]) ? xhrOpenArgArray[0].toUpperCase() : void 0;
      const url2 = parseXhrUrlArg(xhrOpenArgArray[1]);
      if (!method || !url2) {
        return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);
      }
      xhrOpenThisArg[SENTRY_XHR_DATA_KEY] = {
        method,
        url: url2,
        request_headers: {}
      };
      if (method === "POST" && url2.match(/sentry_key/)) {
        xhrOpenThisArg.__sentry_own_request__ = true;
      }
      const onreadystatechangeHandler = () => {
        const xhrInfo = xhrOpenThisArg[SENTRY_XHR_DATA_KEY];
        if (!xhrInfo) {
          return;
        }
        if (xhrOpenThisArg.readyState === 4) {
          try {
            xhrInfo.status_code = xhrOpenThisArg.status;
          } catch {
          }
          const handlerData = {
            endTimestamp: timestampInSeconds() * 1e3,
            startTimestamp,
            xhr: xhrOpenThisArg,
            virtualError
          };
          triggerHandlers("xhr", handlerData);
        }
      };
      if ("onreadystatechange" in xhrOpenThisArg && typeof xhrOpenThisArg.onreadystatechange === "function") {
        xhrOpenThisArg.onreadystatechange = new Proxy(xhrOpenThisArg.onreadystatechange, {
          apply(originalOnreadystatechange, onreadystatechangeThisArg, onreadystatechangeArgArray) {
            onreadystatechangeHandler();
            return originalOnreadystatechange.apply(onreadystatechangeThisArg, onreadystatechangeArgArray);
          }
        });
      } else {
        xhrOpenThisArg.addEventListener("readystatechange", onreadystatechangeHandler);
      }
      xhrOpenThisArg.setRequestHeader = new Proxy(xhrOpenThisArg.setRequestHeader, {
        apply(originalSetRequestHeader, setRequestHeaderThisArg, setRequestHeaderArgArray) {
          const [header, value] = setRequestHeaderArgArray;
          const xhrInfo = setRequestHeaderThisArg[SENTRY_XHR_DATA_KEY];
          if (xhrInfo && isString(header) && isString(value)) {
            xhrInfo.request_headers[header.toLowerCase()] = value;
          }
          return originalSetRequestHeader.apply(setRequestHeaderThisArg, setRequestHeaderArgArray);
        }
      });
      return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);
    }
  });
  xhrproto.send = new Proxy(xhrproto.send, {
    apply(originalSend, sendThisArg, sendArgArray) {
      const sentryXhrData = sendThisArg[SENTRY_XHR_DATA_KEY];
      if (!sentryXhrData) {
        return originalSend.apply(sendThisArg, sendArgArray);
      }
      if (sendArgArray[0] !== void 0) {
        sentryXhrData.body = sendArgArray[0];
      }
      const handlerData = {
        startTimestamp: timestampInSeconds() * 1e3,
        xhr: sendThisArg
      };
      triggerHandlers("xhr", handlerData);
      return originalSend.apply(sendThisArg, sendArgArray);
    }
  });
}
function parseXhrUrlArg(url2) {
  if (isString(url2)) {
    return url2;
  }
  try {
    return url2.toString();
  } catch {
  }
  return void 0;
}

// node_modules/@sentry/browser/build/npm/esm/transports/fetch.js
function makeFetchTransport(options2, nativeFetch = getNativeImplementation("fetch")) {
  let pendingBodySize = 0;
  let pendingCount = 0;
  function makeRequest(request) {
    const requestSize = request.body.length;
    pendingBodySize += requestSize;
    pendingCount++;
    const requestOptions = {
      body: request.body,
      method: "POST",
      referrerPolicy: "strict-origin",
      headers: options2.headers,
      // Outgoing requests are usually cancelled when navigating to a different page, causing a "TypeError: Failed to
      // fetch" error and sending a "network_error" client-outcome - in Chrome, the request status shows "(cancelled)".
      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're
      // frequently sending events right before the user is switching pages (eg. when finishing navigation transactions).
      // Gotchas:
      // - `keepalive` isn't supported by Firefox
      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):
      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.
      //   We will therefore only activate the flag when we're below that limit.
      // There is also a limit of requests that can be open at the same time, so we also limit this to 15
      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details
      keepalive: pendingBodySize <= 6e4 && pendingCount < 15,
      ...options2.fetchOptions
    };
    if (!nativeFetch) {
      clearCachedImplementation("fetch");
      return rejectedSyncPromise("No fetch implementation available");
    }
    try {
      return nativeFetch(options2.url, requestOptions).then((response) => {
        pendingBodySize -= requestSize;
        pendingCount--;
        return {
          statusCode: response.status,
          headers: {
            "x-sentry-rate-limits": response.headers.get("X-Sentry-Rate-Limits"),
            "retry-after": response.headers.get("Retry-After")
          }
        };
      });
    } catch (e4) {
      clearCachedImplementation("fetch");
      pendingBodySize -= requestSize;
      pendingCount--;
      return rejectedSyncPromise(e4);
    }
  }
  return createTransport(options2, makeRequest);
}

// node_modules/@sentry/browser/build/npm/esm/stack-parsers.js
var CHROME_PRIORITY = 30;
var GECKO_PRIORITY = 50;
function createFrame(filename, func, lineno, colno) {
  const frame = {
    filename,
    function: func === "<anonymous>" ? UNKNOWN_FUNCTION : func,
    in_app: true
    // All browser frames are considered in_app
  };
  if (lineno !== void 0) {
    frame.lineno = lineno;
  }
  if (colno !== void 0) {
    frame.colno = colno;
  }
  return frame;
}
var chromeRegexNoFnName = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i;
var chromeRegex = /^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var chromeEvalRegex = /\((\S*)(?::(\d+))(?::(\d+))\)/;
var chromeStackParserFn = (line) => {
  const noFnParts = chromeRegexNoFnName.exec(line);
  if (noFnParts) {
    const [, filename, line2, col] = noFnParts;
    return createFrame(filename, UNKNOWN_FUNCTION, +line2, +col);
  }
  const parts = chromeRegex.exec(line);
  if (parts) {
    const isEval = parts[2] && parts[2].indexOf("eval") === 0;
    if (isEval) {
      const subMatch = chromeEvalRegex.exec(parts[2]);
      if (subMatch) {
        parts[2] = subMatch[1];
        parts[3] = subMatch[2];
        parts[4] = subMatch[3];
      }
    }
    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);
    return createFrame(filename, func, parts[3] ? +parts[3] : void 0, parts[4] ? +parts[4] : void 0);
  }
  return;
};
var chromeStackLineParser = [CHROME_PRIORITY, chromeStackParserFn];
var geckoREgex = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
var geckoEvalRegex = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var gecko = (line) => {
  const parts = geckoREgex.exec(line);
  if (parts) {
    const isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
    if (isEval) {
      const subMatch = geckoEvalRegex.exec(parts[3]);
      if (subMatch) {
        parts[1] = parts[1] || "eval";
        parts[3] = subMatch[1];
        parts[4] = subMatch[2];
        parts[5] = "";
      }
    }
    let filename = parts[3];
    let func = parts[1] || UNKNOWN_FUNCTION;
    [func, filename] = extractSafariExtensionDetails(func, filename);
    return createFrame(filename, func, parts[4] ? +parts[4] : void 0, parts[5] ? +parts[5] : void 0);
  }
  return;
};
var geckoStackLineParser = [GECKO_PRIORITY, gecko];
var defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser];
var defaultStackParser = createStackParser(...defaultStackLineParsers);
var extractSafariExtensionDetails = (func, filename) => {
  const isSafariExtension = func.indexOf("safari-extension") !== -1;
  const isSafariWebExtension = func.indexOf("safari-web-extension") !== -1;
  return isSafariExtension || isSafariWebExtension ? [
    func.indexOf("@") !== -1 ? func.split("@")[0] : UNKNOWN_FUNCTION,
    isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`
  ] : [func, filename];
};

// node_modules/@sentry/browser/build/npm/esm/debug-build.js
var DEBUG_BUILD3 = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

// node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js
var MAX_ALLOWED_STRING_LENGTH = 1024;
var INTEGRATION_NAME4 = "Breadcrumbs";
var _breadcrumbsIntegration = (options2 = {}) => {
  const _options = {
    console: true,
    dom: true,
    fetch: true,
    history: true,
    sentry: true,
    xhr: true,
    ...options2
  };
  return {
    name: INTEGRATION_NAME4,
    setup(client) {
      if (_options.console) {
        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));
      }
      if (_options.dom) {
        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));
      }
      if (_options.xhr) {
        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));
      }
      if (_options.fetch) {
        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));
      }
      if (_options.history) {
        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));
      }
      if (_options.sentry) {
        client.on("beforeSendEvent", _getSentryBreadcrumbHandler(client));
      }
    }
  };
};
var breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);
function _getSentryBreadcrumbHandler(client) {
  return function addSentryBreadcrumb(event) {
    if (getClient() !== client) {
      return;
    }
    addBreadcrumb(
      {
        category: `sentry.${event.type === "transaction" ? "transaction" : "event"}`,
        event_id: event.event_id,
        level: event.level,
        message: getEventDescription(event)
      },
      {
        event
      }
    );
  };
}
function _getDomBreadcrumbHandler(client, dom) {
  return function _innerDomBreadcrumb(handlerData) {
    if (getClient() !== client) {
      return;
    }
    let target;
    let componentName;
    let keyAttrs = typeof dom === "object" ? dom.serializeAttribute : void 0;
    let maxStringLength = typeof dom === "object" && typeof dom.maxStringLength === "number" ? dom.maxStringLength : void 0;
    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {
      DEBUG_BUILD3 && debug.warn(
        `\`dom.maxStringLength\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`
      );
      maxStringLength = MAX_ALLOWED_STRING_LENGTH;
    }
    if (typeof keyAttrs === "string") {
      keyAttrs = [keyAttrs];
    }
    try {
      const event = handlerData.event;
      const element3 = _isEvent(event) ? event.target : event;
      target = htmlTreeAsString(element3, { keyAttrs, maxStringLength });
      componentName = getComponentName(element3);
    } catch {
      target = "<unknown>";
    }
    if (target.length === 0) {
      return;
    }
    const breadcrumb = {
      category: `ui.${handlerData.name}`,
      message: target
    };
    if (componentName) {
      breadcrumb.data = { "ui.component_name": componentName };
    }
    addBreadcrumb(breadcrumb, {
      event: handlerData.event,
      name: handlerData.name,
      global: handlerData.global
    });
  };
}
function _getConsoleBreadcrumbHandler(client) {
  return function _consoleBreadcrumb(handlerData) {
    if (getClient() !== client) {
      return;
    }
    const breadcrumb = {
      category: "console",
      data: {
        arguments: handlerData.args,
        logger: "console"
      },
      level: severityLevelFromString(handlerData.level),
      message: safeJoin(handlerData.args, " ")
    };
    if (handlerData.level === "assert") {
      if (handlerData.args[0] === false) {
        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), " ") || "console.assert"}`;
        breadcrumb.data.arguments = handlerData.args.slice(1);
      } else {
        return;
      }
    }
    addBreadcrumb(breadcrumb, {
      input: handlerData.args,
      level: handlerData.level
    });
  };
}
function _getXhrBreadcrumbHandler(client) {
  return function _xhrBreadcrumb(handlerData) {
    if (getClient() !== client) {
      return;
    }
    const { startTimestamp, endTimestamp } = handlerData;
    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];
    if (!startTimestamp || !endTimestamp || !sentryXhrData) {
      return;
    }
    const { method, url: url2, status_code, body } = sentryXhrData;
    const data2 = {
      method,
      url: url2,
      status_code
    };
    const hint = {
      xhr: handlerData.xhr,
      input: body,
      startTimestamp,
      endTimestamp
    };
    const breadcrumb = {
      category: "xhr",
      data: data2,
      type: "http",
      level: getBreadcrumbLogLevelFromHttpStatusCode(status_code)
    };
    client.emit("beforeOutgoingRequestBreadcrumb", breadcrumb, hint);
    addBreadcrumb(breadcrumb, hint);
  };
}
function _getFetchBreadcrumbHandler(client) {
  return function _fetchBreadcrumb(handlerData) {
    if (getClient() !== client) {
      return;
    }
    const { startTimestamp, endTimestamp } = handlerData;
    if (!endTimestamp) {
      return;
    }
    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === "POST") {
      return;
    }
    ({
      method: handlerData.fetchData.method,
      url: handlerData.fetchData.url
    });
    if (handlerData.error) {
      const data2 = handlerData.fetchData;
      const hint = {
        data: handlerData.error,
        input: handlerData.args,
        startTimestamp,
        endTimestamp
      };
      const breadcrumb = {
        category: "fetch",
        data: data2,
        level: "error",
        type: "http"
      };
      client.emit("beforeOutgoingRequestBreadcrumb", breadcrumb, hint);
      addBreadcrumb(breadcrumb, hint);
    } else {
      const response = handlerData.response;
      const data2 = {
        ...handlerData.fetchData,
        status_code: response?.status
      };
      handlerData.fetchData.request_body_size;
      handlerData.fetchData.response_body_size;
      response?.status;
      const hint = {
        input: handlerData.args,
        response,
        startTimestamp,
        endTimestamp
      };
      const breadcrumb = {
        category: "fetch",
        data: data2,
        type: "http",
        level: getBreadcrumbLogLevelFromHttpStatusCode(data2.status_code)
      };
      client.emit("beforeOutgoingRequestBreadcrumb", breadcrumb, hint);
      addBreadcrumb(breadcrumb, hint);
    }
  };
}
function _getHistoryBreadcrumbHandler(client) {
  return function _historyBreadcrumb(handlerData) {
    if (getClient() !== client) {
      return;
    }
    let from = handlerData.from;
    let to = handlerData.to;
    const parsedLoc = parseUrl(WINDOW3.location.href);
    let parsedFrom = from ? parseUrl(from) : void 0;
    const parsedTo = parseUrl(to);
    if (!parsedFrom?.path) {
      parsedFrom = parsedLoc;
    }
    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
      to = parsedTo.relative;
    }
    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
      from = parsedFrom.relative;
    }
    addBreadcrumb({
      category: "navigation",
      data: {
        from,
        to
      }
    });
  };
}
function _isEvent(event) {
  return !!event && !!event.target;
}

// node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js
var DEFAULT_EVENT_TARGET = [
  "EventTarget",
  "Window",
  "Node",
  "ApplicationCache",
  "AudioTrackList",
  "BroadcastChannel",
  "ChannelMergerNode",
  "CryptoOperation",
  "EventSource",
  "FileReader",
  "HTMLUnknownElement",
  "IDBDatabase",
  "IDBRequest",
  "IDBTransaction",
  "KeyOperation",
  "MediaController",
  "MessagePort",
  "ModalWindow",
  "Notification",
  "SVGElementInstance",
  "Screen",
  "SharedWorker",
  "TextTrack",
  "TextTrackCue",
  "TextTrackList",
  "WebSocket",
  "WebSocketWorker",
  "Worker",
  "XMLHttpRequest",
  "XMLHttpRequestEventTarget",
  "XMLHttpRequestUpload"
];
var INTEGRATION_NAME5 = "BrowserApiErrors";
var _browserApiErrorsIntegration = (options2 = {}) => {
  const _options = {
    XMLHttpRequest: true,
    eventTarget: true,
    requestAnimationFrame: true,
    setInterval: true,
    setTimeout: true,
    unregisterOriginalCallbacks: false,
    ...options2
  };
  return {
    name: INTEGRATION_NAME5,
    // TODO: This currently only works for the first client this is setup
    // We may want to adjust this to check for client etc.
    setupOnce() {
      if (_options.setTimeout) {
        fill(WINDOW3, "setTimeout", _wrapTimeFunction);
      }
      if (_options.setInterval) {
        fill(WINDOW3, "setInterval", _wrapTimeFunction);
      }
      if (_options.requestAnimationFrame) {
        fill(WINDOW3, "requestAnimationFrame", _wrapRAF);
      }
      if (_options.XMLHttpRequest && "XMLHttpRequest" in WINDOW3) {
        fill(XMLHttpRequest.prototype, "send", _wrapXHR);
      }
      const eventTargetOption = _options.eventTarget;
      if (eventTargetOption) {
        const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
        eventTarget.forEach((target) => _wrapEventTarget(target, _options));
      }
    }
  };
};
var browserApiErrorsIntegration = defineIntegration(_browserApiErrorsIntegration);
function _wrapTimeFunction(original) {
  return function(...args) {
    const originalCallback = args[0];
    args[0] = wrap(originalCallback, {
      mechanism: {
        data: { function: getFunctionName(original) },
        handled: false,
        type: "instrument"
      }
    });
    return original.apply(this, args);
  };
}
function _wrapRAF(original) {
  return function(callback) {
    return original.apply(this, [
      wrap(callback, {
        mechanism: {
          data: {
            function: "requestAnimationFrame",
            handler: getFunctionName(original)
          },
          handled: false,
          type: "instrument"
        }
      })
    ]);
  };
}
function _wrapXHR(originalSend) {
  return function(...args) {
    const xhr = this;
    const xmlHttpRequestProps = ["onload", "onerror", "onprogress", "onreadystatechange"];
    xmlHttpRequestProps.forEach((prop) => {
      if (prop in xhr && typeof xhr[prop] === "function") {
        fill(xhr, prop, function(original) {
          const wrapOptions = {
            mechanism: {
              data: {
                function: prop,
                handler: getFunctionName(original)
              },
              handled: false,
              type: "instrument"
            }
          };
          const originalFunction = getOriginalFunction(original);
          if (originalFunction) {
            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);
          }
          return wrap(original, wrapOptions);
        });
      }
    });
    return originalSend.apply(this, args);
  };
}
function _wrapEventTarget(target, integrationOptions) {
  const globalObject = WINDOW3;
  const proto = globalObject[target]?.prototype;
  if (!proto?.hasOwnProperty?.("addEventListener")) {
    return;
  }
  fill(proto, "addEventListener", function(original) {
    return function(eventName, fn, options2) {
      try {
        if (isEventListenerObject(fn)) {
          fn.handleEvent = wrap(fn.handleEvent, {
            mechanism: {
              data: {
                function: "handleEvent",
                handler: getFunctionName(fn),
                target
              },
              handled: false,
              type: "instrument"
            }
          });
        }
      } catch {
      }
      if (integrationOptions.unregisterOriginalCallbacks) {
        unregisterOriginalCallback(this, eventName, fn);
      }
      return original.apply(this, [
        eventName,
        wrap(fn, {
          mechanism: {
            data: {
              function: "addEventListener",
              handler: getFunctionName(fn),
              target
            },
            handled: false,
            type: "instrument"
          }
        }),
        options2
      ]);
    };
  });
  fill(proto, "removeEventListener", function(originalRemoveEventListener) {
    return function(eventName, fn, options2) {
      try {
        const originalEventHandler = fn.__sentry_wrapped__;
        if (originalEventHandler) {
          originalRemoveEventListener.call(this, eventName, originalEventHandler, options2);
        }
      } catch {
      }
      return originalRemoveEventListener.call(this, eventName, fn, options2);
    };
  });
}
function isEventListenerObject(obj) {
  return typeof obj.handleEvent === "function";
}
function unregisterOriginalCallback(target, eventName, fn) {
  if (target && typeof target === "object" && "removeEventListener" in target && typeof target.removeEventListener === "function") {
    target.removeEventListener(eventName, fn);
  }
}

// node_modules/@sentry/browser/build/npm/esm/integrations/browsersession.js
var browserSessionIntegration = defineIntegration(() => {
  return {
    name: "BrowserSession",
    setupOnce() {
      if (typeof WINDOW3.document === "undefined") {
        DEBUG_BUILD3 && debug.warn("Using the `browserSessionIntegration` in non-browser environments is not supported.");
        return;
      }
      startSession({ ignoreDuration: true });
      captureSession();
      addHistoryInstrumentationHandler(({ from, to }) => {
        if (from !== void 0 && from !== to) {
          startSession({ ignoreDuration: true });
          captureSession();
        }
      });
    }
  };
});

// node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js
var INTEGRATION_NAME6 = "GlobalHandlers";
var _globalHandlersIntegration = (options2 = {}) => {
  const _options = {
    onerror: true,
    onunhandledrejection: true,
    ...options2
  };
  return {
    name: INTEGRATION_NAME6,
    setupOnce() {
      Error.stackTraceLimit = 50;
    },
    setup(client) {
      if (_options.onerror) {
        _installGlobalOnErrorHandler(client);
        globalHandlerLog("onerror");
      }
      if (_options.onunhandledrejection) {
        _installGlobalOnUnhandledRejectionHandler(client);
        globalHandlerLog("onunhandledrejection");
      }
    }
  };
};
var globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);
function _installGlobalOnErrorHandler(client) {
  addGlobalErrorInstrumentationHandler((data2) => {
    const { stackParser, attachStacktrace } = getOptions();
    if (getClient() !== client || shouldIgnoreOnError()) {
      return;
    }
    const { msg, url: url2, line, column, error: error44 } = data2;
    const event = _enhanceEventWithInitialFrame(
      eventFromUnknownInput(stackParser, error44 || msg, void 0, attachStacktrace, false),
      url2,
      line,
      column
    );
    event.level = "error";
    captureEvent(event, {
      originalException: error44,
      mechanism: {
        handled: false,
        type: "onerror"
      }
    });
  });
}
function _installGlobalOnUnhandledRejectionHandler(client) {
  addGlobalUnhandledRejectionInstrumentationHandler((e4) => {
    const { stackParser, attachStacktrace } = getOptions();
    if (getClient() !== client || shouldIgnoreOnError()) {
      return;
    }
    const error44 = _getUnhandledRejectionError(e4);
    const event = isPrimitive(error44) ? _eventFromRejectionWithPrimitive(error44) : eventFromUnknownInput(stackParser, error44, void 0, attachStacktrace, true);
    event.level = "error";
    captureEvent(event, {
      originalException: error44,
      mechanism: {
        handled: false,
        type: "onunhandledrejection"
      }
    });
  });
}
function _getUnhandledRejectionError(error44) {
  if (isPrimitive(error44)) {
    return error44;
  }
  try {
    if ("reason" in error44) {
      return error44.reason;
    }
    if ("detail" in error44 && "reason" in error44.detail) {
      return error44.detail.reason;
    }
  } catch {
  }
  return error44;
}
function _eventFromRejectionWithPrimitive(reason) {
  return {
    exception: {
      values: [
        {
          type: "UnhandledRejection",
          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
          value: `Non-Error promise rejection captured with value: ${String(reason)}`
        }
      ]
    }
  };
}
function _enhanceEventWithInitialFrame(event, url2, line, column) {
  const e4 = event.exception = event.exception || {};
  const ev = e4.values = e4.values || [];
  const ev0 = ev[0] = ev[0] || {};
  const ev0s = ev0.stacktrace = ev0.stacktrace || {};
  const ev0sf = ev0s.frames = ev0s.frames || [];
  const colno = column;
  const lineno = line;
  const filename = isString(url2) && url2.length > 0 ? url2 : getLocationHref();
  if (ev0sf.length === 0) {
    ev0sf.push({
      colno,
      filename,
      function: UNKNOWN_FUNCTION,
      in_app: true,
      lineno
    });
  }
  return event;
}
function globalHandlerLog(type) {
  DEBUG_BUILD3 && debug.log(`Global Handler attached: ${type}`);
}
function getOptions() {
  const client = getClient();
  const options2 = client?.getOptions() || {
    stackParser: () => [],
    attachStacktrace: false
  };
  return options2;
}

// node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js
var httpContextIntegration = defineIntegration(() => {
  return {
    name: "HttpContext",
    preprocessEvent(event) {
      if (!WINDOW3.navigator && !WINDOW3.location && !WINDOW3.document) {
        return;
      }
      const reqData = getHttpRequestData();
      const headers = {
        ...reqData.headers,
        ...event.request?.headers
      };
      event.request = {
        ...reqData,
        ...event.request,
        headers
      };
    }
  };
});

// node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js
var DEFAULT_KEY = "cause";
var DEFAULT_LIMIT = 5;
var INTEGRATION_NAME7 = "LinkedErrors";
var _linkedErrorsIntegration = (options2 = {}) => {
  const limit = options2.limit || DEFAULT_LIMIT;
  const key = options2.key || DEFAULT_KEY;
  return {
    name: INTEGRATION_NAME7,
    preprocessEvent(event, hint, client) {
      const options3 = client.getOptions();
      applyAggregateErrorsToEvent(
        // This differs from the LinkedErrors integration in core by using a different exceptionFromError function
        exceptionFromError,
        options3.stackParser,
        key,
        limit,
        event,
        hint
      );
    }
  };
};
var linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);

// node_modules/@sentry/browser/build/npm/esm/utils/detectBrowserExtension.js
function checkAndWarnIfIsEmbeddedBrowserExtension() {
  if (_isEmbeddedBrowserExtension()) {
    if (DEBUG_BUILD3) {
      consoleSandbox(() => {
        console.error(
          "[Sentry] You cannot use Sentry.init() in a browser extension, see: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/"
        );
      });
    }
    return true;
  }
  return false;
}
function _isEmbeddedBrowserExtension() {
  if (typeof WINDOW3.window === "undefined") {
    return false;
  }
  const _window = WINDOW3;
  if (_window.nw) {
    return false;
  }
  const extensionObject = _window["chrome"] || _window["browser"];
  if (!extensionObject?.runtime?.id) {
    return false;
  }
  const href = getLocationHref();
  const extensionProtocols = ["chrome-extension", "moz-extension", "ms-browser-extension", "safari-web-extension"];
  const isDedicatedExtensionPage = WINDOW3 === WINDOW3.top && extensionProtocols.some((protocol) => href.startsWith(`${protocol}://`));
  return !isDedicatedExtensionPage;
}

// node_modules/@sentry/browser/build/npm/esm/sdk.js
function getDefaultIntegrations(_options) {
  return [
    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`
    // eslint-disable-next-line deprecation/deprecation
    inboundFiltersIntegration(),
    functionToStringIntegration(),
    browserApiErrorsIntegration(),
    breadcrumbsIntegration(),
    globalHandlersIntegration(),
    linkedErrorsIntegration(),
    dedupeIntegration(),
    httpContextIntegration(),
    browserSessionIntegration()
  ];
}
function init(options2 = {}) {
  const shouldDisableBecauseIsBrowserExtenstion = !options2.skipBrowserExtensionCheck && checkAndWarnIfIsEmbeddedBrowserExtension();
  const clientOptions = {
    ...options2,
    enabled: shouldDisableBecauseIsBrowserExtenstion ? false : options2.enabled,
    stackParser: stackParserFromStackParserOptions(options2.stackParser || defaultStackParser),
    integrations: getIntegrationsToSetup({
      integrations: options2.integrations,
      defaultIntegrations: options2.defaultIntegrations == null ? getDefaultIntegrations() : options2.defaultIntegrations
    }),
    transport: options2.transport || makeFetchTransport
  };
  return initAndBind(BrowserClient, clientOptions);
}

// node_modules/@sentry/browser/build/npm/esm/report-dialog.js
function showReportDialog(options2 = {}) {
  const optionalDocument = WINDOW3.document;
  const injectionPoint = optionalDocument?.head || optionalDocument?.body;
  if (!injectionPoint) {
    DEBUG_BUILD3 && debug.error("[showReportDialog] Global document not defined");
    return;
  }
  const scope = getCurrentScope();
  const client = getClient();
  const dsn = client?.getDsn();
  if (!dsn) {
    DEBUG_BUILD3 && debug.error("[showReportDialog] DSN not configured");
    return;
  }
  const mergedOptions = {
    ...options2,
    user: {
      ...scope.getUser(),
      ...options2.user
    },
    eventId: options2.eventId || lastEventId()
  };
  const script = WINDOW3.document.createElement("script");
  script.async = true;
  script.crossOrigin = "anonymous";
  script.src = getReportDialogEndpoint(dsn, mergedOptions);
  const { onLoad: onLoad2, onClose } = mergedOptions;
  if (onLoad2) {
    script.onload = onLoad2;
  }
  if (onClose) {
    const reportDialogClosedMessageHandler = (event) => {
      if (event.data === "__sentry_reportdialog_closed__") {
        try {
          onClose();
        } finally {
          WINDOW3.removeEventListener("message", reportDialogClosedMessageHandler);
        }
      }
    };
    WINDOW3.addEventListener("message", reportDialogClosedMessageHandler);
  }
  injectionPoint.appendChild(script);
}

// node_modules/@sentry/react/build/esm/sdk.js
var import_react4 = __toESM(require_react(), 1);
function init2(options2) {
  const opts = {
    ...options2
  };
  applySdkMetadata(opts, "react");
  setContext("react", { version: import_react4.version });
  return init(opts);
}

// node_modules/@sentry/react/build/esm/error.js
var import_react5 = __toESM(require_react(), 1);
function isAtLeastReact17(reactVersion) {
  const reactMajor = reactVersion.match(/^([^.]+)/);
  return reactMajor !== null && parseInt(reactMajor[0]) >= 17;
}
function setCause(error44, cause) {
  const seenErrors = /* @__PURE__ */ new WeakSet();
  function recurse(error45, cause2) {
    if (seenErrors.has(error45)) {
      return;
    }
    if (error45.cause) {
      seenErrors.add(error45);
      return recurse(error45.cause, cause2);
    }
    error45.cause = cause2;
  }
  recurse(error44, cause);
}
function captureReactException(error44, { componentStack }, hint) {
  if (isAtLeastReact17(import_react5.version) && isError(error44) && componentStack) {
    const errorBoundaryError = new Error(error44.message);
    errorBoundaryError.name = `React ErrorBoundary ${error44.name}`;
    errorBoundaryError.stack = componentStack;
    setCause(error44, errorBoundaryError);
  }
  return withScope2((scope) => {
    scope.setContext("react", { componentStack });
    return captureException(error44, hint);
  });
}

// node_modules/@sentry/react/build/esm/errorboundary.js
var React15 = __toESM(require_react(), 1);

// node_modules/@sentry/react/build/esm/debug-build.js
var DEBUG_BUILD4 = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

// node_modules/@sentry/react/build/esm/errorboundary.js
var INITIAL_STATE = {
  componentStack: null,
  error: null,
  eventId: null
};
var ErrorBoundary2 = class extends React15.Component {
  constructor(props) {
    super(props);
    this.state = INITIAL_STATE;
    this._openFallbackReportDialog = true;
    const client = getClient();
    if (client && props.showDialog) {
      this._openFallbackReportDialog = false;
      this._cleanupHook = client.on("afterSendEvent", (event) => {
        if (!event.type && this._lastEventId && event.event_id === this._lastEventId) {
          showReportDialog({ ...props.dialogOptions, eventId: this._lastEventId });
        }
      });
    }
  }
  componentDidCatch(error44, errorInfo) {
    const { componentStack } = errorInfo;
    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;
    withScope2((scope) => {
      if (beforeCapture) {
        beforeCapture(scope, error44, componentStack);
      }
      const handled = this.props.handled != null ? this.props.handled : !!this.props.fallback;
      const eventId = captureReactException(error44, errorInfo, { mechanism: { handled } });
      if (onError) {
        onError(error44, componentStack, eventId);
      }
      if (showDialog) {
        this._lastEventId = eventId;
        if (this._openFallbackReportDialog) {
          showReportDialog({ ...dialogOptions, eventId });
        }
      }
      this.setState({ error: error44, componentStack, eventId });
    });
  }
  componentDidMount() {
    const { onMount } = this.props;
    if (onMount) {
      onMount();
    }
  }
  componentWillUnmount() {
    const { error: error44, componentStack, eventId } = this.state;
    const { onUnmount } = this.props;
    if (onUnmount) {
      if (this.state === INITIAL_STATE) {
        onUnmount(null, null, null);
      } else {
        onUnmount(error44, componentStack, eventId);
      }
    }
    if (this._cleanupHook) {
      this._cleanupHook();
      this._cleanupHook = void 0;
    }
  }
  resetErrorBoundary() {
    const { onReset } = this.props;
    const { error: error44, componentStack, eventId } = this.state;
    if (onReset) {
      onReset(error44, componentStack, eventId);
    }
    this.setState(INITIAL_STATE);
  }
  render() {
    const { fallback, children } = this.props;
    const state = this.state;
    if (state.componentStack === null) {
      return typeof children === "function" ? children() : children;
    }
    const element3 = typeof fallback === "function" ? React15.createElement(fallback, {
      error: state.error,
      componentStack: state.componentStack,
      resetError: () => this.resetErrorBoundary(),
      eventId: state.eventId
    }) : fallback;
    if (React15.isValidElement(element3)) {
      return element3;
    }
    if (fallback) {
      DEBUG_BUILD4 && debug.warn("fallback did not produce a valid ReactElement");
    }
    return null;
  }
};

// src/services/errorHandlingService.ts
init_apiService();
init_notificationService();
init_envConfig();
var ErrorHandlingService = class {
  errorQueue = [];
  errorReports = /* @__PURE__ */ new Map();
  retryHandlers = /* @__PURE__ */ new Map();
  isOnline = navigator.onLine;
  sessionId;
  isDevelopment = false;
  sentryInitialized = false;
  errorListeners = /* @__PURE__ */ new Set();
  maxQueueSize = 100;
  errorStats = {
    total: 0,
    byCategory: /* @__PURE__ */ new Map(),
    bySeverity: /* @__PURE__ */ new Map(),
    recovered: 0,
    reported: 0
  };
  constructor() {
    this.sessionId = this.generateSessionId();
    this.initializeSentry();
    this.setupEventListeners();
    this.loadQueuedErrors();
  }
  /**
   * Initialize Sentry error tracking
   */
  initializeSentry() {
    const sentryDsn2 = ENV.SENTRY_DSN;
    if (sentryDsn2 && !this.isDevelopment) {
      init2({
        dsn: sentryDsn2,
        environment: ENV.ENV || "production",
        integrations: [],
        tracesSampleRate: 0.1,
        beforeSend: (event, hint) => {
          return this.sanitizeErrorEvent(event, hint);
        }
      });
      this.sentryInitialized = true;
      console.log("Sentry error tracking initialized");
    }
  }
  /**
   * Sanitize error events to ensure HIPAA compliance
   */
  sanitizeErrorEvent(event, _hint) {
    if (event.user) {
      event.user = {
        id: event.user.id || "anonymous"
        // Remove email, username, and other PII
      };
    }
    if (event.request) {
      if (event.request.headers) {
        delete event.request.headers["Authorization"];
        delete event.request.headers["Cookie"];
      }
      if (event.request.url) {
        event.request.url = this.sanitizeUrl(event.request.url);
      }
    }
    if (event.breadcrumbs) {
      event.breadcrumbs = event.breadcrumbs.map((breadcrumb) => {
        if (breadcrumb.data) {
          breadcrumb.data = this.sanitizeData(breadcrumb.data);
        }
        return breadcrumb;
      });
    }
    if (event.extra) {
      event.extra = this.sanitizeData(event.extra);
    }
    return event;
  }
  /**
   * Sanitize URL to remove sensitive parameters
   */
  sanitizeUrl(url2) {
    try {
      const urlObj = new URL(url2);
      const sensitiveParams = ["token", "auth", "key", "secret", "password", "session"];
      sensitiveParams.forEach((param) => {
        urlObj.searchParams.delete(param);
      });
      return urlObj.toString();
    } catch {
      return url2;
    }
  }
  /**
   * Sanitize data object to remove PII
   */
  sanitizeData(data2) {
    if (!data2) return data2;
    const sanitized = { ...data2 };
    const sensitiveKeys = ["password", "token", "secret", "auth", "email", "phone", "ssn", "dob"];
    Object.keys(sanitized).forEach((key) => {
      const lowerKey = key.toLowerCase();
      if (sensitiveKeys.some((sensitive) => lowerKey.includes(sensitive))) {
        sanitized[key] = "[REDACTED]";
      } else if (typeof sanitized[key] === "object") {
        sanitized[key] = this.sanitizeData(sanitized[key]);
      }
    });
    return sanitized;
  }
  /**
   * Setup event listeners
   */
  setupEventListeners() {
    window.addEventListener("error", (event) => {
      this.handleError({
        message: event.message,
        category: "system",
        severity: "high",
        timestamp: /* @__PURE__ */ new Date(),
        stack: event.error?.stack,
        context: {
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno
        }
      });
    });
    window.addEventListener("unhandledrejection", (event) => {
      this.handleError({
        message: `Unhandled Promise Rejection: ${event.reason}`,
        category: "system",
        severity: "high",
        timestamp: /* @__PURE__ */ new Date(),
        stack: event.reason?.stack,
        context: {
          promise: event.promise
        }
      });
    });
    window.addEventListener("online", () => {
      this.isOnline = true;
      this.flushErrorQueue();
    });
    window.addEventListener("offline", () => {
      this.isOnline = false;
    });
    window.addEventListener("auth-error", () => {
      this.handleError({
        message: "Authentication error occurred",
        category: "auth",
        severity: "high",
        timestamp: /* @__PURE__ */ new Date(),
        recoverable: true,
        userMessage: "Your session has expired. Please log in again."
      });
    });
  }
  /**
   * Handle an error
   */
  handleError(error44, recovery) {
    const errorId = this.generateErrorId();
    error44.sessionId = this.sessionId;
    error44.userId = this.getCurrentUserId();
    if (!error44.category) {
      error44.category = this.categorizeError(error44);
    }
    if (!error44.severity) {
      error44.severity = this.determineSeverity(error44);
    }
    this.updateErrorStats(error44);
    const report = {
      id: errorId,
      error: error44,
      reported: false,
      resolved: false,
      recovery
    };
    this.errorReports.set(errorId, report);
    this.logError(error44);
    if (error44.severity === "critical" || error44.severity === "high") {
      this.reportToSentry(error44);
      report.reported = true;
      report.reportedAt = /* @__PURE__ */ new Date();
    }
    if (error44.category === "crisis") {
      this.handleCrisisError(error44);
    }
    if (error44.userMessage) {
      this.notifyUser(error44);
    }
    if (recovery) {
      this.attemptRecovery(errorId, error44, recovery);
    }
    if (!this.isOnline) {
      this.queueError(error44);
    } else {
      this.reportError(error44);
    }
    this.notifyListeners(error44);
    return errorId;
  }
  /**
   * Categorize error based on its characteristics
   */
  categorizeError(error44) {
    const message = error44.message.toLowerCase();
    if (message.includes("network") || message.includes("fetch") || error44.code === "NETWORK_ERROR") {
      return "network";
    }
    if (message.includes("auth") || message.includes("unauthorized") || error44.statusCode === 401) {
      return "auth";
    }
    if (message.includes("validation") || message.includes("invalid") || error44.statusCode === 400) {
      return "validation";
    }
    if (message.includes("crisis") || message.includes("emergency")) {
      return "crisis";
    }
    if (error44.statusCode && error44.statusCode >= 500) {
      return "system";
    }
    return "unknown";
  }
  /**
   * Determine error severity
   */
  determineSeverity(error44) {
    if (error44.category === "crisis") {
      return "critical";
    }
    if (error44.category === "auth") {
      return "high";
    }
    if (error44.category === "system") {
      return "high";
    }
    if (error44.category === "network") {
      return "medium";
    }
    if (error44.category === "validation") {
      return "low";
    }
    return "medium";
  }
  /**
   * Update error statistics
   */
  updateErrorStats(error44) {
    this.errorStats.total++;
    const categoryCount = this.errorStats.byCategory.get(error44.category) || 0;
    this.errorStats.byCategory.set(error44.category, categoryCount + 1);
    const severityCount = this.errorStats.bySeverity.get(error44.severity) || 0;
    this.errorStats.bySeverity.set(error44.severity, severityCount + 1);
  }
  /**
   * Log error to console
   */
  logError(error44) {
    const logLevel = this.getLogLevel(error44.severity);
    const sanitizedError = this.sanitizeData(error44);
    console[logLevel](`[${error44.category.toUpperCase()}] ${error44.message}`, sanitizedError);
    if (this.isDevelopment && error44.stack) {
      console.error("Stack trace:", error44.stack);
    }
  }
  /**
   * Get console log level based on severity
   */
  getLogLevel(severity) {
    switch (severity) {
      case "critical":
      case "high":
        return "error";
      case "medium":
        return "warn";
      default:
        return "log";
    }
  }
  /**
   * Report error to Sentry
   */
  reportToSentry(error44) {
    if (!this.sentryInitialized) return;
    captureException(new Error(error44.message), {
      level: this.mapSeverityToSentryLevel(error44.severity),
      tags: {
        category: error44.category,
        sessionId: error44.sessionId
      },
      extra: this.sanitizeData(error44.context)
    });
  }
  /**
   * Map severity to Sentry level
   */
  mapSeverityToSentryLevel(severity) {
    switch (severity) {
      case "critical":
        return "fatal";
      case "high":
        return "error";
      case "medium":
        return "warning";
      case "low":
        return "info";
      default:
        return "error";
    }
  }
  /**
   * Handle crisis-related errors
   */
  handleCrisisError(error44) {
    notificationService_default.showCrisisNotification(
      "Crisis Support Error",
      error44.userMessage || "We encountered an issue with crisis support. Please call 988 for immediate help.",
      { errorId: error44.sessionId }
    );
    apiService_default.post("/errors/crisis", {
      error: this.sanitizeData(error44),
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    }).catch(console.error);
  }
  /**
   * Notify user about error
   */
  notifyUser(error44) {
    const toastType = error44.severity === "critical" || error44.severity === "high" ? "error" : "warning";
    notificationService_default.addToast(error44.userMessage || "An error occurred", toastType);
  }
  /**
   * Attempt error recovery
   */
  async attemptRecovery(errorId, error44, strategy) {
    const report = this.errorReports.get(errorId);
    if (!report) return;
    switch (strategy.type) {
      case "retry":
        await this.retryOperation(errorId, error44, strategy);
        break;
      case "fallback":
        this.useFallback(errorId, strategy.fallbackValue);
        break;
      case "redirect":
        if (strategy.redirectUrl) {
          window.location.href = strategy.redirectUrl;
        }
        break;
      case "reload":
        window.location.reload();
        break;
      case "ignore":
        report.resolved = true;
        report.resolvedAt = /* @__PURE__ */ new Date();
        break;
    }
  }
  /**
   * Retry failed operation
   */
  async retryOperation(errorId, error44, strategy) {
    const maxRetries = strategy.maxRetries || 3;
    const retryDelay = strategy.retryDelay || 1e3;
    let retryCount = 0;
    const retry = () => {
      retryCount++;
      if (retryCount > maxRetries) {
        console.error(`Max retries (${maxRetries}) exceeded for error:`, error44.message);
        return;
      }
      const timeout = setTimeout(() => {
        window.dispatchEvent(new CustomEvent("error-retry", {
          detail: { errorId, error: error44, attempt: retryCount }
        }));
        if (retryCount < maxRetries) {
          retry();
        }
      }, retryDelay * Math.pow(2, retryCount - 1));
      this.retryHandlers.set(errorId, timeout);
    };
    retry();
  }
  /**
   * Use fallback value
   */
  useFallback(errorId, fallbackValue) {
    const report = this.errorReports.get(errorId);
    if (report) {
      report.resolved = true;
      report.resolvedAt = /* @__PURE__ */ new Date();
      this.errorStats.recovered++;
    }
    window.dispatchEvent(new CustomEvent("error-fallback", {
      detail: { errorId, fallbackValue }
    }));
  }
  /**
   * Queue error for later reporting
   */
  queueError(error44) {
    this.errorQueue.push(error44);
    if (this.errorQueue.length > this.maxQueueSize) {
      this.errorQueue.shift();
    }
    this.saveQueuedErrors();
  }
  /**
   * Save queued errors to localStorage
   */
  saveQueuedErrors() {
    try {
      const sanitizedQueue = this.errorQueue.map((error44) => this.sanitizeData(error44));
      localStorage.setItem("error_queue", JSON.stringify(sanitizedQueue));
    } catch (e4) {
      console.error("Failed to save error queue:", e4);
    }
  }
  /**
   * Load queued errors from localStorage
   */
  loadQueuedErrors() {
    try {
      const stored = localStorage.getItem("error_queue");
      if (stored) {
        this.errorQueue = JSON.parse(stored);
        if (this.isOnline) {
          this.flushErrorQueue();
        }
      }
    } catch (e4) {
      console.error("Failed to load error queue:", e4);
    }
  }
  /**
   * Flush error queue
   */
  async flushErrorQueue() {
    while (this.errorQueue.length > 0) {
      const error44 = this.errorQueue.shift();
      await this.reportError(error44);
    }
    localStorage.removeItem("error_queue");
  }
  /**
   * Report error to backend
   */
  async reportError(error44) {
    try {
      await apiService_default.post("/errors/report", {
        error: this.sanitizeData(error44),
        sessionId: this.sessionId,
        timestamp: error44.timestamp.toISOString()
      });
      this.errorStats.reported++;
    } catch (e4) {
      if (!this.isOnline) {
        this.queueError(error44);
      }
    }
  }
  /**
   * Notify error listeners
   */
  notifyListeners(error44) {
    this.errorListeners.forEach((listener) => {
      try {
        listener(error44);
      } catch (e4) {
        console.error("Error in error listener:", e4);
      }
    });
  }
  /**
   * Subscribe to error events
   */
  onError(listener) {
    this.errorListeners.add(listener);
    return () => {
      this.errorListeners.delete(listener);
    };
  }
  /**
   * Get error report by ID
   */
  getErrorReport(errorId) {
    return this.errorReports.get(errorId);
  }
  /**
   * Get error statistics
   */
  getErrorStats() {
    return {
      ...this.errorStats,
      byCategory: Object.fromEntries(this.errorStats.byCategory),
      bySeverity: Object.fromEntries(this.errorStats.bySeverity),
      queuedErrors: this.errorQueue.length,
      activeRetries: this.retryHandlers.size
    };
  }
  /**
   * Clear error history
   */
  clearErrorHistory() {
    this.errorReports.clear();
    this.errorQueue = [];
    this.errorStats = {
      total: 0,
      byCategory: /* @__PURE__ */ new Map(),
      bySeverity: /* @__PURE__ */ new Map(),
      recovered: 0,
      reported: 0
    };
    localStorage.removeItem("error_queue");
  }
  /**
   * Cancel retry for specific error
   */
  cancelRetry(errorId) {
    const timeout = this.retryHandlers.get(errorId);
    if (timeout) {
      clearTimeout(timeout);
      this.retryHandlers.delete(errorId);
    }
  }
  /**
   * Generate session ID
   */
  generateSessionId() {
    return `session-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
  }
  /**
   * Generate error ID
   */
  generateErrorId() {
    return `error-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
  }
  /**
   * Get current user ID
   */
  getCurrentUserId() {
    return localStorage.getItem("userId") || void 0;
  }
  /**
   * Create error boundary wrapper
   */
  createErrorBoundary(_fallback) {
    return ErrorBoundary2;
  }
  /**
   * Wrap async function with error handling
   */
  wrapAsync(fn, options2) {
    return async (...args) => {
      try {
        return await fn(...args);
      } catch (error44) {
        this.handleError({
          message: error44.message || "An error occurred",
          category: options2?.category || "unknown",
          severity: options2?.severity || "medium",
          timestamp: /* @__PURE__ */ new Date(),
          stack: error44.stack,
          userMessage: options2?.userMessage,
          recoverable: true,
          retryable: true
        }, options2?.recovery);
        throw error44;
      }
    };
  }
  /**
   * Test error handling
   */
  testError(category = "system", severity = "medium") {
    this.handleError({
      message: `Test error: ${category} error with ${severity} severity`,
      category,
      severity,
      timestamp: /* @__PURE__ */ new Date(),
      userMessage: "This is a test error notification",
      recoverable: true
    });
  }
};
var errorHandlingService = new ErrorHandlingService();
var errorHandlingService_default = errorHandlingService;

// src/services/analyticsService.ts
init_apiService();
init_auth0Service();
var AnalyticsService = class {
  config;
  eventQueue = [];
  sessionId;
  userId;
  journey;
  flushTimer;
  performanceObserver;
  consentStatus = null;
  dataRetentionTimer;
  constructor(config2 = {}) {
    const defaultPrivacySettings = {
      dataRetentionDays: 30,
      allowCrossSession: false,
      anonymizeAfterDays: 7,
      purgeAfterDays: 90,
      collectLocationData: false,
      collectDeviceData: true,
      shareCrisisData: true
      // Important for safety but anonymized
    };
    const defaultConsentStatus = {
      analytics: false,
      performance: true,
      // Essential for platform functionality
      functionality: true,
      // Essential for platform functionality
      marketing: false,
      timestamp: Date.now(),
      version: "1.0.0"
    };
    this.config = {
      enabled: true,
      collectPersonalData: false,
      batchSize: 10,
      flushInterval: 3e4,
      // 30 seconds
      privacySettings: {
        ...defaultPrivacySettings,
        ...config2.privacySettings || {}
      },
      requireConsent: true,
      gdprCompliant: true,
      hipaaAdjacent: true,
      crisisPriority: true,
      ...config2
    };
    this.sessionId = this.generateSessionId();
    this.consentStatus = this.loadConsentStatus() || defaultConsentStatus;
    this.journey = this.initializeJourney();
    if (this.config.enabled && this.hasRequiredConsent()) {
      this.initialize();
    }
    this.startDataRetentionTimer();
  }
  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
  }
  generateEventId() {
    return `event_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
  }
  initializeJourney() {
    const defaultConsentStatus = {
      analytics: false,
      performance: true,
      functionality: true,
      marketing: false,
      timestamp: Date.now(),
      version: "1.0.0"
    };
    return {
      sessionId: this.sessionId,
      startTime: Date.now(),
      events: [],
      pageViews: [],
      features: [],
      errors: [],
      crisisInterventions: [],
      wellnessActivities: [],
      consentStatus: this.consentStatus || defaultConsentStatus
    };
  }
  loadConsentStatus() {
    try {
      const stored = localStorage.getItem("analytics_consent_status");
      return stored ? JSON.parse(stored) : null;
    } catch {
      return null;
    }
  }
  saveConsentStatus() {
    if (this.consentStatus) {
      localStorage.setItem("analytics_consent_status", JSON.stringify(this.consentStatus));
    }
  }
  hasRequiredConsent() {
    if (!this.config.requireConsent) return true;
    return this.consentStatus?.analytics === true || this.consentStatus?.performance === true;
  }
  startDataRetentionTimer() {
    this.dataRetentionTimer = setInterval(() => {
      this.enforceDataRetention();
    }, 24 * 60 * 60 * 1e3);
  }
  enforceDataRetention() {
    const now = Date.now();
    const { anonymizeAfterDays, purgeAfterDays } = this.config.privacySettings;
    try {
      const stored = localStorage.getItem("analytics_events");
      if (!stored) return;
      const events = JSON.parse(stored);
      const anonymizeMs = anonymizeAfterDays * 24 * 60 * 60 * 1e3;
      const purgeMs = purgeAfterDays * 24 * 60 * 60 * 1e3;
      const processedEvents = events.filter((event) => {
        if (now - event.timestamp > purgeMs) {
          return false;
        }
        return true;
      }).map((event) => {
        if (now - event.timestamp > anonymizeMs && !event.isAnonymized) {
          return this.anonymizeEvent(event);
        }
        return event;
      });
      localStorage.setItem("analytics_events", JSON.stringify(processedEvents));
    } catch (error44) {
      console.error("Astral Core Analytics: Failed to enforce data retention:", error44);
    }
  }
  anonymizeEvent(event) {
    return {
      ...event,
      userId: void 0,
      properties: this.anonymizeProperties(event.properties),
      isAnonymized: true
    };
  }
  anonymizeProperties(properties) {
    if (!properties) return void 0;
    const anonymized = {};
    Object.entries(properties).forEach(([key, value]) => {
      if (this.isPersonalDataKey(key)) {
        anonymized[key] = "[ANONYMIZED]";
      } else {
        anonymized[key] = value;
      }
    });
    return anonymized;
  }
  isPersonalDataKey(key) {
    const personalKeys = [
      "email",
      "phone",
      "address",
      "name",
      "username",
      "userId",
      "ip",
      "location",
      "coordinates",
      "personalInfo",
      "identity"
    ];
    return personalKeys.some(
      (personal) => key.toLowerCase().includes(personal)
    );
  }
  initialize() {
    document.addEventListener("visibilitychange", () => {
      this.track("page_visibility_change", "page_view", {
        visible: !document.hidden
      });
    });
    window.addEventListener("beforeunload", () => {
      this.endSession();
    });
    this.setupPerformanceMonitoring();
    this.startFlushTimer();
    this.trackPageView(window.location.pathname);
  }
  setupPerformanceMonitoring() {
    if ("PerformanceObserver" in window) {
      this.performanceObserver = new PerformanceObserver((list3) => {
        const entries = list3.getEntries();
        entries.forEach((entry) => {
          if (entry.entryType === "navigation") {
            const navEntry = entry;
            this.track("page_load_performance", "performance", {
              loadTime: navEntry.loadEventEnd - navEntry.loadEventStart,
              domContentLoaded: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart,
              firstPaint: this.getFirstPaint(),
              firstContentfulPaint: this.getFirstContentfulPaint()
            });
          }
          if (entry.entryType === "largest-contentful-paint") {
            this.track("largest_contentful_paint", "performance", {
              value: entry.startTime
            });
          }
        });
      });
      this.performanceObserver.observe({
        entryTypes: ["navigation", "largest-contentful-paint", "first-input"]
      });
    }
  }
  getFirstPaint() {
    const entries = performance.getEntriesByType("paint");
    const fpEntry = entries.find((entry) => entry.name === "first-paint");
    return fpEntry?.startTime;
  }
  getFirstContentfulPaint() {
    const entries = performance.getEntriesByType("paint");
    const fcpEntry = entries.find((entry) => entry.name === "first-contentful-paint");
    return fcpEntry?.startTime;
  }
  startFlushTimer() {
    this.flushTimer = setInterval(() => {
      this.flush();
    }, this.config.flushInterval);
  }
  determineSensitivityLevel(name2, category, properties) {
    if (category === "crisis_intervention" || name2.includes("crisis")) {
      return "crisis";
    }
    if (category === "wellness_tracking") {
      return "sensitive";
    }
    if (properties && Object.keys(properties).some((key) => this.isPersonalDataKey(key))) {
      return "private";
    }
    if (category === "performance" || category === "page_view") {
      return "public";
    }
    return "private";
  }
  createEvent(name2, category, properties) {
    const sensitivityLevel = this.determineSensitivityLevel(name2, category, properties);
    return {
      id: this.generateEventId(),
      name: name2,
      category,
      properties: this.sanitizeProperties(properties),
      timestamp: Date.now(),
      sessionId: this.sessionId,
      userId: this.config.collectPersonalData && this.consentStatus?.analytics ? this.userId : void 0,
      isAnonymized: false,
      sensitivityLevel
    };
  }
  sanitizeProperties(properties) {
    if (!properties) return void 0;
    const sanitized = {};
    Object.entries(properties).forEach(([key, value]) => {
      if (this.isSensitiveKey(key)) {
        return;
      }
      if (typeof value === "string") {
        sanitized[key] = this.sanitizeString(value);
      } else if (typeof value === "number" || typeof value === "boolean") {
        sanitized[key] = value;
      } else if (Array.isArray(value)) {
        sanitized[key] = value.map(
          (item) => typeof item === "string" ? this.sanitizeString(item) : item
        );
      }
    });
    return sanitized;
  }
  isSensitiveKey(key) {
    const sensitiveKeys = [
      "password",
      "email",
      "phone",
      "address",
      "ssn",
      "token",
      "apikey",
      "secret",
      "private",
      "personal",
      "medical",
      "health"
    ];
    return sensitiveKeys.some(
      (sensitive) => key.toLowerCase().includes(sensitive)
    );
  }
  sanitizeString(value) {
    value = value.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g, "[EMAIL]");
    value = value.replace(/\b\d{3}[-.]?\d{3}[-.]?\d{4}\b/g, "[PHONE]");
    value = value.replace(/\b[A-Za-z0-9]{20,}\b/g, "[TOKEN]");
    return value;
  }
  async sendEvents(events) {
    if (!this.config.endpoint) {
      const stored = localStorage.getItem("analytics_events") || "[]";
      const allEvents = [...JSON.parse(stored), ...events];
      const maxEvents = this.config.privacySettings.dataRetentionDays * 100;
      localStorage.setItem("analytics_events", JSON.stringify(allEvents.slice(-maxEvents)));
      return;
    }
    try {
      const payload = {
        events: events.map((event) => ({
          ...event,
          // Additional privacy headers
          gdprCompliant: this.config.gdprCompliant,
          hipaaAdjacent: this.config.hipaaAdjacent,
          consentStatus: this.consentStatus
        })),
        sessionId: this.sessionId,
        timestamp: Date.now(),
        privacySettings: this.config.privacySettings
      };
      await apiService_default.post("/analytics/events", payload, {
        headers: {
          "Privacy-Compliant": "true",
          "GDPR-Compliant": this.config.gdprCompliant.toString(),
          "Mental-Health-Platform": "true"
        }
      });
    } catch (error44) {
      console.error("Astral Core Analytics: Failed to send events:", error44);
      const failed = localStorage.getItem("astralcore_analytics_failed") || "[]";
      const failedEvents = [...JSON.parse(failed), ...events];
      localStorage.setItem("astralcore_analytics_failed", JSON.stringify(failedEvents.slice(-100)));
    }
  }
  // Public API
  track(name2, category, properties) {
    if (!this.config.enabled || !this.hasRequiredConsent()) return;
    const event = this.createEvent(name2, category, properties);
    this.eventQueue.push(event);
    this.journey.events.push(event);
    if (category === "page_view") {
      this.journey.pageViews.push(name2);
    } else if (category === "feature_usage") {
      this.journey.features.push(name2);
    } else if (category === "error") {
      this.journey.errors.push(name2);
    } else if (category === "crisis_intervention") {
      this.journey.crisisInterventions.push(name2);
      if (this.config.crisisPriority) {
        this.flush();
      }
    } else if (category === "wellness_tracking") {
      this.journey.wellnessActivities.push(name2);
    }
    if (this.eventQueue.length >= this.config.batchSize) {
      this.flush();
    }
  }
  trackPageView(path2, title) {
    const properties = {
      path: path2,
      title: title || document.title,
      referrer: document.referrer,
      language: navigator.language,
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      }
    };
    if (this.config.privacySettings.collectDeviceData && this.consentStatus?.analytics) {
      properties.userAgent = navigator.userAgent;
    }
    this.track("page_view", "page_view", properties);
  }
  trackFeatureUsage(feature, action, properties) {
    this.track(`${feature}_${action}`, "feature_usage", {
      feature,
      action,
      ...properties
    });
  }
  trackEvent(eventName, properties) {
    this.track(eventName, "user_action", properties);
  }
  trackError(error44, context) {
    this.track("error", "error", {
      message: error44.message,
      stack: error44.stack?.split("\n").slice(0, 5).join("\n"),
      // Limit stack trace
      context,
      url: window.location.href
    });
  }
  trackUserAction(action, element3, properties) {
    this.track(action, "user_action", {
      element: element3,
      ...properties
    });
  }
  trackTiming(name2, duration3, category) {
    this.track("timing", "performance", {
      name: name2,
      duration: duration3,
      category
    });
  }
  // Crisis intervention specific tracking
  trackCrisisIntervention(action, properties) {
    this.track(action, "crisis_intervention", {
      timestamp: Date.now(),
      urgent: true,
      ...properties
    });
  }
  // Wellness tracking
  trackWellnessActivity(activity, properties) {
    this.track(activity, "wellness_tracking", {
      timestamp: Date.now(),
      ...properties
    });
  }
  // Consent Management
  updateConsent(consent) {
    this.consentStatus = {
      ...this.consentStatus,
      ...consent,
      timestamp: Date.now()
    };
    this.saveConsentStatus();
    this.journey.consentStatus = this.consentStatus;
    this.track("consent_updated", "user_action", {
      analytics: consent.analytics,
      performance: consent.performance,
      functionality: consent.functionality,
      marketing: consent.marketing
    });
    if (!this.config.enabled && this.hasRequiredConsent()) {
      this.config.enabled = true;
      this.initialize();
    }
    if (this.config.enabled && !this.hasRequiredConsent()) {
      this.optOut();
    }
  }
  getConsentStatus() {
    return this.consentStatus;
  }
  // GDPR Right to Access
  async exportUserData(userId) {
    const exportRequest = {
      userId,
      requestDate: Date.now(),
      includeAnalytics: true,
      includeJourneys: true,
      format: "json",
      status: "pending"
    };
    try {
      const events = this.getStoredEvents().filter(
        (event) => event.userId === userId || event.sessionId === this.sessionId
      );
      const userData = {
        user: { userId },
        events,
        journey: this.journey,
        consentStatus: this.consentStatus,
        exportRequest
      };
      console.log("Astral Core Analytics: User data export requested:", userData);
      exportRequest.status = "completed";
      return exportRequest;
    } catch (error44) {
      console.error("Astral Core Analytics: Failed to export user data:", error44);
      exportRequest.status = "failed";
      return exportRequest;
    }
  }
  // GDPR Right to Erasure
  async deleteUserData(userId, retainCrisisData = true) {
    const deletionRequest = {
      userId,
      requestDate: Date.now(),
      deleteAnalytics: true,
      deleteJourneys: true,
      retainCrisisData,
      status: "pending"
    };
    try {
      const events = this.getStoredEvents();
      const filteredEvents = events.filter((event) => {
        if (event.userId !== userId) return true;
        if (retainCrisisData && event.category === "crisis_intervention") {
          return { ...event, userId: void 0, isAnonymized: true };
        }
        return false;
      });
      localStorage.setItem("analytics_events", JSON.stringify(filteredEvents));
      if (this.userId === userId) {
        this.userId = void 0;
        this.journey.events = this.journey.events.filter(
          (event) => retainCrisisData && event.category === "crisis_intervention"
        );
      }
      deletionRequest.status = "completed";
      this.track("user_data_deleted", "user_action", {
        retainedCrisisData: retainCrisisData,
        deletionTimestamp: Date.now()
      });
      return deletionRequest;
    } catch (error44) {
      console.error("Astral Core Analytics: Failed to delete user data:", error44);
      deletionRequest.status = "failed";
      return deletionRequest;
    }
  }
  // Session management
  setUserId(userId) {
    if (this.config.collectPersonalData && this.consentStatus?.analytics) {
      this.userId = userId;
    }
  }
  endSession() {
    this.journey.endTime = Date.now();
    this.track("session_end", "user_action", {
      duration: this.journey.endTime - this.journey.startTime,
      pageViews: this.journey.pageViews.length,
      features: this.journey.features.length,
      errors: this.journey.errors.length,
      events: this.journey.events.length,
      crisisInterventions: this.journey.crisisInterventions.length,
      wellnessActivities: this.journey.wellnessActivities.length
    });
    this.flush();
    if (this.flushTimer) {
      clearInterval(this.flushTimer);
    }
    if (this.dataRetentionTimer) {
      clearInterval(this.dataRetentionTimer);
    }
  }
  flush() {
    if (this.eventQueue.length === 0) return;
    const events = [...this.eventQueue];
    this.eventQueue = [];
    this.sendEvents(events);
  }
  // Configuration
  updateConfig(newConfig) {
    this.config = {
      ...this.config,
      ...newConfig,
      privacySettings: {
        ...this.config.privacySettings,
        ...newConfig.privacySettings || {}
      }
    };
  }
  isEnabled() {
    return this.config.enabled && this.hasRequiredConsent();
  }
  // Privacy controls
  optOut() {
    this.config.enabled = false;
    this.eventQueue = [];
    if (this.consentStatus) {
      this.consentStatus.analytics = false;
      this.saveConsentStatus();
    }
    localStorage.setItem("analytics_opted_out", "true");
    if (this.flushTimer) {
      clearInterval(this.flushTimer);
    }
    if (this.dataRetentionTimer) {
      clearInterval(this.dataRetentionTimer);
    }
  }
  optIn() {
    this.config.enabled = true;
    localStorage.removeItem("analytics_opted_out");
    if (this.consentStatus) {
      this.consentStatus.analytics = true;
      this.saveConsentStatus();
    }
    if (this.hasRequiredConsent()) {
      this.initialize();
    }
  }
  // Debug methods
  getStoredEvents() {
    const stored = localStorage.getItem("analytics_events");
    if (!stored) return [];
    try {
      return JSON.parse(stored);
    } catch (error44) {
      console.warn("Astral Core Analytics: Failed to parse stored events:", error44);
      return [];
    }
  }
  getJourney() {
    return { ...this.journey };
  }
  clearStoredData() {
    localStorage.removeItem("analytics_events");
    localStorage.removeItem("analytics_failed");
    localStorage.removeItem("analytics_consent_status");
  }
  // Privacy compliance reporting
  getPrivacyReport() {
    const events = this.getStoredEvents();
    const personalDataEvents = events.filter((event) => !event.isAnonymized && event.userId);
    const anonymizedEvents = events.filter((event) => event.isAnonymized);
    const crisisEvents = events.filter((event) => event.category === "crisis_intervention");
    return {
      totalEvents: events.length,
      personalDataEvents: personalDataEvents.length,
      anonymizedEvents: anonymizedEvents.length,
      crisisEvents: crisisEvents.length,
      dataRetentionDays: this.config.privacySettings.dataRetentionDays,
      gdprCompliant: this.config.gdprCompliant,
      hipaaAdjacent: this.config.hipaaAdjacent,
      consentStatus: this.consentStatus,
      oldestEvent: events.length > 0 ? new Date(Math.min(...events.map((e4) => e4.timestamp))) : null,
      newestEvent: events.length > 0 ? new Date(Math.max(...events.map((e4) => e4.timestamp))) : null
    };
  }
};
var WebVitalsTracker = class {
  analytics;
  constructor(analytics) {
    this.analytics = analytics;
    setTimeout(() => this.initializeWebVitals(), 0);
  }
  async initializeWebVitals() {
    if ("web-vitals" in window) {
      const webVitals = window["web-vitals"];
      webVitals.getCLS((metric) => this.reportWebVital("CLS", metric));
      webVitals.getFID((metric) => this.reportWebVital("FID", metric));
      webVitals.getFCP((metric) => this.reportWebVital("FCP", metric));
      webVitals.getLCP((metric) => this.reportWebVital("LCP", metric));
      webVitals.getTTFB((metric) => this.reportWebVital("TTFB", metric));
    }
  }
  reportWebVital(name2, metric) {
    this.analytics.track(`web_vital_${name2}`, "performance", {
      value: metric.value,
      rating: metric.rating,
      delta: metric.delta,
      id: metric.id
    });
  }
};
var ABTestingManager = class {
  experiments = /* @__PURE__ */ new Map();
  analytics;
  constructor(analytics) {
    this.analytics = analytics;
    this.loadExperiments();
  }
  loadExperiments() {
    const stored = localStorage.getItem("ab_experiments");
    if (stored) {
      const experiments = JSON.parse(stored);
      Object.entries(experiments).forEach(([key, value]) => {
        this.experiments.set(key, value);
      });
    }
  }
  getVariant(experimentId, variants) {
    if (this.experiments.has(experimentId)) {
      return this.experiments.get(experimentId);
    }
    const variant = variants[Math.floor(Math.random() * variants.length)];
    this.experiments.set(experimentId, variant);
    this.saveExperiments();
    this.analytics.track("ab_test_assignment", "feature_usage", {
      experimentId,
      variant,
      timestamp: Date.now()
    });
    return variant;
  }
  trackConversion(experimentId, conversionType) {
    const variant = this.experiments.get(experimentId);
    if (variant) {
      this.analytics.track("ab_test_conversion", "feature_usage", {
        experimentId,
        variant,
        conversionType,
        timestamp: Date.now()
      });
    }
  }
  saveExperiments() {
    const obj = Object.fromEntries(this.experiments);
    localStorage.setItem("ab_experiments", JSON.stringify(obj));
  }
};
var SessionRecorder = class {
  analytics;
  recording = false;
  events = [];
  startTime = 0;
  constructor(analytics) {
    this.analytics = analytics;
  }
  startRecording(consent = false) {
    if (!consent) {
      console.warn("Session recording requires explicit consent");
      return;
    }
    this.recording = true;
    this.startTime = Date.now();
    this.events = [];
    document.addEventListener("click", this.recordEvent);
    document.addEventListener("input", this.recordEvent);
    document.addEventListener("scroll", this.recordEvent);
  }
  recordEvent = (event) => {
    if (!this.recording) return;
    const sanitizedEvent = {
      type: event.type,
      timestamp: Date.now() - this.startTime,
      target: {
        tagName: event.target?.tagName,
        className: event.target?.className,
        // Don't record actual input values for privacy
        value: event.type === "input" ? "[REDACTED]" : void 0
      }
    };
    this.events.push(sanitizedEvent);
  };
  stopRecording() {
    this.recording = false;
    document.removeEventListener("click", this.recordEvent);
    document.removeEventListener("input", this.recordEvent);
    document.removeEventListener("scroll", this.recordEvent);
    if (this.events.length > 0) {
      this.analytics.track("session_recording", "user_action", {
        duration: Date.now() - this.startTime,
        eventCount: this.events.length,
        // Don't send actual events, just metadata
        metadata: {
          clicks: this.events.filter((e4) => e4.type === "click").length,
          inputs: this.events.filter((e4) => e4.type === "input").length,
          scrolls: this.events.filter((e4) => e4.type === "scroll").length
        }
      });
    }
  }
};
var analyticsServiceInstance = null;
var getAnalyticsService = () => {
  if (!analyticsServiceInstance) {
    const optedOut = localStorage.getItem("astralcore_analytics_opted_out") === "true";
    analyticsServiceInstance = new AnalyticsService({ enabled: !optedOut });
    const webVitalsTracker = new WebVitalsTracker(analyticsServiceInstance);
    analyticsServiceInstance.webVitalsTracker = webVitalsTracker;
    errorHandlingService_default.onError((error44) => {
      analyticsServiceInstance.trackError(
        new Error(error44.message),
        error44.category
      );
    });
  }
  return analyticsServiceInstance;
};
var astralCoreAnalytics = getAnalyticsService();
if (typeof window !== "undefined") {
  window.addEventListener("auth-success", (event) => {
    const user = event.detail?.user || auth0Service.getCurrentUser();
    if (user?.sub) {
      astralCoreAnalytics.setUserId(user.sub);
      astralCoreAnalytics.track("user_authenticated", "user_action", {
        provider: "auth0",
        timestamp: Date.now()
      });
    }
  });
  window.addEventListener("auth-logout", () => {
    astralCoreAnalytics.track("user_logout", "user_action", {
      timestamp: Date.now()
    });
    astralCoreAnalytics.endSession();
  });
}
var abTesting = new ABTestingManager(astralCoreAnalytics);
var sessionRecorder = new SessionRecorder(astralCoreAnalytics);
var analyticsService_default = astralCoreAnalytics;

// src/hooks/useAnalyticsTracking.ts
var useAnalyticsTracking = (options2 = {}) => {
  const {
    trackPageViews = true,
    trackInteractions = true,
    trackErrors = true,
    componentName,
    featureName
  } = options2;
  const location = useLocation();
  const navigationType = useNavigationType();
  const previousPath = (0, import_react7.useRef)();
  (0, import_react7.useEffect)(() => {
    if (!trackPageViews) return;
    const currentPath = location.pathname + location.search;
    if (currentPath === previousPath.current) return;
    previousPath.current = currentPath;
    analyticsService_default.trackPageView(currentPath, componentName || featureName);
  }, [location, navigationType, trackPageViews, componentName, featureName]);
  const trackEvent = (0, import_react7.useCallback)((eventName, options3) => {
    if (!trackInteractions) return;
    analyticsService_default.trackEvent(eventName, {
      category: options3?.category || "user_action",
      properties: {
        ...options3?.properties,
        componentName,
        featureName,
        path: location.pathname
      },
      sensitivityLevel: options3?.sensitivityLevel || "public"
    });
  }, [trackInteractions, componentName, featureName, location.pathname]);
  const trackFeatureUsage = (0, import_react7.useCallback)((feature, metadata) => {
    analyticsService_default.trackFeatureUsage(feature, "usage", {
      ...metadata,
      componentName,
      path: location.pathname
    });
  }, [componentName, location.pathname]);
  const trackInteraction = (0, import_react7.useCallback)((element3, action, value) => {
    if (!trackInteractions) return;
    analyticsService_default.trackEvent(`${action}_${element3}`, {
      category: "user_action",
      properties: {
        element: element3,
        action,
        value,
        componentName,
        featureName,
        path: location.pathname
      },
      sensitivityLevel: "public"
    });
  }, [trackInteractions, componentName, featureName, location.pathname]);
  const trackFormSubmit = (0, import_react7.useCallback)((formName, success2, metadata) => {
    analyticsService_default.trackEvent("form_submit", {
      category: "user_action",
      properties: {
        formName,
        success: success2,
        ...metadata,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "private"
    });
  }, [componentName, location.pathname]);
  const trackCrisisEvent = (0, import_react7.useCallback)((eventType, metadata) => {
    analyticsService_default.trackEvent(`crisis_${eventType}`, {
      category: "crisis_intervention",
      properties: {
        ...metadata,
        componentName,
        path: location.pathname,
        timestamp: Date.now()
      },
      sensitivityLevel: "crisis"
    });
  }, [componentName, location.pathname]);
  const trackWellnessActivity = (0, import_react7.useCallback)((activity, duration3, outcome) => {
    analyticsService_default.trackEvent("wellness_activity", {
      category: "wellness_tracking",
      properties: {
        activity,
        duration: duration3,
        outcome,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "sensitive"
    });
  }, [componentName, location.pathname]);
  const trackPerformance = (0, import_react7.useCallback)((metric, value, unit) => {
    analyticsService_default.trackEvent("performance_metric", {
      category: "performance",
      properties: {
        metric,
        value,
        unit,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "public"
    });
  }, [componentName, location.pathname]);
  const trackError = (0, import_react7.useCallback)((error44, context) => {
    if (!trackErrors) return;
    const errorMessage = error44 instanceof Error ? error44.message : error44;
    const errorStack = error44 instanceof Error ? error44.stack : void 0;
    analyticsService_default.trackEvent("error", {
      category: "error",
      properties: {
        message: errorMessage,
        stack: errorStack,
        ...context,
        componentName,
        featureName,
        path: location.pathname
      },
      sensitivityLevel: "private"
    });
  }, [trackErrors, componentName, featureName, location.pathname]);
  const trackExperiment = (0, import_react7.useCallback)((experimentName, variant) => {
    analyticsService_default.trackEvent("experiment_exposure", {
      category: "feature_usage",
      properties: {
        experimentName,
        variant,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "public"
    });
  }, [componentName, location.pathname]);
  const trackSearch = (0, import_react7.useCallback)((query, resultCount, clickedResult) => {
    const hashedQuery = btoa(query).substring(0, 10);
    analyticsService_default.trackEvent("search", {
      category: "user_action",
      properties: {
        queryHash: hashedQuery,
        queryLength: query.length,
        resultCount,
        clickedResult,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "private"
    });
  }, [componentName, location.pathname]);
  const trackTiming = (0, import_react7.useCallback)((category, variable, duration3) => {
    analyticsService_default.trackEvent("timing", {
      category: "performance",
      properties: {
        timingCategory: category,
        timingVariable: variable,
        duration: duration3,
        componentName,
        path: location.pathname
      },
      sensitivityLevel: "public"
    });
  }, [componentName, location.pathname]);
  return {
    trackEvent,
    trackFeatureUsage,
    trackInteraction,
    trackFormSubmit,
    trackCrisisEvent,
    trackWellnessActivity,
    trackPerformance,
    trackError,
    trackExperiment,
    trackSearch,
    trackTiming
  };
};

// src/routes/AppRoutes.tsx
var import_react65 = __toESM(require_react());
init_dist();
init_LoadingSpinner();

// src/components/auth/AuthGuard.tsx
var import_react8 = __toESM(require_react());
init_dist();
init_auth0Service();
init_LoadingSpinner();
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var AuthGuard = ({
  children,
  requireAuth = true,
  requireRoles = [],
  requireAllRoles = false,
  fallback = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(LoadingSpinner, {}),
  redirectTo = "/login",
  onUnauthorized
}) => {
  const [isLoading, setIsLoading] = (0, import_react8.useState)(true);
  const [isAuthenticated, setIsAuthenticated] = (0, import_react8.useState)(false);
  const [hasAccess, setHasAccess] = (0, import_react8.useState)(false);
  const location = useLocation();
  (0, import_react8.useEffect)(() => {
    checkAuth();
    const unsubscribe = auth0Service.onAuthStateChange((user) => {
      setIsAuthenticated(!!user);
      checkAccess(user);
    });
    return unsubscribe;
  }, [requireAuth, requireRoles, requireAllRoles]);
  const checkAuth = async () => {
    try {
      setIsLoading(true);
      const authenticated = await auth0Service.isAuthenticated();
      setIsAuthenticated(authenticated);
      if (authenticated) {
        const currentUser = await auth0Service.getCurrentUser();
        await checkAccess(currentUser);
      } else {
        setHasAccess(!requireAuth);
      }
    } catch (error44) {
      console.error("Auth check failed:", error44);
      setHasAccess(false);
    } finally {
      setIsLoading(false);
    }
  };
  const checkAccess = async (user) => {
    if (!requireAuth) {
      setHasAccess(true);
      return;
    }
    if (!user) {
      setHasAccess(false);
      return;
    }
    if (requireRoles.length === 0) {
      setHasAccess(true);
      return;
    }
    let roleAccess = false;
    if (requireAllRoles) {
      roleAccess = await auth0Service.hasAllRoles(requireRoles);
    } else {
      roleAccess = await auth0Service.hasAnyRole(requireRoles);
    }
    setHasAccess(roleAccess);
    if (!roleAccess && onUnauthorized) {
      onUnauthorized();
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children: fallback });
  }
  if (!hasAccess) {
    if (requireAuth && !isAuthenticated) {
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Navigate, { to: redirectTo, state: { from: location }, replace: true });
    }
    if (isAuthenticated && requireRoles.length > 0) {
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(UnauthorizedPage, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Navigate, { to: redirectTo, replace: true });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children });
};
var UnauthorizedPage = () => /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex flex-col items-center justify-center min-h-screen", children: [
  /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("h1", { className: "text-4xl font-bold text-gray-800 mb-4", children: "403 - Unauthorized" }),
  /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("p", { className: "text-gray-600 mb-8", children: "You don't have permission to access this page." }),
  /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "button",
    {
      onClick: () => window.history.back(),
      className: "px-6 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700",
      children: "Go Back"
    }
  )
] });

// src/routes/AppRoutes.tsx
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var DashboardView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_DashboardView(), DashboardView_exports)));
var WellnessDashboard = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_WellnessView(), WellnessView_exports)));
var ProfileView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_ProfileView(), ProfileView_exports)));
var SettingsView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_SettingsView(), SettingsView_exports)));
var FeedView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_FeedView(), FeedView_exports)));
var CommunityView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_CommunityView(), CommunityView_exports)));
var ChatRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_ChatRoute(), ChatRoute_exports)));
var AIChatView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_AIChatView(), AIChatView_exports)));
var AssessmentsView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_AssessmentsView(), AssessmentsView_exports)));
var WellnessView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_WellnessView(), WellnessView_exports)));
var ReflectionsView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_ReflectionsView(), ReflectionsView_exports)));
var SafetyPlanView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_SafetyPlanView(), SafetyPlanView_exports)));
var QuietSpaceView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_QuietSpaceView2(), QuietSpaceView_exports)));
var CrisisView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_CrisisView(), CrisisView_exports)));
var CrisisResourcesView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_CrisisResourcesView(), CrisisResourcesView_exports)));
var AboutView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_AboutView(), AboutView_exports)));
var HelpView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelpView(), HelpView_exports)));
var LegalView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_LegalView(), LegalView_exports)));
var PeerSupportView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_PeerSupportView(), PeerSupportView_exports)));
var TetherView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_TetherView2(), TetherView_exports)));
var WellnessVideosView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_WellnessVideosView(), WellnessVideosView_exports)));
var HelperDashboardRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelperDashboardRoute(), HelperDashboardRoute_exports)));
var HelperProfileRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelperProfileRoute(), HelperProfileRoute_exports)));
var HelperTrainingRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelperTrainingRoute(), HelperTrainingRoute_exports)));
var HelperApplicationRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelperApplicationRoute(), HelperApplicationRoute_exports)));
var HelperCommunityView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_HelperCommunityView(), HelperCommunityView_exports)));
var AdminDashboardRoute2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_AdminDashboardRoute(), AdminDashboardRoute_exports)));
var ModerationView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_ModerationView(), ModerationView_exports)));
var AnalyticsView2 = (0, import_react65.lazy)(() => Promise.resolve().then(() => (init_AnalyticsView(), AnalyticsView_exports)));
var RouteLoading = () => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)("div", { className: "route-loading", children: [
  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LoadingSpinner, {}),
  /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("p", { children: "Loading page..." })
] });
var AppRoutes = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(import_react65.Suspense, { fallback: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(RouteLoading, {}), children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(Routes, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(WellnessDashboard, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/about", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AboutView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/legal", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LegalView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/help", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelpView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/crisis", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CrisisView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/crisis-resources", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CrisisResourcesView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/dashboard", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(DashboardView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/profile", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ProfileView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/settings", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(SettingsView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/feed", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(FeedView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/community", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(CommunityView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/chat", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ChatRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/ai-chat", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AIChatView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/assessments", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AssessmentsView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/wellness", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(WellnessView2, {}) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/wellness-videos", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(WellnessVideosView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/reflections", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ReflectionsView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/safety-plan", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(SafetyPlanView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/quiet-space", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(QuietSpaceView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/peer-support", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(PeerSupportView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/tether", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TetherView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/helper/dashboard", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["helper", "admin"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelperDashboardRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/helper/profile", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["helper", "admin"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelperProfileRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/helper/training", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelperTrainingRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/helper/application", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelperApplicationRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/helper/community", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["helper", "admin"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(HelperCommunityView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/admin", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["admin"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AdminDashboardRoute2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/admin/moderation", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["admin", "moderator"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ModerationView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "/admin/analytics", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AuthGuard, { requireAuth: true, requireRoles: ["admin"], children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AnalyticsView2, {}) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Route, { path: "*", element: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Navigate, { to: "/", replace: true }) })
  ] }) });
};
var AppRoutes_default = AppRoutes;

// src/components/ThemeProvider.tsx
var import_react67 = __toESM(require_react());

// src/services/advancedThemingSystem.ts
var import_react66 = __toESM(require_react());
var THERAPEUTIC_THEMES = {
  "calm-sanctuary": {
    id: "calm-sanctuary",
    name: "Calm Sanctuary",
    description: "Cool blues and soft greens designed to reduce anxiety and promote tranquility",
    psychologyPrinciples: [
      "Blue reduces cortisol levels and heart rate",
      "Green promotes emotional balance and reduces eye strain",
      "Cool tones activate parasympathetic nervous system",
      "Low saturation prevents overstimulation"
    ],
    recommendedFor: [
      "Anxiety disorders",
      "Panic attacks",
      "Insomnia",
      "PTSD symptoms",
      "Sensory sensitivity"
    ],
    colors: {
      light: {
        primary: "#2E7D8F",
        // Calming teal
        primaryLight: "#4A9FB0",
        primaryDark: "#1F5A6A",
        secondary: "#7FB069",
        // Soft sage green
        secondaryLight: "#A4C989",
        secondaryDark: "#5E8B4A",
        background: "#F8FBFC",
        // Very pale blue-white
        backgroundSecondary: "#F1F7F9",
        backgroundTertiary: "#E8F4F6",
        surface: "#FFFFFF",
        surfaceSecondary: "#F4F9FA",
        surfaceHover: "#EBF6F8",
        text: "#1B3A42",
        // Deep teal-gray
        textSecondary: "#4A6B73",
        textMuted: "#7A9CA4",
        textInverse: "#FFFFFF",
        success: "#7FB069",
        warning: "#E6B17A",
        error: "#D97757",
        info: "#5BA8C4",
        crisis: "#E53E3E",
        calm: "#B8E6E1",
        hope: "#A8D8EA",
        support: "#9FD3C7",
        growth: "#86C7B8",
        border: "#D1E7EA",
        borderLight: "#E8F4F6",
        borderHover: "#B8DDE2",
        shadow: "rgba(46, 125, 143, 0.1)",
        shadowHover: "rgba(46, 125, 143, 0.15)"
      },
      dark: {
        primary: "#4A9FB0",
        primaryLight: "#6BB5C5",
        primaryDark: "#2E7D8F",
        secondary: "#A4C989",
        secondaryLight: "#BDD8A4",
        secondaryDark: "#7FB069",
        background: "#0F1B1E",
        backgroundSecondary: "#162329",
        backgroundTertiary: "#1D2D33",
        surface: "#243339",
        surfaceSecondary: "#2B3D44",
        surfaceHover: "#34464E",
        text: "#E8F4F6",
        textSecondary: "#B8DDE2",
        textMuted: "#7A9CA4",
        textInverse: "#1B3A42",
        success: "#A4C989",
        warning: "#F4D03F",
        error: "#F1948A",
        info: "#85C1E9",
        crisis: "#FF6B6B",
        calm: "#6BB5C5",
        hope: "#85C1E9",
        support: "#A4C989",
        growth: "#86C7B8",
        border: "#3C5259",
        borderLight: "#2B3D44",
        borderHover: "#4A6B73",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.4)"
      }
    },
    accessibility: {
      contrastRatio: 7.2,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "warm-embrace": {
    id: "warm-embrace",
    name: "Warm Embrace",
    description: "Gentle oranges and warm yellows to combat depression and boost mood",
    psychologyPrinciples: [
      "Orange stimulates serotonin production",
      "Warm yellows increase dopamine levels",
      "Warm tones promote feelings of comfort and security",
      "Moderate saturation prevents overstimulation while maintaining mood benefits"
    ],
    recommendedFor: [
      "Depression",
      "Seasonal Affective Disorder",
      "Low motivation",
      "Emotional numbness",
      "Social isolation"
    ],
    colors: {
      light: {
        primary: "#E67E22",
        // Warm orange
        primaryLight: "#F39C12",
        primaryDark: "#D35400",
        secondary: "#F1C40F",
        // Sunshine yellow
        secondaryLight: "#F7DC6F",
        secondaryDark: "#D4AC0D",
        background: "#FFFEF7",
        // Warm white
        backgroundSecondary: "#FEF9E7",
        backgroundTertiary: "#FCF3CF",
        surface: "#FFFFFF",
        surfaceSecondary: "#FEF9E7",
        surfaceHover: "#FCF3CF",
        text: "#6E2C00",
        // Deep burnt orange
        textSecondary: "#935116",
        textMuted: "#B7950B",
        textInverse: "#FFFFFF",
        success: "#27AE60",
        warning: "#F39C12",
        error: "#E74C3C",
        info: "#3498DB",
        crisis: "#E53E3E",
        calm: "#F7DC6F",
        hope: "#F1C40F",
        support: "#F39C12",
        growth: "#E67E22",
        border: "#F8C471",
        borderLight: "#FCF3CF",
        borderHover: "#F4D03F",
        shadow: "rgba(230, 126, 34, 0.1)",
        shadowHover: "rgba(230, 126, 34, 0.15)"
      },
      dark: {
        primary: "#F39C12",
        primaryLight: "#F7DC6F",
        primaryDark: "#E67E22",
        secondary: "#F7DC6F",
        secondaryLight: "#FCF3CF",
        secondaryDark: "#F1C40F",
        background: "#1C1408",
        backgroundSecondary: "#2C1E0A",
        backgroundTertiary: "#3D280E",
        surface: "#4A3112",
        surfaceSecondary: "#583917",
        surfaceHover: "#66421C",
        text: "#FCF3CF",
        textSecondary: "#F7DC6F",
        textMuted: "#D4AC0D",
        textInverse: "#6E2C00",
        success: "#58D68D",
        warning: "#F7DC6F",
        error: "#F1948A",
        info: "#85C1E9",
        crisis: "#FF6B6B",
        calm: "#F7DC6F",
        hope: "#F1C40F",
        support: "#F39C12",
        growth: "#E67E22",
        border: "#66421C",
        borderLight: "#4A3112",
        borderHover: "#7D5A29",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.4)"
      }
    },
    accessibility: {
      contrastRatio: 6.8,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "nature-healing": {
    id: "nature-healing",
    name: "Nature Healing",
    description: "Earth tones and natural greens for grounding and emotional stability",
    psychologyPrinciples: [
      "Earth tones reduce stress hormones",
      "Natural greens restore attention and reduce mental fatigue",
      "Brown promotes feelings of security and stability",
      "Forest colors activate biophilic stress reduction"
    ],
    recommendedFor: [
      "ADHD and attention issues",
      "Chronic stress",
      "Burnout recovery",
      "Trauma healing",
      "Nature-based therapy"
    ],
    colors: {
      light: {
        primary: "#27AE60",
        // Forest green
        primaryLight: "#58D68D",
        primaryDark: "#1E8449",
        secondary: "#8D6E63",
        // Warm brown
        secondaryLight: "#A1887F",
        secondaryDark: "#6D4C41",
        background: "#F9F9F7",
        // Natural off-white
        backgroundSecondary: "#F4F2F0",
        backgroundTertiary: "#EFEBE9",
        surface: "#FFFFFF",
        surfaceSecondary: "#F8F6F4",
        surfaceHover: "#F1EDE8",
        text: "#2E4057",
        // Deep blue-gray
        textSecondary: "#455A64",
        textMuted: "#78909C",
        textInverse: "#FFFFFF",
        success: "#4CAF50",
        warning: "#FF9800",
        error: "#F44336",
        info: "#2196F3",
        crisis: "#E53E3E",
        calm: "#81C784",
        hope: "#66BB6A",
        support: "#A5D6A7",
        growth: "#27AE60",
        border: "#C8E6C9",
        borderLight: "#E8F5E8",
        borderHover: "#A5D6A7",
        shadow: "rgba(39, 174, 96, 0.1)",
        shadowHover: "rgba(39, 174, 96, 0.15)"
      },
      dark: {
        primary: "#58D68D",
        primaryLight: "#82E5AA",
        primaryDark: "#27AE60",
        secondary: "#A1887F",
        secondaryLight: "#BCAAA4",
        secondaryDark: "#8D6E63",
        background: "#1B1F1A",
        backgroundSecondary: "#242924",
        backgroundTertiary: "#2D332B",
        surface: "#363D35",
        surfaceSecondary: "#3F473E",
        surfaceHover: "#485248",
        text: "#E8F5E8",
        textSecondary: "#C8E6C9",
        textMuted: "#81C784",
        textInverse: "#2E4057",
        success: "#81C784",
        warning: "#FFB74D",
        error: "#E57373",
        info: "#64B5F6",
        crisis: "#FF6B6B",
        calm: "#A5D6A7",
        hope: "#66BB6A",
        support: "#81C784",
        growth: "#58D68D",
        border: "#485248",
        borderLight: "#363D35",
        borderHover: "#5C6B5A",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.4)"
      }
    },
    accessibility: {
      contrastRatio: 7.5,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "gentle-focus": {
    id: "gentle-focus",
    name: "Gentle Focus",
    description: "Muted purples and soft lavenders for concentration and mental clarity",
    psychologyPrinciples: [
      "Purple enhances creativity and introspection",
      "Lavender reduces anxiety while maintaining alertness",
      "Cool purples improve focus without overstimulation",
      "Muted tones prevent distraction while supporting concentration"
    ],
    recommendedFor: [
      "Study and focus sessions",
      "Meditation and mindfulness",
      "Creative work",
      "Therapy sessions",
      "Cognitive behavioral therapy"
    ],
    colors: {
      light: {
        primary: "#9C88B5",
        // Soft purple
        primaryLight: "#B39DDB",
        primaryDark: "#7B1FA2",
        secondary: "#C5A3FF",
        // Light lavender
        secondaryLight: "#D1C4E9",
        secondaryDark: "#9575CD",
        background: "#FAFAFA",
        // Neutral gray
        backgroundSecondary: "#F5F3F7",
        backgroundTertiary: "#F0EDF4",
        surface: "#FFFFFF",
        surfaceSecondary: "#F8F5FA",
        surfaceHover: "#F3F0F6",
        text: "#37474F",
        // Cool gray
        textSecondary: "#546E7A",
        textMuted: "#78909C",
        textInverse: "#FFFFFF",
        success: "#66BB6A",
        warning: "#FFB74D",
        error: "#E57373",
        info: "#64B5F6",
        crisis: "#E53E3E",
        calm: "#D1C4E9",
        hope: "#B39DDB",
        support: "#CE93D8",
        growth: "#9C88B5",
        border: "#E1BEE7",
        borderLight: "#F3E5F5",
        borderHover: "#CE93D8",
        shadow: "rgba(156, 136, 181, 0.1)",
        shadowHover: "rgba(156, 136, 181, 0.15)"
      },
      dark: {
        primary: "#B39DDB",
        primaryLight: "#D1C4E9",
        primaryDark: "#9C88B5",
        secondary: "#CE93D8",
        secondaryLight: "#E1BEE7",
        secondaryDark: "#BA68C8",
        background: "#1A1625",
        backgroundSecondary: "#241F2E",
        backgroundTertiary: "#2E2738",
        surface: "#382F42",
        surfaceSecondary: "#42374C",
        surfaceHover: "#4D4057",
        text: "#F3E5F5",
        textSecondary: "#E1BEE7",
        textMuted: "#CE93D8",
        textInverse: "#37474F",
        success: "#81C784",
        warning: "#FFB74D",
        error: "#E57373",
        info: "#64B5F6",
        crisis: "#FF6B6B",
        calm: "#D1C4E9",
        hope: "#B39DDB",
        support: "#CE93D8",
        growth: "#B39DDB",
        border: "#4D4057",
        borderLight: "#382F42",
        borderHover: "#5E4F69",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.4)"
      }
    },
    accessibility: {
      contrastRatio: 6.9,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "energizing-hope": {
    id: "energizing-hope",
    name: "Energizing Hope",
    description: "Bright but gentle colors for motivation and positive energy",
    psychologyPrinciples: [
      "Bright colors increase energy and motivation",
      "Coral and pink promote feelings of love and hope",
      "Optimistic colors boost dopamine production",
      "Balanced saturation provides energy without anxiety"
    ],
    recommendedFor: [
      "Recovery and healing",
      "Building motivation",
      "Overcoming hopelessness",
      "Positive psychology therapy",
      "Goal setting sessions"
    ],
    colors: {
      light: {
        primary: "#FF6B9D",
        // Vibrant coral-pink
        primaryLight: "#FF8FA3",
        primaryDark: "#E91E63",
        secondary: "#4ECDC4",
        // Bright turquoise
        secondaryLight: "#80CBC4",
        secondaryDark: "#26A69A",
        background: "#FFFAFC",
        // Very light pink
        backgroundSecondary: "#FEF7F9",
        backgroundTertiary: "#FCF0F4",
        surface: "#FFFFFF",
        surfaceSecondary: "#FEF9FA",
        surfaceHover: "#FDF2F6",
        text: "#4A148C",
        // Deep purple
        textSecondary: "#6A1B9A",
        textMuted: "#8E24AA",
        textInverse: "#FFFFFF",
        success: "#4CAF50",
        warning: "#FF9800",
        error: "#F44336",
        info: "#2196F3",
        crisis: "#E53E3E",
        calm: "#F8BBD9",
        hope: "#FF6B9D",
        support: "#4ECDC4",
        growth: "#66BB6A",
        border: "#F8BBD9",
        borderLight: "#FCE4EC",
        borderHover: "#F48FB1",
        shadow: "rgba(255, 107, 157, 0.1)",
        shadowHover: "rgba(255, 107, 157, 0.15)"
      },
      dark: {
        primary: "#FF8FA3",
        primaryLight: "#FFB3BA",
        primaryDark: "#FF6B9D",
        secondary: "#80CBC4",
        secondaryLight: "#B2DFDB",
        secondaryDark: "#4ECDC4",
        background: "#2D1B2E",
        backgroundSecondary: "#3B2A3C",
        backgroundTertiary: "#4A394B",
        surface: "#59485A",
        surfaceSecondary: "#685769",
        surfaceHover: "#776778",
        text: "#FCE4EC",
        textSecondary: "#F8BBD9",
        textMuted: "#F48FB1",
        textInverse: "#4A148C",
        success: "#81C784",
        warning: "#FFB74D",
        error: "#E57373",
        info: "#64B5F6",
        crisis: "#FF6B6B",
        calm: "#F8BBD9",
        hope: "#FF8FA3",
        support: "#80CBC4",
        growth: "#81C784",
        border: "#776778",
        borderLight: "#59485A",
        borderHover: "#8E7A8F",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.4)"
      }
    },
    accessibility: {
      contrastRatio: 6.5,
      level: "AA",
      colorBlindFriendly: false
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "minimal-zen": {
    id: "minimal-zen",
    name: "Minimal Zen",
    description: "High contrast minimalism for sensory sensitivity and focus",
    psychologyPrinciples: [
      "Minimal stimulation reduces sensory overload",
      "High contrast improves accessibility and focus",
      "Monochromatic design reduces decision fatigue",
      "Clean lines promote mental clarity"
    ],
    recommendedFor: [
      "Autism spectrum disorders",
      "Sensory processing sensitivity",
      "ADHD focus support",
      "Migraine sensitivity",
      "Accessibility needs"
    ],
    colors: {
      light: {
        primary: "#2D3748",
        primaryLight: "#4A5568",
        primaryDark: "#1A202C",
        secondary: "#718096",
        secondaryLight: "#A0AEC0",
        secondaryDark: "#4A5568",
        background: "#FFFFFF",
        backgroundSecondary: "#F7FAFC",
        backgroundTertiary: "#EDF2F7",
        surface: "#FFFFFF",
        surfaceSecondary: "#F7FAFC",
        surfaceHover: "#EDF2F7",
        text: "#1A202C",
        textSecondary: "#2D3748",
        textMuted: "#718096",
        textInverse: "#FFFFFF",
        success: "#38A169",
        warning: "#D69E2E",
        error: "#E53E3E",
        info: "#3182CE",
        crisis: "#E53E3E",
        calm: "#E2E8F0",
        hope: "#CBD5E0",
        support: "#A0AEC0",
        growth: "#718096",
        border: "#E2E8F0",
        borderLight: "#F7FAFC",
        borderHover: "#CBD5E0",
        shadow: "rgba(45, 55, 72, 0.1)",
        shadowHover: "rgba(45, 55, 72, 0.2)"
      },
      dark: {
        primary: "#E2E8F0",
        primaryLight: "#F7FAFC",
        primaryDark: "#CBD5E0",
        secondary: "#A0AEC0",
        secondaryLight: "#CBD5E0",
        secondaryDark: "#718096",
        background: "#1A202C",
        backgroundSecondary: "#2D3748",
        backgroundTertiary: "#4A5568",
        surface: "#2D3748",
        surfaceSecondary: "#4A5568",
        surfaceHover: "#718096",
        text: "#F7FAFC",
        textSecondary: "#E2E8F0",
        textMuted: "#CBD5E0",
        textInverse: "#1A202C",
        success: "#68D391",
        warning: "#F6E05E",
        error: "#FC8181",
        info: "#63B3ED",
        crisis: "#FC8181",
        calm: "#4A5568",
        hope: "#718096",
        support: "#A0AEC0",
        growth: "#CBD5E0",
        border: "#4A5568",
        borderLight: "#2D3748",
        borderHover: "#718096",
        shadow: "rgba(0, 0, 0, 0.5)",
        shadowHover: "rgba(0, 0, 0, 0.7)"
      }
    },
    accessibility: {
      contrastRatio: 15,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: false,
      allowsColorOverrides: false,
      allowsAnimationControl: true
    }
  },
  "crisis-safe": {
    id: "crisis-safe",
    name: "Crisis Safe",
    description: "Emergency-optimized colors for crisis intervention and high visibility",
    psychologyPrinciples: [
      "High contrast ensures visibility during distress",
      "Specific colors for different emergency states",
      "Intuitive color coding for quick recognition",
      "Calming background with urgent accent colors"
    ],
    recommendedFor: [
      "Crisis intervention",
      "Emergency situations",
      "High stress states",
      "Accessibility requirements",
      "Professional crisis support"
    ],
    colors: {
      light: {
        primary: "#C53030",
        // Crisis red
        primaryLight: "#E53E3E",
        primaryDark: "#9B2C2C",
        secondary: "#2B6CB0",
        // Safety blue
        secondaryLight: "#3182CE",
        secondaryDark: "#2C5282",
        background: "#FFFAF0",
        // Warm safe background
        backgroundSecondary: "#FED7C3",
        backgroundTertiary: "#FEEBC8",
        surface: "#FFFFFF",
        surfaceSecondary: "#FFFAF0",
        surfaceHover: "#FED7C3",
        text: "#1A202C",
        textSecondary: "#2D3748",
        textMuted: "#4A5568",
        textInverse: "#FFFFFF",
        success: "#38A169",
        warning: "#D69E2E",
        error: "#C53030",
        info: "#2B6CB0",
        crisis: "#C53030",
        calm: "#90CDF4",
        hope: "#68D391",
        support: "#F6E05E",
        growth: "#9AE6B4",
        border: "#FBD38D",
        borderLight: "#FEEBC8",
        borderHover: "#F6AD55",
        shadow: "rgba(197, 48, 48, 0.15)",
        shadowHover: "rgba(197, 48, 48, 0.25)"
      },
      dark: {
        primary: "#FC8181",
        primaryLight: "#FEB2B2",
        primaryDark: "#E53E3E",
        secondary: "#63B3ED",
        secondaryLight: "#90CDF4",
        secondaryDark: "#3182CE",
        background: "#2D1B1B",
        backgroundSecondary: "#3B2A2A",
        backgroundTertiary: "#4A3939",
        surface: "#59484A",
        surfaceSecondary: "#685759",
        surfaceHover: "#776768",
        text: "#FEEBC8",
        textSecondary: "#FBD38D",
        textMuted: "#F6AD55",
        textInverse: "#1A202C",
        success: "#9AE6B4",
        warning: "#F6E05E",
        error: "#FC8181",
        info: "#90CDF4",
        crisis: "#FC8181",
        calm: "#90CDF4",
        hope: "#9AE6B4",
        support: "#F6E05E",
        growth: "#C6F6D5",
        border: "#685759",
        borderLight: "#59484A",
        borderHover: "#8A7778",
        shadow: "rgba(0, 0, 0, 0.4)",
        shadowHover: "rgba(0, 0, 0, 0.6)"
      }
    },
    accessibility: {
      contrastRatio: 12,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: false,
      allowsColorOverrides: false,
      allowsAnimationControl: false
    }
  },
  "high-contrast": {
    id: "high-contrast",
    name: "High Contrast",
    description: "Maximum contrast for accessibility compliance and visual clarity",
    psychologyPrinciples: [
      "Maximum contrast reduces visual strain",
      "Clear distinction improves cognitive processing",
      "Reduces ambiguity in interface elements",
      "Supports users with visual impairments"
    ],
    recommendedFor: [
      "Visual impairments",
      "Dyslexia",
      "Cognitive disabilities",
      "Low vision conditions",
      "Screen reader users"
    ],
    colors: {
      light: {
        primary: "#000000",
        primaryLight: "#1A1A1A",
        primaryDark: "#000000",
        secondary: "#000000",
        secondaryLight: "#333333",
        secondaryDark: "#000000",
        background: "#FFFFFF",
        backgroundSecondary: "#FFFFFF",
        backgroundTertiary: "#F0F0F0",
        surface: "#FFFFFF",
        surfaceSecondary: "#FFFFFF",
        surfaceHover: "#F0F0F0",
        text: "#000000",
        textSecondary: "#000000",
        textMuted: "#666666",
        textInverse: "#FFFFFF",
        success: "#006600",
        warning: "#CC6600",
        error: "#CC0000",
        info: "#0066CC",
        crisis: "#CC0000",
        calm: "#E0E0E0",
        hope: "#009900",
        support: "#0066CC",
        growth: "#006600",
        border: "#000000",
        borderLight: "#666666",
        borderHover: "#000000",
        shadow: "rgba(0, 0, 0, 0.5)",
        shadowHover: "rgba(0, 0, 0, 0.8)"
      },
      dark: {
        primary: "#FFFFFF",
        primaryLight: "#FFFFFF",
        primaryDark: "#E6E6E6",
        secondary: "#FFFFFF",
        secondaryLight: "#FFFFFF",
        secondaryDark: "#CCCCCC",
        background: "#000000",
        backgroundSecondary: "#000000",
        backgroundTertiary: "#1A1A1A",
        surface: "#000000",
        surfaceSecondary: "#000000",
        surfaceHover: "#1A1A1A",
        text: "#FFFFFF",
        textSecondary: "#FFFFFF",
        textMuted: "#CCCCCC",
        textInverse: "#000000",
        success: "#00FF00",
        warning: "#FFCC00",
        error: "#FF3333",
        info: "#3399FF",
        crisis: "#FF3333",
        calm: "#333333",
        hope: "#00FF00",
        support: "#3399FF",
        growth: "#00FF00",
        border: "#FFFFFF",
        borderLight: "#999999",
        borderHover: "#FFFFFF",
        shadow: "rgba(255, 255, 255, 0.3)",
        shadowHover: "rgba(255, 255, 255, 0.5)"
      }
    },
    accessibility: {
      contrastRatio: 21,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: false,
      allowsColorOverrides: false,
      allowsAnimationControl: true
    }
  },
  "custom": {
    id: "custom",
    name: "Custom Theme",
    description: "User-defined personalized therapeutic color environment",
    psychologyPrinciples: [
      "Personal color preferences enhance comfort",
      "User control improves sense of agency",
      "Customization supports individual needs",
      "Adaptation to personal sensitivities"
    ],
    recommendedFor: [
      "Individual preferences",
      "Specific sensitivities",
      "Cultural considerations",
      "Personal therapeutic goals",
      "Advanced users"
    ],
    colors: {
      light: {
        primary: "#3498DB",
        primaryLight: "#5DADE2",
        primaryDark: "#2E86C1",
        secondary: "#E74C3C",
        secondaryLight: "#EC7063",
        secondaryDark: "#CB4335",
        background: "#FFFFFF",
        backgroundSecondary: "#F8F9FA",
        backgroundTertiary: "#E9ECEF",
        surface: "#FFFFFF",
        surfaceSecondary: "#F8F9FA",
        surfaceHover: "#E9ECEF",
        text: "#2C3E50",
        textSecondary: "#34495E",
        textMuted: "#7B8A8B",
        textInverse: "#FFFFFF",
        success: "#27AE60",
        warning: "#F39C12",
        error: "#E74C3C",
        info: "#3498DB",
        crisis: "#E74C3C",
        calm: "#85C1E9",
        hope: "#58D68D",
        support: "#F7DC6F",
        growth: "#82E5AA",
        border: "#BDC3C7",
        borderLight: "#ECF0F1",
        borderHover: "#95A5A6",
        shadow: "rgba(52, 152, 219, 0.1)",
        shadowHover: "rgba(52, 152, 219, 0.2)"
      },
      dark: {
        primary: "#5DADE2",
        primaryLight: "#85C1E9",
        primaryDark: "#3498DB",
        secondary: "#EC7063",
        secondaryLight: "#F1948A",
        secondaryDark: "#E74C3C",
        background: "#1C2833",
        backgroundSecondary: "#273746",
        backgroundTertiary: "#34495E",
        surface: "#2C3E50",
        surfaceSecondary: "#34495E",
        surfaceHover: "#5D6D7E",
        text: "#ECF0F1",
        textSecondary: "#D5DBDB",
        textMuted: "#BDC3C7",
        textInverse: "#2C3E50",
        success: "#58D68D",
        warning: "#F7DC6F",
        error: "#F1948A",
        info: "#85C1E9",
        crisis: "#F1948A",
        calm: "#85C1E9",
        hope: "#82E5AA",
        support: "#F7DC6F",
        growth: "#58D68D",
        border: "#5D6D7E",
        borderLight: "#34495E",
        borderHover: "#85929E",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.5)"
      }
    },
    accessibility: {
      contrastRatio: 4.5,
      level: "AA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  },
  "system": {
    id: "system",
    name: "System Default",
    description: "Follow system dark/light mode preferences",
    psychologyPrinciples: [
      "Consistency with user preferences",
      "Reduced cognitive load",
      "Familiarity promotes comfort",
      "Adaptive to environmental conditions"
    ],
    recommendedFor: [
      "General use",
      "System integration",
      "Consistent experience",
      "Automatic adaptation",
      "Default option"
    ],
    colors: {
      light: {
        primary: "#007AFF",
        // iOS blue
        primaryLight: "#5AC8FA",
        primaryDark: "#0051D2",
        secondary: "#FF3B30",
        // iOS red
        secondaryLight: "#FF6961",
        secondaryDark: "#D70015",
        background: "#FFFFFF",
        backgroundSecondary: "#F2F2F7",
        backgroundTertiary: "#FFFFFF",
        surface: "#FFFFFF",
        surfaceSecondary: "#F2F2F7",
        surfaceHover: "#E5E5EA",
        text: "#000000",
        textSecondary: "#3C3C43",
        textMuted: "#8E8E93",
        textInverse: "#FFFFFF",
        success: "#34C759",
        warning: "#FF9500",
        error: "#FF3B30",
        info: "#007AFF",
        crisis: "#FF3B30",
        calm: "#AFCBFF",
        hope: "#30D158",
        support: "#BF5AF2",
        growth: "#34C759",
        border: "#C6C6C8",
        borderLight: "#E5E5EA",
        borderHover: "#AEAEB2",
        shadow: "rgba(0, 122, 255, 0.1)",
        shadowHover: "rgba(0, 122, 255, 0.2)"
      },
      dark: {
        primary: "#0A84FF",
        primaryLight: "#64D2FF",
        primaryDark: "#007AFF",
        secondary: "#FF453A",
        secondaryLight: "#FF6961",
        secondaryDark: "#FF3B30",
        background: "#000000",
        backgroundSecondary: "#1C1C1E",
        backgroundTertiary: "#2C2C2E",
        surface: "#1C1C1E",
        surfaceSecondary: "#2C2C2E",
        surfaceHover: "#3A3A3C",
        text: "#FFFFFF",
        textSecondary: "#EBEBF5",
        textMuted: "#8E8E93",
        textInverse: "#000000",
        success: "#30D158",
        warning: "#FF9F0A",
        error: "#FF453A",
        info: "#64D2FF",
        crisis: "#FF453A",
        calm: "#64D2FF",
        hope: "#30D158",
        support: "#BF5AF2",
        growth: "#30D158",
        border: "#38383A",
        borderLight: "#2C2C2E",
        borderHover: "#48484A",
        shadow: "rgba(0, 0, 0, 0.3)",
        shadowHover: "rgba(0, 0, 0, 0.5)"
      }
    },
    accessibility: {
      contrastRatio: 7,
      level: "AAA",
      colorBlindFriendly: true
    },
    customization: {
      allowsIntensityAdjustment: true,
      allowsColorOverrides: true,
      allowsAnimationControl: true
    }
  }
};
var ThemeContext2 = (0, import_react66.createContext)(void 0);

// src/components/ThemeProvider.tsx
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var ThemeProvider = ({
  children,
  storageKey = "astral-theme-preferences",
  defaultTheme = "calm-sanctuary",
  enableSystemDetection = true,
  enableColorPsychologyRecommendations = true
}) => {
  const defaultPreferences2 = {
    therapeuticTheme: defaultTheme,
    colorMode: "auto",
    intensity: "balanced",
    accessibilityLevel: "AA",
    reduceMotion: false,
    highContrast: false,
    fontSize: "medium",
    spacing: "comfortable"
  };
  const [preferences, setPreferences] = (0, import_react67.useState)(defaultPreferences2);
  const [systemColorMode, setSystemColorMode] = (0, import_react67.useState)("light");
  const calculateIntensityMultiplier = (intensity) => {
    switch (intensity) {
      case "subtle":
        return 0.7;
      case "balanced":
        return 1;
      case "vibrant":
        return 1.3;
      default:
        return 1;
    }
  };
  const applyIntensityToColors = (colors, multiplier) => {
    if (multiplier === 1) return colors;
    const adjustableKeys = [
      "primary",
      "primaryLight",
      "secondary",
      "secondaryLight",
      "calm",
      "hope",
      "support",
      "growth"
    ];
    const adjustedColors = { ...colors };
    adjustableKeys.forEach((key) => {
      const color2 = colors[key];
      if (color2 && typeof color2 === "string" && color2.startsWith("#")) {
        const hex = color2.substring(1);
        const r3 = parseInt(hex.substring(0, 2), 16);
        const g3 = parseInt(hex.substring(2, 4), 16);
        const b3 = parseInt(hex.substring(4, 6), 16);
        const adjustedR = Math.min(255, Math.floor(r3 * multiplier));
        const adjustedG = Math.min(255, Math.floor(g3 * multiplier));
        const adjustedB = Math.min(255, Math.floor(b3 * multiplier));
        adjustedColors[key] = `#${adjustedR.toString(16).padStart(2, "0")}${adjustedG.toString(16).padStart(2, "0")}${adjustedB.toString(16).padStart(2, "0")}`;
      }
    });
    return adjustedColors;
  };
  (0, import_react67.useEffect)(() => {
    try {
      const stored = localStorage.getItem(storageKey);
      if (stored) {
        const parsedPreferences = JSON.parse(stored);
        setPreferences({ ...defaultPreferences2, ...parsedPreferences });
      }
    } catch (error44) {
      console.warn("Failed to load theme preferences:", error44);
    }
  }, [storageKey]);
  (0, import_react67.useEffect)(() => {
    try {
      localStorage.setItem(storageKey, JSON.stringify(preferences));
    } catch (error44) {
      console.warn("Failed to save theme preferences:", error44);
    }
  }, [preferences, storageKey]);
  (0, import_react67.useEffect)(() => {
    if (!enableSystemDetection) return;
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleChange = (e4) => {
      setSystemColorMode(e4.matches ? "dark" : "light");
    };
    setSystemColorMode(mediaQuery.matches ? "dark" : "light");
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, [enableSystemDetection]);
  (0, import_react67.useEffect)(() => {
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
    const handleChange = (e4) => {
      if (e4.matches) {
        setPreferences((prev) => ({ ...prev, reduceMotion: true }));
      }
    };
    if (mediaQuery.matches) {
      setPreferences((prev) => ({ ...prev, reduceMotion: true }));
    }
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);
  (0, import_react67.useEffect)(() => {
    const mediaQuery = window.matchMedia("(prefers-contrast: high)");
    const handleChange = (e4) => {
      if (e4.matches) {
        setPreferences((prev) => ({ ...prev, highContrast: true }));
      }
    };
    if (mediaQuery.matches) {
      setPreferences((prev) => ({ ...prev, highContrast: true }));
    }
    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);
  const currentTheme = (0, import_react67.useMemo)(() => {
    let themeId = preferences.therapeuticTheme;
    if (preferences.highContrast) {
      themeId = "high-contrast";
    }
    return THERAPEUTIC_THEMES[themeId];
  }, [preferences.therapeuticTheme, preferences.highContrast]);
  const currentColorMode = (0, import_react67.useMemo)(() => {
    if (preferences.colorMode === "auto") {
      return systemColorMode;
    }
    return preferences.colorMode === "dark" ? "dark" : "light";
  }, [preferences.colorMode, systemColorMode]);
  const currentColors = (0, import_react67.useMemo)(() => {
    const baseColors = currentTheme.colors[currentColorMode];
    const intensityMultiplier = calculateIntensityMultiplier(preferences.intensity);
    const adjustedColors = applyIntensityToColors(baseColors, intensityMultiplier);
    const finalColors = { ...adjustedColors, ...preferences.colorOverrides };
    return finalColors;
  }, [currentTheme, currentColorMode, preferences.intensity, preferences.colorOverrides]);
  (0, import_react67.useEffect)(() => {
    const root4 = document.documentElement;
    Object.entries(currentColors).forEach(([key, value]) => {
      root4.style.setProperty(`--color-${kebabCase(key)}`, value);
    });
    const spacingScale = getSpacingScale(preferences.spacing);
    Object.entries(spacingScale).forEach(([key, value]) => {
      root4.style.setProperty(`--spacing-${key}`, value);
    });
    const fontSizeScale = getFontSizeScale(preferences.fontSize);
    Object.entries(fontSizeScale).forEach(([key, value]) => {
      root4.style.setProperty(`--font-size-${key}`, value);
    });
    let animationDuration = "200ms";
    if (preferences.reduceMotion) {
      animationDuration = "0.01ms";
    } else if (preferences.customAnimationDuration) {
      animationDuration = `${preferences.customAnimationDuration}ms`;
    }
    root4.style.setProperty("--animation-duration", animationDuration);
    document.body.className = document.body.className.replace(/theme-\w+/g, "").replace(/mode-\w+/g, "").trim();
    document.body.classList.add(`theme-${currentTheme.id}`, `mode-${currentColorMode}`);
    if (preferences.highContrast) {
      document.body.classList.add("high-contrast");
    }
    if (preferences.reduceMotion) {
      document.body.classList.add("reduce-motion");
    }
  }, [currentColors, currentTheme.id, currentColorMode, preferences]);
  const getSpacingScale = (spacing) => {
    const baseScale = {
      xs: "0.25rem",
      sm: "0.5rem",
      md: "1rem",
      lg: "1.5rem",
      xl: "2rem",
      "2xl": "3rem",
      "3xl": "4rem"
    };
    let multiplier = 1;
    if (spacing === "compact") {
      multiplier = 0.75;
    } else if (spacing === "spacious") {
      multiplier = 1.25;
    }
    return Object.fromEntries(
      Object.entries(baseScale).map(([key, value]) => [
        key,
        `${parseFloat(value) * multiplier}rem`
      ])
    );
  };
  const getFontSizeScale = (fontSize) => {
    const scales = {
      small: { base: "14px", sm: "12px", md: "14px", lg: "16px", xl: "18px", "2xl": "20px" },
      medium: { base: "16px", sm: "14px", md: "16px", lg: "18px", xl: "20px", "2xl": "24px" },
      large: { base: "18px", sm: "16px", md: "18px", lg: "20px", xl: "24px", "2xl": "28px" },
      "extra-large": { base: "20px", sm: "18px", md: "20px", lg: "24px", xl: "28px", "2xl": "32px" }
    };
    return scales[fontSize];
  };
  const kebabCase = (str) => {
    return str.replace(/([A-Z])/g, "-$1").toLowerCase();
  };
  const getContrastRatio = (0, import_react67.useCallback)((color1, color2) => {
    const getLuminance = (color3) => {
      const hex = color3.replace("#", "");
      const r3 = parseInt(hex.substr(0, 2), 16) / 255;
      const g3 = parseInt(hex.substr(2, 2), 16) / 255;
      const b3 = parseInt(hex.substr(4, 2), 16) / 255;
      const toLinear = (val) => val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
      return 0.2126 * toLinear(r3) + 0.7152 * toLinear(g3) + 0.0722 * toLinear(b3);
    };
    const l1 = getLuminance(color1);
    const l22 = getLuminance(color2);
    const lighter = Math.max(l1, l22);
    const darker = Math.min(l1, l22);
    return (lighter + 0.05) / (darker + 0.05);
  }, []);
  const isAccessibilityCompliant = (0, import_react67.useCallback)((foreground, background) => {
    const ratio = getContrastRatio(foreground, background);
    const threshold = preferences.accessibilityLevel === "AAA" ? 7 : 4.5;
    return ratio >= threshold;
  }, [getContrastRatio, preferences.accessibilityLevel]);
  const setTherapeuticTheme = (0, import_react67.useCallback)((theme) => {
    setPreferences((prev) => ({ ...prev, therapeuticTheme: theme }));
  }, []);
  const setColorMode = (0, import_react67.useCallback)((mode) => {
    setPreferences((prev) => ({ ...prev, colorMode: mode }));
  }, []);
  const setIntensity = (0, import_react67.useCallback)((intensity) => {
    setPreferences((prev) => ({ ...prev, intensity }));
  }, []);
  const setAccessibilityLevel = (0, import_react67.useCallback)((level) => {
    setPreferences((prev) => ({ ...prev, accessibilityLevel: level }));
  }, []);
  const setColorOverride = (0, import_react67.useCallback)((colorKey, color2) => {
    setPreferences((prev) => ({
      ...prev,
      colorOverrides: { ...prev.colorOverrides, [colorKey]: color2 }
    }));
  }, []);
  const resetCustomizations = (0, import_react67.useCallback)(() => {
    setPreferences((prev) => ({
      ...prev,
      colorOverrides: void 0,
      intensity: "balanced",
      customAnimationDuration: void 0
    }));
  }, []);
  const exportTheme = (0, import_react67.useCallback)(() => {
    return JSON.stringify({
      preferences,
      currentTheme: currentTheme.id,
      version: "1.0.0",
      exportDate: (/* @__PURE__ */ new Date()).toISOString()
    }, null, 2);
  }, [preferences, currentTheme.id]);
  const importTheme = (0, import_react67.useCallback)((themeData) => {
    try {
      const parsed = JSON.parse(themeData);
      if (parsed.preferences && parsed.version) {
        setPreferences({ ...defaultPreferences2, ...parsed.preferences });
        return true;
      }
      return false;
    } catch {
      return false;
    }
  }, []);
  const getMoodBasedColors = (0, import_react67.useCallback)((mood) => {
    const moodColorMap = {
      anxious: { primary: currentColors.calm, background: currentColors.backgroundSecondary },
      depressed: { primary: currentColors.hope, secondary: currentColors.support },
      stressed: { background: currentColors.calm, surface: currentColors.surfaceSecondary },
      energetic: { primary: currentColors.growth, secondary: currentColors.hope },
      peaceful: { primary: currentColors.calm, background: currentColors.background },
      motivated: { primary: currentColors.growth, secondary: currentColors.hope }
    };
    return moodColorMap[mood.toLowerCase()] || {};
  }, [currentColors]);
  const getCrisisSafeColors = (0, import_react67.useCallback)(() => {
    return THERAPEUTIC_THEMES["crisis-safe"].colors[currentColorMode];
  }, [currentColorMode]);
  const getTherapeuticRecommendations = (0, import_react67.useCallback)((userProfile) => {
    if (!enableColorPsychologyRecommendations) return [];
    const recommendations = ["calm-sanctuary", "nature-healing"];
    if (userProfile?.conditions?.includes("anxiety")) {
      recommendations.unshift("calm-sanctuary");
    }
    if (userProfile?.conditions?.includes("depression")) {
      recommendations.unshift("warm-embrace");
    }
    if (userProfile?.conditions?.includes("adhd")) {
      recommendations.unshift("minimal-zen", "gentle-focus");
    }
    if (userProfile?.accessibility?.visualImpairment) {
      recommendations.unshift("high-contrast");
    }
    if (userProfile?.preferences?.highEnergy) {
      recommendations.push("energizing-hope");
    }
    return [...new Set(recommendations)].slice(0, 5);
  }, [enableColorPsychologyRecommendations]);
  const contextValue = (0, import_react67.useMemo)(() => ({
    currentTheme,
    currentColors,
    preferences,
    setTherapeuticTheme,
    setColorMode,
    setIntensity,
    setAccessibilityLevel,
    setColorOverride,
    resetCustomizations,
    getContrastRatio,
    isAccessibilityCompliant,
    exportTheme,
    importTheme,
    getMoodBasedColors,
    getCrisisSafeColors,
    getTherapeuticRecommendations
  }), [
    currentTheme,
    currentColors,
    preferences,
    setTherapeuticTheme,
    setColorMode,
    setIntensity,
    setAccessibilityLevel,
    setColorOverride,
    resetCustomizations,
    getContrastRatio,
    isAccessibilityCompliant,
    exportTheme,
    importTheme,
    getMoodBasedColors,
    getCrisisSafeColors,
    getTherapeuticRecommendations
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ThemeContext2.Provider, { value: contextValue, children });
};

// src/contexts/OfflineProvider.tsx
var import_react69 = __toESM(require_react());

// src/hooks/useConnectionStatus.ts
var import_react68 = __toESM(require_react());
var DEFAULT_CONNECTION_STATUS = {
  isOnline: navigator.onLine,
  isServiceWorkerSupported: "serviceWorker" in navigator,
  isServiceWorkerRegistered: false,
  serviceWorkerStatus: "not_registered",
  lastSync: null,
  crisisResourcesAvailable: false,
  offlineCapabilities: [],
  connectionQuality: "offline"
};
var DEFAULT_OFFLINE_CAPABILITIES = [
  {
    feature: "Crisis Resources",
    available: false,
    description: "Emergency contacts and crisis intervention resources",
    fallbackAction: "Access cached crisis resources"
  },
  {
    feature: "Safety Plan",
    available: false,
    description: "Personal safety planning tools",
    fallbackAction: "Use offline safety plan template"
  },
  {
    feature: "Coping Strategies",
    available: false,
    description: "Self-help and coping technique resources",
    fallbackAction: "Browse cached coping strategies"
  },
  {
    feature: "Community Posts",
    available: false,
    description: "View and create community posts",
    fallbackAction: "Queue posts for when online"
  },
  {
    feature: "AI Assistant",
    available: false,
    description: "AI-powered mental health support",
    fallbackAction: "Use offline guidance resources"
  },
  {
    feature: "Helper Chat",
    available: false,
    description: "Real-time chat with certified helpers",
    fallbackAction: "Queue messages for when online"
  }
];
var useConnectionStatus = () => {
  const [connectionStatus, setConnectionStatus] = (0, import_react68.useState)(DEFAULT_CONNECTION_STATUS);
  const [serviceWorkerRegistration, setServiceWorkerRegistration] = (0, import_react68.useState)(null);
  const updateConnectionQuality = (0, import_react68.useCallback)(() => {
    if (!navigator.onLine) {
      return "offline";
    }
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    if (connection) {
      const { effectiveType, downlink } = connection;
      if (effectiveType === "4g" && downlink > 1) {
        return "excellent";
      } else if (effectiveType === "4g" || effectiveType === "3g" && downlink > 0.5) {
        return "good";
      } else {
        return "poor";
      }
    }
    return "good";
  }, []);
  const checkCrisisResourcesAvailability = (0, import_react68.useCallback)(async () => {
    if (!("caches" in window)) return false;
    try {
      const crisisCache = await caches.open("astral-core-crisis-v1");
      const keys2 = await crisisCache.keys();
      const requiredResources = [
        "/crisis-resources.json",
        "/emergency-contacts.json",
        "/offline-coping-strategies.json"
      ];
      const availableResources = keys2.map((request) => new URL(request.url).pathname);
      return requiredResources.every(
        (resource) => availableResources.some((available) => available.includes(resource))
      );
    } catch (error44) {
      console.warn("[useConnectionStatus] Failed to check crisis resources:", error44);
      return false;
    }
  }, []);
  const updateOfflineCapabilities = (0, import_react68.useCallback)(async (crisisAvailable, swRegistered) => {
    const capabilities = DEFAULT_OFFLINE_CAPABILITIES.map((capability) => {
      switch (capability.feature) {
        case "Crisis Resources":
        case "Safety Plan":
        case "Coping Strategies":
          return { ...capability, available: crisisAvailable };
        case "Community Posts":
        case "Helper Chat":
          return { ...capability, available: swRegistered };
        case "AI Assistant":
          return { ...capability, available: false };
        default:
          return capability;
      }
    });
    setConnectionStatus((prev) => ({
      ...prev,
      offlineCapabilities: capabilities
    }));
  }, []);
  const handleServiceWorkerMessage = (0, import_react68.useCallback)((event) => {
    const { type, data: data2, timestamp } = event.data;
    console.log("[useConnectionStatus] SW Message:", type, data2);
    switch (type) {
      case "crisis-resources-cached":
        setConnectionStatus((prev) => ({
          ...prev,
          crisisResourcesAvailable: true,
          lastSync: new Date(timestamp)
        }));
        break;
      case "offline-capabilities-updated":
        if (data2?.capabilities) {
          setConnectionStatus((prev) => ({
            ...prev,
            offlineCapabilities: data2.capabilities
          }));
        }
        break;
      case "sync-completed":
        setConnectionStatus((prev) => ({
          ...prev,
          lastSync: new Date(timestamp)
        }));
        break;
      case "cache-updated":
        checkCrisisResourcesAvailability().then((available) => {
          setConnectionStatus((prev) => ({
            ...prev,
            crisisResourcesAvailable: available
          }));
        });
        break;
    }
  }, [checkCrisisResourcesAvailability]);
  (0, import_react68.useEffect)(() => {
    if (!("serviceWorker" in navigator)) return;
    const initializeServiceWorker = async () => {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          setServiceWorkerRegistration(registration);
          const updateStatus = (sw) => {
            if (!sw) return;
            setConnectionStatus((prev) => ({
              ...prev,
              isServiceWorkerRegistered: true,
              serviceWorkerStatus: sw.state
            }));
          };
          if (registration.installing) {
            updateStatus(registration.installing);
            registration.installing.addEventListener("statechange", () => updateStatus(registration.installing));
          } else if (registration.waiting) {
            updateStatus(registration.waiting);
            registration.waiting.addEventListener("statechange", () => updateStatus(registration.waiting));
          } else if (registration.active) {
            updateStatus(registration.active);
            registration.active.addEventListener("statechange", () => updateStatus(registration.active));
          }
          navigator.serviceWorker.addEventListener("message", handleServiceWorkerMessage);
        }
      } catch (error44) {
        console.warn("[useConnectionStatus] Service Worker initialization failed:", error44);
      }
    };
    initializeServiceWorker();
    return () => {
      navigator.serviceWorker.removeEventListener("message", handleServiceWorkerMessage);
    };
  }, [handleServiceWorkerMessage]);
  (0, import_react68.useEffect)(() => {
    const handleOnline = () => {
      setConnectionStatus((prev) => ({
        ...prev,
        isOnline: true,
        connectionQuality: updateConnectionQuality()
      }));
    };
    const handleOffline = () => {
      setConnectionStatus((prev) => ({
        ...prev,
        isOnline: false,
        connectionQuality: "offline"
      }));
    };
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
    setConnectionStatus((prev) => ({
      ...prev,
      connectionQuality: updateConnectionQuality()
    }));
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, [updateConnectionQuality]);
  (0, import_react68.useEffect)(() => {
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    if (connection) {
      const handleConnectionChange = () => {
        setConnectionStatus((prev) => ({
          ...prev,
          connectionQuality: updateConnectionQuality()
        }));
      };
      connection.addEventListener("change", handleConnectionChange);
      return () => {
        connection.removeEventListener("change", handleConnectionChange);
      };
    }
  }, [updateConnectionQuality]);
  (0, import_react68.useEffect)(() => {
    checkCrisisResourcesAvailability().then((available) => {
      setConnectionStatus((prev) => {
        const updated = {
          ...prev,
          crisisResourcesAvailable: available
        };
        updateOfflineCapabilities(available, prev.isServiceWorkerRegistered);
        return updated;
      });
    });
  }, [checkCrisisResourcesAvailability, updateOfflineCapabilities]);
  const sendMessageToServiceWorker = (0, import_react68.useCallback)(async (message) => {
    if (!serviceWorkerRegistration?.active) {
      console.warn("[useConnectionStatus] No active service worker to send message to");
      return false;
    }
    try {
      serviceWorkerRegistration.active.postMessage(message);
      return true;
    } catch (error44) {
      console.error("[useConnectionStatus] Failed to send message to service worker:", error44);
      return false;
    }
  }, [serviceWorkerRegistration]);
  const updateCrisisResources = (0, import_react68.useCallback)(async () => {
    return sendMessageToServiceWorker({
      type: "update-crisis-resources",
      timestamp: Date.now()
    });
  }, [sendMessageToServiceWorker]);
  const forceCacheUpdate = (0, import_react68.useCallback)(async () => {
    return sendMessageToServiceWorker({
      type: "force-cache-update",
      timestamp: Date.now()
    });
  }, [sendMessageToServiceWorker]);
  return {
    connectionStatus,
    updateCrisisResources,
    forceCacheUpdate,
    sendMessageToServiceWorker
  };
};

// src/contexts/OfflineProvider.tsx
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var OfflineContext = (0, import_react69.createContext)(void 0);
var OfflineProvider = ({ children }) => {
  const {
    connectionStatus,
    updateCrisisResources,
    forceCacheUpdate,
    sendMessageToServiceWorker
  } = useConnectionStatus();
  const isFeatureAvailable = (feature) => {
    if (connectionStatus.isOnline) return true;
    const capability = connectionStatus.offlineCapabilities.find(
      (cap3) => cap3.feature.toLowerCase() === feature.toLowerCase()
    );
    return capability?.available || false;
  };
  const getOfflineCapability = (feature) => {
    return connectionStatus.offlineCapabilities.find(
      (cap3) => cap3.feature.toLowerCase() === feature.toLowerCase()
    );
  };
  const contextValue = (0, import_react69.useMemo)(() => ({
    connectionStatus,
    updateCrisisResources,
    forceCacheUpdate,
    sendMessageToServiceWorker,
    isFeatureAvailable,
    getOfflineCapability
  }), [
    connectionStatus,
    updateCrisisResources,
    forceCacheUpdate,
    sendMessageToServiceWorker,
    isFeatureAvailable,
    getOfflineCapability
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(OfflineContext.Provider, { value: contextValue, children });
};
var useOffline = () => {
  const context = (0, import_react69.useContext)(OfflineContext);
  if (context === void 0) {
    throw new Error("useOffline must be used within an OfflineProvider");
  }
  return context;
};

// src/App.tsx
init_NotificationContext();

// src/contexts/SessionContext.tsx
var import_react70 = __toESM(require_react());
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var SessionContext = (0, import_react70.createContext)(void 0);
var SessionProvider = ({ children }) => {
  const [session, setSession] = (0, import_react70.useState)(null);
  return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(SessionContext.Provider, { value: { session, setSession }, children });
};

// src/contexts/WellnessContext.tsx
var import_react71 = __toESM(require_react());
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var WellnessContext = (0, import_react71.createContext)(void 0);
var WellnessProvider = ({ children }) => {
  const [wellnessData, setWellnessData] = (0, import_react71.useState)(null);
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(WellnessContext.Provider, { value: { wellnessData, setWellnessData }, children });
};

// src/contexts/SwipeNavigationContext.tsx
var import_react72 = __toESM(require_react());
init_useSwipeGesture();
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var SwipeNavigationContext = (0, import_react72.createContext)(null);
var SwipeNavigationProvider = ({
  children,
  onNavigateBack,
  currentPath = ""
}) => {
  const [isSidebarOpen, setIsSidebarOpen] = (0, import_react72.useState)(false);
  const swipeAreasRef = (0, import_react72.useRef)(/* @__PURE__ */ new Set());
  const canSwipeBack = Boolean(onNavigateBack && currentPath && currentPath !== "/");
  const openSidebar = (0, import_react72.useCallback)(() => {
    setIsSidebarOpen(true);
    document.body.style.overflow = "hidden";
  }, []);
  const closeSidebar = (0, import_react72.useCallback)(() => {
    setIsSidebarOpen(false);
    document.body.style.overflow = "";
  }, []);
  const toggleSidebar = (0, import_react72.useCallback)(() => {
    if (isSidebarOpen) {
      closeSidebar();
    } else {
      openSidebar();
    }
  }, [isSidebarOpen, openSidebar, closeSidebar]);
  const onSwipeBack = (0, import_react72.useCallback)(() => {
    if (canSwipeBack && onNavigateBack) {
      onNavigateBack();
    }
  }, [canSwipeBack, onNavigateBack]);
  const registerSwipeArea = (0, import_react72.useCallback)((element3) => {
    swipeAreasRef.current.add(element3);
  }, []);
  const unregisterSwipeArea = (0, import_react72.useCallback)((element3) => {
    swipeAreasRef.current.delete(element3);
  }, []);
  const { ref: globalSwipeRef } = useSwipeRef({
    threshold: 50,
    velocityThreshold: 0.2,
    onSwipeRight: (gesture) => {
      const startX = gesture.distance > 0 ? 0 : 50;
      if (startX < 50 && !isSidebarOpen) {
        openSidebar();
      }
    },
    onSwipeLeft: () => {
      if (isSidebarOpen) {
        closeSidebar();
      } else if (canSwipeBack) {
        onSwipeBack();
      }
    }
  });
  (0, import_react72.useEffect)(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Escape" && isSidebarOpen) {
        closeSidebar();
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [isSidebarOpen, closeSidebar]);
  const overlayButtonStyle = { border: "none", padding: 0, background: "transparent" };
  (0, import_react72.useEffect)(() => {
    const handleClickOutside = (event) => {
      const target = event.target;
      const sidebar = document.querySelector(".sidebar-panel");
      const trigger = document.querySelector(".sidebar-trigger");
      if (isSidebarOpen && sidebar && !sidebar.contains(target) && trigger && !trigger.contains(target)) {
        closeSidebar();
      }
    };
    if (isSidebarOpen) {
      document.addEventListener("mousedown", handleClickOutside);
      return () => document.removeEventListener("mousedown", handleClickOutside);
    }
  }, [isSidebarOpen, closeSidebar]);
  const contextValue = import_react72.default.useMemo(() => ({
    isSidebarOpen,
    openSidebar,
    closeSidebar,
    toggleSidebar,
    canSwipeBack,
    onSwipeBack,
    registerSwipeArea,
    unregisterSwipeArea
  }), [
    isSidebarOpen,
    openSidebar,
    closeSidebar,
    toggleSidebar,
    canSwipeBack,
    onSwipeBack,
    registerSwipeArea,
    unregisterSwipeArea
  ]);
  const overlayClassName = "sidebar-overlay" + (isSidebarOpen ? " swipe-active" : "");
  const panelClassName = "sidebar-panel" + (isSidebarOpen ? " swipe-active" : "");
  const handleOverlayKeyDown = (e4) => {
    if (e4.key === "Enter") {
      closeSidebar();
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(SwipeNavigationContext.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { ref: globalSwipeRef, className: "swipe-navigation-container", children: [
    children,
    /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
      "button",
      {
        className: overlayClassName,
        onClick: closeSidebar,
        onKeyDown: handleOverlayKeyDown,
        "aria-hidden": !isSidebarOpen,
        "aria-label": "Close navigation menu",
        style: overlayButtonStyle
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
      "nav",
      {
        className: panelClassName,
        "aria-label": "Navigation menu",
        "aria-hidden": !isSidebarOpen,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "sidebar-header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("h2", { children: "Navigation" }),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
              "button",
              {
                className: "sidebar-close-btn touch-optimized",
                onClick: closeSidebar,
                "aria-label": "Close navigation menu",
                children: "\u2715"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "sidebar-content" })
        ]
      }
    )
  ] }) });
};

// src/components/Sidebar.tsx
var import_react75 = __toESM(require_react());

// src/components/SeekerSidebar.tsx
var import_react73 = __toESM(require_react());
init_es2();
init_icons_dynamic();
init_chatStore();
init_AnimatedNumber();
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var NavItem = import_react73.default.memo(({
  view,
  icon,
  label,
  hasNotification,
  onClick,
  activeView,
  setActiveView,
  isMobile = false
}) => {
  const handleClick = (e4) => {
    e4.preventDefault();
    onClick ? onClick() : setActiveView({ view });
  };
  const handleKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.preventDefault();
      onClick ? onClick() : setActiveView({ view });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-item", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(
    "button",
    {
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      className: `nav-link touch-optimized ${activeView.view === view ? "active" : ""} ${isMobile ? "mobile-nav-link" : ""}`,
      "aria-current": activeView.view === view ? "page" : void 0,
      type: "button",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "nav-icon", "aria-hidden": "true", children: icon }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "nav-label", children: label }),
        hasNotification && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
          "output",
          {
            className: "notification-dot",
            "aria-label": "Has new notifications"
          }
        )
      ]
    }
  ) });
});
NavItem.displayName = "NavItem";
var SeekerSidebar = ({
  activeView,
  setActiveView,
  userToken,
  onlineHelperCount,
  isMobile = false,
  onNavigation
}) => {
  const { t: t4 } = useTranslation();
  const { hasUnreadNotifications } = useChatStore();
  const handleNavigation = (view) => {
    setActiveView(view);
    if (isMobile && onNavigation) {
      onNavigation();
    }
  };
  const createNavItem = (props) => /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
    NavItem,
    {
      ...props,
      activeView,
      setActiveView: handleNavigation,
      isMobile
    }
  );
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: `seeker-sidebar ${isMobile ? "mobile-seeker-sidebar" : "desktop-seeker-sidebar"}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
      "nav",
      {
        className: "sidebar-nav-container",
        role: "navigation",
        "aria-label": "Main navigation",
        children: /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("ul", { className: "sidebar-nav", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-section-header", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "section-title", children: "My Dashboard" }) }),
          createNavItem({
            view: "starkeeper-dashboard",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SettingsIcon, {}),
            label: "My Wellness Dashboard"
          }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-section-header", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "section-title", children: "My Tools" }) }),
          createNavItem({
            view: "share",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ShareIcon, {}),
            label: t4("navigation.share")
          }),
          createNavItem({
            view: "my-activity",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(MyPostsIcon, {}),
            label: t4("navigation.my_activity")
          }),
          createNavItem({
            view: "ai-chat",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(AICompanionIcon, {}),
            label: t4("navigation.ai_chat")
          }),
          createNavItem({
            view: "safety-plan",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SafetyPlanIcon, {}),
            label: t4("navigation.my_safety_plan")
          }),
          createNavItem({
            view: "wellness-tracking",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(WellnessIcon, {}),
            label: "My Wellness"
          }),
          createNavItem({
            view: "tether",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(HeartIcon2, {}),
            label: "Astral Tether"
          }),
          createNavItem({
            view: "assessments",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ClipboardCheckIcon, {}),
            label: "Assessments"
          }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-section-header", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "section-title", children: "Community" }) }),
          createNavItem({
            view: "feed",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(FeedIcon, {}),
            label: t4("navigation.community_feed"),
            hasNotification: hasUnreadNotifications
          }),
          createNavItem({
            view: "reflections",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SparkleIcon, {}),
            label: t4("navigation.reflections")
          }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-section-header", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "section-title", children: "Resources" }) }),
          createNavItem({
            view: "wellness-videos",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(VideoIcon, {}),
            label: t4("navigation.wellness_videos")
          }),
          createNavItem({
            view: "crisis",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(CrisisIcon, {}),
            label: t4("navigation.get_help_now")
          }),
          createNavItem({
            view: "quiet-space",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(QuietSpaceIcon, {}),
            label: t4("navigation.quiet_space")
          }),
          createNavItem({
            view: "donation",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(HeartIcon2, {}),
            label: t4("navigation.donate")
          }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("li", { className: "nav-separator", "aria-hidden": "true" }),
          userToken && createNavItem({
            view: "moderation-history",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(LegalIcon, {}),
            label: t4("navigation.moderation_history")
          }),
          createNavItem({
            view: "guidelines",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(GuidelinesIcon, {}),
            label: t4("navigation.guidelines")
          }),
          createNavItem({
            view: "legal",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(LegalIcon, {}),
            label: t4("navigation.legal")
          }),
          createNavItem({
            view: "login",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(HelperIcon, {}),
            label: t4("navigation.helper_login")
          }),
          createNavItem({
            view: "settings",
            icon: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SettingsIcon, {}),
            label: t4("navigation.settings")
          })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("div", { className: "sidebar-footer", children: [
      /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("output", { className: "online-status", "aria-live": "polite", children: [
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(UsersIcon, { "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("span", { className: "online-status-text", children: [
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(AnimatedNumber, { value: onlineHelperCount }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "sr-only", children: "helpers" }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)("span", { "aria-hidden": "true", children: [
            " Helper",
            onlineHelperCount !== 1 ? "s" : ""
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { children: " Online" })
        ] })
      ] }),
      isMobile && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("div", { className: "mobile-sidebar-hint", children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("span", { className: "hint-text", children: "Swipe left or tap outside to close" }) })
    ] })
  ] });
};
SeekerSidebar.displayName = "SeekerSidebar";

// src/components/HelperSidebar.tsx
var import_react74 = __toESM(require_react());
init_icons_dynamic();

// src/i18n.ts
init_hooks();
init_i18n();
var i18n_default2 = i18n_default;

// src/components/HelperSidebar.tsx
init_AnimatedNumber();
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var NavItem2 = import_react74.default.memo(({
  view,
  icon,
  label,
  hasNotification,
  onClick,
  activeView,
  setActiveView,
  isMobile = false
}) => {
  const handleClick = (e4) => {
    e4.preventDefault();
    onClick ? onClick() : setActiveView({ view });
  };
  const handleKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.preventDefault();
      onClick ? onClick() : setActiveView({ view });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("li", { className: "nav-item", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(
    "button",
    {
      onClick: handleClick,
      onKeyDown: handleKeyDown,
      className: `nav-link touch-optimized ${activeView.view === view ? "active" : ""} ${isMobile ? "mobile-nav-link" : ""}`,
      "aria-current": activeView.view === view ? "page" : void 0,
      type: "button",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "nav-icon", "aria-hidden": "true", children: icon }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "nav-label", children: label }),
        hasNotification && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
          "output",
          {
            className: "notification-dot",
            "aria-label": "Has new notifications"
          }
        )
      ]
    }
  ) });
});
NavItem2.displayName = "NavItem";
var HelperSidebar = ({
  activeView,
  setActiveView,
  onLogout,
  helperProfile,
  onlineHelperCount,
  isMobile = false,
  onNavigation
}) => {
  const handleNavigation = (view) => {
    setActiveView(view);
    if (isMobile && onNavigation) {
      onNavigation();
    }
  };
  const handleLogout = () => {
    onLogout();
    if (isMobile && onNavigation) {
      onNavigation();
    }
  };
  const createNavItem = (props) => /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
    NavItem2,
    {
      ...props,
      activeView,
      setActiveView: handleNavigation,
      isMobile
    }
  );
  return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: `helper-sidebar ${isMobile ? "mobile-helper-sidebar" : "desktop-helper-sidebar"}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "helper-profile", children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "helper-avatar", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CertifiedIcon, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "helper-info", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("h3", { className: "helper-name", children: helperProfile.displayName }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "helper-status", children: "Certified Helper" })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
      "nav",
      {
        className: "sidebar-nav-container",
        role: "navigation",
        "aria-label": "Helper navigation",
        children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("ul", { className: "sidebar-nav", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("li", { className: "nav-section-header", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "section-title", children: "Helper Dashboard" }) }),
          createNavItem({
            view: "constellation-guide-dashboard",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(DashboardIcon, {}),
            label: i18n_default2.t("dashboard")
          }),
          createNavItem({
            view: "helper-chats",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(ChatIcon, {}),
            label: "Active Chats"
          }),
          createNavItem({
            view: "helper-posts",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(PostsIcon, {}),
            label: "Community Posts"
          }),
          createNavItem({
            view: "helper-application",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(CertifiedIcon, {}),
            label: "Certification"
          }),
          createNavItem({
            view: "helper-community",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(UsersIcon, {}),
            label: "Helper Community"
          }),
          (helperProfile?.role === "Moderator" || helperProfile?.role === "Admin") && createNavItem({
            view: "moderation-dashboard",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(LegalIcon, {}),
            label: "Moderation Dashboard"
          }),
          helperProfile?.role === "Admin" && createNavItem({
            view: "admin-dashboard",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(SettingsIcon, {}),
            label: "Admin Panel"
          }),
          createNavItem({
            view: "workflow-demo",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(PostsIcon, {}),
            label: "Workflow Demo"
          }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("li", { className: "nav-separator", "aria-hidden": "true" }),
          createNavItem({
            view: "guidelines",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(GuidelinesIcon, {}),
            label: i18n_default2.t("guidelines")
          }),
          createNavItem({
            view: "legal",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(LegalIcon, {}),
            label: i18n_default2.t("legal")
          }),
          createNavItem({
            view: "settings",
            icon: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(SettingsIcon, {}),
            label: i18n_default2.t("settings")
          }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("li", { className: "nav-item", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(
            "button",
            {
              onClick: handleLogout,
              className: `nav-link touch-optimized logout-button ${isMobile ? "mobile-nav-link" : ""}`,
              type: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "nav-icon", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(LogoutIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "nav-label", children: i18n_default2.t("logout") })
              ]
            }
          ) })
        ] })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("div", { className: "sidebar-footer", children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("output", { className: "online-status", "aria-live": "polite", children: [
        /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(UsersIcon, { "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("span", { className: "online-status-text", children: [
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(AnimatedNumber, { value: onlineHelperCount }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "sr-only", children: "helpers" }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("span", { "aria-hidden": "true", children: [
            " Helper",
            onlineHelperCount !== 1 ? "s" : ""
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { children: " Online" })
        ] })
      ] }),
      isMobile && /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", { className: "mobile-sidebar-hint", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("span", { className: "hint-text", children: "Swipe left or tap outside to close" }) })
    ] })
  ] });
};
HelperSidebar.displayName = "HelperSidebar";

// src/components/Sidebar.tsx
init_AuthContext();
init_dist();
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var Sidebar = import_react75.default.memo(() => {
  const { isAuthenticated, login, logout, helperProfile, userToken } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [activeView, setActiveView] = (0, import_react75.useState)({ view: "wellness-tracking" });
  const onlineHelperCount = 12;
  (0, import_react75.useEffect)(() => {
    const pathToView = {
      "/wellness": "wellness-tracking",
      "/dashboard": "dashboard",
      "/ai-chat": "ai-chat",
      "/crisis": "crisis",
      "/feed": "feed",
      "/reflections": "reflections",
      "/safety-plan": "safety-plan",
      "/settings": "settings",
      "/peer-support": "peer-support",
      "/tether": "tether",
      "/assessments": "assessments",
      "/wellness-videos": "wellness-videos"
    };
    const view = pathToView[location.pathname];
    if (view) {
      setActiveView({ view });
    }
  }, [location.pathname]);
  const handleSetActiveView = (view) => {
    if (view.view === "login") {
      login();
      return;
    }
    setActiveView(view);
    const routeMap = {
      "wellness-tracking": "/wellness",
      "starkeeper-dashboard": "/dashboard",
      "dashboard": "/dashboard",
      "ai-chat": "/ai-chat",
      "crisis": "/crisis",
      "feed": "/feed",
      "reflections": "/reflections",
      "safety-plan": "/safety-plan",
      "settings": "/settings",
      "peer-support": "/peer-support",
      "tether": "/tether",
      "assessments": "/assessments",
      "wellness-videos": "/wellness-videos",
      "quiet-space": "/quiet-space",
      "share": "/feed",
      "my-activity": "/profile",
      "guidelines": "/help",
      "legal": "/legal",
      "donation": "/about"
    };
    if (routeMap[view.view]) {
      navigate(routeMap[view.view]);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("aside", { className: "sidebar", children: [
    /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "sidebar-header", style: { display: "flex", alignItems: "center", justifyContent: "space-between" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Astral Core" }),
      !isAuthenticated && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
        "button",
        {
          className: "signin-btn",
          onClick: login,
          style: {
            padding: "0.25rem 0.75rem",
            fontSize: "0.875rem",
            background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            color: "white",
            border: "none",
            borderRadius: "15px",
            cursor: "pointer",
            transition: "all 0.3s ease"
          },
          onMouseEnter: (e4) => {
            e4.currentTarget.style.transform = "scale(1.05)";
            e4.currentTarget.style.boxShadow = "0 4px 12px rgba(102, 126, 234, 0.3)";
          },
          onMouseLeave: (e4) => {
            e4.currentTarget.style.transform = "scale(1)";
            e4.currentTarget.style.boxShadow = "none";
          },
          children: "Sign In"
        }
      ),
      isAuthenticated && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
        "button",
        {
          className: "signout-btn",
          onClick: logout,
          style: {
            padding: "0.25rem 0.75rem",
            fontSize: "0.875rem",
            background: "transparent",
            color: "var(--text-secondary)",
            border: "1px solid var(--border-color)",
            borderRadius: "15px",
            cursor: "pointer",
            transition: "all 0.3s ease"
          },
          onMouseEnter: (e4) => {
            e4.currentTarget.style.borderColor = "#ef4444";
            e4.currentTarget.style.color = "#ef4444";
          },
          onMouseLeave: (e4) => {
            e4.currentTarget.style.borderColor = "var(--border-color)";
            e4.currentTarget.style.color = "var(--text-secondary)";
          },
          children: "Sign Out"
        }
      )
    ] }),
    isAuthenticated && helperProfile ? /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
      HelperSidebar,
      {
        activeView,
        setActiveView: handleSetActiveView,
        onLogout: logout,
        helperProfile,
        onlineHelperCount
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
      SeekerSidebar,
      {
        activeView,
        setActiveView: handleSetActiveView,
        userToken,
        onlineHelperCount
      }
    )
  ] });
});
Sidebar.displayName = "Sidebar";

// src/components/NetworkBanner.tsx
var import_react76 = __toESM(require_react());
init_icons_dynamic();
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var NetworkBanner = ({
  showWhenOnline = false,
  autoDismiss = false,
  autoDismissDelay = 5e3,
  onDismiss,
  className = ""
}) => {
  const { connectionStatus } = useOffline();
  const {
    isOnline,
    connectionQuality,
    crisisResourcesAvailable,
    serviceWorkerStatus
  } = connectionStatus;
  (0, import_react76.useEffect)(() => {
    if (autoDismiss && isOnline && onDismiss) {
      const timer = setTimeout(onDismiss, autoDismissDelay);
      return () => clearTimeout(timer);
    }
  }, [autoDismiss, isOnline, onDismiss, autoDismissDelay]);
  if (isOnline && !showWhenOnline) return null;
  const getBannerContent = () => {
    if (!isOnline) {
      return {
        type: "offline",
        icon: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AlertIcon, {}),
        title: "You're offline",
        message: crisisResourcesAvailable ? "Crisis resources and emergency contacts are still available." : "Some features may not be available.",
        actionText: crisisResourcesAvailable ? "View Crisis Resources" : "Try Again",
        severity: crisisResourcesAvailable ? "warning" : "error"
      };
    }
    if (connectionQuality === "poor") {
      return {
        type: "poor-connection",
        icon: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AlertIcon, {}),
        title: "Slow connection detected",
        message: "Some features may load slowly. Crisis resources are prioritized.",
        actionText: "Optimize Connection",
        severity: "warning"
      };
    }
    return {
      type: "online",
      icon: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(CheckIcon, {}),
      title: "Connection restored",
      message: "All features are now available.",
      actionText: "Continue",
      severity: "success"
    };
  };
  const bannerContent = getBannerContent();
  return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
    "div",
    {
      className: `network-banner network-banner--${bannerContent.severity} ${className}`,
      role: "alert",
      "aria-live": "polite",
      children: /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "network-banner__content", children: [
        /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "network-banner__main", children: [
          /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "network-banner__icon", children: bannerContent.icon }),
          /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "network-banner__text", children: [
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "network-banner__title", children: bannerContent.title }),
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("div", { className: "network-banner__message", children: bannerContent.message })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "network-banner__meta", children: [
          !isOnline && crisisResourcesAvailable && /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "crisis-available", children: [
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(PhoneIcon2, {}),
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("span", { children: "Emergency contacts available" })
          ] }),
          !isOnline && serviceWorkerStatus === "active" && /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "offline-mode", children: [
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("span", { className: "offline-mode__indicator" }),
            /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("span", { children: "Offline mode active" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)("div", { className: "network-banner__actions", children: [
          /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
            "button",
            {
              className: "network-banner__action network-banner__action--primary",
              onClick: () => {
                if (bannerContent.type === "offline" && crisisResourcesAvailable) {
                  window.location.href = "/crisis";
                } else if (onDismiss) {
                  onDismiss();
                }
              },
              children: bannerContent.actionText
            }
          ),
          onDismiss && /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
            "button",
            {
              className: "network-banner__action network-banner__action--secondary",
              onClick: onDismiss,
              "aria-label": "Dismiss notification",
              children: "\xD7"
            }
          )
        ] })
      ] })
    }
  );
};

// src/components/ServiceWorkerUpdate.tsx
var import_react78 = __toESM(require_react());

// src/hooks/useServiceWorker.ts
var import_react77 = __toESM(require_react());

// src/services/serviceWorkerManager.ts
var ServiceWorkerManager = class {
  isReady = false;
  onlineCallbacks = [];
  offlineCallbacks = [];
  updateCallbacks = [];
  async initialize() {
    if (!("serviceWorker" in navigator)) {
      return { supported: false };
    }
    try {
      const registration = await navigator.serviceWorker.register("/sw.js");
      console.log("[ServiceWorker] Registered:", registration);
      return { supported: true, registered: true };
    } catch (error44) {
      console.error("[ServiceWorker] Registration failed:", error44);
      return { supported: true, registered: false };
    }
  }
  hasMessageChannel() {
    return true;
  }
  async cacheResources(resources) {
    console.log("[ServiceWorker] Cache resources:", resources);
    return true;
  }
  async preloadCriticalResources(resources) {
    console.log("[ServiceWorker] Preload critical resources:", resources);
  }
  async registerBackgroundSync(data2) {
    console.log("[ServiceWorker] Register background sync:", data2);
  }
  async queueOfflineAction(action) {
    console.log("[ServiceWorker] Queue offline action:", action);
  }
  async setupPushNotifications(vapidKey) {
    console.log("[ServiceWorker] Setup push notifications with VAPID key:", vapidKey);
    return null;
  }
  async sendNotification(notification) {
    console.log("[ServiceWorker] Send notification:", notification);
  }
  // Keep the existing onNotification property for compatibility
  onNotification;
  async isOfflineReady() {
    return this.isReady;
  }
  async getCacheStatus() {
    return {
      staticResources: false,
      crisisResources: false,
      translations: false,
      culturalContent: false,
      aiModels: false,
      swRegistered: "serviceWorker" in navigator,
      cacheVersion: "1.0.0",
      updateAvailable: false
    };
  }
  async skipWaiting() {
    console.log("[ServiceWorker] Skip waiting requested");
  }
  async checkForUpdates() {
    return false;
  }
  async clearCache(cacheName) {
    console.log("[ServiceWorker] Clear cache:", cacheName || "all");
    return true;
  }
  async cacheCrisisResource(url2) {
    console.log("[ServiceWorker] Cache crisis resource:", url2);
    return true;
  }
  async precacheCrisisResources() {
    console.log("[ServiceWorker] Precache crisis resources");
  }
  forceReload() {
    window.location.reload();
  }
  onOnline(callback) {
    this.onlineCallbacks.push(callback);
  }
  onOffline(callback) {
    this.offlineCallbacks.push(callback);
  }
  onUpdateAvailable(callback) {
    this.updateCallbacks.push(callback);
  }
  removeOnlineListener(callback) {
    const index2 = this.onlineCallbacks.indexOf(callback);
    if (index2 > -1) {
      this.onlineCallbacks.splice(index2, 1);
    }
  }
  removeOfflineListener(callback) {
    const index2 = this.offlineCallbacks.indexOf(callback);
    if (index2 > -1) {
      this.offlineCallbacks.splice(index2, 1);
    }
  }
  removeUpdateListener(callback) {
    const index2 = this.updateCallbacks.indexOf(callback);
    if (index2 > -1) {
      this.updateCallbacks.splice(index2, 1);
    }
  }
  getNetworkStatus() {
    return {
      isOnline: navigator.onLine,
      type: navigator.connection?.effectiveType || "unknown"
    };
  }
};
var serviceWorkerManager = new ServiceWorkerManager();
var serviceWorkerManager_default = serviceWorkerManager;

// src/hooks/useServiceWorker.ts
var useServiceWorker = () => {
  const [isOnline, setIsOnline] = (0, import_react77.useState)(navigator.onLine);
  const [isOfflineReady, setIsOfflineReady] = (0, import_react77.useState)(false);
  const [updateAvailable, setUpdateAvailable] = (0, import_react77.useState)(false);
  const [cacheStatus, setCacheStatus] = (0, import_react77.useState)(null);
  const handleOnline = (0, import_react77.useCallback)(() => {
    setIsOnline(true);
  }, []);
  const handleOffline = (0, import_react77.useCallback)(() => {
    setIsOnline(false);
  }, []);
  const handleUpdateAvailable = (0, import_react77.useCallback)(() => {
    setUpdateAvailable(true);
  }, []);
  const checkOfflineReadiness = (0, import_react77.useCallback)(async () => {
    try {
      const ready = await serviceWorkerManager_default.isOfflineReady();
      setIsOfflineReady(ready);
    } catch (error44) {
      console.error("Failed to check offline readiness:", error44);
      setIsOfflineReady(false);
    }
  }, []);
  const updateCacheStatus = (0, import_react77.useCallback)(async () => {
    try {
      const status = await serviceWorkerManager_default.getCacheStatus();
      setCacheStatus(status);
    } catch (error44) {
      console.error("Failed to get cache status:", error44);
    }
  }, []);
  const skipWaiting = (0, import_react77.useCallback)(async () => {
    try {
      await serviceWorkerManager_default.skipWaiting();
      setUpdateAvailable(false);
    } catch (error44) {
      console.error("Failed to skip waiting:", error44);
    }
  }, []);
  const checkForUpdates = (0, import_react77.useCallback)(async () => {
    try {
      const hasUpdate = await serviceWorkerManager_default.checkForUpdates();
      await updateCacheStatus();
      return hasUpdate;
    } catch (error44) {
      console.error("Failed to check for updates:", error44);
      return false;
    }
  }, [updateCacheStatus]);
  const clearCache = (0, import_react77.useCallback)(async () => {
    try {
      const success2 = await serviceWorkerManager_default.clearCache();
      if (success2) {
        await updateCacheStatus();
        await checkOfflineReadiness();
      }
      return success2;
    } catch (error44) {
      console.error("Failed to clear cache:", error44);
      return false;
    }
  }, [updateCacheStatus, checkOfflineReadiness]);
  const cacheCrisisResource = (0, import_react77.useCallback)(async (url2) => {
    try {
      const success2 = await serviceWorkerManager_default.cacheCrisisResource(url2);
      if (success2) {
        await updateCacheStatus();
        await checkOfflineReadiness();
      }
      return success2;
    } catch (error44) {
      console.error("Failed to cache crisis resource:", error44);
      return false;
    }
  }, [updateCacheStatus, checkOfflineReadiness]);
  const precacheCrisisResources = (0, import_react77.useCallback)(async () => {
    try {
      await serviceWorkerManager_default.precacheCrisisResources();
      await updateCacheStatus();
      await checkOfflineReadiness();
    } catch (error44) {
      console.error("Failed to pre-cache crisis resources:", error44);
    }
  }, [updateCacheStatus, checkOfflineReadiness]);
  const forceReload = (0, import_react77.useCallback)(() => {
    serviceWorkerManager_default.forceReload();
  }, []);
  (0, import_react77.useEffect)(() => {
    serviceWorkerManager_default.onOnline(handleOnline);
    serviceWorkerManager_default.onOffline(handleOffline);
    serviceWorkerManager_default.onUpdateAvailable(handleUpdateAvailable);
    updateCacheStatus();
    checkOfflineReadiness();
    return () => {
      serviceWorkerManager_default.removeOnlineListener(handleOnline);
      serviceWorkerManager_default.removeOfflineListener(handleOffline);
      serviceWorkerManager_default.removeUpdateListener(handleUpdateAvailable);
    };
  }, [handleOnline, handleOffline, handleUpdateAvailable, updateCacheStatus, checkOfflineReadiness]);
  (0, import_react77.useEffect)(() => {
    const currentStatus = serviceWorkerManager_default.getNetworkStatus();
    if (currentStatus.isOnline !== isOnline) {
      setIsOnline(currentStatus.isOnline);
    }
  }, [isOnline]);
  return {
    isOnline,
    isOfflineReady,
    updateAvailable,
    cacheStatus,
    skipWaiting,
    checkForUpdates,
    clearCache,
    cacheCrisisResource,
    precacheCrisisResources,
    forceReload
  };
};

// src/components/ServiceWorkerUpdate.tsx
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var ServiceWorkerUpdate = () => {
  const {
    updateAvailable,
    isOfflineReady,
    skipWaiting,
    cacheStatus
  } = useServiceWorker();
  const [showDetails, setShowDetails] = (0, import_react78.useState)(false);
  const [isUpdating, setIsUpdating] = (0, import_react78.useState)(false);
  if (!updateAvailable && !isOfflineReady) {
    return null;
  }
  const handleUpdate = async () => {
    setIsUpdating(true);
    await skipWaiting();
  };
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "sw-update-container", children: [
    /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "sw-update-header", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "sw-update-title", children: [
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("svg", { className: "sw-update-icon", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("path", { fillRule: "evenodd", d: "M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z", clipRule: "evenodd" }) }),
        updateAvailable ? "Update Available" : "Ready for Offline"
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        "button",
        {
          className: "sw-update-btn-secondary",
          onClick: () => setShowDetails(!showDetails),
          style: { padding: "4px 8px", fontSize: "12px" },
          children: showDetails ? "Hide" : "Details"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "sw-update-message", children: updateAvailable ? "A new version of Astral Core is available with improvements and bug fixes." : "Astral Core is now ready to work offline." }),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: "sw-update-actions", children: updateAvailable ? /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { style: { display: "flex", gap: "8px" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        "button",
        {
          className: "sw-update-btn sw-update-btn-primary",
          onClick: handleUpdate,
          disabled: isUpdating,
          children: isUpdating ? "Updating..." : "Update Now"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        "button",
        {
          className: "sw-update-btn sw-update-btn-secondary",
          onClick: () => window.location.reload(),
          children: "Later"
        }
      )
    ] }) : isOfflineReady ? /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
      "button",
      {
        className: "sw-update-btn sw-update-btn-primary",
        onClick: () => window.location.reload(),
        children: "Got it"
      }
    ) : null }),
    showDetails && cacheStatus && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "sw-update-details", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "status-item", children: [
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-label", children: "Cache Version:" }),
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-value", children: cacheStatus.cacheVersion || "N/A" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "status-item", children: [
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-label", children: "Cached Files:" }),
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-value", children: cacheStatus.cachedFiles || 0 })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "status-item", children: [
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-label", children: "Service Worker:" }),
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-value", children: cacheStatus.swRegistered ? "\u2705 Active" : "\u274C Inactive" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: "status-item", children: [
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-label", children: "Offline Ready:" }),
        /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { className: "status-value", children: isOfflineReady ? "\u2705 Yes" : "\u26A0\uFE0F Limited" })
      ] })
    ] })
  ] });
};
var ServiceWorkerUpdate_default = ServiceWorkerUpdate;

// src/components/CrisisAlertFixed.tsx
var import_react79 = __toESM(require_react());
init_CrisisAlert();
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var emergencyContacts2 = [
  {
    id: "crisis-lifeline",
    name: "988 Suicide & Crisis Lifeline",
    number: "988",
    description: "Free, confidential crisis counseling",
    available: "24/7",
    type: "call"
  },
  {
    id: "crisis-text",
    name: "Crisis Text Line",
    number: "741741",
    description: "Text HOME for immediate support",
    available: "24/7",
    type: "text"
  },
  {
    id: "emergency-services",
    name: "Emergency Services",
    number: "911",
    description: "Immediate emergency assistance",
    available: "24/7",
    type: "call"
  }
];
function CrisisAlert2({
  show = false,
  severity = "none",
  message = "",
  actions = [],
  resources = [],
  emergencyMode = false,
  onDismiss = () => {
  },
  onEmergencyCall,
  onCrisisChat,
  userType = "seeker"
}) {
  const [isVisible, setIsVisible] = (0, import_react79.useState)(false);
  const [timeShown, setTimeShown] = (0, import_react79.useState)(null);
  (0, import_react79.useEffect)(() => {
    if (show) {
      setIsVisible(true);
      setTimeShown(/* @__PURE__ */ new Date());
      const alertElement = document.getElementById("crisis-alert");
      if (alertElement) {
        alertElement.focus();
      }
    } else {
      const timer = setTimeout(() => setIsVisible(false), 300);
      return () => clearTimeout(timer);
    }
  }, [show]);
  const handleDismiss = () => {
    onDismiss();
  };
  const handleEmergencyCall = (contact) => {
    if (onEmergencyCall) {
      onEmergencyCall();
    }
    if (contact.type === "call") {
      window.open(`tel:${contact.number}`, "_self");
    } else if (contact.type === "text") {
      window.open(`sms:${contact.number}`, "_self");
    }
  };
  const handleCrisisChat = () => {
    if (onCrisisChat) {
      onCrisisChat();
    } else {
      window.open("https://suicidepreventionlifeline.org/chat/", "_blank");
    }
  };
  const handleBackdropClick = () => {
    if (!emergencyMode) {
      handleDismiss();
    }
  };
  const handleBackdropKeyDown = (event) => {
    if (!emergencyMode && (event.key === "Enter" || event.key === " ")) {
      event.preventDefault();
      handleDismiss();
    }
  };
  const getSeverityConfig = () => {
    switch (severity) {
      case "critical":
        return {
          className: "crisis-alert--critical",
          color: "#dc2626",
          pulse: true,
          title: "IMMEDIATE ATTENTION NEEDED"
        };
      case "high":
        return {
          className: "crisis-alert--high",
          color: "#ea580c",
          pulse: true,
          title: "Crisis Support Needed"
        };
      case "medium":
        return {
          className: "crisis-alert--medium",
          color: "#d97706",
          pulse: false,
          title: "Support Recommended"
        };
      case "low":
        return {
          className: "crisis-alert--low",
          color: "#059669",
          pulse: false,
          title: "Resources Available"
        };
      default:
        return {
          className: "crisis-alert--none",
          color: "#6b7280",
          pulse: false,
          title: "Support Available"
        };
    }
  };
  const getContactClassName = (contactType) => {
    if (contactType === "call") return "crisis-alert__emergency-contact--call";
    if (contactType === "text") return "crisis-alert__emergency-contact--text";
    return "crisis-alert__emergency-contact--chat";
  };
  const config2 = getSeverityConfig();
  if (!isVisible) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
    "div",
    {
      className: [
        "crisis-alert",
        config2.className,
        show ? "crisis-alert--show" : "crisis-alert--hide"
      ].join(" "),
      role: "alert",
      "aria-live": "assertive",
      "aria-labelledby": "crisis-alert-title",
      id: "crisis-alert",
      tabIndex: -1,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
          "div",
          {
            className: "crisis-alert__backdrop",
            onClick: handleBackdropClick,
            onKeyDown: handleBackdropKeyDown,
            role: "button",
            tabIndex: 0,
            "aria-label": emergencyMode ? void 0 : "Close alert"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__container", children: [
          /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__header", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__icon-container", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
              "div",
              {
                className: config2.pulse ? "crisis-alert__icon crisis-alert__icon--pulse" : "crisis-alert__icon",
                style: { color: config2.color },
                "aria-hidden": "true",
                children: "\u26A0\uFE0F"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__title-container", children: [
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h2", { id: "crisis-alert-title", className: "crisis-alert__title", children: config2.title }),
              timeShown && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__timestamp", children: [
                "\u{1F550} ",
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", { children: timeShown.toLocaleTimeString() })
              ] })
            ] }),
            !emergencyMode && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
              "button",
              {
                className: "crisis-alert__close",
                onClick: handleDismiss,
                "aria-label": "Close alert",
                type: "button",
                children: "\u2715"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__content", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("p", { className: "crisis-alert__message", children: message }) }),
          (severity === "critical" || severity === "high") && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__emergency-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "crisis-alert__section-title", children: "Immediate Help Available" }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__emergency-contacts", children: emergencyContacts2.map((contact) => /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
              "button",
              {
                className: `crisis-alert__emergency-contact ${getContactClassName(contact.type)}`,
                onClick: () => handleEmergencyCall(contact),
                type: "button",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__contact-icon", children: [
                    contact.type === "call" && "\u{1F4DE}",
                    contact.type === "text" && "\u{1F4AC}",
                    contact.type === "chat" && "\u{1F4AC}"
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__contact-info", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__contact-name", children: contact.name }),
                    /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__contact-number", children: contact.number }),
                    /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__contact-description", children: contact.description }),
                    /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__contact-availability", children: contact.available })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__contact-external", children: "\u{1F517}" })
                ]
              },
              contact.id
            )) })
          ] }),
          actions.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__actions-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "crisis-alert__section-title", children: "Recommended Actions" }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("ul", { className: "crisis-alert__actions-list", children: actions.map((action, index2) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("li", { className: "crisis-alert__action-item", children: action }, `action-${index2}`)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__chat-section", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
            "button",
            {
              className: "crisis-alert__chat-button",
              onClick: handleCrisisChat,
              type: "button",
              children: [
                "\u{1F4AC} ",
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", { children: "Start Crisis Chat" })
              ]
            }
          ) }),
          resources.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__resources-section", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("h3", { className: "crisis-alert__section-title", children: "Additional Resources" }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("ul", { className: "crisis-alert__resources-list", children: resources.map((resource, index2) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("li", { className: "crisis-alert__resource-item", children: resource }, `resource-${index2}`)) })
          ] }),
          userType === "helper" && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__helper-footer", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: "crisis-alert__helper-note", children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("strong", { children: "Helper Guidance:" }),
            " This situation requires professional intervention. Do not attempt to handle this crisis alone. Connect the person with professional crisis services immediately."
          ] }) }),
          !emergencyMode && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "crisis-alert__footer", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            "button",
            {
              className: "crisis-alert__dismiss-button",
              onClick: handleDismiss,
              type: "button",
              children: "I understand"
            }
          ) })
        ] })
      ]
    }
  );
}

// src/components/PWAInstallBanner.tsx
var import_react80 = __toESM(require_react());

// src/services/pwaService.ts
var PWAService = class {
  installPrompt = null;
  isOffline = !navigator.onLine;
  installPromptShown = false;
  statusCallbacks = [];
  constructor() {
    this.initializeEventListeners();
    this.initializeOfflineDetection();
    this.initializeInstallPromptHandling();
    this.initializeMobileOptimizations();
  }
  /**
   * Initialize event listeners for PWA features
   */
  initializeEventListeners() {
    window.addEventListener("beforeinstallprompt", (e4) => {
      e4.preventDefault();
      this.installPrompt = e4;
      console.log("[PWA] Install prompt available");
      this.notifyStatusChange();
    });
    window.addEventListener("appinstalled", () => {
      console.log("[PWA] App was installed");
      this.installPrompt = null;
      this.notifyStatusChange();
    });
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible") {
        this.handleAppFocus();
      } else {
        this.handleAppBlur();
      }
    });
  }
  /**
   * Initialize offline detection
   */
  initializeOfflineDetection() {
    window.addEventListener("online", () => {
      this.isOffline = false;
      console.log("[PWA] App is back online");
      this.handleOnlineStatusChange(true);
      this.notifyStatusChange();
    });
    window.addEventListener("offline", () => {
      this.isOffline = true;
      console.log("[PWA] App is offline");
      this.handleOnlineStatusChange(false);
      this.notifyStatusChange();
    });
  }
  /**
   * Initialize smart install prompt handling
   */
  initializeInstallPromptHandling() {
    console.log("[PWA] Install prompts disabled for development");
  }
  /**
   * Initialize mobile-specific optimizations
   */
  initializeMobileOptimizations() {
    if (this.isMobileDevice()) {
      this.initializeMobileGestures();
      this.handleSafeAreaInsets();
      this.optimizeTouchInteractions();
      this.handleOrientationChanges();
    }
  }
  /**
   * Show smart install prompt with context (DISABLED FOR DEVELOPMENT)
   */
  async showSmartInstallPrompt() {
    console.log("[PWA] Install prompt disabled for development");
    return false;
  }
  /**
   * Handle app focus (user returns to app)
   */
  handleAppFocus() {
    console.log("[PWA] App focused");
    this.isOffline = !navigator.onLine;
    if (!this.isOffline) {
      this.refreshCriticalData();
    }
    this.notifyStatusChange();
  }
  /**
   * Handle app blur (user leaves app)
   */
  handleAppBlur() {
    console.log("[PWA] App blurred");
    this.savePendingData();
  }
  /**
   * Handle online/offline status changes
   */
  handleOnlineStatusChange(isOnline) {
    this.showOfflineIndicator(!isOnline);
    if (isOnline) {
      this.syncPendingData();
      this.refreshCrisisResources();
    }
  }
  /**
   * Initialize mobile gesture handling
   */
  initializeMobileGestures() {
    let pullToRefreshTriggered = false;
    let startY = 0;
    document.addEventListener("touchstart", (e4) => {
      startY = e4.touches[0].pageY;
    }, { passive: true });
    document.addEventListener("touchmove", (e4) => {
      const currentY = e4.touches[0].pageY;
      const pullDistance = currentY - startY;
      if (pullDistance > 100 && window.scrollY === 0 && !pullToRefreshTriggered) {
        pullToRefreshTriggered = true;
        this.handlePullToRefresh();
      }
    }, { passive: true });
    document.addEventListener("touchend", () => {
      pullToRefreshTriggered = false;
    }, { passive: true });
  }
  /**
   * Handle safe area insets for notched devices
   */
  handleSafeAreaInsets() {
    const style = document.createElement("style");
    style.textContent = `
      :root {
        --safe-area-inset-top: env(safe-area-inset-top);
        --safe-area-inset-right: env(safe-area-inset-right);
        --safe-area-inset-bottom: env(safe-area-inset-bottom);
        --safe-area-inset-left: env(safe-area-inset-left);
      }
      
      .mobile-safe-area {
        padding-top: var(--safe-area-inset-top);
        padding-right: var(--safe-area-inset-right);
        padding-bottom: var(--safe-area-inset-bottom);
        padding-left: var(--safe-area-inset-left);
      }
    `;
    document.head.appendChild(style);
  }
  /**
   * Optimize touch interactions
   */
  optimizeTouchInteractions() {
    const style = document.createElement("style");
    style.textContent = `
      * {
        touch-action: manipulation;
      }
      
      button, .clickable {
        -webkit-tap-highlight-color: transparent;
      }
    `;
    document.head.appendChild(style);
  }
  /**
   * Handle device orientation changes
   */
  handleOrientationChanges() {
    window.addEventListener("orientationchange", () => {
      setTimeout(() => {
        window.dispatchEvent(new Event("resize"));
      }, 100);
    });
  }
  /**
   * Handle pull to refresh
   */
  async handlePullToRefresh() {
    console.log("[PWA] Pull to refresh triggered");
    this.showRefreshIndicator();
    try {
      await this.refreshCriticalData();
      window.dispatchEvent(new CustomEvent("pwaRefresh"));
    } catch (error44) {
      console.error("[PWA] Error during pull to refresh:", error44);
    } finally {
      this.hideRefreshIndicator();
    }
  }
  /**
   * Show offline indicator
   */
  showOfflineIndicator(show) {
    let indicator = document.getElementById("offline-indicator");
    if (show && !indicator) {
      indicator = document.createElement("div");
      indicator.id = "offline-indicator";
      indicator.innerHTML = "\u{1F4E1} You are offline - Crisis resources remain available";
      indicator.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: #ff4757;
        color: white;
        text-align: center;
        padding: 0.5rem;
        z-index: 9999;
        font-size: 0.9rem;
      `;
      document.body.appendChild(indicator);
    } else if (!show && indicator) {
      indicator.remove();
    }
  }
  /**
   * Show refresh indicator
   */
  showRefreshIndicator() {
    const indicator = document.createElement("div");
    indicator.id = "refresh-indicator";
    indicator.innerHTML = "\u{1F504} Refreshing...";
    indicator.style.cssText = `
      position: fixed;
      top: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: #667eea;
      color: white;
      padding: 1rem 2rem;
      border-radius: 2rem;
      z-index: 9999;
      animation: fadeIn 0.3s ease;
    `;
    document.body.appendChild(indicator);
  }
  /**
   * Hide refresh indicator
   */
  hideRefreshIndicator() {
    const indicator = document.getElementById("refresh-indicator");
    if (indicator) {
      indicator.remove();
    }
  }
  /**
   * Refresh critical data
   */
  async refreshCriticalData() {
    window.dispatchEvent(new CustomEvent("pwaRefreshCriticalData"));
  }
  /**
   * Refresh critical crisis resources
   */
  async refreshCrisisResources() {
    if ("serviceWorker" in navigator) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration && registration.active) {
          registration.active.postMessage({
            type: "CACHE_CRISIS_RESOURCES"
          });
        } else {
          console.log("[PWA] No active service worker found - crisis resources will be handled by client-side cache");
        }
      } catch (error44) {
        console.log("[PWA] Service worker not available for crisis resources caching:", error44);
      }
    }
  }
  /**
   * Save pending data
   */
  savePendingData() {
    window.dispatchEvent(new CustomEvent("pwaSavePendingData"));
  }
  /**
   * Sync pending data
   */
  async syncPendingData() {
    window.dispatchEvent(new CustomEvent("pwaSyncPendingData"));
  }
  /**
   * Check if device is mobile
   */
  isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
  }
  /**
   * Get current PWA status
   */
  getStatus() {
    return {
      isInstallable: !!this.installPrompt && !this.installPromptShown,
      isInstalled: this.isInstalledAsPWA(),
      isOffline: this.isOffline,
      isStandalone: this.isRunningStandalone(),
      supportsPWA: "serviceWorker" in navigator
    };
  }
  /**
   * Check if app is installed as PWA
   */
  isInstalledAsPWA() {
    return this.isRunningStandalone() || navigator.standalone === true;
  }
  /**
   * Check if app is running in standalone mode
   */
  isRunningStandalone() {
    return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone === true;
  }
  /**
   * Subscribe to status changes
   */
  onStatusChange(callback) {
    this.statusCallbacks.push(callback);
    return () => {
      const index2 = this.statusCallbacks.indexOf(callback);
      if (index2 > -1) {
        this.statusCallbacks.splice(index2, 1);
      }
    };
  }
  /**
   * Notify all subscribers of status changes
   */
  notifyStatusChange() {
    const status = this.getStatus();
    this.statusCallbacks.forEach((callback) => {
      try {
        callback(status);
      } catch (error44) {
        console.error("[PWA] Error in status callback:", error44);
      }
    });
  }
  /**
   * Check for app updates (DISABLED FOR DEVELOPMENT)
   */
  async checkForUpdates() {
    if ("serviceWorker" in navigator) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          await registration.update();
          return !!registration.waiting;
        } else {
          console.log("[PWA] No service worker registered for updates");
          return false;
        }
      } catch (error44) {
        console.log("[PWA] Service worker update check failed:", error44);
        return false;
      }
    }
    return false;
  }
  /**
   * Apply app update
   */
  async applyUpdate() {
    if ("serviceWorker" in navigator) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration?.waiting) {
          registration.waiting.postMessage({ type: "SKIP_WAITING" });
          window.location.reload();
        }
      } catch (error44) {
        console.log("[PWA] Error applying update:", error44);
      }
    }
  }
};
var pwaService = new PWAService();

// src/components/PWAInstallBanner.tsx
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
var PWAInstallBanner = ({
  className = "",
  showForCrisis = false
}) => {
  const [pwaStatus, setPwaStatus] = (0, import_react80.useState)(null);
  const [isVisible, setIsVisible] = (0, import_react80.useState)(false);
  const [isInstalling, setIsInstalling] = (0, import_react80.useState)(false);
  const [dismissed, setDismissed] = (0, import_react80.useState)(false);
  (0, import_react80.useEffect)(() => {
    const status = pwaService.getStatus();
    setPwaStatus(status);
    const unsubscribe = pwaService.onStatusChange((newStatus) => {
      setPwaStatus(newStatus);
    });
    updateVisibility(status);
    return unsubscribe;
  }, [showForCrisis, dismissed]);
  (0, import_react80.useEffect)(() => {
    if (pwaStatus) {
      updateVisibility(pwaStatus);
    }
  }, [pwaStatus, showForCrisis, dismissed]);
  const updateVisibility = (status) => {
    if (dismissed || status.isInstalled || !status.isInstallable) {
      setIsVisible(false);
      return;
    }
    if (showForCrisis) {
      setIsVisible(true);
      return;
    }
    const engagementCount = parseInt(localStorage.getItem("userEngagementCount") || "0");
    if (engagementCount >= 3) {
      setIsVisible(true);
    }
  };
  const handleInstall = async () => {
    if (!pwaStatus?.isInstallable) {
      return;
    }
    setIsInstalling(true);
    try {
      const installed = await pwaService.showSmartInstallPrompt();
      if (installed) {
        setIsVisible(false);
        setDismissed(true);
        localStorage.setItem("pwaInstalled", "true");
        localStorage.setItem("pwaInstalledAt", (/* @__PURE__ */ new Date()).toISOString());
      }
    } catch (error44) {
      console.error("[PWA] Error during installation:", error44);
    } finally {
      setIsInstalling(false);
    }
  };
  const handleDismiss = () => {
    setIsVisible(false);
    setDismissed(true);
    const dismissedUntil = /* @__PURE__ */ new Date();
    dismissedUntil.setDate(dismissedUntil.getDate() + 7);
    localStorage.setItem("pwaBannerDismissedUntil", dismissedUntil.toISOString());
  };
  const getBannerContent = () => {
    if (showForCrisis) {
      return {
        title: "\u{1F6A8} Install for Emergency Access",
        description: "Get instant access to crisis resources even when offline",
        benefits: [
          "\u26A1 Works without internet",
          "\u{1F4F1} Faster than browser",
          "\u{1F514} Crisis notifications"
        ],
        installText: "Install for Emergencies",
        urgency: true
      };
    }
    return {
      title: "\u{1F4F1} Install Astral Core",
      description: "Get the full app experience with enhanced features",
      benefits: [
        "\u{1F680} Faster loading",
        "\u{1F4F1} Home screen access",
        "\u{1F514} Important notifications",
        "\u{1F4F1} Works offline"
      ],
      installText: "Install App",
      urgency: false
    };
  };
  if (!isVisible || !pwaStatus?.supportsPWA) {
    return null;
  }
  const content3 = getBannerContent();
  return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: `pwa-install-banner ${content3.urgency ? "urgent" : ""} ${className}`, children: /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "banner-content", children: [
    /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "banner-header", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("h4", { className: "banner-title", children: content3.title }),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
        "button",
        {
          className: "banner-close",
          onClick: handleDismiss,
          "aria-label": "Dismiss install banner",
          children: "\xD7"
        }
      )
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("p", { className: "banner-description", children: content3.description }),
    /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("ul", { className: "banner-benefits", children: content3.benefits.map((benefit) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("li", { children: benefit }, benefit)) }),
    /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", { className: "banner-actions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
        "button",
        {
          className: "btn-secondary banner-btn",
          onClick: handleDismiss,
          children: "Maybe Later"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
        "button",
        {
          className: `btn-primary banner-btn ${content3.urgency ? "urgent" : ""}`,
          onClick: handleInstall,
          disabled: isInstalling,
          children: isInstalling ? "Installing..." : content3.installText
        }
      )
    ] })
  ] }) });
};
var PWAInstallBanner_default = PWAInstallBanner;

// src/App.tsx
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var AppLayout = ({ children }) => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = import_react81.default.useState(false);
  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: "app-layout", children: [
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      "button",
      {
        className: "mobile-menu-toggle",
        onClick: toggleMobileMenu,
        "aria-label": "Toggle navigation menu",
        style: { display: window.innerWidth <= 768 ? "flex" : "none" },
        children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("path", { d: "M3 12h18M3 6h18M3 18h18" }) })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Sidebar, {}),
    isMobileMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      "div",
      {
        className: "sidebar-overlay active",
        onClick: () => setIsMobileMenuOpen(false),
        "aria-hidden": "true"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("main", { className: "app-content", children }),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(CrisisAlert2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(NetworkBanner, {}),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(ServiceWorkerUpdate_default, {}),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PWAInstallBanner_default, {})
  ] });
};
var App = () => {
  const { trackEvent } = useAnalyticsTracking({ componentName: "App" });
  (0, import_react81.useEffect)(() => {
    trackEvent("app_initialized", {
      category: "performance",
      properties: {
        timestamp: Date.now(),
        userAgent: navigator.userAgent,
        platform: navigator.platform
      }
    });
  }, [trackEvent]);
  (0, import_react81.useEffect)(() => {
    const viewport = document.querySelector('meta[name="viewport"]');
    if (viewport) {
      viewport.setAttribute("content", "width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes");
    }
    document.body.classList.add("astral-core-app");
    const platform = navigator.platform.toLowerCase();
    if (platform.includes("mac")) {
      document.body.classList.add("platform-mac");
    } else if (platform.includes("win")) {
      document.body.classList.add("platform-windows");
    } else if (platform.includes("linux")) {
      document.body.classList.add("platform-linux");
    }
    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    if (isMobile) {
      document.body.classList.add("is-mobile");
    }
    return () => {
      document.body.classList.remove("astral-core-app", "platform-mac", "platform-windows", "platform-linux", "is-mobile");
    };
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(ErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(NotificationProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(AppWithAuth, {}) }) }) });
};
var AppWithAuth = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(ThemeProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(OfflineProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(SessionProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(WellnessProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(SwipeNavigationProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(AppLayout, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(AppRoutes_default, {}) }) }) }) }) }) });
};
var App_default = App;

// src/main.tsx
init_auth0Service();
init_envValidator();

// src/services/errorTrackingService.ts
init_envConfig();
var isProduction2 = ENV.IS_PROD;
var isDevelopment = ENV.IS_DEV;
var sentryDsn = ENV.SENTRY_DSN;
var sanitizeErrorData = (error44, context) => {
  const sensitivePatterns = [
    /password/gi,
    /token/gi,
    /auth/gi,
    /session/gi,
    /email/gi,
    /phone/gi,
    /ssn/gi,
    /medical/gi,
    /therapy/gi,
    /medication/gi,
    /diagnosis/gi
  ];
  let sanitizedMessage = error44.message;
  let sanitizedContext = { ...context };
  sensitivePatterns.forEach((pattern) => {
    sanitizedMessage = sanitizedMessage.replace(pattern, "[REDACTED]");
  });
  if (sanitizedContext) {
    JSON.stringify(sanitizedContext, (key, value) => {
      if (typeof value === "string") {
        sensitivePatterns.forEach((pattern) => {
          if (pattern.test(key) || pattern.test(value)) {
            return "[REDACTED]";
          }
        });
      }
      return value;
    });
  }
  return {
    message: sanitizedMessage,
    context: sanitizedContext
  };
};
var getEnvironmentName = () => {
  if (isProduction2) return "production";
  if (isDevelopment) return "development";
  return "staging";
};
var initializeSentry = () => {
  if (!sentryDsn) {
    console.warn("Sentry DSN not configured");
    return;
  }
  init2({
    dsn: sentryDsn,
    environment: getEnvironmentName(),
    // Privacy and compliance settings
    integrations: [
      // Basic integrations only for compatibility
    ],
    // Performance monitoring
    tracesSampleRate: isProduction2 ? 0.1 : 1,
    // Error filtering and privacy
    beforeSend(event, hint) {
      const error44 = hint.originalException;
      if (isDevelopment && !ENV.SENTRY_DEV_ENABLED) {
        return null;
      }
      if (isProduction2) {
        const ignoredErrors = [
          "ResizeObserver loop limit exceeded",
          "Script error",
          "Network request failed",
          "Load failed",
          "Non-Error promise rejection captured"
        ];
        if (error44 && ignoredErrors.some(
          (ignored) => error44.message?.includes(ignored) || error44.name?.includes(ignored)
        )) {
          return null;
        }
      }
      if (error44 instanceof Error) {
        const sanitized = sanitizeErrorData(error44, event.extra);
        event.message = sanitized.message;
        event.extra = sanitized.context;
      }
      return event;
    },
    // User context (privacy-safe)
    beforeSendTransaction(event) {
      if (event.user) {
        event.user = {
          id: event.user.id ? "[USER_ID]" : void 0
          // Don't include email, username, or other PII
        };
      }
      return event;
    },
    // Additional privacy settings
    sendDefaultPii: false,
    attachStacktrace: true,
    maxBreadcrumbs: 50,
    // Release tracking
    release: ENV.APP_VERSION || "unknown"
  });
};
var ErrorTrackingService = class {
  /**
   * Track application errors with mental health context
   */
  static captureError(error44, context, extra) {
    const sanitized = sanitizeErrorData(error44, extra);
    withScope2((scope) => {
      scope.setTag("error_type", context.errorType);
      scope.setTag("severity", context.severity);
      scope.setTag("privacy_level", context.privacyLevel);
      if (context.userType) {
        scope.setTag("user_type", context.userType);
      }
      if (context.feature) {
        scope.setTag("feature", context.feature);
      }
      scope.setContext("error_details", {
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        user_agent: navigator.userAgent,
        url: window.location.pathname,
        // Don't include query params
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        }
      });
      if (sanitized.context) {
        scope.setExtra("additional_context", sanitized.context);
      }
      captureException(error44);
    });
  }
  /**
   * Track crisis-related errors with high priority
   */
  static captureCrisisError(error44, crisisContext, extra) {
    this.captureError(error44, {
      errorType: "crisis",
      severity: "critical",
      userType: crisisContext.userType,
      feature: "crisis-detection",
      privacyLevel: "sensitive"
    }, {
      escalation_level: crisisContext.escalationLevel,
      has_detection_result: !!crisisContext.detectionResult,
      ...extra
    });
  }
  /**
   * Track user action errors
   */
  static captureUserActionError(error44, action, userType, feature, extra) {
    this.captureError(error44, {
      errorType: "user-action",
      severity: "medium",
      userType,
      feature,
      privacyLevel: "private"
    }, {
      action,
      ...extra
    });
  }
  /**
   * Track network errors
   */
  static captureNetworkError(error44, endpoint, method, statusCode, extra) {
    this.captureError(error44, {
      errorType: "network",
      severity: statusCode && statusCode >= 500 ? "high" : "medium",
      privacyLevel: "public"
    }, {
      endpoint: endpoint.replace(/\/\d+/g, "/[ID]"),
      // Remove IDs from endpoint
      method,
      status_code: statusCode,
      ...extra
    });
  }
  /**
   * Track performance issues
   */
  static capturePerformanceIssue(name2, duration3, threshold, context) {
    if (duration3 > threshold) {
      const error44 = new Error(`Performance issue: ${name2} took ${duration3}ms (threshold: ${threshold}ms)`);
      this.captureError(error44, {
        errorType: "system",
        severity: duration3 > threshold * 2 ? "high" : "medium",
        privacyLevel: "public"
      }, {
        performance_metric: name2,
        duration: duration3,
        threshold,
        ...context
      });
    }
  }
  /**
   * Add user context (privacy-safe)
   */
  static setUserContext(userContext) {
    setUser({
      id: userContext.id ? "[USER_ID]" : void 0
      // Don't include any PII
    });
    setTag("user_type", userContext.userType);
    setTag("authenticated", userContext.isAuthenticated);
    if (userContext.sessionDuration) {
      setTag("session_duration", userContext.sessionDuration > 3600 ? "long" : "normal");
    }
  }
  /**
   * Clear user context (on logout)
   */
  static clearUserContext() {
    setUser(null);
  }
  /**
   * Capture a message (non-error event)
   */
  static captureMessage(message, level = "info", context, extra) {
    withScope2((scope) => {
      if (context) {
        scope.setTag("error_type", context.errorType);
        scope.setTag("severity", context.severity);
        scope.setTag("privacy_level", context.privacyLevel);
        if (context.userType) {
          scope.setTag("user_type", context.userType);
        }
        if (context.feature) {
          scope.setTag("feature", context.feature);
        }
      }
      if (extra) {
        scope.setExtra("additional_context", extra);
      }
      captureMessage(message, level);
    });
  }
  /**
   * Add breadcrumb for debugging
   */
  static addBreadcrumb(message, category, level = "info", data2) {
    addBreadcrumb({
      message,
      category,
      level,
      data: data2 ? sanitizeErrorData(new Error(""), data2).context : void 0,
      timestamp: Date.now() / 1e3
    });
  }
  /**
   * Create performance transaction (deprecated - use startSpan instead)
   */
  static startTransaction(name2, operation) {
    return {
      name: name2,
      op: operation,
      finish: () => {
      },
      setTag: () => {
      },
      setContext: () => {
      }
    };
  }
};

// src/config/errorTracking.ts
var sentryConfig = {
  // Get DSN from environment variables
  dsn: process.env.VITE_SENTRY_DSN,
  // Development settings
  enableInDevelopment: process.env.VITE_SENTRY_DEV_ENABLED === "true",
  // Release version
  release: process.env.VITE_APP_VERSION || "1.0.0",
  // Environment name
  environment: "production"
};
var initializeErrorTracking = () => {
  if (!sentryConfig.dsn) {
    console.warn("Sentry DSN not configured. Error tracking disabled.");
    return false;
  }
  try {
    initializeSentry();
    ErrorTrackingService.addBreadcrumb(
      "Application initialized",
      "lifecycle",
      "info",
      {
        environment: sentryConfig.environment,
        release: sentryConfig.release
      }
    );
    console.log("Error tracking initialized successfully");
    return true;
  } catch (error44) {
    console.error("Failed to initialize error tracking:", error44);
    return false;
  }
};

// src/services/serviceWorkerConfig.ts
var registerServiceWorker = async (options2) => {
  if (false) {
    console.log("[ServiceWorker] Skipping registration in development mode");
    return null;
  }
  if ("serviceWorker" in navigator) {
    try {
      const registration = await navigator.serviceWorker.register("/sw.js", {
        scope: "/"
      });
      console.log("[ServiceWorker] Registration successful:", registration.scope);
      if (options2?.onSuccess) {
        options2.onSuccess(registration);
      }
      setInterval(() => {
        registration.update();
      }, 6e4);
      registration.addEventListener("updatefound", () => {
        const newWorker = registration.installing;
        if (newWorker) {
          newWorker.addEventListener("statechange", () => {
            if (newWorker.state === "activated") {
              if (options2?.onUpdate) {
                options2.onUpdate(registration);
              } else if (window.confirm("New version available! Reload to update?")) {
                window.location.reload();
              }
            }
          });
        }
      });
      return registration;
    } catch (error44) {
      console.error("[ServiceWorker] Registration failed:", error44);
      return null;
    }
  }
  return null;
};

// src/services/openTelemetryService.ts
var OpenTelemetryServiceStub = class {
  async initialize() {
    console.log("OpenTelemetry disabled - packages not installed");
    return Promise.resolve();
  }
  startSpan(_name) {
    return {
      end: () => {
      },
      setAttribute: () => {
      },
      setStatus: () => {
      },
      recordException: () => {
      }
    };
  }
  recordMetric(_name, _value) {
  }
  shutdown() {
    return Promise.resolve();
  }
};
var openTelemetryService = new OpenTelemetryServiceStub();

// src/services/performanceMonitoringService.ts
init_web_vitals();
var PerformanceMonitoringService = class _PerformanceMonitoringService {
  static instance;
  sessionId;
  userId;
  report;
  observers = /* @__PURE__ */ new Map();
  isInitialized = false;
  reportInterval = null;
  interactionBuffer = [];
  errorBuffer = [];
  // Thresholds for performance ratings
  thresholds = {
    FCP: { good: 1800, poor: 3e3 },
    LCP: { good: 2500, poor: 4e3 },
    INP: { good: 200, poor: 500 },
    CLS: { good: 0.1, poor: 0.25 },
    TTFB: { good: 800, poor: 1800 }
  };
  constructor() {
    this.sessionId = this.generateSessionId();
    this.report = this.createEmptyReport();
  }
  static getInstance() {
    if (!_PerformanceMonitoringService.instance) {
      _PerformanceMonitoringService.instance = new _PerformanceMonitoringService();
    }
    return _PerformanceMonitoringService.instance;
  }
  /**
   * Initialize performance monitoring
   */
  initialize(userId) {
    if (this.isInitialized) return;
    this.userId = userId;
    this.isInitialized = true;
    console.log("[Performance] Initializing monitoring service");
    this.monitorWebVitals();
    this.monitorResourceTiming();
    this.monitorUserInteractions();
    this.monitorErrors();
    this.monitorMemory();
    this.monitorConnection();
    this.setupPeriodicReporting();
    this.monitorPageVisibility();
  }
  /**
   * Monitor Core Web Vitals
   */
  monitorWebVitals() {
    E2((metric) => {
      this.report.webVitals.FCP = this.formatWebVital("FCP", metric.value);
      this.logMetric("FCP", metric.value);
    });
    x2((metric) => {
      this.report.webVitals.LCP = this.formatWebVital("LCP", metric.value);
      this.logMetric("LCP", metric.value);
    });
    S2((metric) => {
      this.report.webVitals.INP = this.formatWebVital("INP", metric.value);
      this.logMetric("INP", metric.value);
    });
    L2((metric) => {
      this.report.webVitals.CLS = this.formatWebVital("CLS", metric.value);
      this.logMetric("CLS", metric.value);
    });
    $2((metric) => {
      this.report.webVitals.TTFB = this.formatWebVital("TTFB", metric.value);
      this.logMetric("TTFB", metric.value);
    });
  }
  /**
   * Monitor resource loading performance
   */
  monitorResourceTiming() {
    if (!("PerformanceObserver" in window)) return;
    const observer = new PerformanceObserver((list3) => {
      for (const entry of list3.getEntries()) {
        if (entry.entryType === "resource") {
          const resourceEntry = entry;
          const resource = {
            name: resourceEntry.name,
            type: this.getResourceType(resourceEntry.name),
            duration: resourceEntry.duration,
            size: resourceEntry.transferSize || 0,
            startTime: resourceEntry.startTime,
            cached: resourceEntry.transferSize === 0
          };
          this.report.resources.push(resource);
          if (resource.duration > 3e3) {
            this.trackCustomMetric("slow_resource", resource.duration, {
              url: resource.name,
              type: resource.type
            });
          }
        }
      }
    });
    try {
      observer.observe({ entryTypes: ["resource"] });
      this.observers.set("resource", observer);
    } catch (error44) {
      console.warn("[Performance] Could not observe resource timing:", error44);
    }
  }
  /**
   * Monitor user interactions
   */
  monitorUserInteractions() {
    document.addEventListener("click", (event) => {
      const target = event.target;
      const interaction = {
        type: "click",
        target: this.getTargetSelector(target),
        timestamp: Date.now(),
        duration: 0,
        successful: true
      };
      this.interactionBuffer.push(interaction);
      this.pruneInteractionBuffer();
    });
    document.addEventListener("submit", (event) => {
      const target = event.target;
      const interaction = {
        type: "form_submit",
        target: this.getTargetSelector(target),
        timestamp: Date.now(),
        duration: 0,
        successful: true
      };
      this.interactionBuffer.push(interaction);
    });
    if ("PerformanceNavigationTiming" in window) {
      const navTiming = performance.getEntriesByType("navigation")[0];
      if (navTiming && navTiming instanceof PerformanceNavigationTiming) {
        this.trackCustomMetric("page_load_time", navTiming.loadEventEnd - navTiming.fetchStart);
        this.trackCustomMetric("dom_interactive", navTiming.domInteractive - navTiming.fetchStart);
        this.trackCustomMetric("dom_complete", navTiming.domComplete - navTiming.fetchStart);
      }
    }
  }
  /**
   * Monitor JavaScript errors
   */
  monitorErrors() {
    window.addEventListener("error", (event) => {
      const error44 = {
        message: event.message,
        stack: event.error?.stack,
        timestamp: Date.now()
      };
      this.errorBuffer.push(error44);
      this.pruneErrorBuffer();
      if (event.message.includes("crisis") || event.message.includes("emergency")) {
        this.trackCustomMetric("critical_error", 1, {
          message: event.message
        });
      }
    });
    window.addEventListener("unhandledrejection", (event) => {
      const error44 = {
        message: `Unhandled Promise Rejection: ${event.reason}`,
        stack: event.reason?.stack,
        timestamp: Date.now()
      };
      this.errorBuffer.push(error44);
      this.pruneErrorBuffer();
    });
  }
  /**
   * Monitor memory usage
   */
  monitorMemory() {
    if (!("memory" in performance)) return;
    setInterval(() => {
      const memory = performance.memory;
      if (memory) {
        this.report.memory = {
          usedJSHeapSize: memory.usedJSHeapSize,
          totalJSHeapSize: memory.totalJSHeapSize,
          jsHeapSizeLimit: memory.jsHeapSizeLimit
        };
        const usage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;
        if (usage > 0.9) {
          this.trackCustomMetric("high_memory_usage", usage * 100, {
            used: memory.usedJSHeapSize,
            limit: memory.jsHeapSizeLimit
          });
        }
      }
    }, 1e4);
  }
  /**
   * Monitor connection quality
   */
  monitorConnection() {
    if (!("connection" in navigator)) return;
    const connection = navigator.connection;
    if (connection) {
      this.report.connection = {
        effectiveType: connection.effectiveType,
        downlink: connection.downlink,
        rtt: connection.rtt,
        saveData: connection.saveData
      };
      if (connection.effectiveType === "2g" || connection.effectiveType === "slow-2g") {
        this.trackCustomMetric("slow_connection", 1, {
          type: connection.effectiveType,
          rtt: connection.rtt
        });
      }
      connection.addEventListener("change", () => {
        this.report.connection = {
          effectiveType: connection.effectiveType,
          downlink: connection.downlink,
          rtt: connection.rtt,
          saveData: connection.saveData
        };
      });
    }
  }
  /**
   * Monitor page visibility changes
   */
  monitorPageVisibility() {
    let hiddenTime = 0;
    let visibleTime = Date.now();
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        hiddenTime = Date.now();
        const activeTime = hiddenTime - visibleTime;
        this.trackCustomMetric("page_active_time", activeTime);
      } else {
        visibleTime = Date.now();
        if (hiddenTime > 0) {
          const inactiveTime = visibleTime - hiddenTime;
          this.trackCustomMetric("page_inactive_time", inactiveTime);
        }
      }
    });
  }
  /**
   * Track custom metric
   */
  trackCustomMetric(name2, value, metadata) {
    const metric = {
      name: name2,
      value,
      rating: this.getMetricRating(name2, value),
      timestamp: Date.now(),
      metadata
    };
    this.report.customMetrics.push(metric);
    this.logMetric(name2, value);
  }
  /**
   * Track component render time
   */
  trackComponentRender(componentName, duration3) {
    this.trackCustomMetric(`component_render_${componentName}`, duration3, {
      component: componentName
    });
  }
  /**
   * Track API call performance
   */
  trackApiCall(endpoint, duration3, status) {
    this.trackCustomMetric("api_call", duration3, {
      endpoint,
      status,
      success: status >= 200 && status < 300
    });
  }
  /**
   * Track crisis resource load time
   */
  trackCrisisResourceLoad(resourceType, duration3) {
    this.trackCustomMetric("crisis_resource_load", duration3, {
      type: resourceType,
      critical: true
    });
  }
  /**
   * Setup periodic reporting
   */
  setupPeriodicReporting() {
    this.reportInterval = window.setInterval(() => {
      this.sendReport();
    }, 3e4);
    window.addEventListener("beforeunload", () => {
      this.sendReport();
    });
  }
  /**
   * Send performance report
   */
  async sendReport() {
    if (this.report.customMetrics.length === 0 && Object.keys(this.report.webVitals).length === 0) {
      return;
    }
    this.report.interactions = [...this.interactionBuffer];
    this.report.errors = [...this.errorBuffer];
    const reportData = {
      ...this.report,
      timestamp: Date.now(),
      url: window.location.href,
      userAgent: navigator.userAgent
    };
    try {
      if (true) {
        await fetch("/api/performance", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(reportData)
        });
      }
      if (false) {
        console.log("[Performance] Report:", reportData);
      }
      this.report = this.createEmptyReport();
      this.interactionBuffer = [];
      this.errorBuffer = [];
    } catch (error44) {
      console.error("[Performance] Failed to send report:", error44);
    }
  }
  /**
   * Get performance summary
   */
  /**
   * Calculate performance score based on Web Vitals
   */
  calculateWebVitalsScore() {
    const webVitals = this.report.webVitals;
    let score = 100;
    const recommendations = [];
    if (webVitals.FCP) {
      if (webVitals.FCP.rating === "needs-improvement") score -= 10;
      if (webVitals.FCP.rating === "poor") {
        score -= 20;
        recommendations.push("Improve First Contentful Paint by optimizing critical rendering path");
      }
    }
    if (webVitals.LCP) {
      if (webVitals.LCP.rating === "needs-improvement") score -= 10;
      if (webVitals.LCP.rating === "poor") {
        score -= 20;
        recommendations.push("Optimize Largest Contentful Paint by lazy loading images and optimizing server response time");
      }
    }
    return { score, recommendations };
  }
  /**
   * Get interaction and layout recommendations
   */
  getInteractionRecommendations() {
    const webVitals = this.report.webVitals;
    let scoreReduction = 0;
    const recommendations = [];
    if (webVitals.INP) {
      if (webVitals.INP.rating === "needs-improvement") scoreReduction += 10;
      if (webVitals.INP.rating === "poor") {
        scoreReduction += 20;
        recommendations.push("Reduce Interaction to Next Paint by breaking up long tasks and optimizing JavaScript execution");
      }
    }
    if (webVitals.CLS) {
      if (webVitals.CLS.rating === "needs-improvement") scoreReduction += 10;
      if (webVitals.CLS.rating === "poor") {
        scoreReduction += 20;
        recommendations.push("Fix Cumulative Layout Shift by specifying dimensions for images and avoiding dynamic content injection");
      }
    }
    return { scoreReduction, recommendations };
  }
  /**
   * Get system-level recommendations
   */
  getSystemRecommendations() {
    const recommendations = [];
    if (this.report.memory) {
      const memoryUsage = this.report.memory.usedJSHeapSize / this.report.memory.jsHeapSizeLimit;
      if (memoryUsage > 0.8) {
        recommendations.push("High memory usage detected. Consider optimizing data structures and clearing unused references");
      }
    }
    if (this.report.connection?.effectiveType === "2g" || this.report.connection?.effectiveType === "slow-2g") {
      recommendations.push("Slow connection detected. Ensure critical resources are cached and minimize payload sizes");
    }
    return recommendations;
  }
  getPerformanceSummary() {
    const webVitalsResult = this.calculateWebVitalsScore();
    const interactionResult = this.getInteractionRecommendations();
    const systemRecommendations = this.getSystemRecommendations();
    const totalScore = Math.max(0, webVitalsResult.score - interactionResult.scoreReduction);
    const allRecommendations = [
      ...webVitalsResult.recommendations,
      ...interactionResult.recommendations,
      ...systemRecommendations
    ];
    return {
      webVitals: this.report.webVitals,
      score: totalScore,
      recommendations: allRecommendations
    };
  }
  /**
   * Helper methods
   */
  formatWebVital(name2, value) {
    return {
      name: name2,
      value,
      rating: this.getWebVitalRating(name2, value),
      timestamp: Date.now()
    };
  }
  getWebVitalRating(name2, value) {
    const threshold = this.thresholds[name2];
    if (!threshold) return "good";
    if (value <= threshold.good) return "good";
    if (value <= threshold.poor) return "needs-improvement";
    return "poor";
  }
  getMetricRating(name2, value) {
    if (name2.includes("component_render")) {
      if (value < 100) return "good";
      if (value < 300) return "needs-improvement";
      return "poor";
    }
    if (name2 === "api_call") {
      if (value < 1e3) return "good";
      if (value < 3e3) return "needs-improvement";
      return "poor";
    }
    return "good";
  }
  getResourceType(url2) {
    if (url2.includes(".js")) return "script";
    if (url2.includes(".css")) return "style";
    const imageRegex = /\.(jpg|jpeg|png|gif|webp|svg)/;
    if (imageRegex.exec(url2)) return "image";
    const fontRegex = /\.(woff|woff2|ttf|otf)/;
    if (fontRegex.exec(url2)) return "font";
    if (url2.includes("/api/")) return "api";
    return "other";
  }
  getTargetSelector(element3) {
    if (element3.id) return `#${element3.id}`;
    if (element3.className && typeof element3.className === "string") {
      return `.${element3.className.split(" ")[0]}`;
    }
    return element3.tagName.toLowerCase();
  }
  generateSessionId() {
    return `${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
  }
  createEmptyReport() {
    return {
      sessionId: this.sessionId,
      userId: this.userId,
      timestamp: Date.now(),
      url: window.location.href,
      userAgent: navigator.userAgent,
      webVitals: {},
      customMetrics: [],
      resources: [],
      interactions: [],
      errors: []
    };
  }
  logMetric(name2, value) {
    if (false) {
      console.log(`[Performance] ${name2}: ${value.toFixed(2)}`);
    }
  }
  pruneInteractionBuffer() {
    if (this.interactionBuffer.length > 50) {
      this.interactionBuffer = this.interactionBuffer.slice(-50);
    }
  }
  pruneErrorBuffer() {
    if (this.errorBuffer.length > 20) {
      this.errorBuffer = this.errorBuffer.slice(-20);
    }
  }
  /**
   * Cleanup and destroy
   */
  destroy() {
    if (this.reportInterval) {
      clearInterval(this.reportInterval);
    }
    this.observers.forEach((observer) => observer.disconnect());
    this.observers.clear();
    this.sendReport();
    this.isInitialized = false;
  }
};
var performanceMonitoring = PerformanceMonitoringService.getInstance();
var performanceMonitoringService = performanceMonitoring;
if (typeof window !== "undefined") {
  window.addEventListener("load", () => {
    performanceMonitoring.initialize();
  });
}

// src/main.tsx
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
try {
  loadAndValidateEnv();
} catch (error44) {
  console.error("Environment validation failed:", error44);
  if (true) {
    document.body.innerHTML = `
      <div style="display: flex; align-items: center; justify-content: center; min-height: 100vh; font-family: system-ui;">
        <div style="text-align: center; padding: 2rem;">
          <h1>Configuration Error</h1>
          <p>We're experiencing technical difficulties. Please try again later.</p>
          <p style="color: #666; font-size: 0.9rem;">If this problem persists, please contact support.</p>
        </div>
      </div>
    `;
    throw error44;
  }
}
if (true) {
  initializeErrorTracking();
}
if (import.meta.env.VITE_OTEL_ENABLED === "true") {
  openTelemetryService.initialize().catch((error44) => {
    console.error("Failed to initialize OpenTelemetry:", error44);
  });
}
performanceMonitoringService.initialize();
auth0Service.initialize().catch((error44) => {
  console.error("Failed to initialize Auth0:", error44);
});
var rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error('Failed to find root element. Make sure index.html contains a div with id="root"');
}
var root3 = import_client3.default.createRoot(rootElement);
root3.render(
  /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(import_react82.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(BrowserRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(App_default, {}) }) })
);
if ("serviceWorker" in navigator && true) {
  window.addEventListener("load", () => {
    registerServiceWorker();
  });
}
if (import.meta.hot) {
  import.meta.hot.accept();
}
if (true) {
  Promise.resolve().then(() => (init_web_vitals(), web_vitals_exports)).then(({ onCLS, onINP, onFCP, onLCP, onTTFB }) => {
    onCLS(console.log);
    onINP(console.log);
    onFCP(console.log);
    onLCP(console.log);
    onTTFB(console.log);
  });
}
if (typeof window !== "undefined") {
  window.addEventListener("load", () => {
    const announcement = document.createElement("div");
    announcement.setAttribute("role", "status");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.className = "sr-only";
    announcement.textContent = "Astral Core Mental Health Support Platform has loaded and is ready to use.";
    document.body.appendChild(announcement);
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1e3);
  });
}
window.addEventListener("unhandledrejection", (event) => {
  console.error("Unhandled promise rejection:", event.reason);
  if (true) {
    if (window.Sentry) {
      window.Sentry.captureException(event.reason);
    }
  }
  event.preventDefault();
});
export {
  root3 as root
};
/**
 * Cultural Context Service
 * 
 * Provides cultural context information for privacy-preserving analytics
 * and culturally-sensitive crisis intervention analysis.
 * 
 * @license Apache-2.0
 */
/**
 * Privacy-Preserving Analytics Service
 * 
 * Measures crisis intervention effectiveness across languages and cultures
 * while maintaining HIPAA compliance and user privacy through:
 * - Differential privacy for statistical analysis
 * - Homomorphic encryption for secure computations
 * - Federated analytics for distributed learning
 * - Zero-knowledge proofs for outcome verification
 * 
 * @license Apache-2.0
 */
/**
 * Cultural Crisis Detection Service
 * 
 * Enhances the existing AI crisis detection with comprehensive cultural context awareness
 * and bias mitigation to ensure fair and accurate crisis prediction across diverse
 * cultural backgrounds, communication styles, and help-seeking behaviors.
 * 
 * Features:
 * - Cultural communication style adaptation
 * - Bias reduction algorithms for cultural factors
 * - Culture-specific crisis expression patterns
 * - Culturally-appropriate intervention recommendations
 * - Privacy-preserving cultural analytics
 * - Multi-language crisis detection optimization
 * - Cultural help-seeking behavior analysis
 * - Family involvement preferences integration
 * 
 * @license Apache-2.0
 */
/**
 * Cultural Crisis Detection Hook
 * 
 * React hook for integrating cultural crisis detection with enhanced AI analysis,
 * cultural bias mitigation, and culturally-appropriate intervention recommendations.
 * 
 * @license Apache-2.0
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Analytics Tracking Hook
 * 
 * Provides easy-to-use analytics tracking for components
 * Automatically handles privacy settings and consent
 * 
 * @license Apache-2.0
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Legacy i18n file - functionality moved to src/i18n/index.ts
 * This file is kept for backward compatibility
 */
/**
 * Performance Monitoring Service
 * 
 * Comprehensive performance tracking for the mental health platform
 * Monitors Web Vitals, custom metrics, and user interactions
 * 
 * @license Apache-2.0
 */
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-router/dist/development/chunk-C37GKA54.mjs:
  (**
   * react-router v7.7.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/development/index.mjs:
  (**
   * react-router v7.7.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.mjs:
  (**
   * react-router-dom v7.7.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.production.js:
  (**
   * @license React
   * use-sync-external-store-shim.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
