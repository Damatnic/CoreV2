/**
 * Enhanced Service Worker Registration
 * Building upon the existing robust serviceWorkerManager.ts
 * Now integrated with intelligent caching strategies
 */

import serviceWorkerManager from './serviceWorkerManager';
import { cacheIntegration } from './cacheIntegration';

interface EnhancedRegistrationOptions {
  enableCacheWarming?: boolean;
  enableOfflineNotifications?: boolean;
  enableStorageMonitoring?: boolean;
  enableIntelligentCaching?: boolean;
  fallbackUrls?: string[];
}

export class EnhancedServiceWorkerRegistration {
  private options: EnhancedRegistrationOptions;
  private isEnhanced = false;

  constructor(options: EnhancedRegistrationOptions = {}) {
    this.options = {
      enableCacheWarming: true,
      enableOfflineNotifications: true,
      enableStorageMonitoring: true,
      enableIntelligentCaching: true,
      fallbackUrls: ['/sw-enhanced.js', '/sw.js'],
      ...options
    };
  }

  /**
   * Initialize enhanced service worker features
   */
  public async initialize(): Promise<void> {
    try {
      console.log('[Enhanced SW] Initializing enhanced service worker features...');

      // Wait for basic service worker to be ready
      await this.waitForBasicServiceWorker();

      // Initialize intelligent caching integration
      if (this.options.enableIntelligentCaching) {
        await this.initializeIntelligentCaching();
      }

      // Setup enhanced features
      if (this.options.enableCacheWarming) {
        await this.warmCriticalCaches();
      }

      if (this.options.enableOfflineNotifications) {
        this.setupOfflineNotifications();
      }

      if (this.options.enableStorageMonitoring) {
        this.setupStorageMonitoring();
      }

      this.isEnhanced = true;
      console.log('[Enhanced SW] Enhanced service worker features initialized');

    } catch (error) {
      console.warn('[Enhanced SW] Failed to initialize enhanced features:', error);
    }
  }

  /**
   * Initialize intelligent caching integration
   */
  private async initializeIntelligentCaching(): Promise<void> {
    try {
      console.log('[Enhanced SW] Initializing intelligent caching...');
      await cacheIntegration.initialize();
      console.log('[Enhanced SW] Intelligent caching initialized');
    } catch (error) {
      console.warn('[Enhanced SW] Failed to initialize intelligent caching:', error);
    }
  }

  /**
   * Wait for basic service worker to be ready
   */
  private async waitForBasicServiceWorker(): Promise<void> {
    if (!('serviceWorker' in navigator)) {
      throw new Error('Service Workers not supported');
    }

    try {
      await navigator.serviceWorker.ready;
      console.log('[Enhanced SW] Basic service worker is ready');
    } catch (error) {
      throw new Error(`Service worker not ready: ${error.message}`);
    }
  }

  /**
   * Warm critical caches on initialization
   */
  private async warmCriticalCaches(): Promise<void> {
    try {
      console.log('[Enhanced SW] Warming critical caches...');

      const criticalResources = [
        '/crisis-resources.json',
        '/emergency-contacts.json', 
        '/offline-crisis.html',
        '/offline.html',
        '/',
        '/crisis',
        '/safety-plan',
        '/emergency-contacts'
      ];

      // Use the existing service worker manager to cache resources
      for (const resource of criticalResources) {
        try {
          await serviceWorkerManager.cacheCrisisResource(resource);
        } catch (error) {
          console.warn(`[Enhanced SW] Failed to cache ${resource}:`, error);
        }
      }

      console.log('[Enhanced SW] Critical cache warming completed');
    } catch (error) {
      console.warn('[Enhanced SW] Cache warming failed:', error);
    }
  }

  /**
   * Setup offline notification system
   */
  private setupOfflineNotifications(): void {
    console.log('[Enhanced SW] Setting up offline notifications...');

    // Listen for online/offline events directly
    window.addEventListener('online', () => {
      this.showConnectionNotification('back online', 'success');
    });

    window.addEventListener('offline', () => {
      this.showConnectionNotification('offline - limited features available', 'info');
    });

    // Check initial offline readiness
    this.checkAndNotifyOfflineReadiness();
  }

  /**
   * Check offline readiness and notify user
   */
  private async checkAndNotifyOfflineReadiness(): Promise<void> {
    try {
      // Use the existing isOfflineReady method if available
      // Otherwise check cache status as fallback
      let isReady = false;
      
      try {
        const cacheStatus = await serviceWorkerManager.getCacheStatus();
        isReady = cacheStatus.swRegistered && navigator.onLine !== undefined;
      } catch (error) {
        console.warn('[Enhanced SW] Failed to get cache status:', error);
      }
      
      if (isReady) {
        console.log('[Enhanced SW] App is ready for offline use');
        // Could show user notification about offline capabilities
      }
    } catch (error) {
      console.warn('[Enhanced SW] Failed to check offline readiness:', error);
    }
  }

  /**
   * Show connection status notification
   */
  private showConnectionNotification(message: string, type: 'success' | 'info' | 'warning'): void {
    console.log(`[Enhanced SW] Connection status: ${message}`);
    
    // You could implement a toast notification here
    // For now, we'll just log and potentially dispatch a custom event
    window.dispatchEvent(new CustomEvent('sw-connection-status', {
      detail: { message, type }
    }));
  }

  /**
   * Setup storage monitoring
   */
  private setupStorageMonitoring(): void {
    console.log('[Enhanced SW] Setting up storage monitoring...');

    // Monitor storage usage periodically
    setInterval(() => {
      this.checkStorageUsage();
    }, 30 * 60 * 1000); // Check every 30 minutes

    // Initial check
    this.checkStorageUsage();
  }

  /**
   * Check storage usage and warn if getting full
   */
  private async checkStorageUsage(): Promise<void> {
    try {
      if ('storage' in navigator && 'estimate' in navigator.storage) {
        const estimate = await navigator.storage.estimate();
        const used = estimate.usage || 0;
        const quota = estimate.quota || 0;
        
        if (quota > 0) {
          const percentage = (used / quota) * 100;
          
          console.log(`[Enhanced SW] Storage usage: ${percentage.toFixed(1)}%`);
          
          if (percentage > 90) {
            console.warn('[Enhanced SW] Storage quota nearly full - consider clearing cache');
            this.showConnectionNotification('Storage nearly full', 'warning');
          }
        }
      }
    } catch (error) {
      console.warn('[Enhanced SW] Failed to check storage usage:', error);
    }
  }

  /**
   * Get enhanced status information
   */
  public async getStatus() {
    try {
      const basicStatus = await serviceWorkerManager.getCacheStatus();
      
      const storageEstimate = 'storage' in navigator && 'estimate' in navigator.storage
        ? await navigator.storage.estimate()
        : null;

      return {
        ...basicStatus,
        isEnhanced: this.isEnhanced,
        storageUsage: storageEstimate ? {
          used: storageEstimate.usage || 0,
          quota: storageEstimate.quota || 0,
          percentage: storageEstimate.quota 
            ? ((storageEstimate.usage || 0) / storageEstimate.quota) * 100 
            : 0
        } : null
      };
    } catch (error) {
      console.warn('[Enhanced SW] Failed to get enhanced status:', error);
      return { isEnhanced: this.isEnhanced };
    }
  }

  /**
   * Force update and reload
   */
  public async forceUpdate(): Promise<void> {
    try {
      console.log('[Enhanced SW] Forcing service worker update...');
      
      const hasUpdate = await serviceWorkerManager.checkForUpdates();
      
      if (hasUpdate) {
        await serviceWorkerManager.skipWaiting();
      } else {
        // Force reload manually
        window.location.reload();
      }
    } catch (error) {
      console.error('[Enhanced SW] Failed to force update:', error);
    }
  }
}

// Create and export enhanced service worker instance
export const enhancedServiceWorker = new EnhancedServiceWorkerRegistration();

// Auto-initialize enhanced features
if (typeof window !== 'undefined') {
  window.addEventListener('load', () => {
    enhancedServiceWorker.initialize().catch(error => {
      console.warn('[Enhanced SW] Auto-initialization failed:', error);
    });
  });
}

export default enhancedServiceWorker;
